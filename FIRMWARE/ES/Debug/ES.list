
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d934  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800db28  0800db28  0001db28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e088  0800e088  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  0800e088  0800e088  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e088  0800e088  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e088  0800e088  0001e088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e08c  0800e08c  0001e08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800e090  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c0  20000250  0800e2e0  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002910  0800e2e0  00022910  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9f6  00000000  00000000  00020279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049cf  00000000  00000000  0003dc6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  00042640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00044098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef5f  00000000  00000000  00045920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200b8  00000000  00000000  0006487f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac9e9  00000000  00000000  00084937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00131320  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008550  00000000  00000000  00131370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000250 	.word	0x20000250
 800020c:	00000000 	.word	0x00000000
 8000210:	0800db0c 	.word	0x0800db0c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000254 	.word	0x20000254
 800022c:	0800db0c 	.word	0x0800db0c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2lz>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4605      	mov	r5, r0
 8000bac:	460c      	mov	r4, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4628      	mov	r0, r5
 8000bb4:	4621      	mov	r1, r4
 8000bb6:	f7ff ff71 	bl	8000a9c <__aeabi_dcmplt>
 8000bba:	b928      	cbnz	r0, 8000bc8 <__aeabi_d2lz+0x20>
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc4:	f000 b80a 	b.w	8000bdc <__aeabi_d2ulz>
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bce:	f000 f805 	bl	8000bdc <__aeabi_d2ulz>
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2ulz>:
 8000bdc:	b5d0      	push	{r4, r6, r7, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <__aeabi_d2ulz+0x34>)
 8000be2:	4606      	mov	r6, r0
 8000be4:	460f      	mov	r7, r1
 8000be6:	f7ff fce7 	bl	80005b8 <__aeabi_dmul>
 8000bea:	f7ff ffbd 	bl	8000b68 <__aeabi_d2uiz>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f7ff fc68 	bl	80004c4 <__aeabi_ui2d>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <__aeabi_d2ulz+0x38>)
 8000bf8:	f7ff fcde 	bl	80005b8 <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4630      	mov	r0, r6
 8000c02:	4639      	mov	r1, r7
 8000c04:	f7ff fb20 	bl	8000248 <__aeabi_dsub>
 8000c08:	f7ff ffae 	bl	8000b68 <__aeabi_d2uiz>
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c10:	3df00000 	.word	0x3df00000
 8000c14:	41f00000 	.word	0x41f00000

08000c18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <MX_ADC1_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c56:	f001 fc31 	bl	80024bc <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f001 f9b6 	bl	8001fd0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c76:	f001 fe99 	bl	80029ac <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c80:	f001 f9a6 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000026c 	.word	0x2000026c
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_ADC_MspInit+0x7c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d129      	bne.n	8000d08 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <HAL_ADC_MspInit+0x84>)
 8000cf4:	f002 fa18 	bl	8003128 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	2012      	movs	r0, #18
 8000cfe:	f002 f8a6 	bl	8002e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d02:	2012      	movs	r0, #18
 8000d04:	f002 f8bf 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40012400 	.word	0x40012400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <ads_write>:

extern I2C_HandleTypeDef hi2c2;
extern SemaphoreHandle_t i2cSemphrHandle;

void ads_write(uint8_t reg_addr, uint8_t *data_send, int len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	4603      	mov	r3, r0
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	73fb      	strb	r3, [r7, #15]
	uint8_t *data = (uint8_t *)calloc(len + 2, sizeof(uint8_t));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f008 fab7 	bl	80092a4 <calloc>
 8000d36:	4603      	mov	r3, r0
 8000d38:	617b      	str	r3, [r7, #20]
	data[0] = reg_addr;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	701a      	strb	r2, [r3, #0]
	memcpy((char *)&data[1], (char *)data_send, len);
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f008 faed 	bl	8009328 <memcpy>
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <ads_write+0x78>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 ffde 	bl	8006d18 <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_ADS1115, data, strlen((char *)data), 1000);
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff fa67 	bl	8000230 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d6a:	9200      	str	r2, [sp, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2190      	movs	r1, #144	; 0x90
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <ads_write+0x7c>)
 8000d72:	f002 fce1 	bl	8003738 <HAL_I2C_Master_Transmit>
	xSemaphoreGive(i2cSemphrHandle);
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <ads_write+0x78>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f005 fd54 	bl	800682c <xQueueGenericSend>
	free(data);
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f008 fac7 	bl	8009318 <free>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200002ac 	.word	0x200002ac
 8000d98:	200002d0 	.word	0x200002d0

08000d9c <ads_read>:

void ads_read(uint8_t reg_addr, uint8_t *data_read)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <ads_read+0x54>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 ffb1 	bl	8006d18 <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_ADS1115, &reg_addr, 1, 1000);
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2190      	movs	r1, #144	; 0x90
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <ads_read+0x58>)
 8000dc4:	f002 fcb8 	bl	8003738 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, SLAVE_ADDRESS_ADS1115, data_read, 2, 1000);
 8000dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2302      	movs	r3, #2
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	2190      	movs	r1, #144	; 0x90
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <ads_read+0x58>)
 8000dd6:	f002 fdad 	bl	8003934 <HAL_I2C_Master_Receive>
	xSemaphoreGive(i2cSemphrHandle);
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <ads_read+0x54>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	f005 fd22 	bl	800682c <xQueueGenericSend>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200002ac 	.word	0x200002ac
 8000df4:	200002d0 	.word	0x200002d0

08000df8 <ads_init>:

void ads_init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t data_init[3] = {0x46, 0x20, 0x00};
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <ads_init+0x2c>)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	4611      	mov	r1, r2
 8000e06:	8019      	strh	r1, [r3, #0]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	0c12      	lsrs	r2, r2, #16
 8000e0c:	701a      	strb	r2, [r3, #0]
	ads_write(ADS1115_CONFIG_REG, data_init, 2);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2202      	movs	r2, #2
 8000e12:	4619      	mov	r1, r3
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ff81 	bl	8000d1c <ads_write>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	0800db28 	.word	0x0800db28

08000e28 <reverse>:
void lcd_task(void *param);
void sensor_task(void *param);
void general_task(void *param);

void reverse(char *str, int len)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000e3c:	e018      	b.n	8000e70 <reverse+0x48>
    {
        temp = str[i];
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	441a      	add	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	440b      	add	r3, r1
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	701a      	strb	r2, [r3, #0]
        i++;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
        j--;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbe2      	blt.n	8000e3e <reverse+0x16>
    }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d126      	bne.n	8000ee8 <intToStr+0x64>
        str[i++] = '0';
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	617a      	str	r2, [r7, #20]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2230      	movs	r2, #48	; 0x30
 8000ea8:	701a      	strb	r2, [r3, #0]

    while (x)
 8000eaa:	e01d      	b.n	8000ee8 <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <intToStr+0xa0>)
 8000eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb4:	1099      	asrs	r1, r3, #2
 8000eb6:	17d3      	asrs	r3, r2, #31
 8000eb8:	1ac9      	subs	r1, r1, r3
 8000eba:	460b      	mov	r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	1ad1      	subs	r1, r2, r3
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	6179      	str	r1, [r7, #20]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3230      	adds	r2, #48	; 0x30
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <intToStr+0xa0>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1092      	asrs	r2, r2, #2
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	60fb      	str	r3, [r7, #12]
    while (x)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1de      	bne.n	8000eac <intToStr+0x28>
    }

    while (i < d)
 8000eee:	e007      	b.n	8000f00 <intToStr+0x7c>
        str[i++] = '0';
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	617a      	str	r2, [r7, #20]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4413      	add	r3, r2
 8000efc:	2230      	movs	r2, #48	; 0x30
 8000efe:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf3      	blt.n	8000ef0 <intToStr+0x6c>

    reverse(str, i);
 8000f08:	6979      	ldr	r1, [r7, #20]
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f7ff ff8c 	bl	8000e28 <reverse>
    str[i] = '\0';
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    return i;
 8000f1a:	697b      	ldr	r3, [r7, #20]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	66666667 	.word	0x66666667

08000f28 <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 8000f36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f3a:	f7ff fded 	bl	8000b18 <__aeabi_d2iz>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 8000f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f44:	f7ff face 	bl	80004e4 <__aeabi_i2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f50:	f7ff f97a 	bl	8000248 <__aeabi_dsub>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f62:	f7ff ff8f 	bl	8000e84 <intToStr>
 8000f66:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d024      	beq.n	8000fb8 <ftoa+0x90>
    {
        res[i] = '.';
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	222e      	movs	r2, #46	; 0x2e
 8000f76:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f7ff fab3 	bl	80004e4 <__aeabi_i2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <ftoa+0x98>)
 8000f88:	f00b fedc 	bl	800cd44 <pow>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f94:	f7ff fb10 	bl	80005b8 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 8000fa0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa4:	f7ff fdb8 	bl	8000b18 <__aeabi_d2iz>
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff ff66 	bl	8000e84 <intToStr>
    }
}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40240000 	.word	0x40240000

08000fc4 <LOG>:

void LOG(const char *TAG, char *data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b09c      	sub	sp, #112	; 0x70
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	2260      	movs	r2, #96	; 0x60
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f008 f9b2 	bl	8009344 <memset>
	sprintf(data_log, "\r\n%s: %s\r\n", TAG, data);
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	490a      	ldr	r1, [pc, #40]	; (8001014 <LOG+0x50>)
 8000fea:	f008 fab3 	bl	8009554 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data_log, strlen(data_log), 1000);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f91c 	bl	8000230 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 010c 	add.w	r1, r7, #12
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <LOG+0x54>)
 8001006:	f004 f9de 	bl	80053c6 <HAL_UART_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3770      	adds	r7, #112	; 0x70
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	0800db44 	.word	0x0800db44
 8001018:	20000370 	.word	0x20000370

0800101c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	i2cSemphrHandle = xSemaphoreCreateMutex();
 8001022:	2001      	movs	r0, #1
 8001024:	f005 fbea 	bl	80067fc <xQueueCreateMutex>
 8001028:	4603      	mov	r3, r0
 800102a:	4a19      	ldr	r2, [pc, #100]	; (8001090 <MX_FREERTOS_Init+0x74>)
 800102c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800102e:	4a19      	ldr	r2, [pc, #100]	; (8001094 <MX_FREERTOS_Init+0x78>)
 8001030:	2100      	movs	r1, #0
 8001032:	4819      	ldr	r0, [pc, #100]	; (8001098 <MX_FREERTOS_Init+0x7c>)
 8001034:	f004 ff18 	bl	8005e68 <osThreadNew>
 8001038:	4603      	mov	r3, r0
 800103a:	4a18      	ldr	r2, [pc, #96]	; (800109c <MX_FREERTOS_Init+0x80>)
 800103c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	xTaskCreate(&general_task, "GEN", 256, NULL, 4, &generalTaskHandle);
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_FREERTOS_Init+0x84>)
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2304      	movs	r3, #4
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104c:	4915      	ldr	r1, [pc, #84]	; (80010a4 <MX_FREERTOS_Init+0x88>)
 800104e:	4816      	ldr	r0, [pc, #88]	; (80010a8 <MX_FREERTOS_Init+0x8c>)
 8001050:	f006 f94e 	bl	80072f0 <xTaskCreate>
	xTaskCreate(&lcd_task, "LCD", 256, NULL, 3, &lcdTaskHandle);
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_FREERTOS_Init+0x90>)
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2303      	movs	r3, #3
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001062:	4913      	ldr	r1, [pc, #76]	; (80010b0 <MX_FREERTOS_Init+0x94>)
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <MX_FREERTOS_Init+0x98>)
 8001066:	f006 f943 	bl	80072f0 <xTaskCreate>
	xTaskCreate(&sensor_task, "SENSOR", 256, NULL, 2, &sensorTaskHandle);
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <MX_FREERTOS_Init+0x9c>)
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2302      	movs	r3, #2
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001078:	4910      	ldr	r1, [pc, #64]	; (80010bc <MX_FREERTOS_Init+0xa0>)
 800107a:	4811      	ldr	r0, [pc, #68]	; (80010c0 <MX_FREERTOS_Init+0xa4>)
 800107c:	f006 f938 	bl	80072f0 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
	evGroupHandle = xEventGroupCreate();
 8001080:	f004 fffc 	bl	800607c <xEventGroupCreate>
 8001084:	4603      	mov	r3, r0
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <MX_FREERTOS_Init+0xa8>)
 8001088:	6013      	str	r3, [r2, #0]
	{

	}
  /* USER CODE END RTOS_EVENTS */

}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200002ac 	.word	0x200002ac
 8001094:	0800dbd4 	.word	0x0800dbd4
 8001098:	080010c9 	.word	0x080010c9
 800109c:	200002cc 	.word	0x200002cc
 80010a0:	200002a4 	.word	0x200002a4
 80010a4:	0800db50 	.word	0x0800db50
 80010a8:	08001641 	.word	0x08001641
 80010ac:	2000029c 	.word	0x2000029c
 80010b0:	0800db54 	.word	0x0800db54
 80010b4:	08001261 	.word	0x08001261
 80010b8:	200002a0 	.word	0x200002a0
 80010bc:	0800db58 	.word	0x0800db58
 80010c0:	08001431 	.word	0x08001431
 80010c4:	200002a8 	.word	0x200002a8

080010c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f004 ff73 	bl	8005fbc <osDelay>
 80010d6:	e7fb      	b.n	80010d0 <StartDefaultTask+0x8>

080010d8 <HAL_ADC_ConvCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
	if (hadc->Instance == ADC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_ADC_ConvCpltCallback+0x30>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d107      	bne.n	80010fe <HAL_ADC_ConvCpltCallback+0x26>
	{
		xEventGroupSetBitsFromISR(evGroupHandle, ADC_BIT, &xHigherPriorityTaskWoken);
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_ADC_ConvCpltCallback+0x34>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f107 020c 	add.w	r2, r7, #12
 80010f6:	2101      	movs	r1, #1
 80010f8:	4618      	mov	r0, r3
 80010fa:	f005 f961 	bl	80063c0 <xEventGroupSetBitsFromISR>
	}
}
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40012400 	.word	0x40012400
 800110c:	200002a8 	.word	0x200002a8

08001110 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == GPIO_PIN_12)
 800111e:	88fb      	ldrh	r3, [r7, #6]
 8001120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001124:	d108      	bne.n	8001138 <HAL_GPIO_EXTI_Callback+0x28>
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT0_BIT, &xHigherPriorityTaskWoken);
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f107 020c 	add.w	r2, r7, #12
 800112e:	2102      	movs	r1, #2
 8001130:	4618      	mov	r0, r3
 8001132:	f005 f945 	bl	80063c0 <xEventGroupSetBitsFromISR>
	}
	else if (GPIO_Pin == GPIO_PIN_15)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT3_BIT, &xHigherPriorityTaskWoken);
	}
}
 8001136:	e025      	b.n	8001184 <HAL_GPIO_EXTI_Callback+0x74>
	else if (GPIO_Pin == GPIO_PIN_13)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113e:	d108      	bne.n	8001152 <HAL_GPIO_EXTI_Callback+0x42>
		xEventGroupSetBitsFromISR(evGroupHandle, BUT1_BIT, &xHigherPriorityTaskWoken);
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f107 020c 	add.w	r2, r7, #12
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f005 f938 	bl	80063c0 <xEventGroupSetBitsFromISR>
}
 8001150:	e018      	b.n	8001184 <HAL_GPIO_EXTI_Callback+0x74>
	else if (GPIO_Pin == GPIO_PIN_14)
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001158:	d108      	bne.n	800116c <HAL_GPIO_EXTI_Callback+0x5c>
		xEventGroupSetBitsFromISR(evGroupHandle, BUT2_BIT, &xHigherPriorityTaskWoken);
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_GPIO_EXTI_Callback+0x7c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	2108      	movs	r1, #8
 8001164:	4618      	mov	r0, r3
 8001166:	f005 f92b 	bl	80063c0 <xEventGroupSetBitsFromISR>
}
 800116a:	e00b      	b.n	8001184 <HAL_GPIO_EXTI_Callback+0x74>
	else if (GPIO_Pin == GPIO_PIN_15)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001172:	d107      	bne.n	8001184 <HAL_GPIO_EXTI_Callback+0x74>
		xEventGroupSetBitsFromISR(evGroupHandle, BUT3_BIT, &xHigherPriorityTaskWoken);
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f107 020c 	add.w	r2, r7, #12
 800117c:	2110      	movs	r1, #16
 800117e:	4618      	mov	r0, r3
 8001180:	f005 f91e 	bl	80063c0 <xEventGroupSetBitsFromISR>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200002a8 	.word	0x200002a8

08001190 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(ucRxData == '$')
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b24      	cmp	r3, #36	; 0x24
 800119e:	d115      	bne.n	80011cc <HAL_UART_RxCpltCallback+0x3c>
	{
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
 80011a0:	482b      	ldr	r0, [pc, #172]	; (8001250 <HAL_UART_RxCpltCallback+0xc0>)
 80011a2:	f7ff f845 	bl	8000230 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	2100      	movs	r1, #0
 80011ac:	4828      	ldr	r0, [pc, #160]	; (8001250 <HAL_UART_RxCpltCallback+0xc0>)
 80011ae:	f008 f8c9 	bl	8009344 <memset>
		ucRxBuffer[0] = ucRxData;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 80011b4:	781a      	ldrb	r2, [r3, #0]
 80011b6:	4b26      	ldr	r3, [pc, #152]	; (8001250 <HAL_UART_RxCpltCallback+0xc0>)
 80011b8:	701a      	strb	r2, [r3, #0]
		ucRxFlag = START_BYTE;
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_UART_RxCpltCallback+0xc4>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 80011c0:	2201      	movs	r2, #1
 80011c2:	4922      	ldr	r1, [pc, #136]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 80011c4:	4824      	ldr	r0, [pc, #144]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 80011c6:	f004 f990 	bl	80054ea <HAL_UART_Receive_IT>
		ucRxFlag = ERROR_FRAME;
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
		ucRxCnt = 0;
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
	}
}
 80011ca:	e03b      	b.n	8001244 <HAL_UART_RxCpltCallback+0xb4>
	else if (ucRxFlag == START_BYTE && ucRxCnt < 20)
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_UART_RxCpltCallback+0xc4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d11e      	bne.n	8001212 <HAL_UART_RxCpltCallback+0x82>
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b13      	cmp	r3, #19
 80011da:	d81a      	bhi.n	8001212 <HAL_UART_RxCpltCallback+0x82>
		ucRxBuffer[++ucRxCnt] = ucRxData;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011e6:	701a      	strb	r2, [r3, #0]
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 80011f0:	7819      	ldrb	r1, [r3, #0]
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_UART_RxCpltCallback+0xc0>)
 80011f4:	5499      	strb	r1, [r3, r2]
		if (ucRxData == '*')
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b2a      	cmp	r3, #42	; 0x2a
 80011fc:	d103      	bne.n	8001206 <HAL_UART_RxCpltCallback+0x76>
			ucRxFlag = END_BYTE;
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <HAL_UART_RxCpltCallback+0xc4>)
 8001200:	2202      	movs	r2, #2
 8001202:	701a      	strb	r2, [r3, #0]
		if (ucRxData == '*')
 8001204:	e01e      	b.n	8001244 <HAL_UART_RxCpltCallback+0xb4>
			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001206:	2201      	movs	r2, #1
 8001208:	4910      	ldr	r1, [pc, #64]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 800120c:	f004 f96d 	bl	80054ea <HAL_UART_Receive_IT>
		if (ucRxData == '*')
 8001210:	e018      	b.n	8001244 <HAL_UART_RxCpltCallback+0xb4>
	else if (ucRxCnt == UART_BUFFER_LEN)
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b14      	cmp	r3, #20
 8001218:	d114      	bne.n	8001244 <HAL_UART_RxCpltCallback+0xb4>
		ucRxFlag = ERROR_FRAME;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_UART_RxCpltCallback+0xc4>)
 800121c:	2203      	movs	r2, #3
 800121e:	701a      	strb	r2, [r3, #0]
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
 8001220:	480b      	ldr	r0, [pc, #44]	; (8001250 <HAL_UART_RxCpltCallback+0xc0>)
 8001222:	f7ff f805 	bl	8000230 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	2100      	movs	r1, #0
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <HAL_UART_RxCpltCallback+0xc0>)
 800122e:	f008 f889 	bl	8009344 <memset>
		ucRxCnt = 0;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_UART_RxCpltCallback+0xcc>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	4904      	ldr	r1, [pc, #16]	; (800124c <HAL_UART_RxCpltCallback+0xbc>)
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <HAL_UART_RxCpltCallback+0xc8>)
 800123e:	f004 f954 	bl	80054ea <HAL_UART_Receive_IT>
}
 8001242:	e7ff      	b.n	8001244 <HAL_UART_RxCpltCallback+0xb4>
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200002b0 	.word	0x200002b0
 8001250:	200002b4 	.word	0x200002b4
 8001254:	20000068 	.word	0x20000068
 8001258:	20000370 	.word	0x20000370
 800125c:	200002c8 	.word	0x200002c8

08001260 <lcd_task>:

void lcd_task(void *param)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b08f      	sub	sp, #60	; 0x3c
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	char cVal[2][20];
	TickType_t xWakeTick = xTaskGetTickCount();
 8001268:	f006 fb42 	bl	80078f0 <xTaskGetTickCount>
 800126c:	4603      	mov	r3, r0
 800126e:	60bb      	str	r3, [r7, #8]
	lcd_init();
 8001270:	f000 fde4 	bl	8001e3c <lcd_init>
	lcd_clear();
 8001274:	f000 fdd8 	bl	8001e28 <lcd_clear>
	ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 8001278:	4b60      	ldr	r3, [pc, #384]	; (80013fc <lcd_task+0x19c>)
 800127a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b5f      	ldr	r3, [pc, #380]	; (8001400 <lcd_task+0x1a0>)
 8001284:	f7ff fac2 	bl	800080c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	2301      	movs	r3, #1
 8001292:	4a5c      	ldr	r2, [pc, #368]	; (8001404 <lcd_task+0x1a4>)
 8001294:	f7ff fe48 	bl	8000f28 <ftoa>
	ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 8001298:	4b58      	ldr	r3, [pc, #352]	; (80013fc <lcd_task+0x19c>)
 800129a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800129e:	2301      	movs	r3, #1
 80012a0:	4a59      	ldr	r2, [pc, #356]	; (8001408 <lcd_task+0x1a8>)
 80012a2:	f7ff fe41 	bl	8000f28 <ftoa>
	while(1)
	{
		lcd_clear();
 80012a6:	f000 fdbf 	bl	8001e28 <lcd_clear>
		if (lcdDis.ucPage == 0)
 80012aa:	4b54      	ldr	r3, [pc, #336]	; (80013fc <lcd_task+0x19c>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d151      	bne.n	8001356 <lcd_task+0xf6>
		{
			for(int i = 0; i < 2; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
 80012b6:	e039      	b.n	800132c <lcd_task+0xcc>
			{
				memset(cVal[i], 0, strlen(cVal[i]));
 80012b8:	f107 010c 	add.w	r1, r7, #12
 80012bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	18cc      	adds	r4, r1, r3
 80012c8:	f107 010c 	add.w	r1, r7, #12
 80012cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	440b      	add	r3, r1
 80012d8:	4618      	mov	r0, r3
 80012da:	f7fe ffa9 	bl	8000230 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	4620      	mov	r0, r4
 80012e6:	f008 f82d 	bl	8009344 <memset>
				if (i == 0)
 80012ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10d      	bne.n	800130c <lcd_task+0xac>
				{
					sprintf(cVal[i], "STM: %soC", (char *)lcdDis.sensorDis.ucSensorStm);
 80012f0:	f107 010c 	add.w	r1, r7, #12
 80012f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	440b      	add	r3, r1
 8001300:	4a42      	ldr	r2, [pc, #264]	; (800140c <lcd_task+0x1ac>)
 8001302:	4943      	ldr	r1, [pc, #268]	; (8001410 <lcd_task+0x1b0>)
 8001304:	4618      	mov	r0, r3
 8001306:	f008 f925 	bl	8009554 <siprintf>
 800130a:	e00c      	b.n	8001326 <lcd_task+0xc6>
				}
				else
					sprintf(cVal[i], "ADS: %soC", (char *)lcdDis.sensorDis.ucSensorAds);
 800130c:	f107 010c 	add.w	r1, r7, #12
 8001310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	440b      	add	r3, r1
 800131c:	4a3d      	ldr	r2, [pc, #244]	; (8001414 <lcd_task+0x1b4>)
 800131e:	493e      	ldr	r1, [pc, #248]	; (8001418 <lcd_task+0x1b8>)
 8001320:	4618      	mov	r0, r3
 8001322:	f008 f917 	bl	8009554 <siprintf>
			for(int i = 0; i < 2; i++)
 8001326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001328:	3301      	adds	r3, #1
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
 800132c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800132e:	2b01      	cmp	r3, #1
 8001330:	ddc2      	ble.n	80012b8 <lcd_task+0x58>
			}
			lcd_send_cmd(0x80 | 0x00);
 8001332:	2080      	movs	r0, #128	; 0x80
 8001334:	f000 fcf8 	bl	8001d28 <lcd_send_cmd>
			lcd_send_string(cVal[0]);
 8001338:	f107 030c 	add.w	r3, r7, #12
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fdae 	bl	8001e9e <lcd_send_string>
			lcd_send_cmd(0x80 | 0x40);
 8001342:	20c0      	movs	r0, #192	; 0xc0
 8001344:	f000 fcf0 	bl	8001d28 <lcd_send_cmd>
			lcd_send_string(cVal[1]);
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	3314      	adds	r3, #20
 800134e:	4618      	mov	r0, r3
 8001350:	f000 fda5 	bl	8001e9e <lcd_send_string>
 8001354:	e04a      	b.n	80013ec <lcd_task+0x18c>
		}
		else if (lcdDis.ucPage == 1)
 8001356:	4b29      	ldr	r3, [pc, #164]	; (80013fc <lcd_task+0x19c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d146      	bne.n	80013ec <lcd_task+0x18c>
		{
			lcd_send_cmd(0x80 | 0x00);
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f000 fce2 	bl	8001d28 <lcd_send_cmd>
			lcd_send_string((char *)"Chu ky:");
 8001364:	482d      	ldr	r0, [pc, #180]	; (800141c <lcd_task+0x1bc>)
 8001366:	f000 fd9a 	bl	8001e9e <lcd_send_string>
			lcd_send_cmd(0x80 | 0x08);
 800136a:	2088      	movs	r0, #136	; 0x88
 800136c:	f000 fcdc 	bl	8001d28 <lcd_send_cmd>
			lcd_send_string((char *)lcdDis.cfgDis.ucVal[0]);
 8001370:	4824      	ldr	r0, [pc, #144]	; (8001404 <lcd_task+0x1a4>)
 8001372:	f000 fd94 	bl	8001e9e <lcd_send_string>
			lcd_send_cmd(0x80 | 0x40);
 8001376:	20c0      	movs	r0, #192	; 0xc0
 8001378:	f000 fcd6 	bl	8001d28 <lcd_send_cmd>
			lcd_send_string((char *)"Nguong:");
 800137c:	4828      	ldr	r0, [pc, #160]	; (8001420 <lcd_task+0x1c0>)
 800137e:	f000 fd8e 	bl	8001e9e <lcd_send_string>
			lcd_send_cmd(0x80 | 0x48);
 8001382:	20c8      	movs	r0, #200	; 0xc8
 8001384:	f000 fcd0 	bl	8001d28 <lcd_send_cmd>
			lcd_send_string((char *)lcdDis.cfgDis.ucVal[1]);
 8001388:	481f      	ldr	r0, [pc, #124]	; (8001408 <lcd_task+0x1a8>)
 800138a:	f000 fd88 	bl	8001e9e <lcd_send_string>
			if (lcdDis.cfgDis.ucCursor == 0)
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <lcd_task+0x19c>)
 8001390:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001394:	2b00      	cmp	r3, #0
 8001396:	d112      	bne.n	80013be <lcd_task+0x15e>
			{
				if (lcdDis.cfgDis.bCfg == true)
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <lcd_task+0x19c>)
 800139a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <lcd_task+0x150>
				{
					lcd_send_cmd(0x80 | 0x0F);
 80013a2:	208f      	movs	r0, #143	; 0x8f
 80013a4:	f000 fcc0 	bl	8001d28 <lcd_send_cmd>
					lcd_send_string((char *)"<");
 80013a8:	481e      	ldr	r0, [pc, #120]	; (8001424 <lcd_task+0x1c4>)
 80013aa:	f000 fd78 	bl	8001e9e <lcd_send_string>
 80013ae:	e01d      	b.n	80013ec <lcd_task+0x18c>
				}
				else
				{
					lcd_send_cmd(0x80 | 0x0E);
 80013b0:	208e      	movs	r0, #142	; 0x8e
 80013b2:	f000 fcb9 	bl	8001d28 <lcd_send_cmd>
					lcd_send_string((char *)"<-");
 80013b6:	481c      	ldr	r0, [pc, #112]	; (8001428 <lcd_task+0x1c8>)
 80013b8:	f000 fd71 	bl	8001e9e <lcd_send_string>
 80013bc:	e016      	b.n	80013ec <lcd_task+0x18c>
				}
			}
			else if (lcdDis.cfgDis.ucCursor == 1)
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <lcd_task+0x19c>)
 80013c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d111      	bne.n	80013ec <lcd_task+0x18c>
			{
				if (lcdDis.cfgDis.bCfg == true)
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <lcd_task+0x19c>)
 80013ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <lcd_task+0x180>
				{
					lcd_send_cmd(0x80 | 0x4F);
 80013d2:	20cf      	movs	r0, #207	; 0xcf
 80013d4:	f000 fca8 	bl	8001d28 <lcd_send_cmd>
					lcd_send_string((char *)"<");
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <lcd_task+0x1c4>)
 80013da:	f000 fd60 	bl	8001e9e <lcd_send_string>
 80013de:	e005      	b.n	80013ec <lcd_task+0x18c>
				}
				else
				{
					lcd_send_cmd(0x80 | 0x4E);
 80013e0:	20ce      	movs	r0, #206	; 0xce
 80013e2:	f000 fca1 	bl	8001d28 <lcd_send_cmd>
					lcd_send_string((char *)"<-");
 80013e6:	4810      	ldr	r0, [pc, #64]	; (8001428 <lcd_task+0x1c8>)
 80013e8:	f000 fd59 	bl	8001e9e <lcd_send_string>
				}
			}
		}
		vTaskDelayUntil(&xWakeTick, 200 / portTICK_RATE_MS);
 80013ec:	f107 0308 	add.w	r3, r7, #8
 80013f0:	21c8      	movs	r1, #200	; 0xc8
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 f8b8 	bl	8007568 <vTaskDelayUntil>
		lcd_clear();
 80013f8:	e755      	b.n	80012a6 <lcd_task+0x46>
 80013fa:	bf00      	nop
 80013fc:	20000008 	.word	0x20000008
 8001400:	408f4000 	.word	0x408f4000
 8001404:	20000050 	.word	0x20000050
 8001408:	2000005a 	.word	0x2000005a
 800140c:	20000020 	.word	0x20000020
 8001410:	0800db60 	.word	0x0800db60
 8001414:	2000002a 	.word	0x2000002a
 8001418:	0800db6c 	.word	0x0800db6c
 800141c:	0800db78 	.word	0x0800db78
 8001420:	0800db80 	.word	0x0800db80
 8001424:	0800db88 	.word	0x0800db88
 8001428:	0800db8c 	.word	0x0800db8c
 800142c:	00000000 	.word	0x00000000

08001430 <sensor_task>:
	}
}

void sensor_task(void *param)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
	TickType_t xWakeTick = xTaskGetTickCount();
 8001438:	f006 fa5a 	bl	80078f0 <xTaskGetTickCount>
 800143c:	4603      	mov	r3, r0
 800143e:	613b      	str	r3, [r7, #16]
	EventBits_t xEvBit;
	uint8_t ucDataAds[3] = {0};
 8001440:	4b77      	ldr	r3, [pc, #476]	; (8001620 <sensor_task+0x1f0>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	81bb      	strh	r3, [r7, #12]
 8001446:	2300      	movs	r3, #0
 8001448:	73bb      	strb	r3, [r7, #14]
	ads_init();
 800144a:	f7ff fcd5 	bl	8000df8 <ads_init>
	while (1)
	{
		HAL_ADC_Start_IT(&hadc1);
 800144e:	4875      	ldr	r0, [pc, #468]	; (8001624 <sensor_task+0x1f4>)
 8001450:	f001 f91e 	bl	8002690 <HAL_ADC_Start_IT>
		xEvBit = xEventGroupWaitBits(evGroupHandle, ADC_BIT , pdTRUE, pdFALSE, 200 / portTICK_RATE_MS);
 8001454:	4b74      	ldr	r3, [pc, #464]	; (8001628 <sensor_task+0x1f8>)
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	23c8      	movs	r3, #200	; 0xc8
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2300      	movs	r3, #0
 800145e:	2201      	movs	r2, #1
 8001460:	2101      	movs	r1, #1
 8001462:	f004 fe25 	bl	80060b0 <xEventGroupWaitBits>
 8001466:	6178      	str	r0, [r7, #20]
		if (xEvBit & ADC_BIT)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d023      	beq.n	80014ba <sensor_task+0x8a>
			lcdDis.sensorDis.dbSensorStm = (double)HAL_ADC_GetValue(&hadc1) * 100 * 3.3 / 4095 ;
 8001472:	486c      	ldr	r0, [pc, #432]	; (8001624 <sensor_task+0x1f4>)
 8001474:	f001 f9c2 	bl	80027fc <HAL_ADC_GetValue>
 8001478:	4603      	mov	r3, r0
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f822 	bl	80004c4 <__aeabi_ui2d>
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	4b69      	ldr	r3, [pc, #420]	; (800162c <sensor_task+0x1fc>)
 8001486:	f7ff f897 	bl	80005b8 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	a35b      	add	r3, pc, #364	; (adr r3, 8001600 <sensor_task+0x1d0>)
 8001494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001498:	f7ff f88e 	bl	80005b8 <__aeabi_dmul>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	a358      	add	r3, pc, #352	; (adr r3, 8001608 <sensor_task+0x1d8>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff f9af 	bl	800080c <__aeabi_ddiv>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	495f      	ldr	r1, [pc, #380]	; (8001630 <sensor_task+0x200>)
 80014b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80014b8:	e006      	b.n	80014c8 <sensor_task+0x98>
		else
			lcdDis.sensorDis.dbSensorStm = 0;
 80014ba:	495d      	ldr	r1, [pc, #372]	; (8001630 <sensor_task+0x200>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		ftoa(lcdDis.sensorDis.dbSensorStm, (char *)lcdDis.sensorDis.ucSensorStm, 2);
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <sensor_task+0x200>)
 80014ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014ce:	2302      	movs	r3, #2
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <sensor_task+0x204>)
 80014d2:	f7ff fd29 	bl	8000f28 <ftoa>
		memset((char *)ucDataAds, '\0', strlen((char *)ucDataAds));
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	4618      	mov	r0, r3
 80014dc:	f7fe fea8 	bl	8000230 <strlen>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f107 030c 	add.w	r3, r7, #12
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f007 ff2b 	bl	8009344 <memset>
		ads_read(ADS1115_CONVERSION_REG, ucDataAds);
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fc51 	bl	8000d9c <ads_read>
		lcdDis.sensorDis.dbSensorAds = ((double)((((uint16_t)ucDataAds[0] << 8) & 0xFF00) | ((uint16_t)ucDataAds[1] & 0x00FF)) * 1.024 / 32767) * 100;
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	7b7a      	ldrb	r2, [r7, #13]
 8001502:	4313      	orrs	r3, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ffed 	bl	80004e4 <__aeabi_i2d>
 800150a:	a341      	add	r3, pc, #260	; (adr r3, 8001610 <sensor_task+0x1e0>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f852 	bl	80005b8 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	a33e      	add	r3, pc, #248	; (adr r3, 8001618 <sensor_task+0x1e8>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f973 	bl	800080c <__aeabi_ddiv>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b3e      	ldr	r3, [pc, #248]	; (800162c <sensor_task+0x1fc>)
 8001534:	f7ff f840 	bl	80005b8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	493c      	ldr	r1, [pc, #240]	; (8001630 <sensor_task+0x200>)
 800153e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		ftoa(lcdDis.sensorDis.dbSensorAds, (char *)lcdDis.sensorDis.ucSensorAds, 2);
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <sensor_task+0x200>)
 8001544:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001548:	2302      	movs	r3, #2
 800154a:	4a3b      	ldr	r2, [pc, #236]	; (8001638 <sensor_task+0x208>)
 800154c:	f7ff fcec 	bl	8000f28 <ftoa>
		if (lcdDis.sensorDis.dbSensorStm > lcdDis.cfgDis.dbVal[1])
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <sensor_task+0x200>)
 8001552:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001556:	4b36      	ldr	r3, [pc, #216]	; (8001630 <sensor_task+0x200>)
 8001558:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800155c:	f7ff fabc 	bl	8000ad8 <__aeabi_dcmpgt>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00c      	beq.n	8001580 <sensor_task+0x150>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_ON);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800156c:	4833      	ldr	r0, [pc, #204]	; (800163c <sensor_task+0x20c>)
 800156e:	f001 ff6f 	bl	8003450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_ON);
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001578:	4830      	ldr	r0, [pc, #192]	; (800163c <sensor_task+0x20c>)
 800157a:	f001 ff69 	bl	8003450 <HAL_GPIO_WritePin>
 800157e:	e00b      	b.n	8001598 <sensor_task+0x168>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_OFF);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <sensor_task+0x20c>)
 8001588:	f001 ff62 	bl	8003450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_OFF);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001592:	482a      	ldr	r0, [pc, #168]	; (800163c <sensor_task+0x20c>)
 8001594:	f001 ff5c 	bl	8003450 <HAL_GPIO_WritePin>
		}
		if (lcdDis.sensorDis.dbSensorAds > lcdDis.cfgDis.dbVal[1])
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <sensor_task+0x200>)
 800159a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <sensor_task+0x200>)
 80015a0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80015a4:	f7ff fa98 	bl	8000ad8 <__aeabi_dcmpgt>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d00c      	beq.n	80015c8 <sensor_task+0x198>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_ON);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b4:	4821      	ldr	r0, [pc, #132]	; (800163c <sensor_task+0x20c>)
 80015b6:	f001 ff4b 	bl	8003450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_ON);
 80015ba:	2200      	movs	r2, #0
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	481e      	ldr	r0, [pc, #120]	; (800163c <sensor_task+0x20c>)
 80015c2:	f001 ff45 	bl	8003450 <HAL_GPIO_WritePin>
 80015c6:	e00b      	b.n	80015e0 <sensor_task+0x1b0>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_OFF);
 80015c8:	2201      	movs	r2, #1
 80015ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ce:	481b      	ldr	r0, [pc, #108]	; (800163c <sensor_task+0x20c>)
 80015d0:	f001 ff3e 	bl	8003450 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_OFF);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <sensor_task+0x20c>)
 80015dc:	f001 ff38 	bl	8003450 <HAL_GPIO_WritePin>
		}
		vTaskDelayUntil(&xWakeTick, (TickType_t)lcdDis.cfgDis.dbVal[0] / portTICK_RATE_MS);
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <sensor_task+0x200>)
 80015e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff fabd 	bl	8000b68 <__aeabi_d2uiz>
 80015ee:	4602      	mov	r2, r0
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f005 ffb6 	bl	8007568 <vTaskDelayUntil>
		HAL_ADC_Start_IT(&hadc1);
 80015fc:	e727      	b.n	800144e <sensor_task+0x1e>
 80015fe:	bf00      	nop
 8001600:	66666666 	.word	0x66666666
 8001604:	400a6666 	.word	0x400a6666
 8001608:	00000000 	.word	0x00000000
 800160c:	40affe00 	.word	0x40affe00
 8001610:	d2f1a9fc 	.word	0xd2f1a9fc
 8001614:	3ff0624d 	.word	0x3ff0624d
 8001618:	00000000 	.word	0x00000000
 800161c:	40dfffc0 	.word	0x40dfffc0
 8001620:	0800db90 	.word	0x0800db90
 8001624:	2000026c 	.word	0x2000026c
 8001628:	200002a8 	.word	0x200002a8
 800162c:	40590000 	.word	0x40590000
 8001630:	20000008 	.word	0x20000008
 8001634:	20000020 	.word	0x20000020
 8001638:	2000002a 	.word	0x2000002a
 800163c:	40010800 	.word	0x40010800

08001640 <general_task>:
	}
}

void general_task(void *param)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af02      	add	r7, sp, #8
 8001646:	6078      	str	r0, [r7, #4]
	EventBits_t xEvBit;
	uartCfgHandle_t uartCfg = {0};
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	809a      	strh	r2, [r3, #4]
	TickType_t xWakeTick = xTaskGetTickCount();
 8001652:	f006 f94d 	bl	80078f0 <xTaskGetTickCount>
 8001656:	4603      	mov	r3, r0
 8001658:	60bb      	str	r3, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 800165a:	2201      	movs	r2, #1
 800165c:	49a4      	ldr	r1, [pc, #656]	; (80018f0 <general_task+0x2b0>)
 800165e:	48a5      	ldr	r0, [pc, #660]	; (80018f4 <general_task+0x2b4>)
 8001660:	f003 ff43 	bl	80054ea <HAL_UART_Receive_IT>
	while (1)
	{
		xEvBit = xEventGroupWaitBits(evGroupHandle, BUT0_BIT | BUT1_BIT | BUT2_BIT | BUT3_BIT, pdTRUE, pdFALSE, 10 / portTICK_RATE_MS);
 8001664:	4ba4      	ldr	r3, [pc, #656]	; (80018f8 <general_task+0x2b8>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	230a      	movs	r3, #10
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2201      	movs	r2, #1
 8001670:	211e      	movs	r1, #30
 8001672:	f004 fd1d 	bl	80060b0 <xEventGroupWaitBits>
 8001676:	6178      	str	r0, [r7, #20]
		if (xEvBit & BUT0_BIT)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00f      	beq.n	80016a2 <general_task+0x62>
		{
				lcdDis.cfgDis.bCfg = false;
 8001682:	4b9e      	ldr	r3, [pc, #632]	; (80018fc <general_task+0x2bc>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				lcdDis.cfgDis.ucCursor = 0;
 800168a:	4b9c      	ldr	r3, [pc, #624]	; (80018fc <general_task+0x2bc>)
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				lcdDis.ucPage = 1 - lcdDis.ucPage;
 8001692:	4b9a      	ldr	r3, [pc, #616]	; (80018fc <general_task+0x2bc>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	f1c3 0301 	rsb	r3, r3, #1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b97      	ldr	r3, [pc, #604]	; (80018fc <general_task+0x2bc>)
 800169e:	701a      	strb	r2, [r3, #0]
 80016a0:	e1a7      	b.n	80019f2 <general_task+0x3b2>
		}
		else if (xEvBit & BUT1_BIT)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80b4 	beq.w	8001816 <general_task+0x1d6>
		{
			if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == false)
 80016ae:	4b93      	ldr	r3, [pc, #588]	; (80018fc <general_task+0x2bc>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d111      	bne.n	80016da <general_task+0x9a>
 80016b6:	4b91      	ldr	r3, [pc, #580]	; (80018fc <general_task+0x2bc>)
 80016b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016bc:	f083 0301 	eor.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <general_task+0x9a>
			{
				lcdDis.cfgDis.ucCursor = 1 - lcdDis.cfgDis.ucCursor;
 80016c6:	4b8d      	ldr	r3, [pc, #564]	; (80018fc <general_task+0x2bc>)
 80016c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016cc:	f1c3 0301 	rsb	r3, r3, #1
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b8a      	ldr	r3, [pc, #552]	; (80018fc <general_task+0x2bc>)
 80016d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80016d8:	e18b      	b.n	80019f2 <general_task+0x3b2>
			}
			else if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == true)
 80016da:	4b88      	ldr	r3, [pc, #544]	; (80018fc <general_task+0x2bc>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	f040 8187 	bne.w	80019f2 <general_task+0x3b2>
 80016e4:	4b85      	ldr	r3, [pc, #532]	; (80018fc <general_task+0x2bc>)
 80016e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8181 	beq.w	80019f2 <general_task+0x3b2>
			{
				if (lcdDis.cfgDis.ucCursor == 0)
 80016f0:	4b82      	ldr	r3, [pc, #520]	; (80018fc <general_task+0x2bc>)
 80016f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d138      	bne.n	800176c <general_task+0x12c>
				{
					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 9500)
 80016fa:	4b80      	ldr	r3, [pc, #512]	; (80018fc <general_task+0x2bc>)
 80016fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001700:	4a7e      	ldr	r2, [pc, #504]	; (80018fc <general_task+0x2bc>)
 8001702:	3307      	adds	r3, #7
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	4413      	add	r3, r2
 8001708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170c:	a374      	add	r3, pc, #464	; (adr r3, 80018e0 <general_task+0x2a0>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7ff f9b9 	bl	8000a88 <__aeabi_dcmpeq>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <general_task+0xf6>
					{
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 500;
 800171c:	4b77      	ldr	r3, [pc, #476]	; (80018fc <general_task+0x2bc>)
 800171e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001722:	4a76      	ldr	r2, [pc, #472]	; (80018fc <general_task+0x2bc>)
 8001724:	3307      	adds	r3, #7
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	18d1      	adds	r1, r2, r3
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b74      	ldr	r3, [pc, #464]	; (8001900 <general_task+0x2c0>)
 8001730:	e9c1 2300 	strd	r2, r3, [r1]
 8001734:	e057      	b.n	80017e6 <general_task+0x1a6>
					}
					else
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] += 500;
 8001736:	4b71      	ldr	r3, [pc, #452]	; (80018fc <general_task+0x2bc>)
 8001738:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173c:	4a6f      	ldr	r2, [pc, #444]	; (80018fc <general_task+0x2bc>)
 800173e:	3307      	adds	r3, #7
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	4413      	add	r3, r2
 8001744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001748:	4b6c      	ldr	r3, [pc, #432]	; (80018fc <general_task+0x2bc>)
 800174a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800174e:	461c      	mov	r4, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <general_task+0x2c0>)
 8001756:	f7fe fd79 	bl	800024c <__adddf3>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4867      	ldr	r0, [pc, #412]	; (80018fc <general_task+0x2bc>)
 8001760:	1de1      	adds	r1, r4, #7
 8001762:	00c9      	lsls	r1, r1, #3
 8001764:	4401      	add	r1, r0
 8001766:	e9c1 2300 	strd	r2, r3, [r1]
 800176a:	e03c      	b.n	80017e6 <general_task+0x1a6>
				}
				else if(lcdDis.cfgDis.ucCursor == 1)
 800176c:	4b63      	ldr	r3, [pc, #396]	; (80018fc <general_task+0x2bc>)
 800176e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001772:	2b01      	cmp	r3, #1
 8001774:	d137      	bne.n	80017e6 <general_task+0x1a6>
				{
					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 99)
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <general_task+0x2bc>)
 8001778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800177c:	4a5f      	ldr	r2, [pc, #380]	; (80018fc <general_task+0x2bc>)
 800177e:	3307      	adds	r3, #7
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001788:	a357      	add	r3, pc, #348	; (adr r3, 80018e8 <general_task+0x2a8>)
 800178a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178e:	f7ff f97b 	bl	8000a88 <__aeabi_dcmpeq>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00c      	beq.n	80017b2 <general_task+0x172>
					{
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 1;
 8001798:	4b58      	ldr	r3, [pc, #352]	; (80018fc <general_task+0x2bc>)
 800179a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800179e:	4a57      	ldr	r2, [pc, #348]	; (80018fc <general_task+0x2bc>)
 80017a0:	3307      	adds	r3, #7
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	18d1      	adds	r1, r2, r3
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b56      	ldr	r3, [pc, #344]	; (8001904 <general_task+0x2c4>)
 80017ac:	e9c1 2300 	strd	r2, r3, [r1]
 80017b0:	e019      	b.n	80017e6 <general_task+0x1a6>
					}
					else
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] += 1;
 80017b2:	4b52      	ldr	r3, [pc, #328]	; (80018fc <general_task+0x2bc>)
 80017b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017b8:	4a50      	ldr	r2, [pc, #320]	; (80018fc <general_task+0x2bc>)
 80017ba:	3307      	adds	r3, #7
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <general_task+0x2bc>)
 80017c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ca:	461c      	mov	r4, r3
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b4c      	ldr	r3, [pc, #304]	; (8001904 <general_task+0x2c4>)
 80017d2:	f7fe fd3b 	bl	800024c <__adddf3>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4848      	ldr	r0, [pc, #288]	; (80018fc <general_task+0x2bc>)
 80017dc:	1de1      	adds	r1, r4, #7
 80017de:	00c9      	lsls	r1, r1, #3
 80017e0:	4401      	add	r1, r0
 80017e2:	e9c1 2300 	strd	r2, r3, [r1]
				}
				ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 80017e6:	4b45      	ldr	r3, [pc, #276]	; (80018fc <general_task+0x2bc>)
 80017e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b45      	ldr	r3, [pc, #276]	; (8001908 <general_task+0x2c8>)
 80017f2:	f7ff f80b 	bl	800080c <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	2301      	movs	r3, #1
 8001800:	4a42      	ldr	r2, [pc, #264]	; (800190c <general_task+0x2cc>)
 8001802:	f7ff fb91 	bl	8000f28 <ftoa>
				ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <general_task+0x2bc>)
 8001808:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800180c:	2301      	movs	r3, #1
 800180e:	4a40      	ldr	r2, [pc, #256]	; (8001910 <general_task+0x2d0>)
 8001810:	f7ff fb8a 	bl	8000f28 <ftoa>
 8001814:	e0ed      	b.n	80019f2 <general_task+0x3b2>
			}
		}
		else if (xEvBit & BUT2_BIT)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80ce 	beq.w	80019be <general_task+0x37e>
		{
			if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == false)
 8001822:	4b36      	ldr	r3, [pc, #216]	; (80018fc <general_task+0x2bc>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d111      	bne.n	800184e <general_task+0x20e>
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <general_task+0x2bc>)
 800182c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d009      	beq.n	800184e <general_task+0x20e>
			{
				lcdDis.cfgDis.ucCursor = 1 - lcdDis.cfgDis.ucCursor;
 800183a:	4b30      	ldr	r3, [pc, #192]	; (80018fc <general_task+0x2bc>)
 800183c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001840:	f1c3 0301 	rsb	r3, r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <general_task+0x2bc>)
 8001848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800184c:	e0d1      	b.n	80019f2 <general_task+0x3b2>
			}
			else if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == true)
 800184e:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <general_task+0x2bc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	f040 80cd 	bne.w	80019f2 <general_task+0x3b2>
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <general_task+0x2bc>)
 800185a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80c7 	beq.w	80019f2 <general_task+0x3b2>
			{
				if (lcdDis.cfgDis.ucCursor == 0)
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <general_task+0x2bc>)
 8001866:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800186a:	2b00      	cmp	r3, #0
 800186c:	d152      	bne.n	8001914 <general_task+0x2d4>
				{
					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 500)
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <general_task+0x2bc>)
 8001870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <general_task+0x2bc>)
 8001876:	3307      	adds	r3, #7
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <general_task+0x2c0>)
 8001886:	f7ff f8ff 	bl	8000a88 <__aeabi_dcmpeq>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <general_task+0x26a>
					{
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 9500;
 8001890:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <general_task+0x2bc>)
 8001892:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001896:	4a19      	ldr	r2, [pc, #100]	; (80018fc <general_task+0x2bc>)
 8001898:	3307      	adds	r3, #7
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	18d1      	adds	r1, r2, r3
 800189e:	a310      	add	r3, pc, #64	; (adr r3, 80018e0 <general_task+0x2a0>)
 80018a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a4:	e9c1 2300 	strd	r2, r3, [r1]
 80018a8:	e071      	b.n	800198e <general_task+0x34e>
					}
					else
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] -= 500;
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <general_task+0x2bc>)
 80018ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <general_task+0x2bc>)
 80018b2:	3307      	adds	r3, #7
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <general_task+0x2bc>)
 80018be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c2:	461c      	mov	r4, r3
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <general_task+0x2c0>)
 80018ca:	f7fe fcbd 	bl	8000248 <__aeabi_dsub>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <general_task+0x2bc>)
 80018d4:	1de1      	adds	r1, r4, #7
 80018d6:	00c9      	lsls	r1, r1, #3
 80018d8:	4401      	add	r1, r0
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
 80018de:	e056      	b.n	800198e <general_task+0x34e>
 80018e0:	00000000 	.word	0x00000000
 80018e4:	40c28e00 	.word	0x40c28e00
 80018e8:	00000000 	.word	0x00000000
 80018ec:	4058c000 	.word	0x4058c000
 80018f0:	200002b0 	.word	0x200002b0
 80018f4:	20000370 	.word	0x20000370
 80018f8:	200002a8 	.word	0x200002a8
 80018fc:	20000008 	.word	0x20000008
 8001900:	407f4000 	.word	0x407f4000
 8001904:	3ff00000 	.word	0x3ff00000
 8001908:	408f4000 	.word	0x408f4000
 800190c:	20000050 	.word	0x20000050
 8001910:	2000005a 	.word	0x2000005a
				}
				else if(lcdDis.cfgDis.ucCursor == 1)
 8001914:	4b8e      	ldr	r3, [pc, #568]	; (8001b50 <general_task+0x510>)
 8001916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191a:	2b01      	cmp	r3, #1
 800191c:	d137      	bne.n	800198e <general_task+0x34e>
				{
					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 1)
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <general_task+0x510>)
 8001920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001924:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <general_task+0x510>)
 8001926:	3307      	adds	r3, #7
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	4413      	add	r3, r2
 800192c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b87      	ldr	r3, [pc, #540]	; (8001b54 <general_task+0x514>)
 8001936:	f7ff f8a7 	bl	8000a88 <__aeabi_dcmpeq>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00c      	beq.n	800195a <general_task+0x31a>
					{
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 99;
 8001940:	4b83      	ldr	r3, [pc, #524]	; (8001b50 <general_task+0x510>)
 8001942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001946:	4a82      	ldr	r2, [pc, #520]	; (8001b50 <general_task+0x510>)
 8001948:	3307      	adds	r3, #7
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	18d1      	adds	r1, r2, r3
 800194e:	a37c      	add	r3, pc, #496	; (adr r3, 8001b40 <general_task+0x500>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	e9c1 2300 	strd	r2, r3, [r1]
 8001958:	e019      	b.n	800198e <general_task+0x34e>
					}
					else
						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] -= 1;
 800195a:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <general_task+0x510>)
 800195c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001960:	4a7b      	ldr	r2, [pc, #492]	; (8001b50 <general_task+0x510>)
 8001962:	3307      	adds	r3, #7
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196c:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <general_task+0x510>)
 800196e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001972:	461c      	mov	r4, r3
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	4b76      	ldr	r3, [pc, #472]	; (8001b54 <general_task+0x514>)
 800197a:	f7fe fc65 	bl	8000248 <__aeabi_dsub>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4873      	ldr	r0, [pc, #460]	; (8001b50 <general_task+0x510>)
 8001984:	1de1      	adds	r1, r4, #7
 8001986:	00c9      	lsls	r1, r1, #3
 8001988:	4401      	add	r1, r0
 800198a:	e9c1 2300 	strd	r2, r3, [r1]
				}
				ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 800198e:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <general_task+0x510>)
 8001990:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <general_task+0x518>)
 800199a:	f7fe ff37 	bl	800080c <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	2301      	movs	r3, #1
 80019a8:	4a6c      	ldr	r2, [pc, #432]	; (8001b5c <general_task+0x51c>)
 80019aa:	f7ff fabd 	bl	8000f28 <ftoa>
				ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 80019ae:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <general_task+0x510>)
 80019b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019b4:	2301      	movs	r3, #1
 80019b6:	4a6a      	ldr	r2, [pc, #424]	; (8001b60 <general_task+0x520>)
 80019b8:	f7ff fab6 	bl	8000f28 <ftoa>
 80019bc:	e019      	b.n	80019f2 <general_task+0x3b2>
			}
		}
		else if (xEvBit & BUT3_BIT)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <general_task+0x3b2>
		{
			if (lcdDis.ucPage == 1)
 80019c8:	4b61      	ldr	r3, [pc, #388]	; (8001b50 <general_task+0x510>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d110      	bne.n	80019f2 <general_task+0x3b2>
			{
				lcdDis.cfgDis.bCfg = !lcdDis.cfgDis.bCfg;
 80019d0:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <general_task+0x510>)
 80019d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f083 0301 	eor.w	r3, r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b58      	ldr	r3, [pc, #352]	; (8001b50 <general_task+0x510>)
 80019ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			}
		}
		if (ucRxFlag == END_BYTE)
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <general_task+0x524>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f040 8099 	bne.w	8001b2e <general_task+0x4ee>
		{
			LOG(TAG, (char *)ucRxBuffer);
 80019fc:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <general_task+0x528>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	495a      	ldr	r1, [pc, #360]	; (8001b6c <general_task+0x52c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fade 	bl	8000fc4 <LOG>
			sscanf((char *)ucRxBuffer, "$,%c,%s,*", (char *)&uartCfg.ucType, (char *)uartCfg.ucVal);
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f107 020c 	add.w	r2, r7, #12
 8001a12:	4957      	ldr	r1, [pc, #348]	; (8001b70 <general_task+0x530>)
 8001a14:	4855      	ldr	r0, [pc, #340]	; (8001b6c <general_task+0x52c>)
 8001a16:	f007 fdbd 	bl	8009594 <siscanf>
			if (uartCfg.ucType == 'P')
 8001a1a:	7b3b      	ldrb	r3, [r7, #12]
 8001a1c:	2b50      	cmp	r3, #80	; 0x50
 8001a1e:	d143      	bne.n	8001aa8 <general_task+0x468>
			{
				lcdDis.cfgDis.dbVal[0] = atof((char *)uartCfg.ucVal) * 1000;
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	3301      	adds	r3, #1
 8001a26:	4618      	mov	r0, r3
 8001a28:	f007 fc38 	bl	800929c <atof>
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	4b49      	ldr	r3, [pc, #292]	; (8001b58 <general_task+0x518>)
 8001a32:	f7fe fdc1 	bl	80005b8 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4945      	ldr	r1, [pc, #276]	; (8001b50 <general_task+0x510>)
 8001a3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				if (lcdDis.cfgDis.dbVal[0] > 9500)
 8001a40:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <general_task+0x510>)
 8001a42:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a46:	a340      	add	r3, pc, #256	; (adr r3, 8001b48 <general_task+0x508>)
 8001a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4c:	f7ff f844 	bl	8000ad8 <__aeabi_dcmpgt>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <general_task+0x424>
					lcdDis.cfgDis.dbVal[0] = 9500;
 8001a56:	493e      	ldr	r1, [pc, #248]	; (8001b50 <general_task+0x510>)
 8001a58:	a33b      	add	r3, pc, #236	; (adr r3, 8001b48 <general_task+0x508>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001a62:	e010      	b.n	8001a86 <general_task+0x446>
				else if (lcdDis.cfgDis.dbVal[0] < 500)
 8001a64:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <general_task+0x510>)
 8001a66:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <general_task+0x534>)
 8001a70:	f7ff f814 	bl	8000a9c <__aeabi_dcmplt>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <general_task+0x446>
					lcdDis.cfgDis.dbVal[0] = 500;
 8001a7a:	4935      	ldr	r1, [pc, #212]	; (8001b50 <general_task+0x510>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <general_task+0x534>)
 8001a82:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 8001a86:	4b32      	ldr	r3, [pc, #200]	; (8001b50 <general_task+0x510>)
 8001a88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <general_task+0x518>)
 8001a92:	f7fe febb 	bl	800080c <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4a2e      	ldr	r2, [pc, #184]	; (8001b5c <general_task+0x51c>)
 8001aa2:	f7ff fa41 	bl	8000f28 <ftoa>
 8001aa6:	e037      	b.n	8001b18 <general_task+0x4d8>
			}
			else if (uartCfg.ucType == 'T')
 8001aa8:	7b3b      	ldrb	r3, [r7, #12]
 8001aaa:	2b54      	cmp	r3, #84	; 0x54
 8001aac:	d134      	bne.n	8001b18 <general_task+0x4d8>
			{
				lcdDis.cfgDis.dbVal[1] = atof((char *)uartCfg.ucVal);
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f007 fbf1 	bl	800929c <atof>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4924      	ldr	r1, [pc, #144]	; (8001b50 <general_task+0x510>)
 8001ac0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				if (lcdDis.cfgDis.dbVal[1] > 99)
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <general_task+0x510>)
 8001ac6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aca:	a31d      	add	r3, pc, #116	; (adr r3, 8001b40 <general_task+0x500>)
 8001acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad0:	f7ff f802 	bl	8000ad8 <__aeabi_dcmpgt>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d006      	beq.n	8001ae8 <general_task+0x4a8>
					lcdDis.cfgDis.dbVal[1] = 99;
 8001ada:	491d      	ldr	r1, [pc, #116]	; (8001b50 <general_task+0x510>)
 8001adc:	a318      	add	r3, pc, #96	; (adr r3, 8001b40 <general_task+0x500>)
 8001ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001ae6:	e010      	b.n	8001b0a <general_task+0x4ca>
				else if (lcdDis.cfgDis.dbVal[1] < 1)
 8001ae8:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <general_task+0x510>)
 8001aea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <general_task+0x514>)
 8001af4:	f7fe ffd2 	bl	8000a9c <__aeabi_dcmplt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <general_task+0x4ca>
					lcdDis.cfgDis.dbVal[1] = 1;
 8001afe:	4914      	ldr	r1, [pc, #80]	; (8001b50 <general_task+0x510>)
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <general_task+0x514>)
 8001b06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
				ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <general_task+0x510>)
 8001b0c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b10:	2301      	movs	r3, #1
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <general_task+0x520>)
 8001b14:	f7ff fa08 	bl	8000f28 <ftoa>
			}
			ucRxCnt = 0;
 8001b18:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <general_task+0x538>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
			ucRxFlag = START_BYTE;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <general_task+0x524>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001b24:	2201      	movs	r2, #1
 8001b26:	4915      	ldr	r1, [pc, #84]	; (8001b7c <general_task+0x53c>)
 8001b28:	4815      	ldr	r0, [pc, #84]	; (8001b80 <general_task+0x540>)
 8001b2a:	f003 fcde 	bl	80054ea <HAL_UART_Receive_IT>
		}
		vTaskDelayUntil(&xWakeTick, 50 / portTICK_RATE_MS);
 8001b2e:	f107 0308 	add.w	r3, r7, #8
 8001b32:	2132      	movs	r1, #50	; 0x32
 8001b34:	4618      	mov	r0, r3
 8001b36:	f005 fd17 	bl	8007568 <vTaskDelayUntil>
		xEvBit = xEventGroupWaitBits(evGroupHandle, BUT0_BIT | BUT1_BIT | BUT2_BIT | BUT3_BIT, pdTRUE, pdFALSE, 10 / portTICK_RATE_MS);
 8001b3a:	e593      	b.n	8001664 <general_task+0x24>
 8001b3c:	f3af 8000 	nop.w
 8001b40:	00000000 	.word	0x00000000
 8001b44:	4058c000 	.word	0x4058c000
 8001b48:	00000000 	.word	0x00000000
 8001b4c:	40c28e00 	.word	0x40c28e00
 8001b50:	20000008 	.word	0x20000008
 8001b54:	3ff00000 	.word	0x3ff00000
 8001b58:	408f4000 	.word	0x408f4000
 8001b5c:	20000050 	.word	0x20000050
 8001b60:	2000005a 	.word	0x2000005a
 8001b64:	20000068 	.word	0x20000068
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	200002b4 	.word	0x200002b4
 8001b70:	0800db94 	.word	0x0800db94
 8001b74:	407f4000 	.word	0x407f4000
 8001b78:	200002c8 	.word	0x200002c8
 8001b7c:	200002b0 	.word	0x200002b0
 8001b80:	20000370 	.word	0x20000370

08001b84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b98:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a27      	ldr	r2, [pc, #156]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001b9e:	f043 0320 	orr.w	r3, r3, #32
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b25      	ldr	r3, [pc, #148]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <MX_GPIO_Init+0xb8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8001be0:	2201      	movs	r2, #1
 8001be2:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001be6:	4816      	ldr	r0, [pc, #88]	; (8001c40 <MX_GPIO_Init+0xbc>)
 8001be8:	f001 fc32 	bl	8003450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <MX_GPIO_Init+0xc0>)
 8001bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4811      	ldr	r0, [pc, #68]	; (8001c48 <MX_GPIO_Init+0xc4>)
 8001c02:	f001 fa91 	bl	8003128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c06:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <MX_GPIO_Init+0xbc>)
 8001c20:	f001 fa82 	bl	8003128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2105      	movs	r1, #5
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	f001 f910 	bl	8002e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f001 f929 	bl	8002e86 <HAL_NVIC_EnableIRQ>

}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	10210000 	.word	0x10210000
 8001c48:	40010c00 	.word	0x40010c00

08001c4c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <MX_I2C2_Init+0x54>)
 8001c54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c58:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_I2C2_Init+0x58>)
 8001c5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c88:	4804      	ldr	r0, [pc, #16]	; (8001c9c <MX_I2C2_Init+0x50>)
 8001c8a:	f001 fc11 	bl	80034b0 <HAL_I2C_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c94:	f000 f99c 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200002d0 	.word	0x200002d0
 8001ca0:	40005800 	.word	0x40005800
 8001ca4:	000186a0 	.word	0x000186a0

08001ca8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a16      	ldr	r2, [pc, #88]	; (8001d1c <HAL_I2C_MspInit+0x74>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d124      	bne.n	8001d12 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_I2C_MspInit+0x78>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_I2C_MspInit+0x78>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_I2C_MspInit+0x78>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ce0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce6:	2312      	movs	r3, #18
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <HAL_I2C_MspInit+0x7c>)
 8001cf6:	f001 fa17 	bl	8003128 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_I2C_MspInit+0x78>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	4a08      	ldr	r2, [pc, #32]	; (8001d20 <HAL_I2C_MspInit+0x78>)
 8001d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d04:	61d3      	str	r3, [r2, #28]
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_I2C_MspInit+0x78>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40005800 	.word	0x40005800
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010c00 	.word	0x40010c00

08001d28 <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c2;
extern SemaphoreHandle_t i2cSemphrHandle;

void lcd_send_cmd (char cmd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f023 030f 	bic.w	r3, r3, #15
 8001d38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	011b      	lsls	r3, r3, #4
 8001d3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	f043 030c 	orr.w	r3, r3, #12
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f043 0308 	orr.w	r3, r3, #8
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	f043 030c 	orr.w	r3, r3, #12
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	72fb      	strb	r3, [r7, #11]
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <lcd_send_cmd+0x78>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 ffd1 	bl	8006d18 <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8001d76:	f107 0208 	add.w	r2, r7, #8
 8001d7a:	2364      	movs	r3, #100	; 0x64
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2304      	movs	r3, #4
 8001d80:	214e      	movs	r1, #78	; 0x4e
 8001d82:	4808      	ldr	r0, [pc, #32]	; (8001da4 <lcd_send_cmd+0x7c>)
 8001d84:	f001 fcd8 	bl	8003738 <HAL_I2C_Master_Transmit>
	xSemaphoreGive(i2cSemphrHandle);
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <lcd_send_cmd+0x78>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	f004 fd4b 	bl	800682c <xQueueGenericSend>
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200002ac 	.word	0x200002ac
 8001da4:	200002d0 	.word	0x200002d0

08001da8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f023 030f 	bic.w	r3, r3, #15
 8001db8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8001dc0:	7bfb      	ldrb	r3, [r7, #15]
 8001dc2:	f043 030d 	orr.w	r3, r3, #13
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	f043 0309 	orr.w	r3, r3, #9
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8001dd4:	7bbb      	ldrb	r3, [r7, #14]
 8001dd6:	f043 030d 	orr.w	r3, r3, #13
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8001dde:	7bbb      	ldrb	r3, [r7, #14]
 8001de0:	f043 0309 	orr.w	r3, r3, #9
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	72fb      	strb	r3, [r7, #11]
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <lcd_send_data+0x78>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 31ff 	mov.w	r1, #4294967295
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 ff91 	bl	8006d18 <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8001df6:	f107 0208 	add.w	r2, r7, #8
 8001dfa:	2364      	movs	r3, #100	; 0x64
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2304      	movs	r3, #4
 8001e00:	214e      	movs	r1, #78	; 0x4e
 8001e02:	4808      	ldr	r0, [pc, #32]	; (8001e24 <lcd_send_data+0x7c>)
 8001e04:	f001 fc98 	bl	8003738 <HAL_I2C_Master_Transmit>
	xSemaphoreGive(i2cSemphrHandle);
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <lcd_send_data+0x78>)
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	f004 fd0b 	bl	800682c <xQueueGenericSend>
}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200002ac 	.word	0x200002ac
 8001e24:	200002d0 	.word	0x200002d0

08001e28 <lcd_clear>:

void lcd_clear(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff ff7b 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(3 / portTICK_PERIOD_MS);
 8001e32:	2003      	movs	r0, #3
 8001e34:	f005 fc16 	bl	8007664 <vTaskDelay>
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <lcd_init>:

void lcd_init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x33);
 8001e40:	2033      	movs	r0, #51	; 0x33
 8001e42:	f7ff ff71 	bl	8001d28 <lcd_send_cmd>
	lcd_send_cmd(0x32);
 8001e46:	2032      	movs	r0, #50	; 0x32
 8001e48:	f7ff ff6e 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e4c:	2032      	movs	r0, #50	; 0x32
 8001e4e:	f005 fc09 	bl	8007664 <vTaskDelay>
	lcd_send_cmd(0x28);
 8001e52:	2028      	movs	r0, #40	; 0x28
 8001e54:	f7ff ff68 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e58:	2032      	movs	r0, #50	; 0x32
 8001e5a:	f005 fc03 	bl	8007664 <vTaskDelay>
	lcd_send_cmd(0x01);
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f7ff ff62 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f005 fbfd 	bl	8007664 <vTaskDelay>
	lcd_send_cmd(0x06);
 8001e6a:	2006      	movs	r0, #6
 8001e6c:	f7ff ff5c 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e70:	2032      	movs	r0, #50	; 0x32
 8001e72:	f005 fbf7 	bl	8007664 <vTaskDelay>
	lcd_send_cmd(0x0C);
 8001e76:	200c      	movs	r0, #12
 8001e78:	f7ff ff56 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e7c:	2032      	movs	r0, #50	; 0x32
 8001e7e:	f005 fbf1 	bl	8007664 <vTaskDelay>
	lcd_send_cmd(0x02);
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7ff ff50 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e88:	2032      	movs	r0, #50	; 0x32
 8001e8a:	f005 fbeb 	bl	8007664 <vTaskDelay>
	lcd_send_cmd(0x80);
 8001e8e:	2080      	movs	r0, #128	; 0x80
 8001e90:	f7ff ff4a 	bl	8001d28 <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001e94:	2032      	movs	r0, #50	; 0x32
 8001e96:	f005 fbe5 	bl	8007664 <vTaskDelay>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
	while(*str)
 8001ea6:	e006      	b.n	8001eb6 <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff79 	bl	8001da8 <lcd_send_data>
	while(*str)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f4      	bne.n	8001ea8 <lcd_send_string+0xa>
    }
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ecc:	f000 fac4 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ed0:	f000 f80f 	bl	8001ef2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed4:	f7ff fe56 	bl	8001b84 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001ed8:	f7fe fe9e 	bl	8000c18 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001edc:	f7ff feb6 	bl	8001c4c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001ee0:	f000 fa18 	bl	8002314 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001ee4:	f003 ff5a 	bl	8005d9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ee8:	f7ff f898 	bl	800101c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001eec:	f003 ff88 	bl	8005e00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <main+0x28>

08001ef2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b096      	sub	sp, #88	; 0x58
 8001ef6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001efc:	2228      	movs	r2, #40	; 0x28
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f007 fa1f 	bl	8009344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
 8001f24:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f34:	2301      	movs	r3, #1
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f42:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001f46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 fa7d 	bl	800444c <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001f58:	f000 f83a 	bl	8001fd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	2102      	movs	r1, #2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fce9 	bl	8004950 <HAL_RCC_ClockConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001f84:	f000 f824 	bl	8001fd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f90:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 fea3 	bl	8004ce0 <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001fa0:	f000 f816 	bl	8001fd0 <Error_Handler>
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	3758      	adds	r7, #88	; 0x58
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fbe:	f000 fa61 	bl	8002484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40012c00 	.word	0x40012c00

08001fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd4:	b672      	cpsid	i
}
 8001fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <Error_Handler+0x8>
	...

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_MspInit+0x68>)
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4a17      	ldr	r2, [pc, #92]	; (8002044 <HAL_MspInit+0x68>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6193      	str	r3, [r2, #24]
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_MspInit+0x68>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_MspInit+0x68>)
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_MspInit+0x68>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	61d3      	str	r3, [r2, #28]
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_MspInit+0x68>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	210f      	movs	r1, #15
 8002016:	f06f 0001 	mvn.w	r0, #1
 800201a:	f000 ff18 	bl	8002e4e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_MspInit+0x6c>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4a04      	ldr	r2, [pc, #16]	; (8002048 <HAL_MspInit+0x6c>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000

0800204c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08c      	sub	sp, #48	; 0x30
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800205c:	2200      	movs	r2, #0
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	2019      	movs	r0, #25
 8002062:	f000 fef4 	bl	8002e4e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002066:	2019      	movs	r0, #25
 8002068:	f000 ff0d 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800206c:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <HAL_InitTick+0x9c>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	4a1d      	ldr	r2, [pc, #116]	; (80020e8 <HAL_InitTick+0x9c>)
 8002072:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002076:	6193      	str	r3, [r2, #24]
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_InitTick+0x9c>)
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002084:	f107 0210 	add.w	r2, r7, #16
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f002 fdd8 	bl	8004c44 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002094:	f002 fdc2 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 8002098:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <HAL_InitTick+0xa0>)
 800209e:	fba2 2303 	umull	r2, r3, r2, r3
 80020a2:	0c9b      	lsrs	r3, r3, #18
 80020a4:	3b01      	subs	r3, #1
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_InitTick+0xa4>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_InitTick+0xa8>)
 80020ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_InitTick+0xa4>)
 80020b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80020b6:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <HAL_InitTick+0xa4>)
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_InitTick+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_InitTick+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80020c8:	4809      	ldr	r0, [pc, #36]	; (80020f0 <HAL_InitTick+0xa4>)
 80020ca:	f002 febf 	bl	8004e4c <HAL_TIM_Base_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80020d4:	4806      	ldr	r0, [pc, #24]	; (80020f0 <HAL_InitTick+0xa4>)
 80020d6:	f002 ff11 	bl	8004efc <HAL_TIM_Base_Start_IT>
 80020da:	4603      	mov	r3, r0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3730      	adds	r7, #48	; 0x30
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	431bde83 	.word	0x431bde83
 80020f0:	20000324 	.word	0x20000324
 80020f4:	40012c00 	.word	0x40012c00

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020fc:	e7fe      	b.n	80020fc <NMI_Handler+0x4>

080020fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fe:	b480      	push	{r7}
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002102:	e7fe      	b.n	8002102 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	e7fe      	b.n	8002108 <MemManage_Handler+0x4>

0800210a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210e:	e7fe      	b.n	800210e <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	e7fe      	b.n	8002114 <UsageFault_Handler+0x4>

08002116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr
	...

08002124 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <ADC1_2_IRQHandler+0x10>)
 800212a:	f000 fb73 	bl	8002814 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000026c 	.word	0x2000026c

08002138 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <TIM1_UP_IRQHandler+0x10>)
 800213e:	f002 ff3d 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000324 	.word	0x20000324

0800214c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <USART2_IRQHandler+0x10>)
 8002152:	f003 f9fb 	bl	800554c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000370 	.word	0x20000370

08002160 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002164:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002168:	f001 f98a 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800216c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002170:	f001 f986 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002174:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002178:	f001 f982 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800217c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002180:	f001 f97e 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
	return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr

08002196 <_kill>:

int _kill(int pid, int sig)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021a0:	f007 f888 	bl	80092b4 <__errno>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2216      	movs	r2, #22
 80021a8:	601a      	str	r2, [r3, #0]
	return -1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_exit>:

void _exit (int status)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021be:	f04f 31ff 	mov.w	r1, #4294967295
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffe7 	bl	8002196 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021c8:	e7fe      	b.n	80021c8 <_exit+0x12>

080021ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e00a      	b.n	80021f2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021dc:	f3af 8000 	nop.w
 80021e0:	4601      	mov	r1, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	b2ca      	uxtb	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	3301      	adds	r3, #1
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	dbf0      	blt.n	80021dc <_read+0x12>
	}

return len;
 80021fa:	687b      	ldr	r3, [r7, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e009      	b.n	800222a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	60ba      	str	r2, [r7, #8]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3301      	adds	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	429a      	cmp	r2, r3
 8002230:	dbf1      	blt.n	8002216 <_write+0x12>
	}
	return len;
 8002232:	687b      	ldr	r3, [r7, #4]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_close>:

int _close(int file)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	return -1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002262:	605a      	str	r2, [r3, #4]
	return 0;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <_isatty>:

int _isatty(int file)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	return 1;
 8002278:	2301      	movs	r3, #1
}
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
	return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr

0800229c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a4:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <_sbrk+0x5c>)
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <_sbrk+0x60>)
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <_sbrk+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d102      	bne.n	80022be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <_sbrk+0x64>)
 80022ba:	4a12      	ldr	r2, [pc, #72]	; (8002304 <_sbrk+0x68>)
 80022bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <_sbrk+0x64>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d207      	bcs.n	80022dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022cc:	f006 fff2 	bl	80092b4 <__errno>
 80022d0:	4603      	mov	r3, r0
 80022d2:	220c      	movs	r2, #12
 80022d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	e009      	b.n	80022f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e2:	4b07      	ldr	r3, [pc, #28]	; (8002300 <_sbrk+0x64>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	4a05      	ldr	r2, [pc, #20]	; (8002300 <_sbrk+0x64>)
 80022ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000c000 	.word	0x2000c000
 80022fc:	00000400 	.word	0x00000400
 8002300:	2000036c 	.word	0x2000036c
 8002304:	20002910 	.word	0x20002910

08002308 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <MX_USART2_UART_Init+0x50>)
 800231c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002334:	2200      	movs	r2, #0
 8002336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800233a:	220c      	movs	r2, #12
 800233c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_USART2_UART_Init+0x4c>)
 800234c:	f002 ffee 	bl	800532c <HAL_UART_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002356:	f7ff fe3b 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000370 	.word	0x20000370
 8002364:	40004400 	.word	0x40004400

08002368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0310 	add.w	r3, r7, #16
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <HAL_UART_MspInit+0x98>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d137      	bne.n	80023f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_UART_MspInit+0x9c>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <HAL_UART_MspInit+0x9c>)
 800238e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_UART_MspInit+0x9c>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_UART_MspInit+0x9c>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a17      	ldr	r2, [pc, #92]	; (8002404 <HAL_UART_MspInit+0x9c>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_UART_MspInit+0x9c>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023b8:	2304      	movs	r3, #4
 80023ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023c0:	2303      	movs	r3, #3
 80023c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	4619      	mov	r1, r3
 80023ca:	480f      	ldr	r0, [pc, #60]	; (8002408 <HAL_UART_MspInit+0xa0>)
 80023cc:	f000 feac 	bl	8003128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023d0:	2308      	movs	r3, #8
 80023d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	4619      	mov	r1, r3
 80023e2:	4809      	ldr	r0, [pc, #36]	; (8002408 <HAL_UART_MspInit+0xa0>)
 80023e4:	f000 fea0 	bl	8003128 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2105      	movs	r1, #5
 80023ec:	2026      	movs	r0, #38	; 0x26
 80023ee:	f000 fd2e 	bl	8002e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023f2:	2026      	movs	r0, #38	; 0x26
 80023f4:	f000 fd47 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3720      	adds	r7, #32
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40004400 	.word	0x40004400
 8002404:	40021000 	.word	0x40021000
 8002408:	40010800 	.word	0x40010800

0800240c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800240c:	480c      	ldr	r0, [pc, #48]	; (8002440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800240e:	490d      	ldr	r1, [pc, #52]	; (8002444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002410:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002414:	e002      	b.n	800241c <LoopCopyDataInit>

08002416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800241a:	3304      	adds	r3, #4

0800241c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800241c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002420:	d3f9      	bcc.n	8002416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002424:	4c0a      	ldr	r4, [pc, #40]	; (8002450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002428:	e001      	b.n	800242e <LoopFillZerobss>

0800242a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800242a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800242c:	3204      	adds	r2, #4

0800242e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002430:	d3fb      	bcc.n	800242a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002432:	f7ff ff69 	bl	8002308 <SystemInit>
/* Call static constructors */    bl __libc_init_array
 8002436:	f006 ff43 	bl	80092c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243a:	f7ff fd45 	bl	8001ec8 <main>
  bx lr
 800243e:	4770      	bx	lr
  ldr r0, =_sdata
 8002440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002444:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8002448:	0800e090 	.word	0x0800e090
  ldr r2, =_sbss
 800244c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8002450:	20002910 	.word	0x20002910

08002454 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002454:	e7fe      	b.n	8002454 <ADC3_IRQHandler>
	...

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x28>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x28>)
 8002462:	f043 0310 	orr.w	r3, r3, #16
 8002466:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 fce5 	bl	8002e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	200f      	movs	r0, #15
 8002470:	f7ff fdec 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff fdb2 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000

08002484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_IncTick+0x1c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_IncTick+0x20>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4413      	add	r3, r2
 8002494:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <HAL_IncTick+0x20>)
 8002496:	6013      	str	r3, [r2, #0]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	20000074 	.word	0x20000074
 80024a4:	200003b4 	.word	0x200003b4

080024a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b02      	ldr	r3, [pc, #8]	; (80024b8 <HAL_GetTick+0x10>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	200003b4 	.word	0x200003b4

080024bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0ce      	b.n	800267c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d109      	bne.n	8002500 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7fe fbca 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fba5 	bl	8002c50 <ADC_ConversionStop_Disable>
 8002506:	4603      	mov	r3, r0
 8002508:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 80a9 	bne.w	800266a <HAL_ADC_Init+0x1ae>
 8002518:	7dfb      	ldrb	r3, [r7, #23]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 80a5 	bne.w	800266a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002528:	f023 0302 	bic.w	r3, r3, #2
 800252c:	f043 0202 	orr.w	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4951      	ldr	r1, [pc, #324]	; (8002684 <HAL_ADC_Init+0x1c8>)
 800253e:	428b      	cmp	r3, r1
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_Init+0x9c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800254a:	d002      	beq.n	8002552 <HAL_ADC_Init+0x96>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	e004      	b.n	800255c <HAL_ADC_Init+0xa0>
 8002552:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002556:	e001      	b.n	800255c <HAL_ADC_Init+0xa0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800255c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7b1b      	ldrb	r3, [r3, #12]
 8002562:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002564:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002574:	d003      	beq.n	800257e <HAL_ADC_Init+0xc2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_ADC_Init+0xc8>
 800257e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002582:	e000      	b.n	8002586 <HAL_ADC_Init+0xca>
 8002584:	2300      	movs	r3, #0
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7d1b      	ldrb	r3, [r3, #20]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d119      	bne.n	80025c8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d109      	bne.n	80025b0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	035a      	lsls	r2, r3, #13
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e00b      	b.n	80025c8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	430a      	orrs	r2, r1
 80025da:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	4b29      	ldr	r3, [pc, #164]	; (8002688 <HAL_ADC_Init+0x1cc>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f8:	d003      	beq.n	8002602 <HAL_ADC_Init+0x146>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d104      	bne.n	800260c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	3b01      	subs	r3, #1
 8002608:	051b      	lsls	r3, r3, #20
 800260a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	430a      	orrs	r2, r1
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b19      	ldr	r3, [pc, #100]	; (800268c <HAL_ADC_Init+0x1d0>)
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	d10b      	bne.n	8002648 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	f023 0303 	bic.w	r3, r3, #3
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002646:	e018      	b.n	800267a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	f023 0312 	bic.w	r3, r3, #18
 8002650:	f043 0210 	orr.w	r2, r3, #16
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002668:	e007      	b.n	800267a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266e:	f043 0210 	orr.w	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800267a:	7dfb      	ldrb	r3, [r7, #23]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40013c00 	.word	0x40013c00
 8002688:	ffe1f7fd 	.word	0xffe1f7fd
 800268c:	ff1f0efe 	.word	0xff1f0efe

08002690 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <HAL_ADC_Start_IT+0x1a>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e0a0      	b.n	80027ec <HAL_ADC_Start_IT+0x15c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa72 	bl	8002b9c <ADC_Enable>
 80026b8:	4603      	mov	r3, r0
 80026ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f040 808f 	bne.w	80027e2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <HAL_ADC_Start_IT+0x164>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_Start_IT+0x5e>
 80026e2:	4b45      	ldr	r3, [pc, #276]	; (80027f8 <HAL_ADC_Start_IT+0x168>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d115      	bne.n	800271a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d026      	beq.n	8002756 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002710:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002718:	e01d      	b.n	8002756 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a33      	ldr	r2, [pc, #204]	; (80027f8 <HAL_ADC_Start_IT+0x168>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_ADC_Start_IT+0xaa>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2f      	ldr	r2, [pc, #188]	; (80027f4 <HAL_ADC_Start_IT+0x164>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10d      	bne.n	8002756 <HAL_ADC_Start_IT+0xc6>
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <HAL_ADC_Start_IT+0x168>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800274e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f023 0206 	bic.w	r2, r3, #6
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
 800276e:	e002      	b.n	8002776 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f06f 0202 	mvn.w	r2, #2
 8002786:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0220 	orr.w	r2, r2, #32
 8002796:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80027a6:	d113      	bne.n	80027d0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027ac:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <HAL_ADC_Start_IT+0x164>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d105      	bne.n	80027be <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80027b2:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <HAL_ADC_Start_IT+0x168>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d108      	bne.n	80027d0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	e00c      	b.n	80027ea <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	e003      	b.n	80027ea <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40012800 	.word	0x40012800
 80027f8:	40012400 	.word	0x40012400

080027fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b20      	cmp	r3, #32
 8002828:	d140      	bne.n	80028ac <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b02      	cmp	r3, #2
 8002836:	d139      	bne.n	80028ac <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d105      	bne.n	8002850 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002848:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800285a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800285e:	d11d      	bne.n	800289c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002864:	2b00      	cmp	r3, #0
 8002866:	d119      	bne.n	800289c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0220 	bic.w	r2, r2, #32
 8002876:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7fe fc1b 	bl	80010d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f06f 0212 	mvn.w	r2, #18
 80028aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b6:	2b80      	cmp	r3, #128	; 0x80
 80028b8:	d14f      	bne.n	800295a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0304 	and.w	r3, r3, #4
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d148      	bne.n	800295a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80028ea:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80028ee:	d012      	beq.n	8002916 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d125      	bne.n	800294a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002908:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800290c:	d11d      	bne.n	800294a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002912:	2b00      	cmp	r3, #0
 8002914:	d119      	bne.n	800294a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002924:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f9c1 	bl	8002cd2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 020c 	mvn.w	r2, #12
 8002958:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002964:	2b40      	cmp	r3, #64	; 0x40
 8002966:	d114      	bne.n	8002992 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d10d      	bne.n	8002992 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f809 	bl	800299a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0201 	mvn.w	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x20>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e0dc      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x1da>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d81c      	bhi.n	8002a16 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b05      	subs	r3, #5
 80029ee:	221f      	movs	r2, #31
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	4019      	ands	r1, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	3b05      	subs	r3, #5
 8002a08:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	635a      	str	r2, [r3, #52]	; 0x34
 8002a14:	e03c      	b.n	8002a90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b0c      	cmp	r3, #12
 8002a1c:	d81c      	bhi.n	8002a58 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b23      	subs	r3, #35	; 0x23
 8002a30:	221f      	movs	r2, #31
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4019      	ands	r1, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	3b23      	subs	r3, #35	; 0x23
 8002a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
 8002a56:	e01b      	b.n	8002a90 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	3b41      	subs	r3, #65	; 0x41
 8002a6a:	221f      	movs	r2, #31
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	4019      	ands	r1, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	3b41      	subs	r3, #65	; 0x41
 8002a84:	fa00 f203 	lsl.w	r2, r0, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b09      	cmp	r3, #9
 8002a96:	d91c      	bls.n	8002ad2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b1e      	subs	r3, #30
 8002aaa:	2207      	movs	r2, #7
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	4019      	ands	r1, r3
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	6898      	ldr	r0, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3b1e      	subs	r3, #30
 8002ac4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]
 8002ad0:	e019      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6919      	ldr	r1, [r3, #16]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	4019      	ands	r1, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	6898      	ldr	r0, [r3, #8]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d003      	beq.n	8002b16 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b12:	2b11      	cmp	r3, #17
 8002b14:	d132      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d125      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d126      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b3c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b10      	cmp	r3, #16
 8002b44:	d11a      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a13      	ldr	r2, [pc, #76]	; (8002b98 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	0c9a      	lsrs	r2, r3, #18
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x1b2>
 8002b6a:	e007      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr
 8002b90:	40012400 	.word	0x40012400
 8002b94:	2000006c 	.word	0x2000006c
 8002b98:	431bde83 	.word	0x431bde83

08002b9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d040      	beq.n	8002c3c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bca:	4b1f      	ldr	r3, [pc, #124]	; (8002c48 <ADC_Enable+0xac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <ADC_Enable+0xb0>)
 8002bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd4:	0c9b      	lsrs	r3, r3, #18
 8002bd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bd8:	e002      	b.n	8002be0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f9      	bne.n	8002bda <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002be6:	f7ff fc5f 	bl	80024a8 <HAL_GetTick>
 8002bea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bec:	e01f      	b.n	8002c2e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bee:	f7ff fc5b 	bl	80024a8 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d918      	bls.n	8002c2e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d011      	beq.n	8002c2e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e007      	b.n	8002c3e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d1d8      	bne.n	8002bee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	2000006c 	.word	0x2000006c
 8002c4c:	431bde83 	.word	0x431bde83

08002c50 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d12e      	bne.n	8002cc8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0201 	bic.w	r2, r2, #1
 8002c78:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c7a:	f7ff fc15 	bl	80024a8 <HAL_GetTick>
 8002c7e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c80:	e01b      	b.n	8002cba <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c82:	f7ff fc11 	bl	80024a8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d914      	bls.n	8002cba <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10d      	bne.n	8002cba <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d0dc      	beq.n	8002c82 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d00:	4013      	ands	r3, r2
 8002d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d16:	4a04      	ldr	r2, [pc, #16]	; (8002d28 <__NVIC_SetPriorityGrouping+0x44>)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	60d3      	str	r3, [r2, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <__NVIC_GetPriorityGrouping+0x18>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 0307 	and.w	r3, r3, #7
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	db0b      	blt.n	8002d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d5a:	79fb      	ldrb	r3, [r7, #7]
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	4906      	ldr	r1, [pc, #24]	; (8002d7c <__NVIC_EnableIRQ+0x34>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2001      	movs	r0, #1
 8002d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr

08002e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff4f 	bl	8002ce4 <__NVIC_SetPriorityGrouping>
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	607a      	str	r2, [r7, #4]
 8002e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e60:	f7ff ff64 	bl	8002d2c <__NVIC_GetPriorityGrouping>
 8002e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ffb2 	bl	8002dd4 <NVIC_EncodePriority>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff81 	bl	8002d80 <__NVIC_SetPriority>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff57 	bl	8002d48 <__NVIC_EnableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b085      	sub	sp, #20
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d008      	beq.n	8002eca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2204      	movs	r2, #4
 8002ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e020      	b.n	8002f0c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 020e 	bic.w	r2, r2, #14
 8002ed8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d005      	beq.n	8002f3a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2204      	movs	r2, #4
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e0d6      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020e 	bic.w	r2, r2, #14
 8002f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b64      	ldr	r3, [pc, #400]	; (80030f4 <HAL_DMA_Abort_IT+0x1dc>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d958      	bls.n	8003018 <HAL_DMA_Abort_IT+0x100>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_DMA_Abort_IT+0x1e0>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d04f      	beq.n	8003010 <HAL_DMA_Abort_IT+0xf8>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a61      	ldr	r2, [pc, #388]	; (80030fc <HAL_DMA_Abort_IT+0x1e4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d048      	beq.n	800300c <HAL_DMA_Abort_IT+0xf4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a60      	ldr	r2, [pc, #384]	; (8003100 <HAL_DMA_Abort_IT+0x1e8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d040      	beq.n	8003006 <HAL_DMA_Abort_IT+0xee>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a5e      	ldr	r2, [pc, #376]	; (8003104 <HAL_DMA_Abort_IT+0x1ec>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d038      	beq.n	8003000 <HAL_DMA_Abort_IT+0xe8>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5d      	ldr	r2, [pc, #372]	; (8003108 <HAL_DMA_Abort_IT+0x1f0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d030      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xe2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5b      	ldr	r2, [pc, #364]	; (800310c <HAL_DMA_Abort_IT+0x1f4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d028      	beq.n	8002ff4 <HAL_DMA_Abort_IT+0xdc>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a53      	ldr	r2, [pc, #332]	; (80030f4 <HAL_DMA_Abort_IT+0x1dc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d020      	beq.n	8002fee <HAL_DMA_Abort_IT+0xd6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a57      	ldr	r2, [pc, #348]	; (8003110 <HAL_DMA_Abort_IT+0x1f8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <HAL_DMA_Abort_IT+0xd2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a56      	ldr	r2, [pc, #344]	; (8003114 <HAL_DMA_Abort_IT+0x1fc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d012      	beq.n	8002fe6 <HAL_DMA_Abort_IT+0xce>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a54      	ldr	r2, [pc, #336]	; (8003118 <HAL_DMA_Abort_IT+0x200>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_DMA_Abort_IT+0xc8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a53      	ldr	r2, [pc, #332]	; (800311c <HAL_DMA_Abort_IT+0x204>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d102      	bne.n	8002fda <HAL_DMA_Abort_IT+0xc2>
 8002fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd8:	e01b      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fde:	e018      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fe4:	e015      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	e013      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e011      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002fee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ff2:	e00e      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ff8:	e00b      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8002ffa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ffe:	e008      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8003000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003004:	e005      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8003006:	f44f 7380 	mov.w	r3, #256	; 0x100
 800300a:	e002      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 800300c:	2310      	movs	r3, #16
 800300e:	e000      	b.n	8003012 <HAL_DMA_Abort_IT+0xfa>
 8003010:	2301      	movs	r3, #1
 8003012:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_DMA_Abort_IT+0x208>)
 8003014:	6053      	str	r3, [r2, #4]
 8003016:	e057      	b.n	80030c8 <HAL_DMA_Abort_IT+0x1b0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a36      	ldr	r2, [pc, #216]	; (80030f8 <HAL_DMA_Abort_IT+0x1e0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04f      	beq.n	80030c2 <HAL_DMA_Abort_IT+0x1aa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a35      	ldr	r2, [pc, #212]	; (80030fc <HAL_DMA_Abort_IT+0x1e4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d048      	beq.n	80030be <HAL_DMA_Abort_IT+0x1a6>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a33      	ldr	r2, [pc, #204]	; (8003100 <HAL_DMA_Abort_IT+0x1e8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d040      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x1a0>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a32      	ldr	r2, [pc, #200]	; (8003104 <HAL_DMA_Abort_IT+0x1ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d038      	beq.n	80030b2 <HAL_DMA_Abort_IT+0x19a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a30      	ldr	r2, [pc, #192]	; (8003108 <HAL_DMA_Abort_IT+0x1f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d030      	beq.n	80030ac <HAL_DMA_Abort_IT+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2f      	ldr	r2, [pc, #188]	; (800310c <HAL_DMA_Abort_IT+0x1f4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d028      	beq.n	80030a6 <HAL_DMA_Abort_IT+0x18e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a26      	ldr	r2, [pc, #152]	; (80030f4 <HAL_DMA_Abort_IT+0x1dc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d020      	beq.n	80030a0 <HAL_DMA_Abort_IT+0x188>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <HAL_DMA_Abort_IT+0x1f8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d019      	beq.n	800309c <HAL_DMA_Abort_IT+0x184>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_DMA_Abort_IT+0x1fc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d012      	beq.n	8003098 <HAL_DMA_Abort_IT+0x180>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a28      	ldr	r2, [pc, #160]	; (8003118 <HAL_DMA_Abort_IT+0x200>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00a      	beq.n	8003092 <HAL_DMA_Abort_IT+0x17a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a26      	ldr	r2, [pc, #152]	; (800311c <HAL_DMA_Abort_IT+0x204>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d102      	bne.n	800308c <HAL_DMA_Abort_IT+0x174>
 8003086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308a:	e01b      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 800308c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003090:	e018      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 8003092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003096:	e015      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 8003098:	2310      	movs	r3, #16
 800309a:	e013      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 800309c:	2301      	movs	r3, #1
 800309e:	e011      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a4:	e00e      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030aa:	e00b      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b0:	e008      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b6:	e005      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030bc:	e002      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030be:	2310      	movs	r3, #16
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_Abort_IT+0x1ac>
 80030c2:	2301      	movs	r3, #1
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_DMA_Abort_IT+0x20c>)
 80030c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
    } 
  }
  return status;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40020080 	.word	0x40020080
 80030f8:	40020008 	.word	0x40020008
 80030fc:	4002001c 	.word	0x4002001c
 8003100:	40020030 	.word	0x40020030
 8003104:	40020044 	.word	0x40020044
 8003108:	40020058 	.word	0x40020058
 800310c:	4002006c 	.word	0x4002006c
 8003110:	40020408 	.word	0x40020408
 8003114:	4002041c 	.word	0x4002041c
 8003118:	40020430 	.word	0x40020430
 800311c:	40020444 	.word	0x40020444
 8003120:	40020400 	.word	0x40020400
 8003124:	40020000 	.word	0x40020000

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b08b      	sub	sp, #44	; 0x2c
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003132:	2300      	movs	r3, #0
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003136:	2300      	movs	r3, #0
 8003138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800313a:	e179      	b.n	8003430 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800313c:	2201      	movs	r2, #1
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	429a      	cmp	r2, r3
 8003156:	f040 8168 	bne.w	800342a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4a96      	ldr	r2, [pc, #600]	; (80033b8 <HAL_GPIO_Init+0x290>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d05e      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003164:	4a94      	ldr	r2, [pc, #592]	; (80033b8 <HAL_GPIO_Init+0x290>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d875      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 800316a:	4a94      	ldr	r2, [pc, #592]	; (80033bc <HAL_GPIO_Init+0x294>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d058      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003170:	4a92      	ldr	r2, [pc, #584]	; (80033bc <HAL_GPIO_Init+0x294>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d86f      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 8003176:	4a92      	ldr	r2, [pc, #584]	; (80033c0 <HAL_GPIO_Init+0x298>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d052      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 800317c:	4a90      	ldr	r2, [pc, #576]	; (80033c0 <HAL_GPIO_Init+0x298>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d869      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 8003182:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <HAL_GPIO_Init+0x29c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04c      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003188:	4a8e      	ldr	r2, [pc, #568]	; (80033c4 <HAL_GPIO_Init+0x29c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d863      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 800318e:	4a8e      	ldr	r2, [pc, #568]	; (80033c8 <HAL_GPIO_Init+0x2a0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d046      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
 8003194:	4a8c      	ldr	r2, [pc, #560]	; (80033c8 <HAL_GPIO_Init+0x2a0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d85d      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 800319a:	2b12      	cmp	r3, #18
 800319c:	d82a      	bhi.n	80031f4 <HAL_GPIO_Init+0xcc>
 800319e:	2b12      	cmp	r3, #18
 80031a0:	d859      	bhi.n	8003256 <HAL_GPIO_Init+0x12e>
 80031a2:	a201      	add	r2, pc, #4	; (adr r2, 80031a8 <HAL_GPIO_Init+0x80>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	08003223 	.word	0x08003223
 80031ac:	080031fd 	.word	0x080031fd
 80031b0:	0800320f 	.word	0x0800320f
 80031b4:	08003251 	.word	0x08003251
 80031b8:	08003257 	.word	0x08003257
 80031bc:	08003257 	.word	0x08003257
 80031c0:	08003257 	.word	0x08003257
 80031c4:	08003257 	.word	0x08003257
 80031c8:	08003257 	.word	0x08003257
 80031cc:	08003257 	.word	0x08003257
 80031d0:	08003257 	.word	0x08003257
 80031d4:	08003257 	.word	0x08003257
 80031d8:	08003257 	.word	0x08003257
 80031dc:	08003257 	.word	0x08003257
 80031e0:	08003257 	.word	0x08003257
 80031e4:	08003257 	.word	0x08003257
 80031e8:	08003257 	.word	0x08003257
 80031ec:	08003205 	.word	0x08003205
 80031f0:	08003219 	.word	0x08003219
 80031f4:	4a75      	ldr	r2, [pc, #468]	; (80033cc <HAL_GPIO_Init+0x2a4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031fa:	e02c      	b.n	8003256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	623b      	str	r3, [r7, #32]
          break;
 8003202:	e029      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	3304      	adds	r3, #4
 800320a:	623b      	str	r3, [r7, #32]
          break;
 800320c:	e024      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	3308      	adds	r3, #8
 8003214:	623b      	str	r3, [r7, #32]
          break;
 8003216:	e01f      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	330c      	adds	r3, #12
 800321e:	623b      	str	r3, [r7, #32]
          break;
 8003220:	e01a      	b.n	8003258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800322a:	2304      	movs	r3, #4
 800322c:	623b      	str	r3, [r7, #32]
          break;
 800322e:	e013      	b.n	8003258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003238:	2308      	movs	r3, #8
 800323a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	611a      	str	r2, [r3, #16]
          break;
 8003242:	e009      	b.n	8003258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003244:	2308      	movs	r3, #8
 8003246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	615a      	str	r2, [r3, #20]
          break;
 800324e:	e003      	b.n	8003258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003250:	2300      	movs	r3, #0
 8003252:	623b      	str	r3, [r7, #32]
          break;
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x130>
          break;
 8003256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2bff      	cmp	r3, #255	; 0xff
 800325c:	d801      	bhi.n	8003262 <HAL_GPIO_Init+0x13a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	e001      	b.n	8003266 <HAL_GPIO_Init+0x13e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3304      	adds	r3, #4
 8003266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2bff      	cmp	r3, #255	; 0xff
 800326c:	d802      	bhi.n	8003274 <HAL_GPIO_Init+0x14c>
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	e002      	b.n	800327a <HAL_GPIO_Init+0x152>
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	3b08      	subs	r3, #8
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	210f      	movs	r1, #15
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	6a39      	ldr	r1, [r7, #32]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	431a      	orrs	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80c1 	beq.w	800342a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032a8:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_GPIO_Init+0x2a8>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_GPIO_Init+0x2a8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6193      	str	r3, [r2, #24]
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <HAL_GPIO_Init+0x2a8>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032c0:	4a44      	ldr	r2, [pc, #272]	; (80033d4 <HAL_GPIO_Init+0x2ac>)
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	089b      	lsrs	r3, r3, #2
 80032c6:	3302      	adds	r3, #2
 80032c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	220f      	movs	r2, #15
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4013      	ands	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a3c      	ldr	r2, [pc, #240]	; (80033d8 <HAL_GPIO_Init+0x2b0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01f      	beq.n	800332c <HAL_GPIO_Init+0x204>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_GPIO_Init+0x2b4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d019      	beq.n	8003328 <HAL_GPIO_Init+0x200>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_GPIO_Init+0x2b8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_GPIO_Init+0x1fc>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a39      	ldr	r2, [pc, #228]	; (80033e4 <HAL_GPIO_Init+0x2bc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00d      	beq.n	8003320 <HAL_GPIO_Init+0x1f8>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a38      	ldr	r2, [pc, #224]	; (80033e8 <HAL_GPIO_Init+0x2c0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x1f4>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a37      	ldr	r2, [pc, #220]	; (80033ec <HAL_GPIO_Init+0x2c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d101      	bne.n	8003318 <HAL_GPIO_Init+0x1f0>
 8003314:	2305      	movs	r3, #5
 8003316:	e00a      	b.n	800332e <HAL_GPIO_Init+0x206>
 8003318:	2306      	movs	r3, #6
 800331a:	e008      	b.n	800332e <HAL_GPIO_Init+0x206>
 800331c:	2304      	movs	r3, #4
 800331e:	e006      	b.n	800332e <HAL_GPIO_Init+0x206>
 8003320:	2303      	movs	r3, #3
 8003322:	e004      	b.n	800332e <HAL_GPIO_Init+0x206>
 8003324:	2302      	movs	r3, #2
 8003326:	e002      	b.n	800332e <HAL_GPIO_Init+0x206>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_GPIO_Init+0x206>
 800332c:	2300      	movs	r3, #0
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	f002 0203 	and.w	r2, r2, #3
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	4093      	lsls	r3, r2
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800333e:	4925      	ldr	r1, [pc, #148]	; (80033d4 <HAL_GPIO_Init+0x2ac>)
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003358:	4b25      	ldr	r3, [pc, #148]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4924      	ldr	r1, [pc, #144]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	43db      	mvns	r3, r3
 800336e:	4920      	ldr	r1, [pc, #128]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 8003370:	4013      	ands	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d006      	beq.n	800338e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	491a      	ldr	r1, [pc, #104]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
 800338c:	e006      	b.n	800339c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	43db      	mvns	r3, r3
 8003396:	4916      	ldr	r1, [pc, #88]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 8003398:	4013      	ands	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d025      	beq.n	80033f4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4910      	ldr	r1, [pc, #64]	; (80033f0 <HAL_GPIO_Init+0x2c8>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
 80033b4:	e025      	b.n	8003402 <HAL_GPIO_Init+0x2da>
 80033b6:	bf00      	nop
 80033b8:	10320000 	.word	0x10320000
 80033bc:	10310000 	.word	0x10310000
 80033c0:	10220000 	.word	0x10220000
 80033c4:	10210000 	.word	0x10210000
 80033c8:	10120000 	.word	0x10120000
 80033cc:	10110000 	.word	0x10110000
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40010000 	.word	0x40010000
 80033d8:	40010800 	.word	0x40010800
 80033dc:	40010c00 	.word	0x40010c00
 80033e0:	40011000 	.word	0x40011000
 80033e4:	40011400 	.word	0x40011400
 80033e8:	40011800 	.word	0x40011800
 80033ec:	40011c00 	.word	0x40011c00
 80033f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033f4:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_GPIO_Init+0x324>)
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	4913      	ldr	r1, [pc, #76]	; (800344c <HAL_GPIO_Init+0x324>)
 80033fe:	4013      	ands	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_GPIO_Init+0x324>)
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_GPIO_Init+0x324>)
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	60cb      	str	r3, [r1, #12]
 800341a:	e006      	b.n	800342a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_GPIO_Init+0x324>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	43db      	mvns	r3, r3
 8003424:	4909      	ldr	r1, [pc, #36]	; (800344c <HAL_GPIO_Init+0x324>)
 8003426:	4013      	ands	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	3301      	adds	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	f47f ae7e 	bne.w	800313c <HAL_GPIO_Init+0x14>
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	372c      	adds	r7, #44	; 0x2c
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
 800345c:	4613      	mov	r3, r2
 800345e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003460:	787b      	ldrb	r3, [r7, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003466:	887a      	ldrh	r2, [r7, #2]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800346c:	e003      	b.n	8003476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800346e:	887b      	ldrh	r3, [r7, #2]
 8003470:	041a      	lsls	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	611a      	str	r2, [r3, #16]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fe36 	bl	8001110 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40010400 	.word	0x40010400

080034b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e12b      	b.n	800371a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fbe6 	bl	8001ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003514:	f001 fb6e 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a81      	ldr	r2, [pc, #516]	; (8003724 <HAL_I2C_Init+0x274>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d807      	bhi.n	8003534 <HAL_I2C_Init+0x84>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a80      	ldr	r2, [pc, #512]	; (8003728 <HAL_I2C_Init+0x278>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e006      	b.n	8003542 <HAL_I2C_Init+0x92>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a7d      	ldr	r2, [pc, #500]	; (800372c <HAL_I2C_Init+0x27c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	bf94      	ite	ls
 800353c:	2301      	movls	r3, #1
 800353e:	2300      	movhi	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0e7      	b.n	800371a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a78      	ldr	r2, [pc, #480]	; (8003730 <HAL_I2C_Init+0x280>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0c9b      	lsrs	r3, r3, #18
 8003554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a6a      	ldr	r2, [pc, #424]	; (8003724 <HAL_I2C_Init+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d802      	bhi.n	8003584 <HAL_I2C_Init+0xd4>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3301      	adds	r3, #1
 8003582:	e009      	b.n	8003598 <HAL_I2C_Init+0xe8>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_I2C_Init+0x284>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	3301      	adds	r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	430b      	orrs	r3, r1
 800359e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	495c      	ldr	r1, [pc, #368]	; (8003724 <HAL_I2C_Init+0x274>)
 80035b4:	428b      	cmp	r3, r1
 80035b6:	d819      	bhi.n	80035ec <HAL_I2C_Init+0x13c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e59      	subs	r1, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035cc:	400b      	ands	r3, r1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_I2C_Init+0x138>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e59      	subs	r1, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	e051      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e04f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <HAL_I2C_Init+0x168>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e012      	b.n	800363e <HAL_I2C_Init+0x18e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x196>
 8003642:	2301      	movs	r3, #1
 8003644:	e022      	b.n	800368c <HAL_I2C_Init+0x1dc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10e      	bne.n	800366c <HAL_I2C_Init+0x1bc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1e58      	subs	r0, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366a:	e00f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6809      	ldr	r1, [r1, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6911      	ldr	r1, [r2, #16]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	000186a0 	.word	0x000186a0
 8003728:	001e847f 	.word	0x001e847f
 800372c:	003d08ff 	.word	0x003d08ff
 8003730:	431bde83 	.word	0x431bde83
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	817b      	strh	r3, [r7, #10]
 8003748:	4613      	mov	r3, r2
 800374a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800374c:	f7fe feac 	bl	80024a8 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 80e0 	bne.w	8003920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2319      	movs	r3, #25
 8003766:	2201      	movs	r2, #1
 8003768:	4970      	ldr	r1, [pc, #448]	; (800392c <HAL_I2C_Master_Transmit+0x1f4>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fc92 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	e0d3      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2C_Master_Transmit+0x50>
 8003784:	2302      	movs	r3, #2
 8003786:	e0cc      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d007      	beq.n	80037ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2221      	movs	r2, #33	; 0x21
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2210      	movs	r2, #16
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_I2C_Master_Transmit+0x1f8>)
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fafc 	bl	8003df4 <I2C_MasterRequestWrite>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e08d      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800381c:	e066      	b.n	80038ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fd0c 	bl	8004240 <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06b      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11b      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x188>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d017      	beq.n	80038c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	6a39      	ldr	r1, [r7, #32]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fcfc 	bl	80042c2 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01a      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d194      	bne.n	800381e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	00100002 	.word	0x00100002
 8003930:	ffff0000 	.word	0xffff0000

08003934 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08c      	sub	sp, #48	; 0x30
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	461a      	mov	r2, r3
 8003940:	460b      	mov	r3, r1
 8003942:	817b      	strh	r3, [r7, #10]
 8003944:	4613      	mov	r3, r2
 8003946:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800394c:	f7fe fdac 	bl	80024a8 <HAL_GetTick>
 8003950:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	f040 823f 	bne.w	8003dde <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	2319      	movs	r3, #25
 8003966:	2201      	movs	r2, #1
 8003968:	497f      	ldr	r1, [pc, #508]	; (8003b68 <HAL_I2C_Master_Receive+0x234>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fb92 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
 8003978:	e232      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d101      	bne.n	8003988 <HAL_I2C_Master_Receive+0x54>
 8003984:	2302      	movs	r3, #2
 8003986:	e22b      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b01      	cmp	r3, #1
 800399c:	d007      	beq.n	80039ae <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f042 0201 	orr.w	r2, r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2222      	movs	r2, #34	; 0x22
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2210      	movs	r2, #16
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	893a      	ldrh	r2, [r7, #8]
 80039de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4a5f      	ldr	r2, [pc, #380]	; (8003b6c <HAL_I2C_Master_Receive+0x238>)
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039f0:	8979      	ldrh	r1, [r7, #10]
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 fa7e 	bl	8003ef8 <I2C_MasterRequestRead>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e1ec      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d113      	bne.n	8003a36 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e1c0      	b.n	8003db8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d11e      	bne.n	8003a7c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4e:	b672      	cpsid	i
}
 8003a50:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	61bb      	str	r3, [r7, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a76:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a78:	b662      	cpsie	i
}
 8003a7a:	e035      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d11e      	bne.n	8003ac2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a94:	b672      	cpsid	i
}
 8003a96:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003abc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003abe:	b662      	cpsie	i
}
 8003ac0:	e012      	b.n	8003ae8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ae8:	e166      	b.n	8003db8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	f200 811f 	bhi.w	8003d32 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d123      	bne.n	8003b44 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fc1f 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e167      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b42:	e139      	b.n	8003db8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d152      	bne.n	8003bf2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	2200      	movs	r2, #0
 8003b54:	4906      	ldr	r1, [pc, #24]	; (8003b70 <HAL_I2C_Master_Receive+0x23c>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fa9c 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e13c      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
 8003b66:	bf00      	nop
 8003b68:	00100002 	.word	0x00100002
 8003b6c:	ffff0000 	.word	0xffff0000
 8003b70:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b74:	b672      	cpsid	i
}
 8003b76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bba:	b662      	cpsie	i
}
 8003bbc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf0:	e0e2      	b.n	8003db8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	497b      	ldr	r1, [pc, #492]	; (8003de8 <HAL_I2C_Master_Receive+0x4b4>)
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fa49 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0e9      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c1c:	b672      	cpsid	i
}
 8003c1e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c52:	4b66      	ldr	r3, [pc, #408]	; (8003dec <HAL_I2C_Master_Receive+0x4b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	08db      	lsrs	r3, r3, #3
 8003c58:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <HAL_I2C_Master_Receive+0x4bc>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0a1a      	lsrs	r2, r3, #8
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00da      	lsls	r2, r3, #3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d118      	bne.n	8003caa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f043 0220 	orr.w	r2, r3, #32
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c9a:	b662      	cpsie	i
}
 8003c9c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e09a      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d1d9      	bne.n	8003c6c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691a      	ldr	r2, [r3, #16]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	b2d2      	uxtb	r2, r2
 8003cd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cfa:	b662      	cpsie	i
}
 8003cfc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	b2d2      	uxtb	r2, r2
 8003d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d30:	e042      	b.n	8003db8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 fb04 	bl	8004344 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e04c      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d118      	bne.n	8003db8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	b2d2      	uxtb	r2, r2
 8003d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f47f ae94 	bne.w	8003aea <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00010004 	.word	0x00010004
 8003dec:	2000006c 	.word	0x2000006c
 8003df0:	14f8b589 	.word	0x14f8b589

08003df4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	603b      	str	r3, [r7, #0]
 8003e00:	460b      	mov	r3, r1
 8003e02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d006      	beq.n	8003e1e <I2C_MasterRequestWrite+0x2a>
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d003      	beq.n	8003e1e <I2C_MasterRequestWrite+0x2a>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e1c:	d108      	bne.n	8003e30 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	e00b      	b.n	8003e48 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	2b12      	cmp	r3, #18
 8003e36:	d107      	bne.n	8003e48 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e46:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f000 f91d 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6e:	d103      	bne.n	8003e78 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e035      	b.n	8003ee8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e84:	d108      	bne.n	8003e98 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e86:	897b      	ldrh	r3, [r7, #10]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e94:	611a      	str	r2, [r3, #16]
 8003e96:	e01b      	b.n	8003ed0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e98:	897b      	ldrh	r3, [r7, #10]
 8003e9a:	11db      	asrs	r3, r3, #7
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	f003 0306 	and.w	r3, r3, #6
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f063 030f 	orn	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <I2C_MasterRequestWrite+0xfc>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f943 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e010      	b.n	8003ee8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ec6:	897b      	ldrh	r3, [r7, #10]
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	4907      	ldr	r1, [pc, #28]	; (8003ef4 <I2C_MasterRequestWrite+0x100>)
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f933 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00010008 	.word	0x00010008
 8003ef4:	00010002 	.word	0x00010002

08003ef8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d006      	beq.n	8003f32 <I2C_MasterRequestRead+0x3a>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d003      	beq.n	8003f32 <I2C_MasterRequestRead+0x3a>
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f30:	d108      	bne.n	8003f44 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e00b      	b.n	8003f5c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f48:	2b11      	cmp	r3, #17
 8003f4a:	d107      	bne.n	8003f5c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f893 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00d      	beq.n	8003f90 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f82:	d103      	bne.n	8003f8c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e079      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f98:	d108      	bne.n	8003fac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]
 8003faa:	e05f      	b.n	800406c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fac:	897b      	ldrh	r3, [r7, #10]
 8003fae:	11db      	asrs	r3, r3, #7
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	f003 0306 	and.w	r3, r3, #6
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	f063 030f 	orn	r3, r3, #15
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	4930      	ldr	r1, [pc, #192]	; (800408c <I2C_MasterRequestRead+0x194>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 f8b9 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e054      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fda:	897b      	ldrh	r3, [r7, #10]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4929      	ldr	r1, [pc, #164]	; (8004090 <I2C_MasterRequestRead+0x198>)
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 f8a9 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e044      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	613b      	str	r3, [r7, #16]
 800400e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f831 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004046:	d103      	bne.n	8004050 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800404e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e017      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004054:	897b      	ldrh	r3, [r7, #10]
 8004056:	11db      	asrs	r3, r3, #7
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0306 	and.w	r3, r3, #6
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f063 030e 	orn	r3, r3, #14
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4907      	ldr	r1, [pc, #28]	; (8004090 <I2C_MasterRequestRead+0x198>)
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f865 	bl	8004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e000      	b.n	8004084 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	00010008 	.word	0x00010008
 8004090:	00010002 	.word	0x00010002

08004094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a4:	e025      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d021      	beq.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ae:	f7fe f9fb 	bl	80024a8 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d116      	bne.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e023      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d10d      	bne.n	8004118 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	43da      	mvns	r2, r3
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	4013      	ands	r3, r2
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	e00c      	b.n	8004132 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	43da      	mvns	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d0b6      	beq.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004150:	e051      	b.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004160:	d123      	bne.n	80041aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004170:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800417a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0204 	orr.w	r2, r3, #4
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e046      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d021      	beq.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b2:	f7fe f979 	bl	80024a8 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d116      	bne.n	80041f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f043 0220 	orr.w	r2, r3, #32
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e020      	b.n	8004238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0c1b      	lsrs	r3, r3, #16
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10c      	bne.n	800421a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	43da      	mvns	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4013      	ands	r3, r2
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf14      	ite	ne
 8004212:	2301      	movne	r3, #1
 8004214:	2300      	moveq	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e00b      	b.n	8004232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	43da      	mvns	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	4013      	ands	r3, r2
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf14      	ite	ne
 800422c:	2301      	movne	r3, #1
 800422e:	2300      	moveq	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d18d      	bne.n	8004152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800424c:	e02d      	b.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8ce 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e02d      	b.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d021      	beq.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe f91f 	bl	80024a8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d116      	bne.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	f043 0220 	orr.w	r2, r3, #32
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e007      	b.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d1ca      	bne.n	800424e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b084      	sub	sp, #16
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	60f8      	str	r0, [r7, #12]
 80042ca:	60b9      	str	r1, [r7, #8]
 80042cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ce:	e02d      	b.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f88d 	bl	80043f0 <I2C_IsAcknowledgeFailed>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e02d      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e6:	d021      	beq.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042e8:	f7fe f8de 	bl	80024a8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d302      	bcc.n	80042fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e007      	b.n	800433c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b04      	cmp	r3, #4
 8004338:	d1ca      	bne.n	80042d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004350:	e042      	b.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b10      	cmp	r3, #16
 800435e:	d119      	bne.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0210 	mvn.w	r2, #16
 8004368:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e029      	b.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fe f888 	bl	80024a8 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	f043 0220 	orr.w	r2, r3, #32
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e007      	b.n	80043e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e2:	2b40      	cmp	r3, #64	; 0x40
 80043e4:	d1b5      	bne.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004406:	d11b      	bne.n	8004440 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004410:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0204 	orr.w	r2, r3, #4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e272      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	f000 8087 	beq.w	800457a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800446c:	4b92      	ldr	r3, [pc, #584]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	2b04      	cmp	r3, #4
 8004476:	d00c      	beq.n	8004492 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004478:	4b8f      	ldr	r3, [pc, #572]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 030c 	and.w	r3, r3, #12
 8004480:	2b08      	cmp	r3, #8
 8004482:	d112      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
 8004484:	4b8c      	ldr	r3, [pc, #560]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004490:	d10b      	bne.n	80044aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004492:	4b89      	ldr	r3, [pc, #548]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d06c      	beq.n	8004578 <HAL_RCC_OscConfig+0x12c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d168      	bne.n	8004578 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e24c      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x76>
 80044b4:	4b80      	ldr	r3, [pc, #512]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a7f      	ldr	r2, [pc, #508]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e02e      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a7a      	ldr	r2, [pc, #488]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b78      	ldr	r3, [pc, #480]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a77      	ldr	r2, [pc, #476]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e01d      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ec:	d10c      	bne.n	8004508 <HAL_RCC_OscConfig+0xbc>
 80044ee:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a71      	ldr	r2, [pc, #452]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b6f      	ldr	r3, [pc, #444]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e00b      	b.n	8004520 <HAL_RCC_OscConfig+0xd4>
 8004508:	4b6b      	ldr	r3, [pc, #428]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a6a      	ldr	r2, [pc, #424]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4b68      	ldr	r3, [pc, #416]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a67      	ldr	r2, [pc, #412]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800451a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d013      	beq.n	8004550 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd ffbe 	bl	80024a8 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fd ffba 	bl	80024a8 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e200      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	4b5d      	ldr	r3, [pc, #372]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0xe4>
 800454e:	e014      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004550:	f7fd ffaa 	bl	80024a8 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004558:	f7fd ffa6 	bl	80024a8 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b64      	cmp	r3, #100	; 0x64
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1ec      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800456a:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x10c>
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d063      	beq.n	800464e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004586:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00b      	beq.n	80045aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004592:	4b49      	ldr	r3, [pc, #292]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b08      	cmp	r3, #8
 800459c:	d11c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x18c>
 800459e:	4b46      	ldr	r3, [pc, #280]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d116      	bne.n	80045d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045aa:	4b43      	ldr	r3, [pc, #268]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <HAL_RCC_OscConfig+0x176>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e1c0      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4939      	ldr	r1, [pc, #228]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d6:	e03a      	b.n	800464e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d020      	beq.n	8004622 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e0:	4b36      	ldr	r3, [pc, #216]	; (80046bc <HAL_RCC_OscConfig+0x270>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd ff5f 	bl	80024a8 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ee:	f7fd ff5b 	bl	80024a8 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e1a1      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004600:	4b2d      	ldr	r3, [pc, #180]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b2a      	ldr	r3, [pc, #168]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4927      	ldr	r1, [pc, #156]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 800461c:	4313      	orrs	r3, r2
 800461e:	600b      	str	r3, [r1, #0]
 8004620:	e015      	b.n	800464e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004622:	4b26      	ldr	r3, [pc, #152]	; (80046bc <HAL_RCC_OscConfig+0x270>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd ff3e 	bl	80024a8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004630:	f7fd ff3a 	bl	80024a8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e180      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004642:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d03a      	beq.n	80046d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d019      	beq.n	8004696 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_RCC_OscConfig+0x274>)
 8004664:	2201      	movs	r2, #1
 8004666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004668:	f7fd ff1e 	bl	80024a8 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7fd ff1a 	bl	80024a8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e160      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004682:	4b0d      	ldr	r3, [pc, #52]	; (80046b8 <HAL_RCC_OscConfig+0x26c>)
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800468e:	2001      	movs	r0, #1
 8004690:	f000 fb08 	bl	8004ca4 <RCC_Delay>
 8004694:	e01c      	b.n	80046d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004696:	4b0a      	ldr	r3, [pc, #40]	; (80046c0 <HAL_RCC_OscConfig+0x274>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800469c:	f7fd ff04 	bl	80024a8 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a2:	e00f      	b.n	80046c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd ff00 	bl	80024a8 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d908      	bls.n	80046c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e146      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	42420000 	.word	0x42420000
 80046c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c4:	4b92      	ldr	r3, [pc, #584]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e9      	bne.n	80046a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a6 	beq.w	800482a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046de:	2300      	movs	r3, #0
 80046e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046e2:	4b8b      	ldr	r3, [pc, #556]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10d      	bne.n	800470a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4b88      	ldr	r3, [pc, #544]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4a87      	ldr	r2, [pc, #540]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f8:	61d3      	str	r3, [r2, #28]
 80046fa:	4b85      	ldr	r3, [pc, #532]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	60bb      	str	r3, [r7, #8]
 8004704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470a:	4b82      	ldr	r3, [pc, #520]	; (8004914 <HAL_RCC_OscConfig+0x4c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004712:	2b00      	cmp	r3, #0
 8004714:	d118      	bne.n	8004748 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004716:	4b7f      	ldr	r3, [pc, #508]	; (8004914 <HAL_RCC_OscConfig+0x4c8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7e      	ldr	r2, [pc, #504]	; (8004914 <HAL_RCC_OscConfig+0x4c8>)
 800471c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004722:	f7fd fec1 	bl	80024a8 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800472a:	f7fd febd 	bl	80024a8 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b64      	cmp	r3, #100	; 0x64
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e103      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b75      	ldr	r3, [pc, #468]	; (8004914 <HAL_RCC_OscConfig+0x4c8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x312>
 8004750:	4b6f      	ldr	r3, [pc, #444]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a6e      	ldr	r2, [pc, #440]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e02d      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x334>
 8004766:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a69      	ldr	r2, [pc, #420]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a66      	ldr	r2, [pc, #408]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6213      	str	r3, [r2, #32]
 800477e:	e01c      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b05      	cmp	r3, #5
 8004786:	d10c      	bne.n	80047a2 <HAL_RCC_OscConfig+0x356>
 8004788:	4b61      	ldr	r3, [pc, #388]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	4a60      	ldr	r2, [pc, #384]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	6213      	str	r3, [r2, #32]
 8004794:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4a5d      	ldr	r2, [pc, #372]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6213      	str	r3, [r2, #32]
 80047a0:	e00b      	b.n	80047ba <HAL_RCC_OscConfig+0x36e>
 80047a2:	4b5b      	ldr	r3, [pc, #364]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	4a5a      	ldr	r2, [pc, #360]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	6213      	str	r3, [r2, #32]
 80047ae:	4b58      	ldr	r3, [pc, #352]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	4a57      	ldr	r2, [pc, #348]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047b4:	f023 0304 	bic.w	r3, r3, #4
 80047b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d015      	beq.n	80047ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c2:	f7fd fe71 	bl	80024a8 <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c8:	e00a      	b.n	80047e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ca:	f7fd fe6d 	bl	80024a8 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d8:	4293      	cmp	r3, r2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e0b1      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	4b4b      	ldr	r3, [pc, #300]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0ee      	beq.n	80047ca <HAL_RCC_OscConfig+0x37e>
 80047ec:	e014      	b.n	8004818 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ee:	f7fd fe5b 	bl	80024a8 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fe57 	bl	80024a8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	; 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e09b      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1ee      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d105      	bne.n	800482a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481e:	4b3c      	ldr	r3, [pc, #240]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4a3b      	ldr	r2, [pc, #236]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004828:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8087 	beq.w	8004942 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004834:	4b36      	ldr	r3, [pc, #216]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 030c 	and.w	r3, r3, #12
 800483c:	2b08      	cmp	r3, #8
 800483e:	d061      	beq.n	8004904 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d146      	bne.n	80048d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004848:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484e:	f7fd fe2b 	bl	80024a8 <HAL_GetTick>
 8004852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004854:	e008      	b.n	8004868 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004856:	f7fd fe27 	bl	80024a8 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e06d      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004868:	4b29      	ldr	r3, [pc, #164]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487c:	d108      	bne.n	8004890 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4921      	ldr	r1, [pc, #132]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004890:	4b1f      	ldr	r3, [pc, #124]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a19      	ldr	r1, [r3, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	430b      	orrs	r3, r1
 80048a2:	491b      	ldr	r1, [pc, #108]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd fdfb 	bl	80024a8 <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fd fdf7 	bl	80024a8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e03d      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048c8:	4b11      	ldr	r3, [pc, #68]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x46a>
 80048d4:	e035      	b.n	8004942 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCC_OscConfig+0x4cc>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fd fde4 	bl	80024a8 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fde0 	bl	80024a8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e026      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x498>
 8004902:	e01e      	b.n	8004942 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e019      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
 8004918:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_OscConfig+0x500>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	429a      	cmp	r2, r3
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493a:	429a      	cmp	r2, r3
 800493c:	d001      	beq.n	8004942 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e0d0      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004964:	4b6a      	ldr	r3, [pc, #424]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d910      	bls.n	8004994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 0207 	bic.w	r2, r3, #7
 800497a:	4965      	ldr	r1, [pc, #404]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	4313      	orrs	r3, r2
 8004980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004982:	4b63      	ldr	r3, [pc, #396]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0b8      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d020      	beq.n	80049e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049ac:	4b59      	ldr	r3, [pc, #356]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	494d      	ldr	r1, [pc, #308]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d040      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d107      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f6:	4b47      	ldr	r3, [pc, #284]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d115      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07f      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d109      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e073      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1e:	4b3d      	ldr	r3, [pc, #244]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e06b      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a2e:	4b39      	ldr	r3, [pc, #228]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f023 0203 	bic.w	r2, r3, #3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4936      	ldr	r1, [pc, #216]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a40:	f7fd fd32 	bl	80024a8 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	e00a      	b.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fd fd2e 	bl	80024a8 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e053      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a5e:	4b2d      	ldr	r3, [pc, #180]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 020c 	and.w	r2, r3, #12
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d1eb      	bne.n	8004a48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a70:	4b27      	ldr	r3, [pc, #156]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d210      	bcs.n	8004aa0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 0207 	bic.w	r2, r3, #7
 8004a86:	4922      	ldr	r1, [pc, #136]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e032      	b.n	8004b06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4916      	ldr	r1, [pc, #88]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	490e      	ldr	r1, [pc, #56]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ade:	f000 f821 	bl	8004b24 <HAL_RCC_GetSysClockFreq>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	091b      	lsrs	r3, r3, #4
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	490a      	ldr	r1, [pc, #40]	; (8004b18 <HAL_RCC_ClockConfig+0x1c8>)
 8004af0:	5ccb      	ldrb	r3, [r1, r3]
 8004af2:	fa22 f303 	lsr.w	r3, r2, r3
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <HAL_RCC_ClockConfig+0x1cc>)
 8004af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004afa:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1d0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd faa4 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40021000 	.word	0x40021000
 8004b18:	0800dbf8 	.word	0x0800dbf8
 8004b1c:	2000006c 	.word	0x2000006c
 8004b20:	20000070 	.word	0x20000070

08004b24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b24:	b490      	push	{r4, r7}
 8004b26:	b08a      	sub	sp, #40	; 0x28
 8004b28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004b2c:	1d3c      	adds	r4, r7, #4
 8004b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b34:	f240 2301 	movw	r3, #513	; 0x201
 8004b38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	2300      	movs	r3, #0
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b4e:	4b21      	ldr	r3, [pc, #132]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d002      	beq.n	8004b64 <HAL_RCC_GetSysClockFreq+0x40>
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d003      	beq.n	8004b6a <HAL_RCC_GetSysClockFreq+0x46>
 8004b62:	e02b      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b64:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b66:	623b      	str	r3, [r7, #32]
      break;
 8004b68:	e02b      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	0c9b      	lsrs	r3, r3, #18
 8004b6e:	f003 030f 	and.w	r3, r3, #15
 8004b72:	3328      	adds	r3, #40	; 0x28
 8004b74:	443b      	add	r3, r7
 8004b76:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b7a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d012      	beq.n	8004bac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b86:	4b13      	ldr	r3, [pc, #76]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	0c5b      	lsrs	r3, r3, #17
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	3328      	adds	r3, #40	; 0x28
 8004b92:	443b      	add	r3, r7
 8004b94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b9e:	fb03 f202 	mul.w	r2, r3, r2
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8004baa:	e004      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb0:	fb02 f303 	mul.w	r3, r2, r3
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	623b      	str	r3, [r7, #32]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bbe:	623b      	str	r3, [r7, #32]
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	; 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc90      	pop	{r4, r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	0800dba0 	.word	0x0800dba0
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	007a1200 	.word	0x007a1200
 8004bdc:	003d0900 	.word	0x003d0900

08004be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be4:	4b02      	ldr	r3, [pc, #8]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bc80      	pop	{r7}
 8004bee:	4770      	bx	lr
 8004bf0:	2000006c 	.word	0x2000006c

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff2 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4903      	ldr	r1, [pc, #12]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40021000 	.word	0x40021000
 8004c18:	0800dc08 	.word	0x0800dc08

08004c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c20:	f7ff ffde 	bl	8004be0 <HAL_RCC_GetHCLKFreq>
 8004c24:	4602      	mov	r2, r0
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	0adb      	lsrs	r3, r3, #11
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	4903      	ldr	r1, [pc, #12]	; (8004c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c32:	5ccb      	ldrb	r3, [r1, r3]
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800dc08 	.word	0x0800dc08

08004c44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	220f      	movs	r2, #15
 8004c52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <HAL_RCC_GetClockConfig+0x58>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f003 0203 	and.w	r2, r3, #3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c60:	4b0e      	ldr	r3, [pc, #56]	; (8004c9c <HAL_RCC_GetClockConfig+0x58>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_GetClockConfig+0x58>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c78:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <HAL_RCC_GetClockConfig+0x58>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	08db      	lsrs	r3, r3, #3
 8004c7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_RCC_GetClockConfig+0x5c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0207 	and.w	r2, r3, #7
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40022000 	.word	0x40022000

08004ca4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <RCC_Delay+0x34>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <RCC_Delay+0x38>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	0a5b      	lsrs	r3, r3, #9
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cc0:	bf00      	nop
  }
  while (Delay --);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	60fa      	str	r2, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f9      	bne.n	8004cc0 <RCC_Delay+0x1c>
}
 8004ccc:	bf00      	nop
 8004cce:	bf00      	nop
 8004cd0:	3714      	adds	r7, #20
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr
 8004cd8:	2000006c 	.word	0x2000006c
 8004cdc:	10624dd3 	.word	0x10624dd3

08004ce0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d07d      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d00:	4b4f      	ldr	r3, [pc, #316]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10d      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d0c:	4b4c      	ldr	r3, [pc, #304]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	4a4b      	ldr	r2, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d16:	61d3      	str	r3, [r2, #28]
 8004d18:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1a:	69db      	ldr	r3, [r3, #28]
 8004d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d24:	2301      	movs	r3, #1
 8004d26:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	4b46      	ldr	r3, [pc, #280]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d118      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d34:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a42      	ldr	r2, [pc, #264]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d40:	f7fd fbb2 	bl	80024a8 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d46:	e008      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d48:	f7fd fbae 	bl	80024a8 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e06d      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b3a      	ldr	r3, [pc, #232]	; (8004e44 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d66:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d02e      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d027      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d84:	4b2e      	ldr	r3, [pc, #184]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	6a1b      	ldr	r3, [r3, #32]
 8004d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d94:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d9a:	4a29      	ldr	r2, [pc, #164]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d014      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004daa:	f7fd fb7d 	bl	80024a8 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004db2:	f7fd fb79 	bl	80024a8 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e036      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc8:	4b1d      	ldr	r3, [pc, #116]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ee      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4917      	ldr	r1, [pc, #92]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004de6:	7dfb      	ldrb	r3, [r7, #23]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dec:	4b14      	ldr	r3, [pc, #80]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	4a13      	ldr	r2, [pc, #76]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	490b      	ldr	r1, [pc, #44]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0310 	and.w	r3, r3, #16
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d008      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e22:	4b07      	ldr	r3, [pc, #28]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	4904      	ldr	r1, [pc, #16]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40007000 	.word	0x40007000
 8004e48:	42420440 	.word	0x42420440

08004e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e041      	b.n	8004ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d106      	bne.n	8004e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f839 	bl	8004eea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3304      	adds	r3, #4
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f000 f9c2 	bl	8005214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ef2:	bf00      	nop
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d001      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e044      	b.n	8004f9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_TIM_Base_Start_IT+0xac>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d018      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <HAL_TIM_Base_Start_IT+0xb0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d013      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f48:	d00e      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a18      	ldr	r2, [pc, #96]	; (8004fb0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d009      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <HAL_TIM_Base_Start_IT+0x6c>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a15      	ldr	r2, [pc, #84]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d111      	bne.n	8004f8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b06      	cmp	r3, #6
 8004f78:	d010      	beq.n	8004f9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f042 0201 	orr.w	r2, r2, #1
 8004f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8a:	e007      	b.n	8004f9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0201 	orr.w	r2, r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40013400 	.word	0x40013400
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40000c00 	.word	0x40000c00

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0202 	mvn.w	r2, #2
 8004fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8ed 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8e0 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f8ef 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f8c3 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8b6 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8c5 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f899 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f88c 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f89b 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f86f 	bl	80051de <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f862 	bl	80051cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f871 	bl	80051f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0201 	mvn.w	r2, #1
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc ff36 	bl	8001fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f8d7 	bl	800531a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f835 	bl	8005202 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0220 	mvn.w	r2, #32
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 f8a2 	bl	8005308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc80      	pop	{r7}
 80051dc:	4770      	bx	lr

080051de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a33      	ldr	r2, [pc, #204]	; (80052f4 <TIM_Base_SetConfig+0xe0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a32      	ldr	r2, [pc, #200]	; (80052f8 <TIM_Base_SetConfig+0xe4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00f      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d00b      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2f      	ldr	r2, [pc, #188]	; (80052fc <TIM_Base_SetConfig+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a2e      	ldr	r2, [pc, #184]	; (8005300 <TIM_Base_SetConfig+0xec>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <TIM_Base_SetConfig+0xf0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d108      	bne.n	8005266 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <TIM_Base_SetConfig+0xe0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d013      	beq.n	8005296 <TIM_Base_SetConfig+0x82>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <TIM_Base_SetConfig+0xe4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00f      	beq.n	8005296 <TIM_Base_SetConfig+0x82>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d00b      	beq.n	8005296 <TIM_Base_SetConfig+0x82>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <TIM_Base_SetConfig+0xe8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d007      	beq.n	8005296 <TIM_Base_SetConfig+0x82>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a1d      	ldr	r2, [pc, #116]	; (8005300 <TIM_Base_SetConfig+0xec>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d003      	beq.n	8005296 <TIM_Base_SetConfig+0x82>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <TIM_Base_SetConfig+0xf0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d108      	bne.n	80052a8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <TIM_Base_SetConfig+0xe0>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_Base_SetConfig+0xc8>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <TIM_Base_SetConfig+0xe4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d103      	bne.n	80052e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	615a      	str	r2, [r3, #20]
}
 80052ea:	bf00      	nop
 80052ec:	3714      	adds	r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40000400 	.word	0x40000400
 8005300:	40000800 	.word	0x40000800
 8005304:	40000c00 	.word	0x40000c00

08005308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	bc80      	pop	{r7}
 8005318:	4770      	bx	lr

0800531a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005322:	bf00      	nop
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	bc80      	pop	{r7}
 800532a:	4770      	bx	lr

0800532c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e03f      	b.n	80053be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fd f808 	bl	8002368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2224      	movs	r2, #36	; 0x24
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800536e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fc85 	bl	8005c80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b08a      	sub	sp, #40	; 0x28
 80053ca:	af02      	add	r7, sp, #8
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4613      	mov	r3, r2
 80053d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d17c      	bne.n	80054e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d002      	beq.n	80053f2 <HAL_UART_Transmit+0x2c>
 80053ec:	88fb      	ldrh	r3, [r7, #6]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e075      	b.n	80054e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_UART_Transmit+0x3e>
 8005400:	2302      	movs	r3, #2
 8005402:	e06e      	b.n	80054e2 <HAL_UART_Transmit+0x11c>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2221      	movs	r2, #33	; 0x21
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800541a:	f7fd f845 	bl	80024a8 <HAL_GetTick>
 800541e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	88fa      	ldrh	r2, [r7, #6]
 8005424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005434:	d108      	bne.n	8005448 <HAL_UART_Transmit+0x82>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	e003      	b.n	8005450 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005458:	e02a      	b.n	80054b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	2180      	movs	r1, #128	; 0x80
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fa38 	bl	80058da <UART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e036      	b.n	80054e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3302      	adds	r3, #2
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	e007      	b.n	80054a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	781a      	ldrb	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	3301      	adds	r3, #1
 80054a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	3b01      	subs	r3, #1
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1cf      	bne.n	800545a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	9300      	str	r3, [sp, #0]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2200      	movs	r2, #0
 80054c2:	2140      	movs	r1, #64	; 0x40
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fa08 	bl	80058da <UART_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e006      	b.n	80054e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e000      	b.n	80054e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80054e0:	2302      	movs	r3, #2
  }
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3720      	adds	r7, #32
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	d11d      	bne.n	8005540 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_UART_Receive_IT+0x26>
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e016      	b.n	8005542 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800551a:	2b01      	cmp	r3, #1
 800551c:	d101      	bne.n	8005522 <HAL_UART_Receive_IT+0x38>
 800551e:	2302      	movs	r3, #2
 8005520:	e00f      	b.n	8005542 <HAL_UART_Receive_IT+0x58>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	461a      	mov	r2, r3
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa19 	bl	800596e <UART_Start_Receive_IT>
 800553c:	4603      	mov	r3, r0
 800553e:	e000      	b.n	8005542 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005540:	2302      	movs	r3, #2
  }
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	; 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b00      	cmp	r3, #0
 800558a:	d008      	beq.n	800559e <HAL_UART_IRQHandler+0x52>
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fac9 	bl	8005b2e <UART_Receive_IT>
      return;
 800559c:	e17b      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80b1 	beq.w	8005708 <HAL_UART_IRQHandler+0x1bc>
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d105      	bne.n	80055bc <HAL_UART_IRQHandler+0x70>
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80a6 	beq.w	8005708 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_UART_IRQHandler+0x90>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	f003 0304 	and.w	r3, r3, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_UART_IRQHandler+0xb0>
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	f043 0202 	orr.w	r2, r3, #2
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f003 0302 	and.w	r3, r3, #2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_UART_IRQHandler+0xd0>
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0204 	orr.w	r2, r3, #4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00f      	beq.n	8005646 <HAL_UART_IRQHandler+0xfa>
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d104      	bne.n	800563a <HAL_UART_IRQHandler+0xee>
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0208 	orr.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 811e 	beq.w	800588c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f003 0320 	and.w	r3, r3, #32
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <HAL_UART_IRQHandler+0x11e>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa62 	bl	8005b2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d102      	bne.n	8005692 <HAL_UART_IRQHandler+0x146>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d031      	beq.n	80056f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f9a4 	bl	80059e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d023      	beq.n	80056ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695a      	ldr	r2, [r3, #20]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c2:	4a76      	ldr	r2, [pc, #472]	; (800589c <HAL_UART_IRQHandler+0x350>)
 80056c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd fc24 	bl	8002f18 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00e      	b.n	8005704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f8e3 	bl	80058b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00a      	b.n	8005704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f8df 	bl	80058b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e006      	b.n	8005704 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8db 	bl	80058b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005702:	e0c3      	b.n	800588c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	bf00      	nop
    return;
 8005706:	e0c1      	b.n	800588c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	2b01      	cmp	r3, #1
 800570e:	f040 80a1 	bne.w	8005854 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 809b 	beq.w	8005854 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8095 	beq.w	8005854 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d04e      	beq.n	80057ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005758:	8a3b      	ldrh	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8098 	beq.w	8005890 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005764:	8a3a      	ldrh	r2, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	f080 8092 	bcs.w	8005890 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8a3a      	ldrh	r2, [r7, #16]
 8005770:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b20      	cmp	r3, #32
 800577a:	d02b      	beq.n	80057d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800578a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695a      	ldr	r2, [r3, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0201 	bic.w	r2, r2, #1
 800579a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0210 	bic.w	r2, r2, #16
 80057c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7fd fb67 	bl	8002ea2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057dc:	b29b      	uxth	r3, r3
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f86d 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057ea:	e051      	b.n	8005890 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d047      	beq.n	8005894 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005804:	8a7b      	ldrh	r3, [r7, #18]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d044      	beq.n	8005894 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005818:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0201 	bic.w	r2, r2, #1
 8005828:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0210 	bic.w	r2, r2, #16
 8005846:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005848:	8a7b      	ldrh	r3, [r7, #18]
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f839 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005852:	e01f      	b.n	8005894 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <HAL_UART_IRQHandler+0x324>
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8f9 	bl	8005a60 <UART_Transmit_IT>
    return;
 800586e:	e012      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <HAL_UART_IRQHandler+0x34a>
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f93a 	bl	8005afe <UART_EndTransmit_IT>
    return;
 800588a:	e004      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
    return;
 800588c:	bf00      	nop
 800588e:	e002      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
      return;
 8005890:	bf00      	nop
 8005892:	e000      	b.n	8005896 <HAL_UART_IRQHandler+0x34a>
      return;
 8005894:	bf00      	nop
  }
}
 8005896:	3728      	adds	r7, #40	; 0x28
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	08005a39 	.word	0x08005a39

080058a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr

080058c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b084      	sub	sp, #16
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	4613      	mov	r3, r2
 80058e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058ea:	e02c      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d028      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <UART_WaitOnFlagUntilTimeout+0x30>
 80058fa:	f7fc fdd5 	bl	80024a8 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	429a      	cmp	r2, r3
 8005908:	d21d      	bcs.n	8005946 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005918:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0201 	bic.w	r2, r2, #1
 8005928:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2220      	movs	r2, #32
 800592e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e00f      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d0c3      	beq.n	80058ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800596e:	b480      	push	{r7}
 8005970:	b085      	sub	sp, #20
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	88fa      	ldrh	r2, [r7, #6]
 8005986:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2222      	movs	r2, #34	; 0x22
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68da      	ldr	r2, [r3, #12]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0220 	orr.w	r2, r2, #32
 80059d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr

080059e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d107      	bne.n	8005a20 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0210 	bic.w	r2, r2, #16
 8005a1e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f7ff ff2d 	bl	80058b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b21      	cmp	r3, #33	; 0x21
 8005a72:	d13e      	bne.n	8005af2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7c:	d114      	bne.n	8005aa8 <UART_Transmit_IT+0x48>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d110      	bne.n	8005aa8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	461a      	mov	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	1c9a      	adds	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]
 8005aa6:	e008      	b.n	8005aba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	1c59      	adds	r1, r3, #1
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6211      	str	r1, [r2, #32]
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10f      	bne.n	8005aee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005adc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005aec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aee:	2300      	movs	r3, #0
 8005af0:	e000      	b.n	8005af4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005af2:	2302      	movs	r3, #2
  }
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b082      	sub	sp, #8
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff febe 	bl	80058a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	f040 8099 	bne.w	8005c76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4c:	d117      	bne.n	8005b7e <UART_Receive_IT+0x50>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d113      	bne.n	8005b7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b76:	1c9a      	adds	r2, r3, #2
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b7c:	e026      	b.n	8005bcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005b84:	2300      	movs	r3, #0
 8005b86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b90:	d007      	beq.n	8005ba2 <UART_Receive_IT+0x74>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <UART_Receive_IT+0x82>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d106      	bne.n	8005bb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e008      	b.n	8005bc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	4619      	mov	r1, r3
 8005bda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d148      	bne.n	8005c72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0220 	bic.w	r2, r2, #32
 8005bee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0201 	bic.w	r2, r2, #1
 8005c0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2220      	movs	r2, #32
 8005c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d123      	bne.n	8005c68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68da      	ldr	r2, [r3, #12]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f022 0210 	bic.w	r2, r2, #16
 8005c34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d10a      	bne.n	8005c5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff fe2f 	bl	80058c4 <HAL_UARTEx_RxEventCallback>
 8005c66:	e002      	b.n	8005c6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f7fb fa91 	bl	8001190 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e002      	b.n	8005c78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	e000      	b.n	8005c78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
  }
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cba:	f023 030c 	bic.w	r3, r3, #12
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	6812      	ldr	r2, [r2, #0]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2c      	ldr	r2, [pc, #176]	; (8005d94 <UART_SetConfig+0x114>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d103      	bne.n	8005cf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7fe ff98 	bl	8004c1c <HAL_RCC_GetPCLK2Freq>
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	e002      	b.n	8005cf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fe ff80 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009a      	lsls	r2, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <UART_SetConfig+0x118>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	0119      	lsls	r1, r3, #4
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009a      	lsls	r2, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d2c:	4b1a      	ldr	r3, [pc, #104]	; (8005d98 <UART_SetConfig+0x118>)
 8005d2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	2064      	movs	r0, #100	; 0x64
 8005d36:	fb00 f303 	mul.w	r3, r0, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	011b      	lsls	r3, r3, #4
 8005d3e:	3332      	adds	r3, #50	; 0x32
 8005d40:	4a15      	ldr	r2, [pc, #84]	; (8005d98 <UART_SetConfig+0x118>)
 8005d42:	fba2 2303 	umull	r2, r3, r2, r3
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d4c:	4419      	add	r1, r3
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009a      	lsls	r2, r3, #2
 8005d58:	441a      	add	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <UART_SetConfig+0x118>)
 8005d66:	fba3 0302 	umull	r0, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2064      	movs	r0, #100	; 0x64
 8005d6e:	fb00 f303 	mul.w	r3, r0, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <UART_SetConfig+0x118>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	440a      	add	r2, r1
 8005d8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40013800 	.word	0x40013800
 8005d98:	51eb851f 	.word	0x51eb851f

08005d9c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005da2:	f3ef 8305 	mrs	r3, IPSR
 8005da6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005da8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dae:	f3ef 8310 	mrs	r3, PRIMASK
 8005db2:	607b      	str	r3, [r7, #4]
  return(result);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <osKernelInitialize+0x32>
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <osKernelInitialize+0x60>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d109      	bne.n	8005dd6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc6:	603b      	str	r3, [r7, #0]
  return(result);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005dce:	f06f 0305 	mvn.w	r3, #5
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	e00c      	b.n	8005df0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <osKernelInitialize+0x60>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d105      	bne.n	8005dea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <osKernelInitialize+0x60>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	e002      	b.n	8005df0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295
 8005dee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005df0:	68fb      	ldr	r3, [r7, #12]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	200003b8 	.word	0x200003b8

08005e00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e06:	f3ef 8305 	mrs	r3, IPSR
 8005e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e12:	f3ef 8310 	mrs	r3, PRIMASK
 8005e16:	607b      	str	r3, [r7, #4]
  return(result);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <osKernelStart+0x32>
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <osKernelStart+0x64>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d109      	bne.n	8005e3a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e26:	f3ef 8311 	mrs	r3, BASEPRI
 8005e2a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e32:	f06f 0305 	mvn.w	r3, #5
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e00e      	b.n	8005e58 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e3a:	4b0a      	ldr	r3, [pc, #40]	; (8005e64 <osKernelStart+0x64>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d107      	bne.n	8005e52 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <osKernelStart+0x64>)
 8005e44:	2202      	movs	r2, #2
 8005e46:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e48:	f001 fc40 	bl	80076cc <vTaskStartScheduler>
      stat = osOK;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e002      	b.n	8005e58 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005e52:	f04f 33ff 	mov.w	r3, #4294967295
 8005e56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200003b8 	.word	0x200003b8

08005e68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b092      	sub	sp, #72	; 0x48
 8005e6c:	af04      	add	r7, sp, #16
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e78:	f3ef 8305 	mrs	r3, IPSR
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 8094 	bne.w	8005fae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e86:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8a:	623b      	str	r3, [r7, #32]
  return(result);
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 808d 	bne.w	8005fae <osThreadNew+0x146>
 8005e94:	4b48      	ldr	r3, [pc, #288]	; (8005fb8 <osThreadNew+0x150>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d106      	bne.n	8005eaa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e9c:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f040 8082 	bne.w	8005fae <osThreadNew+0x146>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d07e      	beq.n	8005fae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005eb4:	2318      	movs	r3, #24
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005eb8:	2300      	movs	r3, #0
 8005eba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005ebc:	f107 031b 	add.w	r3, r7, #27
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d045      	beq.n	8005f5a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <osThreadNew+0x74>
        name = attr->name;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <osThreadNew+0x9a>
 8005ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef2:	2b38      	cmp	r3, #56	; 0x38
 8005ef4:	d805      	bhi.n	8005f02 <osThreadNew+0x9a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <osThreadNew+0x9e>
        return (NULL);
 8005f02:	2300      	movs	r3, #0
 8005f04:	e054      	b.n	8005fb0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <osThreadNew+0xd4>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b5b      	cmp	r3, #91	; 0x5b
 8005f24:	d90a      	bls.n	8005f3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <osThreadNew+0xd4>
        mem = 1;
 8005f36:	2301      	movs	r3, #1
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3a:	e010      	b.n	8005f5e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10c      	bne.n	8005f5e <osThreadNew+0xf6>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d108      	bne.n	8005f5e <osThreadNew+0xf6>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <osThreadNew+0xf6>
          mem = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f58:	e001      	b.n	8005f5e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d110      	bne.n	8005f86 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f6c:	9202      	str	r2, [sp, #8]
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 f95c 	bl	8007238 <xTaskCreateStatic>
 8005f80:	4603      	mov	r3, r0
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	e013      	b.n	8005fae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d110      	bne.n	8005fae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f107 0314 	add.w	r3, r7, #20
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f001 f9a6 	bl	80072f0 <xTaskCreate>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <osThreadNew+0x146>
          hTask = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fae:	697b      	ldr	r3, [r7, #20]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3738      	adds	r7, #56	; 0x38
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	200003b8 	.word	0x200003b8

08005fbc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc4:	f3ef 8305 	mrs	r3, IPSR
 8005fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8005fca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10f      	bne.n	8005ff0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <osDelay+0x34>
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <osDelay+0x58>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d109      	bne.n	8005ff8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <osDelay+0x3c>
    stat = osErrorISR;
 8005ff0:	f06f 0305 	mvn.w	r3, #5
 8005ff4:	617b      	str	r3, [r7, #20]
 8005ff6:	e007      	b.n	8006008 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <osDelay+0x4c>
      vTaskDelay(ticks);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fb2e 	bl	8007664 <vTaskDelay>
    }
  }

  return (stat);
 8006008:	697b      	ldr	r3, [r7, #20]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	200003b8 	.word	0x200003b8

08006018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4a06      	ldr	r2, [pc, #24]	; (8006040 <vApplicationGetIdleTaskMemory+0x28>)
 8006028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4a05      	ldr	r2, [pc, #20]	; (8006044 <vApplicationGetIdleTaskMemory+0x2c>)
 800602e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr
 8006040:	200003bc 	.word	0x200003bc
 8006044:	20000418 	.word	0x20000418

08006048 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4a07      	ldr	r2, [pc, #28]	; (8006074 <vApplicationGetTimerTaskMemory+0x2c>)
 8006058:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	4a06      	ldr	r2, [pc, #24]	; (8006078 <vApplicationGetTimerTaskMemory+0x30>)
 800605e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006066:	601a      	str	r2, [r3, #0]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000618 	.word	0x20000618
 8006078:	20000674 	.word	0x20000674

0800607c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8006082:	2020      	movs	r0, #32
 8006084:	f002 ff32 	bl	8008eec <pvPortMalloc>
 8006088:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f000 f9a4 	bl	80063e8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80060a6:	687b      	ldr	r3, [r7, #4]
	}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3708      	adds	r7, #8
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b090      	sub	sp, #64	; 0x40
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80060c6:	2300      	movs	r3, #0
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00a      	beq.n	8006106 <xEventGroupWaitBits+0x56>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fb      	str	r3, [r7, #28]
}
 8006102:	bf00      	nop
 8006104:	e7fe      	b.n	8006104 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xEventGroupWaitBits+0x72>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	61bb      	str	r3, [r7, #24]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006122:	f001 ffbd 	bl	80080a0 <xTaskGetSchedulerState>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d102      	bne.n	8006132 <xEventGroupWaitBits+0x82>
 800612c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800612e:	2b00      	cmp	r3, #0
 8006130:	d101      	bne.n	8006136 <xEventGroupWaitBits+0x86>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <xEventGroupWaitBits+0x88>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	617b      	str	r3, [r7, #20]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006152:	f001 fb21 	bl	8007798 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800615c:	683a      	ldr	r2, [r7, #0]
 800615e:	68b9      	ldr	r1, [r7, #8]
 8006160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006162:	f000 f90b 	bl	800637c <prvTestWaitCondition>
 8006166:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006172:	2300      	movs	r3, #0
 8006174:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d028      	beq.n	80061ce <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	43db      	mvns	r3, r3
 8006184:	401a      	ands	r2, r3
 8006186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e020      	b.n	80061ce <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800618c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8006196:	2301      	movs	r3, #1
 8006198:	633b      	str	r3, [r7, #48]	; 0x30
 800619a:	e018      	b.n	80061ce <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061a8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061b6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	1d18      	adds	r0, r3, #4
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	4313      	orrs	r3, r2
 80061c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061c4:	4619      	mov	r1, r3
 80061c6:	f001 fcdf 	bl	8007b88 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80061ca:	2300      	movs	r3, #0
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80061ce:	f001 faf1 	bl	80077b4 <xTaskResumeAll>
 80061d2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80061d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d031      	beq.n	800623e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80061da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d107      	bne.n	80061f0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80061e0:	4b19      	ldr	r3, [pc, #100]	; (8006248 <xEventGroupWaitBits+0x198>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80061f0:	f002 f8d6 	bl	80083a0 <uxTaskResetEventItemValue>
 80061f4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11a      	bne.n	8006236 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006200:	f002 fd74 	bl	8008cec <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006210:	f000 f8b4 	bl	800637c <prvTestWaitCondition>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d009      	beq.n	800622e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	43db      	mvns	r3, r3
 8006228:	401a      	ands	r2, r3
 800622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800622e:	2301      	movs	r3, #1
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006232:	f002 fd8b 	bl	8008d4c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8006236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006238:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800623c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800623e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006240:	4618      	mov	r0, r3
 8006242:	3740      	adds	r7, #64	; 0x40
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	e000ed04 	.word	0xe000ed04

0800624c <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08e      	sub	sp, #56	; 0x38
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8006256:	2300      	movs	r3, #0
 8006258:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800625e:	2300      	movs	r3, #0
 8006260:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xEventGroupSetBits+0x32>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	613b      	str	r3, [r7, #16]
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <xEventGroupSetBits+0x52>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60fb      	str	r3, [r7, #12]
}
 800629a:	bf00      	nop
 800629c:	e7fe      	b.n	800629c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800629e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a0:	3304      	adds	r3, #4
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3308      	adds	r3, #8
 80062a8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80062aa:	f001 fa75 	bl	8007798 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80062c0:	e03c      	b.n	800633c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80062c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80062ce:	2300      	movs	r3, #0
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80062d8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d108      	bne.n	80062fe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00b      	beq.n	8006310 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80062f8:	2301      	movs	r3, #1
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fc:	e008      	b.n	8006310 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d101      	bne.n	8006310 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006330:	4619      	mov	r1, r3
 8006332:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006334:	f001 fcf4 	bl	8007d20 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800633c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	429a      	cmp	r2, r3
 8006342:	d1be      	bne.n	80062c2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	43db      	mvns	r3, r3
 800634c:	401a      	ands	r2, r3
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006352:	f001 fa2f 	bl	80077b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	681b      	ldr	r3, [r3, #0]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3738      	adds	r7, #56	; 0x38
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b082      	sub	sp, #8
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff ff6c 	bl	800624c <xEventGroupSetBits>
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d107      	bne.n	80063a2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e007      	b.n	80063b2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	4013      	ands	r3, r2
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d101      	bne.n	80063b2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80063b2:	697b      	ldr	r3, [r7, #20]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr
	...

080063c0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	4804      	ldr	r0, [pc, #16]	; (80063e4 <xEventGroupSetBitsFromISR+0x24>)
 80063d4:	f002 fb76 	bl	8008ac4 <xTimerPendFunctionCallFromISR>
 80063d8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80063da:	697b      	ldr	r3, [r7, #20]
	}
 80063dc:	4618      	mov	r0, r3
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	08006363 	.word	0x08006363

080063e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f103 0208 	add.w	r2, r3, #8
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006400:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f103 0208 	add.w	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f103 0208 	add.w	r2, r3, #8
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bc80      	pop	{r7}
 8006424:	4770      	bx	lr

08006426 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	bc80      	pop	{r7}
 800643c:	4770      	bx	lr

0800643e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800643e:	b480      	push	{r7}
 8006440:	b085      	sub	sp, #20
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	601a      	str	r2, [r3, #0]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr

08006484 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649a:	d103      	bne.n	80064a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	e00c      	b.n	80064be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3308      	adds	r3, #8
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	e002      	b.n	80064b2 <vListInsert+0x2e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d2f6      	bcs.n	80064ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	601a      	str	r2, [r3, #0]
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc80      	pop	{r7}
 80064f2:	4770      	bx	lr

080064f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6892      	ldr	r2, [r2, #8]
 800650a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6852      	ldr	r2, [r2, #4]
 8006514:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d103      	bne.n	8006528 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	1e5a      	subs	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr
	...

08006548 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xQueueGenericReset+0x2a>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60bb      	str	r3, [r7, #8]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006572:	f002 fbbb 	bl	8008cec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006582:	fb01 f303 	mul.w	r3, r1, r3
 8006586:	441a      	add	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a2:	3b01      	subs	r3, #1
 80065a4:	68f9      	ldr	r1, [r7, #12]
 80065a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	441a      	add	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	22ff      	movs	r2, #255	; 0xff
 80065be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d114      	bne.n	80065f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3310      	adds	r3, #16
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 fb3f 	bl	8007c58 <xTaskRemoveFromEventList>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d012      	beq.n	8006606 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <xQueueGenericReset+0xcc>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	e009      	b.n	8006606 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3310      	adds	r3, #16
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fef6 	bl	80063e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3324      	adds	r3, #36	; 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f7ff fef1 	bl	80063e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006606:	f002 fba1 	bl	8008d4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800660a:	2301      	movs	r3, #1
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08e      	sub	sp, #56	; 0x38
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10a      	bne.n	8006642 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10a      	bne.n	800665e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d002      	beq.n	800666a <xQueueGenericCreateStatic+0x52>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <xQueueGenericCreateStatic+0x56>
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <xQueueGenericCreateStatic+0x58>
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	623b      	str	r3, [r7, #32]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d102      	bne.n	8006696 <xQueueGenericCreateStatic+0x7e>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <xQueueGenericCreateStatic+0x82>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <xQueueGenericCreateStatic+0x84>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	61fb      	str	r3, [r7, #28]
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066b6:	2350      	movs	r3, #80	; 0x50
 80066b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b50      	cmp	r3, #80	; 0x50
 80066be:	d00a      	beq.n	80066d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	61bb      	str	r3, [r7, #24]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00d      	beq.n	80066fc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80066ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f843 	bl	8006782 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80066fe:	4618      	mov	r0, r3
 8006700:	3730      	adds	r7, #48	; 0x30
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006706:	b580      	push	{r7, lr}
 8006708:	b08a      	sub	sp, #40	; 0x28
 800670a:	af02      	add	r7, sp, #8
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	4613      	mov	r3, r2
 8006712:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <xQueueGenericCreate+0x2a>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	613b      	str	r3, [r7, #16]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d102      	bne.n	800673c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e004      	b.n	8006746 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3350      	adds	r3, #80	; 0x50
 800674a:	4618      	mov	r0, r3
 800674c:	f002 fbce 	bl	8008eec <pvPortMalloc>
 8006750:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00f      	beq.n	8006778 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	3350      	adds	r3, #80	; 0x50
 800675c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006766:	79fa      	ldrb	r2, [r7, #7]
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f805 	bl	8006782 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006778:	69bb      	ldr	r3, [r7, #24]
	}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d103      	bne.n	800679e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	e002      	b.n	80067a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067b0:	2101      	movs	r1, #1
 80067b2:	69b8      	ldr	r0, [r7, #24]
 80067b4:	f7ff fec8 	bl	8006548 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	78fa      	ldrb	r2, [r7, #3]
 80067bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067c0:	bf00      	nop
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00e      	beq.n	80067f4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80067e8:	2300      	movs	r3, #0
 80067ea:	2200      	movs	r2, #0
 80067ec:	2100      	movs	r1, #0
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f81c 	bl	800682c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	461a      	mov	r2, r3
 8006812:	6939      	ldr	r1, [r7, #16]
 8006814:	6978      	ldr	r0, [r7, #20]
 8006816:	f7ff ff76 	bl	8006706 <xQueueGenericCreate>
 800681a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f7ff ffd3 	bl	80067c8 <prvInitialiseMutex>

		return pxNewQueue;
 8006822:	68fb      	ldr	r3, [r7, #12]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b08e      	sub	sp, #56	; 0x38
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800683a:	2300      	movs	r3, #0
 800683c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueGenericSend+0x32>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <xQueueGenericSend+0x40>
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <xQueueGenericSend+0x44>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <xQueueGenericSend+0x46>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <xQueueGenericSend+0x60>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006888:	bf00      	nop
 800688a:	e7fe      	b.n	800688a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b02      	cmp	r3, #2
 8006890:	d103      	bne.n	800689a <xQueueGenericSend+0x6e>
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006896:	2b01      	cmp	r3, #1
 8006898:	d101      	bne.n	800689e <xQueueGenericSend+0x72>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <xQueueGenericSend+0x74>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xQueueGenericSend+0x8e>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	623b      	str	r3, [r7, #32]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ba:	f001 fbf1 	bl	80080a0 <xTaskGetSchedulerState>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <xQueueGenericSend+0x9e>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <xQueueGenericSend+0xa2>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <xQueueGenericSend+0xa4>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xQueueGenericSend+0xbe>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	61fb      	str	r3, [r7, #28]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ea:	f002 f9ff 	bl	8008cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d302      	bcc.n	8006900 <xQueueGenericSend+0xd4>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d129      	bne.n	8006954 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	68b9      	ldr	r1, [r7, #8]
 8006904:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006906:	f000 fb2a 	bl	8006f5e <prvCopyDataToQueue>
 800690a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	3324      	adds	r3, #36	; 0x24
 8006918:	4618      	mov	r0, r3
 800691a:	f001 f99d 	bl	8007c58 <xTaskRemoveFromEventList>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006924:	4b3f      	ldr	r3, [pc, #252]	; (8006a24 <xQueueGenericSend+0x1f8>)
 8006926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	e00a      	b.n	800694c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <xQueueGenericSend+0x1f8>)
 800693e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800694c:	f002 f9fe 	bl	8008d4c <vPortExitCritical>
				return pdPASS;
 8006950:	2301      	movs	r3, #1
 8006952:	e063      	b.n	8006a1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800695a:	f002 f9f7 	bl	8008d4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800695e:	2300      	movs	r3, #0
 8006960:	e05c      	b.n	8006a1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	2b00      	cmp	r3, #0
 8006966:	d106      	bne.n	8006976 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006968:	f107 0314 	add.w	r3, r7, #20
 800696c:	4618      	mov	r0, r3
 800696e:	f001 fa39 	bl	8007de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006972:	2301      	movs	r3, #1
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006976:	f002 f9e9 	bl	8008d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800697a:	f000 ff0d 	bl	8007798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800697e:	f002 f9b5 	bl	8008cec <vPortEnterCritical>
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006988:	b25b      	sxtb	r3, r3
 800698a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698e:	d103      	bne.n	8006998 <xQueueGenericSend+0x16c>
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800699e:	b25b      	sxtb	r3, r3
 80069a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSend+0x182>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069ae:	f002 f9cd 	bl	8008d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069b2:	1d3a      	adds	r2, r7, #4
 80069b4:	f107 0314 	add.w	r3, r7, #20
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 fa28 	bl	8007e10 <xTaskCheckForTimeOut>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d124      	bne.n	8006a10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c8:	f000 fbc1 	bl	800714e <prvIsQueueFull>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d018      	beq.n	8006a04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	3310      	adds	r3, #16
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4611      	mov	r1, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f001 f8b0 	bl	8007b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069e2:	f000 fb4c 	bl	800707e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069e6:	f000 fee5 	bl	80077b4 <xTaskResumeAll>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f47f af7c 	bne.w	80068ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80069f2:	4b0c      	ldr	r3, [pc, #48]	; (8006a24 <xQueueGenericSend+0x1f8>)
 80069f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	e772      	b.n	80068ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a06:	f000 fb3a 	bl	800707e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a0a:	f000 fed3 	bl	80077b4 <xTaskResumeAll>
 8006a0e:	e76c      	b.n	80068ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a12:	f000 fb34 	bl	800707e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a16:	f000 fecd 	bl	80077b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a1a:	2300      	movs	r3, #0
		}
	}
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3738      	adds	r7, #56	; 0x38
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	e000ed04 	.word	0xe000ed04

08006a28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08e      	sub	sp, #56	; 0x38
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <xQueueGenericSendFromISR+0x3c>
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <xQueueGenericSendFromISR+0x40>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <xQueueGenericSendFromISR+0x42>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	623b      	str	r3, [r7, #32]
}
 8006a80:	bf00      	nop
 8006a82:	e7fe      	b.n	8006a82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d103      	bne.n	8006a92 <xQueueGenericSendFromISR+0x6a>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <xQueueGenericSendFromISR+0x6e>
 8006a92:	2301      	movs	r3, #1
 8006a94:	e000      	b.n	8006a98 <xQueueGenericSendFromISR+0x70>
 8006a96:	2300      	movs	r3, #0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	61fb      	str	r3, [r7, #28]
}
 8006aae:	bf00      	nop
 8006ab0:	e7fe      	b.n	8006ab0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ab2:	f002 f9dd 	bl	8008e70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8006aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abe:	f383 8811 	msr	BASEPRI, r3
 8006ac2:	f3bf 8f6f 	isb	sy
 8006ac6:	f3bf 8f4f 	dsb	sy
 8006aca:	61ba      	str	r2, [r7, #24]
 8006acc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ace:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d302      	bcc.n	8006ae4 <xQueueGenericSendFromISR+0xbc>
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d12c      	bne.n	8006b3e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006af4:	f000 fa33 	bl	8006f5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006af8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b00:	d112      	bne.n	8006b28 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d016      	beq.n	8006b38 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	3324      	adds	r3, #36	; 0x24
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 f8a2 	bl	8007c58 <xTaskRemoveFromEventList>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00e      	beq.n	8006b38 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00b      	beq.n	8006b38 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e007      	b.n	8006b38 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	b25a      	sxtb	r2, r3
 8006b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b3c:	e001      	b.n	8006b42 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
 8006b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b44:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3738      	adds	r7, #56	; 0x38
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b08c      	sub	sp, #48	; 0x30
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b64:	2300      	movs	r3, #0
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <xQueueReceive+0x30>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	623b      	str	r3, [r7, #32]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d103      	bne.n	8006b96 <xQueueReceive+0x3e>
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <xQueueReceive+0x42>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <xQueueReceive+0x44>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xQueueReceive+0x5e>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	61fb      	str	r3, [r7, #28]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bb6:	f001 fa73 	bl	80080a0 <xTaskGetSchedulerState>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <xQueueReceive+0x6e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <xQueueReceive+0x72>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <xQueueReceive+0x74>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xQueueReceive+0x8e>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61bb      	str	r3, [r7, #24]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006be6:	f002 f881 	bl	8008cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01f      	beq.n	8006c36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfa:	f000 fa1a 	bl	8007032 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	1e5a      	subs	r2, r3, #1
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00f      	beq.n	8006c2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	3310      	adds	r3, #16
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f820 	bl	8007c58 <xTaskRemoveFromEventList>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c1e:	4b3d      	ldr	r3, [pc, #244]	; (8006d14 <xQueueReceive+0x1bc>)
 8006c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c24:	601a      	str	r2, [r3, #0]
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c2e:	f002 f88d 	bl	8008d4c <vPortExitCritical>
				return pdPASS;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e069      	b.n	8006d0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d103      	bne.n	8006c44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c3c:	f002 f886 	bl	8008d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e062      	b.n	8006d0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c4a:	f107 0310 	add.w	r3, r7, #16
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f8c8 	bl	8007de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c54:	2301      	movs	r3, #1
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c58:	f002 f878 	bl	8008d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c5c:	f000 fd9c 	bl	8007798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c60:	f002 f844 	bl	8008cec <vPortEnterCritical>
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c6a:	b25b      	sxtb	r3, r3
 8006c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c70:	d103      	bne.n	8006c7a <xQueueReceive+0x122>
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d103      	bne.n	8006c90 <xQueueReceive+0x138>
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c90:	f002 f85c 	bl	8008d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c94:	1d3a      	adds	r2, r7, #4
 8006c96:	f107 0310 	add.w	r3, r7, #16
 8006c9a:	4611      	mov	r1, r2
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f8b7 	bl	8007e10 <xTaskCheckForTimeOut>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d123      	bne.n	8006cf0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006caa:	f000 fa3a 	bl	8007122 <prvIsQueueEmpty>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d017      	beq.n	8006ce4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	3324      	adds	r3, #36	; 0x24
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 ff3f 	bl	8007b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc4:	f000 f9db 	bl	800707e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cc8:	f000 fd74 	bl	80077b4 <xTaskResumeAll>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d189      	bne.n	8006be6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <xQueueReceive+0x1bc>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	e780      	b.n	8006be6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 f9ca 	bl	800707e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cea:	f000 fd63 	bl	80077b4 <xTaskResumeAll>
 8006cee:	e77a      	b.n	8006be6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf2:	f000 f9c4 	bl	800707e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cf6:	f000 fd5d 	bl	80077b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfc:	f000 fa11 	bl	8007122 <prvIsQueueEmpty>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f43f af6f 	beq.w	8006be6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3730      	adds	r7, #48	; 0x30
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	e000ed04 	.word	0xe000ed04

08006d18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08e      	sub	sp, #56	; 0x38
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d38:	f383 8811 	msr	BASEPRI, r3
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f3bf 8f4f 	dsb	sy
 8006d44:	623b      	str	r3, [r7, #32]
}
 8006d46:	bf00      	nop
 8006d48:	e7fe      	b.n	8006d48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	61fb      	str	r3, [r7, #28]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d68:	f001 f99a 	bl	80080a0 <xTaskGetSchedulerState>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d102      	bne.n	8006d78 <xQueueSemaphoreTake+0x60>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <xQueueSemaphoreTake+0x64>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <xQueueSemaphoreTake+0x66>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10a      	bne.n	8006d98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	61bb      	str	r3, [r7, #24]
}
 8006d94:	bf00      	nop
 8006d96:	e7fe      	b.n	8006d96 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d98:	f001 ffa8 	bl	8008cec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d024      	beq.n	8006df2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d104      	bne.n	8006dc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006db8:	f001 fb0a 	bl	80083d0 <pvTaskIncrementMutexHeldCount>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00f      	beq.n	8006dea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	3310      	adds	r3, #16
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 ff42 	bl	8007c58 <xTaskRemoveFromEventList>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dda:	4b54      	ldr	r3, [pc, #336]	; (8006f2c <xQueueSemaphoreTake+0x214>)
 8006ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dea:	f001 ffaf 	bl	8008d4c <vPortExitCritical>
				return pdPASS;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e097      	b.n	8006f22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d111      	bne.n	8006e1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	617b      	str	r3, [r7, #20]
}
 8006e10:	bf00      	nop
 8006e12:	e7fe      	b.n	8006e12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e14:	f001 ff9a 	bl	8008d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e082      	b.n	8006f22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e22:	f107 030c 	add.w	r3, r7, #12
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 ffdc 	bl	8007de4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e30:	f001 ff8c 	bl	8008d4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e34:	f000 fcb0 	bl	8007798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e38:	f001 ff58 	bl	8008cec <vPortEnterCritical>
 8006e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d103      	bne.n	8006e52 <xQueueSemaphoreTake+0x13a>
 8006e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d103      	bne.n	8006e68 <xQueueSemaphoreTake+0x150>
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e68:	f001 ff70 	bl	8008d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e6c:	463a      	mov	r2, r7
 8006e6e:	f107 030c 	add.w	r3, r7, #12
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 ffcb 	bl	8007e10 <xTaskCheckForTimeOut>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d132      	bne.n	8006ee6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e82:	f000 f94e 	bl	8007122 <prvIsQueueEmpty>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d026      	beq.n	8006eda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d109      	bne.n	8006ea8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006e94:	f001 ff2a 	bl	8008cec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f001 f91d 	bl	80080dc <xTaskPriorityInherit>
 8006ea2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ea4:	f001 ff52 	bl	8008d4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fe45 	bl	8007b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006eb8:	f000 f8e1 	bl	800707e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ebc:	f000 fc7a 	bl	80077b4 <xTaskResumeAll>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f47f af68 	bne.w	8006d98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006ec8:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <xQueueSemaphoreTake+0x214>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	e75e      	b.n	8006d98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006edc:	f000 f8cf 	bl	800707e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee0:	f000 fc68 	bl	80077b4 <xTaskResumeAll>
 8006ee4:	e758      	b.n	8006d98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006ee6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ee8:	f000 f8c9 	bl	800707e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eec:	f000 fc62 	bl	80077b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef2:	f000 f916 	bl	8007122 <prvIsQueueEmpty>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f43f af4d 	beq.w	8006d98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00d      	beq.n	8006f20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f04:	f001 fef2 	bl	8008cec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0a:	f000 f811 	bl	8006f30 <prvGetDisinheritPriorityAfterTimeout>
 8006f0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 f9bc 	bl	8008294 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f1c:	f001 ff16 	bl	8008d4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3738      	adds	r7, #56	; 0x38
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	e000ed04 	.word	0xe000ed04

08006f30 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d006      	beq.n	8006f4e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	e001      	b.n	8006f52 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006f52:	68fb      	ldr	r3, [r7, #12]
	}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3714      	adds	r7, #20
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	60f8      	str	r0, [r7, #12]
 8006f66:	60b9      	str	r1, [r7, #8]
 8006f68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10d      	bne.n	8006f98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d14d      	bne.n	8007020 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 f915 	bl	80081b8 <xTaskPriorityDisinherit>
 8006f8e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	e043      	b.n	8007020 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d119      	bne.n	8006fd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6898      	ldr	r0, [r3, #8]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68b9      	ldr	r1, [r7, #8]
 8006faa:	f002 f9bd 	bl	8009328 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	689a      	ldr	r2, [r3, #8]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	441a      	add	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d32b      	bcc.n	8007020 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	e026      	b.n	8007020 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	68d8      	ldr	r0, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	f002 f9a3 	bl	8009328 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	425b      	negs	r3, r3
 8006fec:	441a      	add	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d207      	bcs.n	800700e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	425b      	negs	r3, r3
 8007008:	441a      	add	r2, r3
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b02      	cmp	r3, #2
 8007012:	d105      	bne.n	8007020 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	3b01      	subs	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007028:	697b      	ldr	r3, [r7, #20]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d018      	beq.n	8007076 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	441a      	add	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68da      	ldr	r2, [r3, #12]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d303      	bcc.n	8007066 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	68d9      	ldr	r1, [r3, #12]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	461a      	mov	r2, r3
 8007070:	6838      	ldr	r0, [r7, #0]
 8007072:	f002 f959 	bl	8009328 <memcpy>
	}
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b084      	sub	sp, #16
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007086:	f001 fe31 	bl	8008cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007090:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007092:	e011      	b.n	80070b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d012      	beq.n	80070c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3324      	adds	r3, #36	; 0x24
 80070a0:	4618      	mov	r0, r3
 80070a2:	f000 fdd9 	bl	8007c58 <xTaskRemoveFromEventList>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80070ac:	f000 ff12 	bl	8007ed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dce9      	bgt.n	8007094 <prvUnlockQueue+0x16>
 80070c0:	e000      	b.n	80070c4 <prvUnlockQueue+0x46>
					break;
 80070c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	22ff      	movs	r2, #255	; 0xff
 80070c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070cc:	f001 fe3e 	bl	8008d4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070d0:	f001 fe0c 	bl	8008cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070dc:	e011      	b.n	8007102 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d012      	beq.n	800710c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3310      	adds	r3, #16
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fdb4 	bl	8007c58 <xTaskRemoveFromEventList>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070f6:	f000 feed 	bl	8007ed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007106:	2b00      	cmp	r3, #0
 8007108:	dce9      	bgt.n	80070de <prvUnlockQueue+0x60>
 800710a:	e000      	b.n	800710e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800710c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	22ff      	movs	r2, #255	; 0xff
 8007112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007116:	f001 fe19 	bl	8008d4c <vPortExitCritical>
}
 800711a:	bf00      	nop
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800712a:	f001 fddf 	bl	8008cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	2b00      	cmp	r3, #0
 8007134:	d102      	bne.n	800713c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007136:	2301      	movs	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e001      	b.n	8007140 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007140:	f001 fe04 	bl	8008d4c <vPortExitCritical>

	return xReturn;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007156:	f001 fdc9 	bl	8008cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	429a      	cmp	r2, r3
 8007164:	d102      	bne.n	800716c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007166:	2301      	movs	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]
 800716a:	e001      	b.n	8007170 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007170:	f001 fdec 	bl	8008d4c <vPortExitCritical>

	return xReturn;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
	...

08007180 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e014      	b.n	80071ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007190:	4a0e      	ldr	r2, [pc, #56]	; (80071cc <vQueueAddToRegistry+0x4c>)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800719c:	490b      	ldr	r1, [pc, #44]	; (80071cc <vQueueAddToRegistry+0x4c>)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	683a      	ldr	r2, [r7, #0]
 80071a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071a6:	4a09      	ldr	r2, [pc, #36]	; (80071cc <vQueueAddToRegistry+0x4c>)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	00db      	lsls	r3, r3, #3
 80071ac:	4413      	add	r3, r2
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80071b2:	e006      	b.n	80071c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60fb      	str	r3, [r7, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b07      	cmp	r3, #7
 80071be:	d9e7      	bls.n	8007190 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bc80      	pop	{r7}
 80071ca:	4770      	bx	lr
 80071cc:	20000a74 	.word	0x20000a74

080071d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071e0:	f001 fd84 	bl	8008cec <vPortEnterCritical>
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071ea:	b25b      	sxtb	r3, r3
 80071ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f0:	d103      	bne.n	80071fa <vQueueWaitForMessageRestricted+0x2a>
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007200:	b25b      	sxtb	r3, r3
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d103      	bne.n	8007210 <vQueueWaitForMessageRestricted+0x40>
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007210:	f001 fd9c 	bl	8008d4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d106      	bne.n	800722a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	3324      	adds	r3, #36	; 0x24
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fceb 	bl	8007c00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800722a:	6978      	ldr	r0, [r7, #20]
 800722c:	f7ff ff27 	bl	800707e <prvUnlockQueue>
	}
 8007230:	bf00      	nop
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	; 0x38
 800723c:	af04      	add	r7, sp, #16
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <xTaskCreateStatic+0x2a>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	623b      	str	r3, [r7, #32]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <xTaskCreateStatic+0x46>
	__asm volatile
 8007268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726c:	f383 8811 	msr	BASEPRI, r3
 8007270:	f3bf 8f6f 	isb	sy
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	61fb      	str	r3, [r7, #28]
}
 800727a:	bf00      	nop
 800727c:	e7fe      	b.n	800727c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800727e:	235c      	movs	r3, #92	; 0x5c
 8007280:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	2b5c      	cmp	r3, #92	; 0x5c
 8007286:	d00a      	beq.n	800729e <xTaskCreateStatic+0x66>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	61bb      	str	r3, [r7, #24]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800729e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01e      	beq.n	80072e2 <xTaskCreateStatic+0xaa>
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01b      	beq.n	80072e2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072bc:	2300      	movs	r3, #0
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 f850 	bl	800737a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072dc:	f000 f8d4 	bl	8007488 <prvAddNewTaskToReadyList>
 80072e0:	e001      	b.n	80072e6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072e6:	697b      	ldr	r3, [r7, #20]
	}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	; 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b08c      	sub	sp, #48	; 0x30
 80072f4:	af04      	add	r7, sp, #16
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	603b      	str	r3, [r7, #0]
 80072fc:	4613      	mov	r3, r2
 80072fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007300:	88fb      	ldrh	r3, [r7, #6]
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4618      	mov	r0, r3
 8007306:	f001 fdf1 	bl	8008eec <pvPortMalloc>
 800730a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00e      	beq.n	8007330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007312:	205c      	movs	r0, #92	; 0x5c
 8007314:	f001 fdea 	bl	8008eec <pvPortMalloc>
 8007318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	631a      	str	r2, [r3, #48]	; 0x30
 8007326:	e005      	b.n	8007334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f001 fea3 	bl	8009074 <vPortFree>
 800732e:	e001      	b.n	8007334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d017      	beq.n	800736a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	2300      	movs	r3, #0
 8007346:	9303      	str	r3, [sp, #12]
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	9302      	str	r3, [sp, #8]
 800734c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68b9      	ldr	r1, [r7, #8]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 f80e 	bl	800737a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800735e:	69f8      	ldr	r0, [r7, #28]
 8007360:	f000 f892 	bl	8007488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007364:	2301      	movs	r3, #1
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e002      	b.n	8007370 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800736a:	f04f 33ff 	mov.w	r3, #4294967295
 800736e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007370:	69bb      	ldr	r3, [r7, #24]
	}
 8007372:	4618      	mov	r0, r3
 8007374:	3720      	adds	r7, #32
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
 8007386:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	461a      	mov	r2, r3
 8007392:	21a5      	movs	r1, #165	; 0xa5
 8007394:	f001 ffd6 	bl	8009344 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80073a2:	3b01      	subs	r3, #1
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	f023 0307 	bic.w	r3, r3, #7
 80073b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	617b      	str	r3, [r7, #20]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	e012      	b.n	80073fe <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	7819      	ldrb	r1, [r3, #0]
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	3334      	adds	r3, #52	; 0x34
 80073e8:	460a      	mov	r2, r1
 80073ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2b0f      	cmp	r3, #15
 8007402:	d9e9      	bls.n	80073d8 <prvInitialiseNewTask+0x5e>
 8007404:	e000      	b.n	8007408 <prvInitialiseNewTask+0x8e>
		{
			break;
 8007406:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	2b37      	cmp	r3, #55	; 0x37
 8007414:	d901      	bls.n	800741a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007416:	2337      	movs	r3, #55	; 0x37
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800741e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007424:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	2200      	movs	r2, #0
 800742a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe fff8 	bl	8006426 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	3318      	adds	r3, #24
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fff3 	bl	8006426 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007444:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007454:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	2200      	movs	r2, #0
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	69b8      	ldr	r0, [r7, #24]
 800746a:	f001 fb4b 	bl	8008b04 <pxPortInitialiseStack>
 800746e:	4602      	mov	r2, r0
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800747e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007480:	bf00      	nop
 8007482:	3720      	adds	r7, #32
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007490:	f001 fc2c 	bl	8008cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007494:	4b2d      	ldr	r3, [pc, #180]	; (800754c <prvAddNewTaskToReadyList+0xc4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	4a2c      	ldr	r2, [pc, #176]	; (800754c <prvAddNewTaskToReadyList+0xc4>)
 800749c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800749e:	4b2c      	ldr	r3, [pc, #176]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d109      	bne.n	80074ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074a6:	4a2a      	ldr	r2, [pc, #168]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074ac:	4b27      	ldr	r3, [pc, #156]	; (800754c <prvAddNewTaskToReadyList+0xc4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d110      	bne.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074b4:	f000 fd32 	bl	8007f1c <prvInitialiseTaskLists>
 80074b8:	e00d      	b.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074ba:	4b26      	ldr	r3, [pc, #152]	; (8007554 <prvAddNewTaskToReadyList+0xcc>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d109      	bne.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074c2:	4b23      	ldr	r3, [pc, #140]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d802      	bhi.n	80074d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074d0:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <prvAddNewTaskToReadyList+0xd0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a1e      	ldr	r2, [pc, #120]	; (8007558 <prvAddNewTaskToReadyList+0xd0>)
 80074de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074e0:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <prvAddNewTaskToReadyList+0xd0>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4b1b      	ldr	r3, [pc, #108]	; (800755c <prvAddNewTaskToReadyList+0xd4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d903      	bls.n	80074fc <prvAddNewTaskToReadyList+0x74>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	4a18      	ldr	r2, [pc, #96]	; (800755c <prvAddNewTaskToReadyList+0xd4>)
 80074fa:	6013      	str	r3, [r2, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4a15      	ldr	r2, [pc, #84]	; (8007560 <prvAddNewTaskToReadyList+0xd8>)
 800750a:	441a      	add	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3304      	adds	r3, #4
 8007510:	4619      	mov	r1, r3
 8007512:	4610      	mov	r0, r2
 8007514:	f7fe ff93 	bl	800643e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007518:	f001 fc18 	bl	8008d4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800751c:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <prvAddNewTaskToReadyList+0xcc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00e      	beq.n	8007542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007524:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <prvAddNewTaskToReadyList+0xc8>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752e:	429a      	cmp	r2, r3
 8007530:	d207      	bcs.n	8007542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <prvAddNewTaskToReadyList+0xdc>)
 8007534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000f88 	.word	0x20000f88
 8007550:	20000ab4 	.word	0x20000ab4
 8007554:	20000f94 	.word	0x20000f94
 8007558:	20000fa4 	.word	0x20000fa4
 800755c:	20000f90 	.word	0x20000f90
 8007560:	20000ab8 	.word	0x20000ab8
 8007564:	e000ed04 	.word	0xe000ed04

08007568 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007572:	2300      	movs	r3, #0
 8007574:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10a      	bne.n	8007592 <vTaskDelayUntil+0x2a>
	__asm volatile
 800757c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	617b      	str	r3, [r7, #20]
}
 800758e:	bf00      	nop
 8007590:	e7fe      	b.n	8007590 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10a      	bne.n	80075ae <vTaskDelayUntil+0x46>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	613b      	str	r3, [r7, #16]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80075ae:	4b2a      	ldr	r3, [pc, #168]	; (8007658 <vTaskDelayUntil+0xf0>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00a      	beq.n	80075cc <vTaskDelayUntil+0x64>
	__asm volatile
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
 80075c2:	f3bf 8f4f 	dsb	sy
 80075c6:	60fb      	str	r3, [r7, #12]
}
 80075c8:	bf00      	nop
 80075ca:	e7fe      	b.n	80075ca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80075cc:	f000 f8e4 	bl	8007798 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80075d0:	4b22      	ldr	r3, [pc, #136]	; (800765c <vTaskDelayUntil+0xf4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	4413      	add	r3, r2
 80075de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6a3a      	ldr	r2, [r7, #32]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d20b      	bcs.n	8007602 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d211      	bcs.n	8007618 <vTaskDelayUntil+0xb0>
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d90d      	bls.n	8007618 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80075fc:	2301      	movs	r3, #1
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007600:	e00a      	b.n	8007618 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	429a      	cmp	r2, r3
 800760a:	d303      	bcc.n	8007614 <vTaskDelayUntil+0xac>
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	6a3b      	ldr	r3, [r7, #32]
 8007610:	429a      	cmp	r2, r3
 8007612:	d901      	bls.n	8007618 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007614:	2301      	movs	r3, #1
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2100      	movs	r1, #0
 800762c:	4618      	mov	r0, r3
 800762e:	f000 fee3 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007632:	f000 f8bf 	bl	80077b4 <xTaskResumeAll>
 8007636:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d107      	bne.n	800764e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800763e:	4b08      	ldr	r3, [pc, #32]	; (8007660 <vTaskDelayUntil+0xf8>)
 8007640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007644:	601a      	str	r2, [r3, #0]
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800764e:	bf00      	nop
 8007650:	3728      	adds	r7, #40	; 0x28
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	20000fb0 	.word	0x20000fb0
 800765c:	20000f8c 	.word	0x20000f8c
 8007660:	e000ed04 	.word	0xe000ed04

08007664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800766c:	2300      	movs	r3, #0
 800766e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d017      	beq.n	80076a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007676:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <vTaskDelay+0x60>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00a      	beq.n	8007694 <vTaskDelay+0x30>
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	60bb      	str	r3, [r7, #8]
}
 8007690:	bf00      	nop
 8007692:	e7fe      	b.n	8007692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007694:	f000 f880 	bl	8007798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007698:	2100      	movs	r1, #0
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 feac 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80076a0:	f000 f888 	bl	80077b4 <xTaskResumeAll>
 80076a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d107      	bne.n	80076bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <vTaskDelay+0x64>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000fb0 	.word	0x20000fb0
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08a      	sub	sp, #40	; 0x28
 80076d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076da:	463a      	mov	r2, r7
 80076dc:	1d39      	adds	r1, r7, #4
 80076de:	f107 0308 	add.w	r3, r7, #8
 80076e2:	4618      	mov	r0, r3
 80076e4:	f7fe fc98 	bl	8006018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	9202      	str	r2, [sp, #8]
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	2300      	movs	r3, #0
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	2300      	movs	r3, #0
 80076f8:	460a      	mov	r2, r1
 80076fa:	4921      	ldr	r1, [pc, #132]	; (8007780 <vTaskStartScheduler+0xb4>)
 80076fc:	4821      	ldr	r0, [pc, #132]	; (8007784 <vTaskStartScheduler+0xb8>)
 80076fe:	f7ff fd9b 	bl	8007238 <xTaskCreateStatic>
 8007702:	4603      	mov	r3, r0
 8007704:	4a20      	ldr	r2, [pc, #128]	; (8007788 <vTaskStartScheduler+0xbc>)
 8007706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007708:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <vTaskStartScheduler+0xbc>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007710:	2301      	movs	r3, #1
 8007712:	617b      	str	r3, [r7, #20]
 8007714:	e001      	b.n	800771a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d102      	bne.n	8007726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007720:	f000 febe 	bl	80084a0 <xTimerCreateTimerTask>
 8007724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d116      	bne.n	800775a <vTaskStartScheduler+0x8e>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	613b      	str	r3, [r7, #16]
}
 800773e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007740:	4b12      	ldr	r3, [pc, #72]	; (800778c <vTaskStartScheduler+0xc0>)
 8007742:	f04f 32ff 	mov.w	r2, #4294967295
 8007746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007748:	4b11      	ldr	r3, [pc, #68]	; (8007790 <vTaskStartScheduler+0xc4>)
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800774e:	4b11      	ldr	r3, [pc, #68]	; (8007794 <vTaskStartScheduler+0xc8>)
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007754:	f001 fa58 	bl	8008c08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007758:	e00e      	b.n	8007778 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d10a      	bne.n	8007778 <vTaskStartScheduler+0xac>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60fb      	str	r3, [r7, #12]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <vTaskStartScheduler+0xaa>
}
 8007778:	bf00      	nop
 800777a:	3718      	adds	r7, #24
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	0800dbb0 	.word	0x0800dbb0
 8007784:	08007eed 	.word	0x08007eed
 8007788:	20000fac 	.word	0x20000fac
 800778c:	20000fa8 	.word	0x20000fa8
 8007790:	20000f94 	.word	0x20000f94
 8007794:	20000f8c 	.word	0x20000f8c

08007798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <vTaskSuspendAll+0x18>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	4a03      	ldr	r2, [pc, #12]	; (80077b0 <vTaskSuspendAll+0x18>)
 80077a4:	6013      	str	r3, [r2, #0]
}
 80077a6:	bf00      	nop
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bc80      	pop	{r7}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000fb0 	.word	0x20000fb0

080077b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077c2:	4b42      	ldr	r3, [pc, #264]	; (80078cc <xTaskResumeAll+0x118>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	603b      	str	r3, [r7, #0]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077e0:	f001 fa84 	bl	8008cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077e4:	4b39      	ldr	r3, [pc, #228]	; (80078cc <xTaskResumeAll+0x118>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	4a38      	ldr	r2, [pc, #224]	; (80078cc <xTaskResumeAll+0x118>)
 80077ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ee:	4b37      	ldr	r3, [pc, #220]	; (80078cc <xTaskResumeAll+0x118>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d162      	bne.n	80078bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077f6:	4b36      	ldr	r3, [pc, #216]	; (80078d0 <xTaskResumeAll+0x11c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d05e      	beq.n	80078bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077fe:	e02f      	b.n	8007860 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007800:	4b34      	ldr	r3, [pc, #208]	; (80078d4 <xTaskResumeAll+0x120>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3318      	adds	r3, #24
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe fe71 	bl	80064f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3304      	adds	r3, #4
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe fe6c 	bl	80064f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b2d      	ldr	r3, [pc, #180]	; (80078d8 <xTaskResumeAll+0x124>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <xTaskResumeAll+0x7c>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a2a      	ldr	r2, [pc, #168]	; (80078d8 <xTaskResumeAll+0x124>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a27      	ldr	r2, [pc, #156]	; (80078dc <xTaskResumeAll+0x128>)
 800783e:	441a      	add	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe fdf9 	bl	800643e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007850:	4b23      	ldr	r3, [pc, #140]	; (80078e0 <xTaskResumeAll+0x12c>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	429a      	cmp	r2, r3
 8007858:	d302      	bcc.n	8007860 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800785a:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <xTaskResumeAll+0x130>)
 800785c:	2201      	movs	r2, #1
 800785e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007860:	4b1c      	ldr	r3, [pc, #112]	; (80078d4 <xTaskResumeAll+0x120>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1cb      	bne.n	8007800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800786e:	f000 fbf3 	bl	8008058 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007872:	4b1d      	ldr	r3, [pc, #116]	; (80078e8 <xTaskResumeAll+0x134>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d010      	beq.n	80078a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800787e:	f000 f845 	bl	800790c <xTaskIncrementTick>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007888:	4b16      	ldr	r3, [pc, #88]	; (80078e4 <xTaskResumeAll+0x130>)
 800788a:	2201      	movs	r2, #1
 800788c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3b01      	subs	r3, #1
 8007892:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1f1      	bne.n	800787e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <xTaskResumeAll+0x134>)
 800789c:	2200      	movs	r2, #0
 800789e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078a0:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <xTaskResumeAll+0x130>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d009      	beq.n	80078bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078a8:	2301      	movs	r3, #1
 80078aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <xTaskResumeAll+0x138>)
 80078ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078bc:	f001 fa46 	bl	8008d4c <vPortExitCritical>

	return xAlreadyYielded;
 80078c0:	68bb      	ldr	r3, [r7, #8]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	20000fb0 	.word	0x20000fb0
 80078d0:	20000f88 	.word	0x20000f88
 80078d4:	20000f48 	.word	0x20000f48
 80078d8:	20000f90 	.word	0x20000f90
 80078dc:	20000ab8 	.word	0x20000ab8
 80078e0:	20000ab4 	.word	0x20000ab4
 80078e4:	20000f9c 	.word	0x20000f9c
 80078e8:	20000f98 	.word	0x20000f98
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078f6:	4b04      	ldr	r3, [pc, #16]	; (8007908 <xTaskGetTickCount+0x18>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80078fc:	687b      	ldr	r3, [r7, #4]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	20000f8c 	.word	0x20000f8c

0800790c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007912:	2300      	movs	r3, #0
 8007914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007916:	4b51      	ldr	r3, [pc, #324]	; (8007a5c <xTaskIncrementTick+0x150>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 808e 	bne.w	8007a3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007920:	4b4f      	ldr	r3, [pc, #316]	; (8007a60 <xTaskIncrementTick+0x154>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3301      	adds	r3, #1
 8007926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007928:	4a4d      	ldr	r2, [pc, #308]	; (8007a60 <xTaskIncrementTick+0x154>)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d120      	bne.n	8007976 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007934:	4b4b      	ldr	r3, [pc, #300]	; (8007a64 <xTaskIncrementTick+0x158>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <xTaskIncrementTick+0x48>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	603b      	str	r3, [r7, #0]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <xTaskIncrementTick+0x46>
 8007954:	4b43      	ldr	r3, [pc, #268]	; (8007a64 <xTaskIncrementTick+0x158>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	60fb      	str	r3, [r7, #12]
 800795a:	4b43      	ldr	r3, [pc, #268]	; (8007a68 <xTaskIncrementTick+0x15c>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a41      	ldr	r2, [pc, #260]	; (8007a64 <xTaskIncrementTick+0x158>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	4a41      	ldr	r2, [pc, #260]	; (8007a68 <xTaskIncrementTick+0x15c>)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	4b40      	ldr	r3, [pc, #256]	; (8007a6c <xTaskIncrementTick+0x160>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	4a3f      	ldr	r2, [pc, #252]	; (8007a6c <xTaskIncrementTick+0x160>)
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	f000 fb71 	bl	8008058 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007976:	4b3e      	ldr	r3, [pc, #248]	; (8007a70 <xTaskIncrementTick+0x164>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	693a      	ldr	r2, [r7, #16]
 800797c:	429a      	cmp	r2, r3
 800797e:	d34e      	bcc.n	8007a1e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007980:	4b38      	ldr	r3, [pc, #224]	; (8007a64 <xTaskIncrementTick+0x158>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <xTaskIncrementTick+0x82>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xTaskIncrementTick+0x84>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007994:	4b36      	ldr	r3, [pc, #216]	; (8007a70 <xTaskIncrementTick+0x164>)
 8007996:	f04f 32ff 	mov.w	r2, #4294967295
 800799a:	601a      	str	r2, [r3, #0]
					break;
 800799c:	e03f      	b.n	8007a1e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800799e:	4b31      	ldr	r3, [pc, #196]	; (8007a64 <xTaskIncrementTick+0x158>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d203      	bcs.n	80079be <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079b6:	4a2e      	ldr	r2, [pc, #184]	; (8007a70 <xTaskIncrementTick+0x164>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6013      	str	r3, [r2, #0]
						break;
 80079bc:	e02f      	b.n	8007a1e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fd96 	bl	80064f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3318      	adds	r3, #24
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fe fd8d 	bl	80064f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	4b25      	ldr	r3, [pc, #148]	; (8007a74 <xTaskIncrementTick+0x168>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d903      	bls.n	80079ee <xTaskIncrementTick+0xe2>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	4a22      	ldr	r2, [pc, #136]	; (8007a74 <xTaskIncrementTick+0x168>)
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <xTaskIncrementTick+0x16c>)
 80079fc:	441a      	add	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f7fe fd1a 	bl	800643e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0e:	4b1b      	ldr	r3, [pc, #108]	; (8007a7c <xTaskIncrementTick+0x170>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d3b3      	bcc.n	8007980 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1c:	e7b0      	b.n	8007980 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a1e:	4b17      	ldr	r3, [pc, #92]	; (8007a7c <xTaskIncrementTick+0x170>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a24:	4914      	ldr	r1, [pc, #80]	; (8007a78 <xTaskIncrementTick+0x16c>)
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d907      	bls.n	8007a46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007a36:	2301      	movs	r3, #1
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e004      	b.n	8007a46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <xTaskIncrementTick+0x174>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3301      	adds	r3, #1
 8007a42:	4a0f      	ldr	r2, [pc, #60]	; (8007a80 <xTaskIncrementTick+0x174>)
 8007a44:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <xTaskIncrementTick+0x178>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007a52:	697b      	ldr	r3, [r7, #20]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3718      	adds	r7, #24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000fb0 	.word	0x20000fb0
 8007a60:	20000f8c 	.word	0x20000f8c
 8007a64:	20000f40 	.word	0x20000f40
 8007a68:	20000f44 	.word	0x20000f44
 8007a6c:	20000fa0 	.word	0x20000fa0
 8007a70:	20000fa8 	.word	0x20000fa8
 8007a74:	20000f90 	.word	0x20000f90
 8007a78:	20000ab8 	.word	0x20000ab8
 8007a7c:	20000ab4 	.word	0x20000ab4
 8007a80:	20000f98 	.word	0x20000f98
 8007a84:	20000f9c 	.word	0x20000f9c

08007a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a8e:	4b27      	ldr	r3, [pc, #156]	; (8007b2c <vTaskSwitchContext+0xa4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a96:	4b26      	ldr	r3, [pc, #152]	; (8007b30 <vTaskSwitchContext+0xa8>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a9c:	e041      	b.n	8007b22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a9e:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <vTaskSwitchContext+0xa8>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007aa4:	4b23      	ldr	r3, [pc, #140]	; (8007b34 <vTaskSwitchContext+0xac>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
 8007aaa:	e010      	b.n	8007ace <vTaskSwitchContext+0x46>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	607b      	str	r3, [r7, #4]
}
 8007ac4:	bf00      	nop
 8007ac6:	e7fe      	b.n	8007ac6 <vTaskSwitchContext+0x3e>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	60fb      	str	r3, [r7, #12]
 8007ace:	491a      	ldr	r1, [pc, #104]	; (8007b38 <vTaskSwitchContext+0xb0>)
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0e4      	beq.n	8007aac <vTaskSwitchContext+0x24>
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4413      	add	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4a12      	ldr	r2, [pc, #72]	; (8007b38 <vTaskSwitchContext+0xb0>)
 8007aee:	4413      	add	r3, r2
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	605a      	str	r2, [r3, #4]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	3308      	adds	r3, #8
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d104      	bne.n	8007b12 <vTaskSwitchContext+0x8a>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	605a      	str	r2, [r3, #4]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4a08      	ldr	r2, [pc, #32]	; (8007b3c <vTaskSwitchContext+0xb4>)
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	4a05      	ldr	r2, [pc, #20]	; (8007b34 <vTaskSwitchContext+0xac>)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6013      	str	r3, [r2, #0]
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr
 8007b2c:	20000fb0 	.word	0x20000fb0
 8007b30:	20000f9c 	.word	0x20000f9c
 8007b34:	20000f90 	.word	0x20000f90
 8007b38:	20000ab8 	.word	0x20000ab8
 8007b3c:	20000ab4 	.word	0x20000ab4

08007b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	60fb      	str	r3, [r7, #12]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b66:	4b07      	ldr	r3, [pc, #28]	; (8007b84 <vTaskPlaceOnEventList+0x44>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3318      	adds	r3, #24
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fe fc88 	bl	8006484 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b74:	2101      	movs	r1, #1
 8007b76:	6838      	ldr	r0, [r7, #0]
 8007b78:	f000 fc3e 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
}
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	20000ab4 	.word	0x20000ab4

08007b88 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10a      	bne.n	8007bb0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	617b      	str	r3, [r7, #20]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007bb0:	4b11      	ldr	r3, [pc, #68]	; (8007bf8 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10a      	bne.n	8007bce <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	613b      	str	r3, [r7, #16]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007bce:	4b0b      	ldr	r3, [pc, #44]	; (8007bfc <vTaskPlaceOnUnorderedEventList+0x74>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007bd8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bda:	4b08      	ldr	r3, [pc, #32]	; (8007bfc <vTaskPlaceOnUnorderedEventList+0x74>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3318      	adds	r3, #24
 8007be0:	4619      	mov	r1, r3
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f7fe fc2b 	bl	800643e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007be8:	2101      	movs	r1, #1
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fc04 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
}
 8007bf0:	bf00      	nop
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000fb0 	.word	0x20000fb0
 8007bfc:	20000ab4 	.word	0x20000ab4

08007c00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b086      	sub	sp, #24
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d10a      	bne.n	8007c28 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	617b      	str	r3, [r7, #20]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c28:	4b0a      	ldr	r3, [pc, #40]	; (8007c54 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3318      	adds	r3, #24
 8007c2e:	4619      	mov	r1, r3
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7fe fc04 	bl	800643e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c40:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c42:	6879      	ldr	r1, [r7, #4]
 8007c44:	68b8      	ldr	r0, [r7, #8]
 8007c46:	f000 fbd7 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
	}
 8007c4a:	bf00      	nop
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000ab4 	.word	0x20000ab4

08007c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d10a      	bne.n	8007c84 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c72:	f383 8811 	msr	BASEPRI, r3
 8007c76:	f3bf 8f6f 	isb	sy
 8007c7a:	f3bf 8f4f 	dsb	sy
 8007c7e:	60fb      	str	r3, [r7, #12]
}
 8007c80:	bf00      	nop
 8007c82:	e7fe      	b.n	8007c82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	3318      	adds	r3, #24
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe fc33 	bl	80064f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c8e:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <xTaskRemoveFromEventList+0xb0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d11d      	bne.n	8007cd2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fc2a 	bl	80064f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca4:	4b19      	ldr	r3, [pc, #100]	; (8007d0c <xTaskRemoveFromEventList+0xb4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d903      	bls.n	8007cb4 <xTaskRemoveFromEventList+0x5c>
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	4a16      	ldr	r2, [pc, #88]	; (8007d0c <xTaskRemoveFromEventList+0xb4>)
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4a13      	ldr	r2, [pc, #76]	; (8007d10 <xTaskRemoveFromEventList+0xb8>)
 8007cc2:	441a      	add	r2, r3
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4610      	mov	r0, r2
 8007ccc:	f7fe fbb7 	bl	800643e <vListInsertEnd>
 8007cd0:	e005      	b.n	8007cde <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	480e      	ldr	r0, [pc, #56]	; (8007d14 <xTaskRemoveFromEventList+0xbc>)
 8007cda:	f7fe fbb0 	bl	800643e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <xTaskRemoveFromEventList+0xc0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d905      	bls.n	8007cf8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <xTaskRemoveFromEventList+0xc4>)
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	e001      	b.n	8007cfc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007cfc:	697b      	ldr	r3, [r7, #20]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000fb0 	.word	0x20000fb0
 8007d0c:	20000f90 	.word	0x20000f90
 8007d10:	20000ab8 	.word	0x20000ab8
 8007d14:	20000f48 	.word	0x20000f48
 8007d18:	20000ab4 	.word	0x20000ab4
 8007d1c:	20000f9c 	.word	0x20000f9c

08007d20 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007d2a:	4b29      	ldr	r3, [pc, #164]	; (8007dd0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10a      	bne.n	8007d48 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	613b      	str	r3, [r7, #16]
}
 8007d44:	bf00      	nop
 8007d46:	e7fe      	b.n	8007d46 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10a      	bne.n	8007d74 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7fe fbbd 	bl	80064f4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fbb8 	bl	80064f4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d903      	bls.n	8007d98 <vTaskRemoveFromUnorderedEventList+0x78>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	4a0f      	ldr	r2, [pc, #60]	; (8007dd4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007d96:	6013      	str	r3, [r2, #0]
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	4a0c      	ldr	r2, [pc, #48]	; (8007dd8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007da6:	441a      	add	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	3304      	adds	r3, #4
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f7fe fb45 	bl	800643e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db8:	4b08      	ldr	r3, [pc, #32]	; (8007ddc <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d902      	bls.n	8007dc8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007dc2:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]
	}
}
 8007dc8:	bf00      	nop
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	20000fb0 	.word	0x20000fb0
 8007dd4:	20000f90 	.word	0x20000f90
 8007dd8:	20000ab8 	.word	0x20000ab8
 8007ddc:	20000ab4 	.word	0x20000ab4
 8007de0:	20000f9c 	.word	0x20000f9c

08007de4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <vTaskInternalSetTimeOutState+0x24>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <vTaskInternalSetTimeOutState+0x28>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	605a      	str	r2, [r3, #4]
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bc80      	pop	{r7}
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000fa0 	.word	0x20000fa0
 8007e0c:	20000f8c 	.word	0x20000f8c

08007e10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b088      	sub	sp, #32
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10a      	bne.n	8007e36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e24:	f383 8811 	msr	BASEPRI, r3
 8007e28:	f3bf 8f6f 	isb	sy
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	613b      	str	r3, [r7, #16]
}
 8007e32:	bf00      	nop
 8007e34:	e7fe      	b.n	8007e34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10a      	bne.n	8007e52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e40:	f383 8811 	msr	BASEPRI, r3
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	60fb      	str	r3, [r7, #12]
}
 8007e4e:	bf00      	nop
 8007e50:	e7fe      	b.n	8007e50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e52:	f000 ff4b 	bl	8008cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e56:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <xTaskCheckForTimeOut+0xbc>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d102      	bne.n	8007e76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61fb      	str	r3, [r7, #28]
 8007e74:	e023      	b.n	8007ebe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b15      	ldr	r3, [pc, #84]	; (8007ed0 <xTaskCheckForTimeOut+0xc0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d007      	beq.n	8007e92 <xTaskCheckForTimeOut+0x82>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d302      	bcc.n	8007e92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	e015      	b.n	8007ebe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d20b      	bcs.n	8007eb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	1ad2      	subs	r2, r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff ff9b 	bl	8007de4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	61fb      	str	r3, [r7, #28]
 8007eb2:	e004      	b.n	8007ebe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ebe:	f000 ff45 	bl	8008d4c <vPortExitCritical>

	return xReturn;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	20000f8c 	.word	0x20000f8c
 8007ed0:	20000fa0 	.word	0x20000fa0

08007ed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ed8:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <vTaskMissedYield+0x14>)
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20000f9c 	.word	0x20000f9c

08007eec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ef4:	f000 f852 	bl	8007f9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ef8:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <prvIdleTask+0x28>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d9f9      	bls.n	8007ef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f00:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <prvIdleTask+0x2c>)
 8007f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f10:	e7f0      	b.n	8007ef4 <prvIdleTask+0x8>
 8007f12:	bf00      	nop
 8007f14:	20000ab8 	.word	0x20000ab8
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
 8007f26:	e00c      	b.n	8007f42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4a12      	ldr	r2, [pc, #72]	; (8007f7c <prvInitialiseTaskLists+0x60>)
 8007f34:	4413      	add	r3, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fa56 	bl	80063e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	607b      	str	r3, [r7, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b37      	cmp	r3, #55	; 0x37
 8007f46:	d9ef      	bls.n	8007f28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f48:	480d      	ldr	r0, [pc, #52]	; (8007f80 <prvInitialiseTaskLists+0x64>)
 8007f4a:	f7fe fa4d 	bl	80063e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f4e:	480d      	ldr	r0, [pc, #52]	; (8007f84 <prvInitialiseTaskLists+0x68>)
 8007f50:	f7fe fa4a 	bl	80063e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f54:	480c      	ldr	r0, [pc, #48]	; (8007f88 <prvInitialiseTaskLists+0x6c>)
 8007f56:	f7fe fa47 	bl	80063e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f5a:	480c      	ldr	r0, [pc, #48]	; (8007f8c <prvInitialiseTaskLists+0x70>)
 8007f5c:	f7fe fa44 	bl	80063e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f60:	480b      	ldr	r0, [pc, #44]	; (8007f90 <prvInitialiseTaskLists+0x74>)
 8007f62:	f7fe fa41 	bl	80063e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f66:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <prvInitialiseTaskLists+0x78>)
 8007f68:	4a05      	ldr	r2, [pc, #20]	; (8007f80 <prvInitialiseTaskLists+0x64>)
 8007f6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <prvInitialiseTaskLists+0x7c>)
 8007f6e:	4a05      	ldr	r2, [pc, #20]	; (8007f84 <prvInitialiseTaskLists+0x68>)
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000ab8 	.word	0x20000ab8
 8007f80:	20000f18 	.word	0x20000f18
 8007f84:	20000f2c 	.word	0x20000f2c
 8007f88:	20000f48 	.word	0x20000f48
 8007f8c:	20000f5c 	.word	0x20000f5c
 8007f90:	20000f74 	.word	0x20000f74
 8007f94:	20000f40 	.word	0x20000f40
 8007f98:	20000f44 	.word	0x20000f44

08007f9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fa2:	e019      	b.n	8007fd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fa4:	f000 fea2 	bl	8008cec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007fa8:	4b10      	ldr	r3, [pc, #64]	; (8007fec <prvCheckTasksWaitingTermination+0x50>)
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7fe fa9d 	bl	80064f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fba:	4b0d      	ldr	r3, [pc, #52]	; (8007ff0 <prvCheckTasksWaitingTermination+0x54>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	4a0b      	ldr	r2, [pc, #44]	; (8007ff0 <prvCheckTasksWaitingTermination+0x54>)
 8007fc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <prvCheckTasksWaitingTermination+0x58>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	4a0a      	ldr	r2, [pc, #40]	; (8007ff4 <prvCheckTasksWaitingTermination+0x58>)
 8007fcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fce:	f000 febd 	bl	8008d4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f810 	bl	8007ff8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <prvCheckTasksWaitingTermination+0x58>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e1      	bne.n	8007fa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000f5c 	.word	0x20000f5c
 8007ff0:	20000f88 	.word	0x20000f88
 8007ff4:	20000f70 	.word	0x20000f70

08007ff8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008006:	2b00      	cmp	r3, #0
 8008008:	d108      	bne.n	800801c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	4618      	mov	r0, r3
 8008010:	f001 f830 	bl	8009074 <vPortFree>
				vPortFree( pxTCB );
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f82d 	bl	8009074 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800801a:	e018      	b.n	800804e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008022:	2b01      	cmp	r3, #1
 8008024:	d103      	bne.n	800802e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 f824 	bl	8009074 <vPortFree>
	}
 800802c:	e00f      	b.n	800804e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008034:	2b02      	cmp	r3, #2
 8008036:	d00a      	beq.n	800804e <prvDeleteTCB+0x56>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <prvDeleteTCB+0x54>
	}
 800804e:	bf00      	nop
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800805e:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <prvResetNextTaskUnblockTime+0x40>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <prvResetNextTaskUnblockTime+0x14>
 8008068:	2301      	movs	r3, #1
 800806a:	e000      	b.n	800806e <prvResetNextTaskUnblockTime+0x16>
 800806c:	2300      	movs	r3, #0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d004      	beq.n	800807c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008072:	4b0a      	ldr	r3, [pc, #40]	; (800809c <prvResetNextTaskUnblockTime+0x44>)
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800807a:	e008      	b.n	800808e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800807c:	4b06      	ldr	r3, [pc, #24]	; (8008098 <prvResetNextTaskUnblockTime+0x40>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	4a04      	ldr	r2, [pc, #16]	; (800809c <prvResetNextTaskUnblockTime+0x44>)
 800808c:	6013      	str	r3, [r2, #0]
}
 800808e:	bf00      	nop
 8008090:	370c      	adds	r7, #12
 8008092:	46bd      	mov	sp, r7
 8008094:	bc80      	pop	{r7}
 8008096:	4770      	bx	lr
 8008098:	20000f40 	.word	0x20000f40
 800809c:	20000fa8 	.word	0x20000fa8

080080a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <xTaskGetSchedulerState+0x34>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080ae:	2301      	movs	r3, #1
 80080b0:	607b      	str	r3, [r7, #4]
 80080b2:	e008      	b.n	80080c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080b4:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <xTaskGetSchedulerState+0x38>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080bc:	2302      	movs	r3, #2
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	e001      	b.n	80080c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080c2:	2300      	movs	r3, #0
 80080c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080c6:	687b      	ldr	r3, [r7, #4]
	}
 80080c8:	4618      	mov	r0, r3
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	20000f94 	.word	0x20000f94
 80080d8:	20000fb0 	.word	0x20000fb0

080080dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d056      	beq.n	80081a0 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080f6:	4b2d      	ldr	r3, [pc, #180]	; (80081ac <xTaskPriorityInherit+0xd0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d246      	bcs.n	800818e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	db06      	blt.n	8008116 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008108:	4b28      	ldr	r3, [pc, #160]	; (80081ac <xTaskPriorityInherit+0xd0>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6959      	ldr	r1, [r3, #20]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	4a22      	ldr	r2, [pc, #136]	; (80081b0 <xTaskPriorityInherit+0xd4>)
 8008128:	4413      	add	r3, r2
 800812a:	4299      	cmp	r1, r3
 800812c:	d101      	bne.n	8008132 <xTaskPriorityInherit+0x56>
 800812e:	2301      	movs	r3, #1
 8008130:	e000      	b.n	8008134 <xTaskPriorityInherit+0x58>
 8008132:	2300      	movs	r3, #0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d022      	beq.n	800817e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	3304      	adds	r3, #4
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe f9d9 	bl	80064f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008142:	4b1a      	ldr	r3, [pc, #104]	; (80081ac <xTaskPriorityInherit+0xd0>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008150:	4b18      	ldr	r3, [pc, #96]	; (80081b4 <xTaskPriorityInherit+0xd8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d903      	bls.n	8008160 <xTaskPriorityInherit+0x84>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815c:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <xTaskPriorityInherit+0xd8>)
 800815e:	6013      	str	r3, [r2, #0]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008164:	4613      	mov	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4413      	add	r3, r2
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4a10      	ldr	r2, [pc, #64]	; (80081b0 <xTaskPriorityInherit+0xd4>)
 800816e:	441a      	add	r2, r3
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3304      	adds	r3, #4
 8008174:	4619      	mov	r1, r3
 8008176:	4610      	mov	r0, r2
 8008178:	f7fe f961 	bl	800643e <vListInsertEnd>
 800817c:	e004      	b.n	8008188 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800817e:	4b0b      	ldr	r3, [pc, #44]	; (80081ac <xTaskPriorityInherit+0xd0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008188:	2301      	movs	r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e008      	b.n	80081a0 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008192:	4b06      	ldr	r3, [pc, #24]	; (80081ac <xTaskPriorityInherit+0xd0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	429a      	cmp	r2, r3
 800819a:	d201      	bcs.n	80081a0 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800819c:	2301      	movs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081a0:	68fb      	ldr	r3, [r7, #12]
	}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000ab4 	.word	0x20000ab4
 80081b0:	20000ab8 	.word	0x20000ab8
 80081b4:	20000f90 	.word	0x20000f90

080081b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081c4:	2300      	movs	r3, #0
 80081c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d056      	beq.n	800827c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081ce:	4b2e      	ldr	r3, [pc, #184]	; (8008288 <xTaskPriorityDisinherit+0xd0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d00a      	beq.n	80081ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	e7fe      	b.n	80081ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	60bb      	str	r3, [r7, #8]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008210:	1e5a      	subs	r2, r3, #1
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800821e:	429a      	cmp	r2, r3
 8008220:	d02c      	beq.n	800827c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008226:	2b00      	cmp	r3, #0
 8008228:	d128      	bne.n	800827c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3304      	adds	r3, #4
 800822e:	4618      	mov	r0, r3
 8008230:	f7fe f960 	bl	80064f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <xTaskPriorityDisinherit+0xd4>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	429a      	cmp	r2, r3
 8008252:	d903      	bls.n	800825c <xTaskPriorityDisinherit+0xa4>
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008258:	4a0c      	ldr	r2, [pc, #48]	; (800828c <xTaskPriorityDisinherit+0xd4>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008260:	4613      	mov	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <xTaskPriorityDisinherit+0xd8>)
 800826a:	441a      	add	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f7fe f8e3 	bl	800643e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800827c:	697b      	ldr	r3, [r7, #20]
	}
 800827e:	4618      	mov	r0, r3
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000ab4 	.word	0x20000ab4
 800828c:	20000f90 	.word	0x20000f90
 8008290:	20000ab8 	.word	0x20000ab8

08008294 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d06f      	beq.n	800838c <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082ac:	69bb      	ldr	r3, [r7, #24]
 80082ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	60fb      	str	r3, [r7, #12]
}
 80082c6:	bf00      	nop
 80082c8:	e7fe      	b.n	80082c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d902      	bls.n	80082da <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	e002      	b.n	80082e0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d050      	beq.n	800838c <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d14b      	bne.n	800838c <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082f4:	4b27      	ldr	r3, [pc, #156]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d10a      	bne.n	8008314 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008318:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	69fa      	ldr	r2, [r7, #28]
 800831e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	db04      	blt.n	8008332 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	6959      	ldr	r1, [r3, #20]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4613      	mov	r3, r2
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4a15      	ldr	r2, [pc, #84]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008342:	4413      	add	r3, r2
 8008344:	4299      	cmp	r1, r3
 8008346:	d101      	bne.n	800834c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8008348:	2301      	movs	r3, #1
 800834a:	e000      	b.n	800834e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800834c:	2300      	movs	r3, #0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01c      	beq.n	800838c <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	3304      	adds	r3, #4
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe f8cc 	bl	80064f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	4b0e      	ldr	r3, [pc, #56]	; (800839c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	429a      	cmp	r2, r3
 8008366:	d903      	bls.n	8008370 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836c:	4a0b      	ldr	r2, [pc, #44]	; (800839c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800836e:	6013      	str	r3, [r2, #0]
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4a06      	ldr	r2, [pc, #24]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800837e:	441a      	add	r2, r3
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f7fe f859 	bl	800643e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800838c:	bf00      	nop
 800838e:	3720      	adds	r7, #32
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000ab4 	.word	0x20000ab4
 8008398:	20000ab8 	.word	0x20000ab8
 800839c:	20000f90 	.word	0x20000f90

080083a0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <uxTaskResetEventItemValue+0x2c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ae:	4b07      	ldr	r3, [pc, #28]	; (80083cc <uxTaskResetEventItemValue+0x2c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b4:	4b05      	ldr	r3, [pc, #20]	; (80083cc <uxTaskResetEventItemValue+0x2c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80083bc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80083be:	687b      	ldr	r3, [r7, #4]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	20000ab4 	.word	0x20000ab4

080083d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d004      	beq.n	80083e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083e2:	3201      	adds	r2, #1
 80083e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80083e6:	4b03      	ldr	r3, [pc, #12]	; (80083f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80083e8:	681b      	ldr	r3, [r3, #0]
	}
 80083ea:	4618      	mov	r0, r3
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bc80      	pop	{r7}
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20000ab4 	.word	0x20000ab4

080083f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008402:	4b21      	ldr	r3, [pc, #132]	; (8008488 <prvAddCurrentTaskToDelayedList+0x90>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008408:	4b20      	ldr	r3, [pc, #128]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3304      	adds	r3, #4
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe f870 	bl	80064f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841a:	d10a      	bne.n	8008432 <prvAddCurrentTaskToDelayedList+0x3a>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008422:	4b1a      	ldr	r3, [pc, #104]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3304      	adds	r3, #4
 8008428:	4619      	mov	r1, r3
 800842a:	4819      	ldr	r0, [pc, #100]	; (8008490 <prvAddCurrentTaskToDelayedList+0x98>)
 800842c:	f7fe f807 	bl	800643e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008430:	e026      	b.n	8008480 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4413      	add	r3, r2
 8008438:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800843a:	4b14      	ldr	r3, [pc, #80]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	429a      	cmp	r2, r3
 8008448:	d209      	bcs.n	800845e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800844a:	4b12      	ldr	r3, [pc, #72]	; (8008494 <prvAddCurrentTaskToDelayedList+0x9c>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f7fe f814 	bl	8006484 <vListInsert>
}
 800845c:	e010      	b.n	8008480 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800845e:	4b0e      	ldr	r3, [pc, #56]	; (8008498 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <prvAddCurrentTaskToDelayedList+0x94>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3304      	adds	r3, #4
 8008468:	4619      	mov	r1, r3
 800846a:	4610      	mov	r0, r2
 800846c:	f7fe f80a 	bl	8006484 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008470:	4b0a      	ldr	r3, [pc, #40]	; (800849c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	429a      	cmp	r2, r3
 8008478:	d202      	bcs.n	8008480 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800847a:	4a08      	ldr	r2, [pc, #32]	; (800849c <prvAddCurrentTaskToDelayedList+0xa4>)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6013      	str	r3, [r2, #0]
}
 8008480:	bf00      	nop
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20000f8c 	.word	0x20000f8c
 800848c:	20000ab4 	.word	0x20000ab4
 8008490:	20000f74 	.word	0x20000f74
 8008494:	20000f44 	.word	0x20000f44
 8008498:	20000f40 	.word	0x20000f40
 800849c:	20000fa8 	.word	0x20000fa8

080084a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	; 0x28
 80084a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084aa:	f000 facb 	bl	8008a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084ae:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <xTimerCreateTimerTask+0x80>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d021      	beq.n	80084fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084be:	1d3a      	adds	r2, r7, #4
 80084c0:	f107 0108 	add.w	r1, r7, #8
 80084c4:	f107 030c 	add.w	r3, r7, #12
 80084c8:	4618      	mov	r0, r3
 80084ca:	f7fd fdbd 	bl	8006048 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	9301      	str	r3, [sp, #4]
 80084d8:	2302      	movs	r3, #2
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2300      	movs	r3, #0
 80084de:	460a      	mov	r2, r1
 80084e0:	4910      	ldr	r1, [pc, #64]	; (8008524 <xTimerCreateTimerTask+0x84>)
 80084e2:	4811      	ldr	r0, [pc, #68]	; (8008528 <xTimerCreateTimerTask+0x88>)
 80084e4:	f7fe fea8 	bl	8007238 <xTaskCreateStatic>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4a10      	ldr	r2, [pc, #64]	; (800852c <xTimerCreateTimerTask+0x8c>)
 80084ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <xTimerCreateTimerTask+0x8c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d001      	beq.n	80084fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084f6:	2301      	movs	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10a      	bne.n	8008516 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008516:	697b      	ldr	r3, [r7, #20]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000fe4 	.word	0x20000fe4
 8008524:	0800dbb8 	.word	0x0800dbb8
 8008528:	0800864d 	.word	0x0800864d
 800852c:	20000fe8 	.word	0x20000fe8

08008530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	; 0x28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10a      	bne.n	800855e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	623b      	str	r3, [r7, #32]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800855e:	4b1a      	ldr	r3, [pc, #104]	; (80085c8 <xTimerGenericCommand+0x98>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02a      	beq.n	80085bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b05      	cmp	r3, #5
 8008576:	dc18      	bgt.n	80085aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008578:	f7ff fd92 	bl	80080a0 <xTaskGetSchedulerState>
 800857c:	4603      	mov	r3, r0
 800857e:	2b02      	cmp	r3, #2
 8008580:	d109      	bne.n	8008596 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008582:	4b11      	ldr	r3, [pc, #68]	; (80085c8 <xTimerGenericCommand+0x98>)
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f107 0110 	add.w	r1, r7, #16
 800858a:	2300      	movs	r3, #0
 800858c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800858e:	f7fe f94d 	bl	800682c <xQueueGenericSend>
 8008592:	6278      	str	r0, [r7, #36]	; 0x24
 8008594:	e012      	b.n	80085bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008596:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <xTimerGenericCommand+0x98>)
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f107 0110 	add.w	r1, r7, #16
 800859e:	2300      	movs	r3, #0
 80085a0:	2200      	movs	r2, #0
 80085a2:	f7fe f943 	bl	800682c <xQueueGenericSend>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24
 80085a8:	e008      	b.n	80085bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085aa:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <xTimerGenericCommand+0x98>)
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f107 0110 	add.w	r1, r7, #16
 80085b2:	2300      	movs	r3, #0
 80085b4:	683a      	ldr	r2, [r7, #0]
 80085b6:	f7fe fa37 	bl	8006a28 <xQueueGenericSendFromISR>
 80085ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3728      	adds	r7, #40	; 0x28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20000fe4 	.word	0x20000fe4

080085cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085d6:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <prvProcessExpiredTimer+0x7c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fd ff85 	bl	80064f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	69db      	ldr	r3, [r3, #28]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d122      	bne.n	8008638 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	18d1      	adds	r1, r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	6978      	ldr	r0, [r7, #20]
 8008600:	f000 f8c8 	bl	8008794 <prvInsertTimerInActiveList>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d016      	beq.n	8008638 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800860a:	2300      	movs	r3, #0
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	2300      	movs	r3, #0
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	2100      	movs	r1, #0
 8008614:	6978      	ldr	r0, [r7, #20]
 8008616:	f7ff ff8b 	bl	8008530 <xTimerGenericCommand>
 800861a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d10a      	bne.n	8008638 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60fb      	str	r3, [r7, #12]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	6978      	ldr	r0, [r7, #20]
 800863e:	4798      	blx	r3
}
 8008640:	bf00      	nop
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	20000fdc 	.word	0x20000fdc

0800864c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008654:	f107 0308 	add.w	r3, r7, #8
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f857 	bl	800870c <prvGetNextExpireTime>
 800865e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	4619      	mov	r1, r3
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 f803 	bl	8008670 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800866a:	f000 f8d5 	bl	8008818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800866e:	e7f1      	b.n	8008654 <prvTimerTask+0x8>

08008670 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800867a:	f7ff f88d 	bl	8007798 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800867e:	f107 0308 	add.w	r3, r7, #8
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f866 	bl	8008754 <prvSampleTimeNow>
 8008688:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d130      	bne.n	80086f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <prvProcessTimerOrBlockTask+0x3c>
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	429a      	cmp	r2, r3
 800869c:	d806      	bhi.n	80086ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800869e:	f7ff f889 	bl	80077b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7ff ff91 	bl	80085cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086aa:	e024      	b.n	80086f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086b2:	4b13      	ldr	r3, [pc, #76]	; (8008700 <prvProcessTimerOrBlockTask+0x90>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bf0c      	ite	eq
 80086bc:	2301      	moveq	r3, #1
 80086be:	2300      	movne	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086c4:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <prvProcessTimerOrBlockTask+0x94>)
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	4619      	mov	r1, r3
 80086d2:	f7fe fd7d 	bl	80071d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086d6:	f7ff f86d 	bl	80077b4 <xTaskResumeAll>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <prvProcessTimerOrBlockTask+0x98>)
 80086e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
}
 80086f0:	e001      	b.n	80086f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086f2:	f7ff f85f 	bl	80077b4 <xTaskResumeAll>
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	20000fe0 	.word	0x20000fe0
 8008704:	20000fe4 	.word	0x20000fe4
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008714:	4b0e      	ldr	r3, [pc, #56]	; (8008750 <prvGetNextExpireTime+0x44>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bf0c      	ite	eq
 800871e:	2301      	moveq	r3, #1
 8008720:	2300      	movne	r3, #0
 8008722:	b2db      	uxtb	r3, r3
 8008724:	461a      	mov	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008732:	4b07      	ldr	r3, [pc, #28]	; (8008750 <prvGetNextExpireTime+0x44>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	e001      	b.n	8008742 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800873e:	2300      	movs	r3, #0
 8008740:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008742:	68fb      	ldr	r3, [r7, #12]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	bc80      	pop	{r7}
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20000fdc 	.word	0x20000fdc

08008754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800875c:	f7ff f8c8 	bl	80078f0 <xTaskGetTickCount>
 8008760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008762:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <prvSampleTimeNow+0x3c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	429a      	cmp	r2, r3
 800876a:	d205      	bcs.n	8008778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800876c:	f000 f908 	bl	8008980 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e002      	b.n	800877e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800877e:	4a04      	ldr	r2, [pc, #16]	; (8008790 <prvSampleTimeNow+0x3c>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008784:	68fb      	ldr	r3, [r7, #12]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000fec 	.word	0x20000fec

08008794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d812      	bhi.n	80087e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d302      	bcc.n	80087ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e01b      	b.n	8008806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ce:	4b10      	ldr	r3, [pc, #64]	; (8008810 <prvInsertTimerInActiveList+0x7c>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fd fe53 	bl	8006484 <vListInsert>
 80087de:	e012      	b.n	8008806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d206      	bcs.n	80087f6 <prvInsertTimerInActiveList+0x62>
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e007      	b.n	8008806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087f6:	4b07      	ldr	r3, [pc, #28]	; (8008814 <prvInsertTimerInActiveList+0x80>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7fd fe3f 	bl	8006484 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008806:	697b      	ldr	r3, [r7, #20]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000fe0 	.word	0x20000fe0
 8008814:	20000fdc 	.word	0x20000fdc

08008818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08e      	sub	sp, #56	; 0x38
 800881c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	e09d      	b.n	800895c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	da18      	bge.n	8008858 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008826:	1d3b      	adds	r3, r7, #4
 8008828:	3304      	adds	r3, #4
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	61fb      	str	r3, [r7, #28]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800884e:	6850      	ldr	r0, [r2, #4]
 8008850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008852:	6892      	ldr	r2, [r2, #8]
 8008854:	4611      	mov	r1, r2
 8008856:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	db7d      	blt.n	800895a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	3304      	adds	r3, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f7fd fe40 	bl	80064f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008874:	463b      	mov	r3, r7
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff ff6c 	bl	8008754 <prvSampleTimeNow>
 800887c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b09      	cmp	r3, #9
 8008882:	d86b      	bhi.n	800895c <prvProcessReceivedCommands+0x144>
 8008884:	a201      	add	r2, pc, #4	; (adr r2, 800888c <prvProcessReceivedCommands+0x74>)
 8008886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888a:	bf00      	nop
 800888c:	080088b5 	.word	0x080088b5
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088b5 	.word	0x080088b5
 8008898:	0800895d 	.word	0x0800895d
 800889c:	08008911 	.word	0x08008911
 80088a0:	08008949 	.word	0x08008949
 80088a4:	080088b5 	.word	0x080088b5
 80088a8:	080088b5 	.word	0x080088b5
 80088ac:	0800895d 	.word	0x0800895d
 80088b0:	08008911 	.word	0x08008911
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b8:	699b      	ldr	r3, [r3, #24]
 80088ba:	18d1      	adds	r1, r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088c2:	f7ff ff67 	bl	8008794 <prvInsertTimerInActiveList>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d047      	beq.n	800895c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d13f      	bne.n	800895c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	441a      	add	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ee:	f7ff fe1f 	bl	8008530 <xTimerGenericCommand>
 80088f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d130      	bne.n	800895c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	61bb      	str	r3, [r7, #24]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008914:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10a      	bne.n	8008934 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	617b      	str	r3, [r7, #20]
}
 8008930:	bf00      	nop
 8008932:	e7fe      	b.n	8008932 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008936:	699a      	ldr	r2, [r3, #24]
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	18d1      	adds	r1, r2, r3
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008942:	f7ff ff27 	bl	8008794 <prvInsertTimerInActiveList>
					break;
 8008946:	e009      	b.n	800895c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008954:	f000 fb8e 	bl	8009074 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008958:	e000      	b.n	800895c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800895a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800895c:	4b07      	ldr	r3, [pc, #28]	; (800897c <prvProcessReceivedCommands+0x164>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	1d39      	adds	r1, r7, #4
 8008962:	2200      	movs	r2, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f7fe f8f7 	bl	8006b58 <xQueueReceive>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	f47f af57 	bne.w	8008820 <prvProcessReceivedCommands+0x8>
	}
}
 8008972:	bf00      	nop
 8008974:	bf00      	nop
 8008976:	3730      	adds	r7, #48	; 0x30
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	20000fe4 	.word	0x20000fe4

08008980 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008986:	e045      	b.n	8008a14 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008988:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <prvSwitchTimerLists+0xbc>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008992:	4b2a      	ldr	r3, [pc, #168]	; (8008a3c <prvSwitchTimerLists+0xbc>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3304      	adds	r3, #4
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fd fda7 	bl	80064f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d12e      	bne.n	8008a14 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4413      	add	r3, r2
 80089be:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d90e      	bls.n	80089e6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <prvSwitchTimerLists+0xbc>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fd fd50 	bl	8006484 <vListInsert>
 80089e4:	e016      	b.n	8008a14 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089e6:	2300      	movs	r3, #0
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	2300      	movs	r3, #0
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7ff fd9d 	bl	8008530 <xTimerGenericCommand>
 80089f6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10a      	bne.n	8008a14 <prvSwitchTimerLists+0x94>
	__asm volatile
 80089fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a02:	f383 8811 	msr	BASEPRI, r3
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	603b      	str	r3, [r7, #0]
}
 8008a10:	bf00      	nop
 8008a12:	e7fe      	b.n	8008a12 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a14:	4b09      	ldr	r3, [pc, #36]	; (8008a3c <prvSwitchTimerLists+0xbc>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1b4      	bne.n	8008988 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a1e:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <prvSwitchTimerLists+0xbc>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <prvSwitchTimerLists+0xc0>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a04      	ldr	r2, [pc, #16]	; (8008a3c <prvSwitchTimerLists+0xbc>)
 8008a2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a2c:	4a04      	ldr	r2, [pc, #16]	; (8008a40 <prvSwitchTimerLists+0xc0>)
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	6013      	str	r3, [r2, #0]
}
 8008a32:	bf00      	nop
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20000fdc 	.word	0x20000fdc
 8008a40:	20000fe0 	.word	0x20000fe0

08008a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a4a:	f000 f94f 	bl	8008cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a4e:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <prvCheckForValidListAndQueue+0x60>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d120      	bne.n	8008a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a56:	4814      	ldr	r0, [pc, #80]	; (8008aa8 <prvCheckForValidListAndQueue+0x64>)
 8008a58:	f7fd fcc6 	bl	80063e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a5c:	4813      	ldr	r0, [pc, #76]	; (8008aac <prvCheckForValidListAndQueue+0x68>)
 8008a5e:	f7fd fcc3 	bl	80063e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a62:	4b13      	ldr	r3, [pc, #76]	; (8008ab0 <prvCheckForValidListAndQueue+0x6c>)
 8008a64:	4a10      	ldr	r2, [pc, #64]	; (8008aa8 <prvCheckForValidListAndQueue+0x64>)
 8008a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a68:	4b12      	ldr	r3, [pc, #72]	; (8008ab4 <prvCheckForValidListAndQueue+0x70>)
 8008a6a:	4a10      	ldr	r2, [pc, #64]	; (8008aac <prvCheckForValidListAndQueue+0x68>)
 8008a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a6e:	2300      	movs	r3, #0
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <prvCheckForValidListAndQueue+0x74>)
 8008a74:	4a11      	ldr	r2, [pc, #68]	; (8008abc <prvCheckForValidListAndQueue+0x78>)
 8008a76:	2110      	movs	r1, #16
 8008a78:	200a      	movs	r0, #10
 8008a7a:	f7fd fdcd 	bl	8006618 <xQueueGenericCreateStatic>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4a08      	ldr	r2, [pc, #32]	; (8008aa4 <prvCheckForValidListAndQueue+0x60>)
 8008a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <prvCheckForValidListAndQueue+0x60>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <prvCheckForValidListAndQueue+0x60>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	490b      	ldr	r1, [pc, #44]	; (8008ac0 <prvCheckForValidListAndQueue+0x7c>)
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fe fb74 	bl	8007180 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a98:	f000 f958 	bl	8008d4c <vPortExitCritical>
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000fe4 	.word	0x20000fe4
 8008aa8:	20000fb4 	.word	0x20000fb4
 8008aac:	20000fc8 	.word	0x20000fc8
 8008ab0:	20000fdc 	.word	0x20000fdc
 8008ab4:	20000fe0 	.word	0x20000fe0
 8008ab8:	20001090 	.word	0x20001090
 8008abc:	20000ff0 	.word	0x20000ff0
 8008ac0:	0800dbc0 	.word	0x0800dbc0

08008ac4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008ad2:	f06f 0301 	mvn.w	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <xTimerPendFunctionCallFromISR+0x3c>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	f107 0114 	add.w	r1, r7, #20
 8008aec:	2300      	movs	r3, #0
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	f7fd ff9a 	bl	8006a28 <xQueueGenericSendFromISR>
 8008af4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3728      	adds	r7, #40	; 0x28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000fe4 	.word	0x20000fe4

08008b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3b04      	subs	r3, #4
 8008b14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	3b04      	subs	r3, #4
 8008b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f023 0201 	bic.w	r2, r3, #1
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b04      	subs	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b34:	4a08      	ldr	r2, [pc, #32]	; (8008b58 <pxPortInitialiseStack+0x54>)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	3b14      	subs	r3, #20
 8008b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3b20      	subs	r3, #32
 8008b4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bc80      	pop	{r7}
 8008b56:	4770      	bx	lr
 8008b58:	08008b5d 	.word	0x08008b5d

08008b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b085      	sub	sp, #20
 8008b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008b62:	2300      	movs	r3, #0
 8008b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b66:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <prvTaskExitError+0x54>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6e:	d00a      	beq.n	8008b86 <prvTaskExitError+0x2a>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	60fb      	str	r3, [r7, #12]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <prvTaskExitError+0x28>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60bb      	str	r3, [r7, #8]
}
 8008b98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b9a:	bf00      	nop
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0fc      	beq.n	8008b9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ba2:	bf00      	nop
 8008ba4:	bf00      	nop
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20000078 	.word	0x20000078
	...

08008bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <pxCurrentTCBConst2>)
 8008bc2:	6819      	ldr	r1, [r3, #0]
 8008bc4:	6808      	ldr	r0, [r1, #0]
 8008bc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bca:	f380 8809 	msr	PSP, r0
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f04f 0000 	mov.w	r0, #0
 8008bd6:	f380 8811 	msr	BASEPRI, r0
 8008bda:	f04e 0e0d 	orr.w	lr, lr, #13
 8008bde:	4770      	bx	lr

08008be0 <pxCurrentTCBConst2>:
 8008be0:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop

08008be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008be8:	4806      	ldr	r0, [pc, #24]	; (8008c04 <prvPortStartFirstTask+0x1c>)
 8008bea:	6800      	ldr	r0, [r0, #0]
 8008bec:	6800      	ldr	r0, [r0, #0]
 8008bee:	f380 8808 	msr	MSP, r0
 8008bf2:	b662      	cpsie	i
 8008bf4:	b661      	cpsie	f
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	df00      	svc	0
 8008c00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c02:	bf00      	nop
 8008c04:	e000ed08 	.word	0xe000ed08

08008c08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c0e:	4b32      	ldr	r3, [pc, #200]	; (8008cd8 <xPortStartScheduler+0xd0>)
 8008c10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	22ff      	movs	r2, #255	; 0xff
 8008c1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <xPortStartScheduler+0xd4>)
 8008c34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c36:	4b2a      	ldr	r3, [pc, #168]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c38:	2207      	movs	r2, #7
 8008c3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c3c:	e009      	b.n	8008c52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c3e:	4b28      	ldr	r3, [pc, #160]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	4a26      	ldr	r2, [pc, #152]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	b2db      	uxtb	r3, r3
 8008c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c5a:	2b80      	cmp	r3, #128	; 0x80
 8008c5c:	d0ef      	beq.n	8008c3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c5e:	4b20      	ldr	r3, [pc, #128]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f1c3 0307 	rsb	r3, r3, #7
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d00a      	beq.n	8008c80 <xPortStartScheduler+0x78>
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	60bb      	str	r3, [r7, #8]
}
 8008c7c:	bf00      	nop
 8008c7e:	e7fe      	b.n	8008c7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c80:	4b17      	ldr	r3, [pc, #92]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	021b      	lsls	r3, r3, #8
 8008c86:	4a16      	ldr	r2, [pc, #88]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c88:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c8a:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c92:	4a13      	ldr	r2, [pc, #76]	; (8008ce0 <xPortStartScheduler+0xd8>)
 8008c94:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c9e:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <xPortStartScheduler+0xdc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a10      	ldr	r2, [pc, #64]	; (8008ce4 <xPortStartScheduler+0xdc>)
 8008ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ca8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008caa:	4b0e      	ldr	r3, [pc, #56]	; (8008ce4 <xPortStartScheduler+0xdc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a0d      	ldr	r2, [pc, #52]	; (8008ce4 <xPortStartScheduler+0xdc>)
 8008cb0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cb4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cb6:	f000 f8b9 	bl	8008e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <xPortStartScheduler+0xe0>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008cc0:	f7ff ff92 	bl	8008be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008cc4:	f7fe fee0 	bl	8007a88 <vTaskSwitchContext>
	prvTaskExitError();
 8008cc8:	f7ff ff48 	bl	8008b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	e000e400 	.word	0xe000e400
 8008cdc:	200010e0 	.word	0x200010e0
 8008ce0:	200010e4 	.word	0x200010e4
 8008ce4:	e000ed20 	.word	0xe000ed20
 8008ce8:	20000078 	.word	0x20000078

08008cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	607b      	str	r3, [r7, #4]
}
 8008d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d06:	4b0f      	ldr	r3, [pc, #60]	; (8008d44 <vPortEnterCritical+0x58>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	4a0d      	ldr	r2, [pc, #52]	; (8008d44 <vPortEnterCritical+0x58>)
 8008d0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d10:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <vPortEnterCritical+0x58>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d10f      	bne.n	8008d38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d18:	4b0b      	ldr	r3, [pc, #44]	; (8008d48 <vPortEnterCritical+0x5c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00a      	beq.n	8008d38 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	603b      	str	r3, [r7, #0]
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <vPortEnterCritical+0x4a>
	}
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bc80      	pop	{r7}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop
 8008d44:	20000078 	.word	0x20000078
 8008d48:	e000ed04 	.word	0xe000ed04

08008d4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d52:	4b11      	ldr	r3, [pc, #68]	; (8008d98 <vPortExitCritical+0x4c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10a      	bne.n	8008d70 <vPortExitCritical+0x24>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	607b      	str	r3, [r7, #4]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d70:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <vPortExitCritical+0x4c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	4a08      	ldr	r2, [pc, #32]	; (8008d98 <vPortExitCritical+0x4c>)
 8008d78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d7a:	4b07      	ldr	r3, [pc, #28]	; (8008d98 <vPortExitCritical+0x4c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d105      	bne.n	8008d8e <vPortExitCritical+0x42>
 8008d82:	2300      	movs	r3, #0
 8008d84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	f383 8811 	msr	BASEPRI, r3
}
 8008d8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr
 8008d98:	20000078 	.word	0x20000078
 8008d9c:	00000000 	.word	0x00000000

08008da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008da0:	f3ef 8009 	mrs	r0, PSP
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <pxCurrentTCBConst>)
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008db0:	6010      	str	r0, [r2, #0]
 8008db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008db6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dba:	f380 8811 	msr	BASEPRI, r0
 8008dbe:	f7fe fe63 	bl	8007a88 <vTaskSwitchContext>
 8008dc2:	f04f 0000 	mov.w	r0, #0
 8008dc6:	f380 8811 	msr	BASEPRI, r0
 8008dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008dce:	6819      	ldr	r1, [r3, #0]
 8008dd0:	6808      	ldr	r0, [r1, #0]
 8008dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008dd6:	f380 8809 	msr	PSP, r0
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	4770      	bx	lr

08008de0 <pxCurrentTCBConst>:
 8008de0:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop

08008de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	607b      	str	r3, [r7, #4]
}
 8008e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e02:	f7fe fd83 	bl	800790c <xTaskIncrementTick>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <SysTick_Handler+0x40>)
 8008e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	2300      	movs	r3, #0
 8008e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	f383 8811 	msr	BASEPRI, r3
}
 8008e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	e000ed04 	.word	0xe000ed04

08008e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <vPortSetupTimerInterrupt+0x30>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e36:	4b0a      	ldr	r3, [pc, #40]	; (8008e60 <vPortSetupTimerInterrupt+0x34>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e3c:	4b09      	ldr	r3, [pc, #36]	; (8008e64 <vPortSetupTimerInterrupt+0x38>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a09      	ldr	r2, [pc, #36]	; (8008e68 <vPortSetupTimerInterrupt+0x3c>)
 8008e42:	fba2 2303 	umull	r2, r3, r2, r3
 8008e46:	099b      	lsrs	r3, r3, #6
 8008e48:	4a08      	ldr	r2, [pc, #32]	; (8008e6c <vPortSetupTimerInterrupt+0x40>)
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e4e:	4b03      	ldr	r3, [pc, #12]	; (8008e5c <vPortSetupTimerInterrupt+0x30>)
 8008e50:	2207      	movs	r2, #7
 8008e52:	601a      	str	r2, [r3, #0]
}
 8008e54:	bf00      	nop
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bc80      	pop	{r7}
 8008e5a:	4770      	bx	lr
 8008e5c:	e000e010 	.word	0xe000e010
 8008e60:	e000e018 	.word	0xe000e018
 8008e64:	2000006c 	.word	0x2000006c
 8008e68:	10624dd3 	.word	0x10624dd3
 8008e6c:	e000e014 	.word	0xe000e014

08008e70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e76:	f3ef 8305 	mrs	r3, IPSR
 8008e7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b0f      	cmp	r3, #15
 8008e80:	d914      	bls.n	8008eac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e82:	4a16      	ldr	r2, [pc, #88]	; (8008edc <vPortValidateInterruptPriority+0x6c>)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e8c:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <vPortValidateInterruptPriority+0x70>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	7afa      	ldrb	r2, [r7, #11]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d20a      	bcs.n	8008eac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	607b      	str	r3, [r7, #4]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008eac:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <vPortValidateInterruptPriority+0x74>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <vPortValidateInterruptPriority+0x78>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d90a      	bls.n	8008ed2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	603b      	str	r3, [r7, #0]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <vPortValidateInterruptPriority+0x60>
	}
 8008ed2:	bf00      	nop
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bc80      	pop	{r7}
 8008eda:	4770      	bx	lr
 8008edc:	e000e3f0 	.word	0xe000e3f0
 8008ee0:	200010e0 	.word	0x200010e0
 8008ee4:	e000ed0c 	.word	0xe000ed0c
 8008ee8:	200010e4 	.word	0x200010e4

08008eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08a      	sub	sp, #40	; 0x28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ef8:	f7fe fc4e 	bl	8007798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008efc:	4b58      	ldr	r3, [pc, #352]	; (8009060 <pvPortMalloc+0x174>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f04:	f000 f910 	bl	8009128 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f08:	4b56      	ldr	r3, [pc, #344]	; (8009064 <pvPortMalloc+0x178>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f040 808e 	bne.w	8009032 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d01d      	beq.n	8008f58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f1c:	2208      	movs	r2, #8
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4413      	add	r3, r2
 8008f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f003 0307 	and.w	r3, r3, #7
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d014      	beq.n	8008f58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f023 0307 	bic.w	r3, r3, #7
 8008f34:	3308      	adds	r3, #8
 8008f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <pvPortMalloc+0x6c>
	__asm volatile
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	617b      	str	r3, [r7, #20]
}
 8008f54:	bf00      	nop
 8008f56:	e7fe      	b.n	8008f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d069      	beq.n	8009032 <pvPortMalloc+0x146>
 8008f5e:	4b42      	ldr	r3, [pc, #264]	; (8009068 <pvPortMalloc+0x17c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d864      	bhi.n	8009032 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f68:	4b40      	ldr	r3, [pc, #256]	; (800906c <pvPortMalloc+0x180>)
 8008f6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f6c:	4b3f      	ldr	r3, [pc, #252]	; (800906c <pvPortMalloc+0x180>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f72:	e004      	b.n	8008f7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d903      	bls.n	8008f90 <pvPortMalloc+0xa4>
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1f1      	bne.n	8008f74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f90:	4b33      	ldr	r3, [pc, #204]	; (8009060 <pvPortMalloc+0x174>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d04b      	beq.n	8009032 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f9a:	6a3b      	ldr	r3, [r7, #32]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2208      	movs	r2, #8
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	1ad2      	subs	r2, r2, r3
 8008fb4:	2308      	movs	r3, #8
 8008fb6:	005b      	lsls	r3, r3, #1
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d91f      	bls.n	8008ffc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	f003 0307 	and.w	r3, r3, #7
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <pvPortMalloc+0xf8>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	613b      	str	r3, [r7, #16]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	1ad2      	subs	r2, r2, r3
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ff6:	69b8      	ldr	r0, [r7, #24]
 8008ff8:	f000 f8f8 	bl	80091ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ffc:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <pvPortMalloc+0x17c>)
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	4a18      	ldr	r2, [pc, #96]	; (8009068 <pvPortMalloc+0x17c>)
 8009008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800900a:	4b17      	ldr	r3, [pc, #92]	; (8009068 <pvPortMalloc+0x17c>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	4b18      	ldr	r3, [pc, #96]	; (8009070 <pvPortMalloc+0x184>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d203      	bcs.n	800901e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009016:	4b14      	ldr	r3, [pc, #80]	; (8009068 <pvPortMalloc+0x17c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a15      	ldr	r2, [pc, #84]	; (8009070 <pvPortMalloc+0x184>)
 800901c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	4b10      	ldr	r3, [pc, #64]	; (8009064 <pvPortMalloc+0x178>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	431a      	orrs	r2, r3
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009032:	f7fe fbbf 	bl	80077b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	f003 0307 	and.w	r3, r3, #7
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <pvPortMalloc+0x16a>
	__asm volatile
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	60fb      	str	r3, [r7, #12]
}
 8009052:	bf00      	nop
 8009054:	e7fe      	b.n	8009054 <pvPortMalloc+0x168>
	return pvReturn;
 8009056:	69fb      	ldr	r3, [r7, #28]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3728      	adds	r7, #40	; 0x28
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	200028f0 	.word	0x200028f0
 8009064:	200028fc 	.word	0x200028fc
 8009068:	200028f4 	.word	0x200028f4
 800906c:	200028e8 	.word	0x200028e8
 8009070:	200028f8 	.word	0x200028f8

08009074 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d048      	beq.n	8009118 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009086:	2308      	movs	r3, #8
 8009088:	425b      	negs	r3, r3
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	4b21      	ldr	r3, [pc, #132]	; (8009120 <vPortFree+0xac>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4013      	ands	r3, r2
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <vPortFree+0x44>
	__asm volatile
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	60fb      	str	r3, [r7, #12]
}
 80090b4:	bf00      	nop
 80090b6:	e7fe      	b.n	80090b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <vPortFree+0x62>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	60bb      	str	r3, [r7, #8]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	4b11      	ldr	r3, [pc, #68]	; (8009120 <vPortFree+0xac>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4013      	ands	r3, r2
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d019      	beq.n	8009118 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d115      	bne.n	8009118 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <vPortFree+0xac>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	43db      	mvns	r3, r3
 80090f6:	401a      	ands	r2, r3
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090fc:	f7fe fb4c 	bl	8007798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	685a      	ldr	r2, [r3, #4]
 8009104:	4b07      	ldr	r3, [pc, #28]	; (8009124 <vPortFree+0xb0>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4413      	add	r3, r2
 800910a:	4a06      	ldr	r2, [pc, #24]	; (8009124 <vPortFree+0xb0>)
 800910c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800910e:	6938      	ldr	r0, [r7, #16]
 8009110:	f000 f86c 	bl	80091ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009114:	f7fe fb4e 	bl	80077b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009118:	bf00      	nop
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	200028fc 	.word	0x200028fc
 8009124:	200028f4 	.word	0x200028f4

08009128 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800912e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009132:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009134:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <prvHeapInit+0xac>)
 8009136:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00c      	beq.n	800915c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3307      	adds	r3, #7
 8009146:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	4a1f      	ldr	r2, [pc, #124]	; (80091d4 <prvHeapInit+0xac>)
 8009158:	4413      	add	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009160:	4a1d      	ldr	r2, [pc, #116]	; (80091d8 <prvHeapInit+0xb0>)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009166:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <prvHeapInit+0xb0>)
 8009168:	2200      	movs	r2, #0
 800916a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4413      	add	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009174:	2208      	movs	r2, #8
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1a9b      	subs	r3, r3, r2
 800917a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f023 0307 	bic.w	r3, r3, #7
 8009182:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4a15      	ldr	r2, [pc, #84]	; (80091dc <prvHeapInit+0xb4>)
 8009188:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800918a:	4b14      	ldr	r3, [pc, #80]	; (80091dc <prvHeapInit+0xb4>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2200      	movs	r2, #0
 8009190:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009192:	4b12      	ldr	r3, [pc, #72]	; (80091dc <prvHeapInit+0xb4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091a8:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <prvHeapInit+0xb4>)
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	4a0a      	ldr	r2, [pc, #40]	; (80091e0 <prvHeapInit+0xb8>)
 80091b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	4a09      	ldr	r2, [pc, #36]	; (80091e4 <prvHeapInit+0xbc>)
 80091be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091c0:	4b09      	ldr	r3, [pc, #36]	; (80091e8 <prvHeapInit+0xc0>)
 80091c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091c6:	601a      	str	r2, [r3, #0]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bc80      	pop	{r7}
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	200010e8 	.word	0x200010e8
 80091d8:	200028e8 	.word	0x200028e8
 80091dc:	200028f0 	.word	0x200028f0
 80091e0:	200028f8 	.word	0x200028f8
 80091e4:	200028f4 	.word	0x200028f4
 80091e8:	200028fc 	.word	0x200028fc

080091ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091f4:	4b27      	ldr	r3, [pc, #156]	; (8009294 <prvInsertBlockIntoFreeList+0xa8>)
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e002      	b.n	8009200 <prvInsertBlockIntoFreeList+0x14>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d8f7      	bhi.n	80091fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	4413      	add	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	429a      	cmp	r2, r3
 800921a:	d108      	bne.n	800922e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	441a      	add	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	441a      	add	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d118      	bne.n	8009274 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	4b14      	ldr	r3, [pc, #80]	; (8009298 <prvInsertBlockIntoFreeList+0xac>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	429a      	cmp	r2, r3
 800924c:	d00d      	beq.n	800926a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	441a      	add	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]
 8009268:	e008      	b.n	800927c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800926a:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <prvInsertBlockIntoFreeList+0xac>)
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
 8009272:	e003      	b.n	800927c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	429a      	cmp	r2, r3
 8009282:	d002      	beq.n	800928a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800928a:	bf00      	nop
 800928c:	3714      	adds	r7, #20
 800928e:	46bd      	mov	sp, r7
 8009290:	bc80      	pop	{r7}
 8009292:	4770      	bx	lr
 8009294:	200028e8 	.word	0x200028e8
 8009298:	200028f0 	.word	0x200028f0

0800929c <atof>:
 800929c:	2100      	movs	r1, #0
 800929e:	f000 bff3 	b.w	800a288 <strtod>
	...

080092a4 <calloc>:
 80092a4:	4b02      	ldr	r3, [pc, #8]	; (80092b0 <calloc+0xc>)
 80092a6:	460a      	mov	r2, r1
 80092a8:	4601      	mov	r1, r0
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	f000 b852 	b.w	8009354 <_calloc_r>
 80092b0:	2000007c 	.word	0x2000007c

080092b4 <__errno>:
 80092b4:	4b01      	ldr	r3, [pc, #4]	; (80092bc <__errno+0x8>)
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	2000007c 	.word	0x2000007c

080092c0 <__libc_init_array>:
 80092c0:	b570      	push	{r4, r5, r6, lr}
 80092c2:	2600      	movs	r6, #0
 80092c4:	4d0c      	ldr	r5, [pc, #48]	; (80092f8 <__libc_init_array+0x38>)
 80092c6:	4c0d      	ldr	r4, [pc, #52]	; (80092fc <__libc_init_array+0x3c>)
 80092c8:	1b64      	subs	r4, r4, r5
 80092ca:	10a4      	asrs	r4, r4, #2
 80092cc:	42a6      	cmp	r6, r4
 80092ce:	d109      	bne.n	80092e4 <__libc_init_array+0x24>
 80092d0:	f004 fc1c 	bl	800db0c <_init>
 80092d4:	2600      	movs	r6, #0
 80092d6:	4d0a      	ldr	r5, [pc, #40]	; (8009300 <__libc_init_array+0x40>)
 80092d8:	4c0a      	ldr	r4, [pc, #40]	; (8009304 <__libc_init_array+0x44>)
 80092da:	1b64      	subs	r4, r4, r5
 80092dc:	10a4      	asrs	r4, r4, #2
 80092de:	42a6      	cmp	r6, r4
 80092e0:	d105      	bne.n	80092ee <__libc_init_array+0x2e>
 80092e2:	bd70      	pop	{r4, r5, r6, pc}
 80092e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092e8:	4798      	blx	r3
 80092ea:	3601      	adds	r6, #1
 80092ec:	e7ee      	b.n	80092cc <__libc_init_array+0xc>
 80092ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f2:	4798      	blx	r3
 80092f4:	3601      	adds	r6, #1
 80092f6:	e7f2      	b.n	80092de <__libc_init_array+0x1e>
 80092f8:	0800e088 	.word	0x0800e088
 80092fc:	0800e088 	.word	0x0800e088
 8009300:	0800e088 	.word	0x0800e088
 8009304:	0800e08c 	.word	0x0800e08c

08009308 <malloc>:
 8009308:	4b02      	ldr	r3, [pc, #8]	; (8009314 <malloc+0xc>)
 800930a:	4601      	mov	r1, r0
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	f000 b89d 	b.w	800944c <_malloc_r>
 8009312:	bf00      	nop
 8009314:	2000007c 	.word	0x2000007c

08009318 <free>:
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <free+0xc>)
 800931a:	4601      	mov	r1, r0
 800931c:	6818      	ldr	r0, [r3, #0]
 800931e:	f000 b82d 	b.w	800937c <_free_r>
 8009322:	bf00      	nop
 8009324:	2000007c 	.word	0x2000007c

08009328 <memcpy>:
 8009328:	440a      	add	r2, r1
 800932a:	4291      	cmp	r1, r2
 800932c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009330:	d100      	bne.n	8009334 <memcpy+0xc>
 8009332:	4770      	bx	lr
 8009334:	b510      	push	{r4, lr}
 8009336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800933a:	4291      	cmp	r1, r2
 800933c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009340:	d1f9      	bne.n	8009336 <memcpy+0xe>
 8009342:	bd10      	pop	{r4, pc}

08009344 <memset>:
 8009344:	4603      	mov	r3, r0
 8009346:	4402      	add	r2, r0
 8009348:	4293      	cmp	r3, r2
 800934a:	d100      	bne.n	800934e <memset+0xa>
 800934c:	4770      	bx	lr
 800934e:	f803 1b01 	strb.w	r1, [r3], #1
 8009352:	e7f9      	b.n	8009348 <memset+0x4>

08009354 <_calloc_r>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	fba1 5402 	umull	r5, r4, r1, r2
 800935a:	b934      	cbnz	r4, 800936a <_calloc_r+0x16>
 800935c:	4629      	mov	r1, r5
 800935e:	f000 f875 	bl	800944c <_malloc_r>
 8009362:	4606      	mov	r6, r0
 8009364:	b928      	cbnz	r0, 8009372 <_calloc_r+0x1e>
 8009366:	4630      	mov	r0, r6
 8009368:	bd70      	pop	{r4, r5, r6, pc}
 800936a:	220c      	movs	r2, #12
 800936c:	2600      	movs	r6, #0
 800936e:	6002      	str	r2, [r0, #0]
 8009370:	e7f9      	b.n	8009366 <_calloc_r+0x12>
 8009372:	462a      	mov	r2, r5
 8009374:	4621      	mov	r1, r4
 8009376:	f7ff ffe5 	bl	8009344 <memset>
 800937a:	e7f4      	b.n	8009366 <_calloc_r+0x12>

0800937c <_free_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4605      	mov	r5, r0
 8009380:	2900      	cmp	r1, #0
 8009382:	d040      	beq.n	8009406 <_free_r+0x8a>
 8009384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009388:	1f0c      	subs	r4, r1, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	bfb8      	it	lt
 800938e:	18e4      	addlt	r4, r4, r3
 8009390:	f001 fb32 	bl	800a9f8 <__malloc_lock>
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <_free_r+0x8c>)
 8009396:	6813      	ldr	r3, [r2, #0]
 8009398:	b933      	cbnz	r3, 80093a8 <_free_r+0x2c>
 800939a:	6063      	str	r3, [r4, #4]
 800939c:	6014      	str	r4, [r2, #0]
 800939e:	4628      	mov	r0, r5
 80093a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093a4:	f001 bb2e 	b.w	800aa04 <__malloc_unlock>
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d908      	bls.n	80093be <_free_r+0x42>
 80093ac:	6820      	ldr	r0, [r4, #0]
 80093ae:	1821      	adds	r1, r4, r0
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf01      	itttt	eq
 80093b4:	6819      	ldreq	r1, [r3, #0]
 80093b6:	685b      	ldreq	r3, [r3, #4]
 80093b8:	1809      	addeq	r1, r1, r0
 80093ba:	6021      	streq	r1, [r4, #0]
 80093bc:	e7ed      	b.n	800939a <_free_r+0x1e>
 80093be:	461a      	mov	r2, r3
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	b10b      	cbz	r3, 80093c8 <_free_r+0x4c>
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d9fa      	bls.n	80093be <_free_r+0x42>
 80093c8:	6811      	ldr	r1, [r2, #0]
 80093ca:	1850      	adds	r0, r2, r1
 80093cc:	42a0      	cmp	r0, r4
 80093ce:	d10b      	bne.n	80093e8 <_free_r+0x6c>
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	4401      	add	r1, r0
 80093d4:	1850      	adds	r0, r2, r1
 80093d6:	4283      	cmp	r3, r0
 80093d8:	6011      	str	r1, [r2, #0]
 80093da:	d1e0      	bne.n	800939e <_free_r+0x22>
 80093dc:	6818      	ldr	r0, [r3, #0]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4401      	add	r1, r0
 80093e2:	6011      	str	r1, [r2, #0]
 80093e4:	6053      	str	r3, [r2, #4]
 80093e6:	e7da      	b.n	800939e <_free_r+0x22>
 80093e8:	d902      	bls.n	80093f0 <_free_r+0x74>
 80093ea:	230c      	movs	r3, #12
 80093ec:	602b      	str	r3, [r5, #0]
 80093ee:	e7d6      	b.n	800939e <_free_r+0x22>
 80093f0:	6820      	ldr	r0, [r4, #0]
 80093f2:	1821      	adds	r1, r4, r0
 80093f4:	428b      	cmp	r3, r1
 80093f6:	bf01      	itttt	eq
 80093f8:	6819      	ldreq	r1, [r3, #0]
 80093fa:	685b      	ldreq	r3, [r3, #4]
 80093fc:	1809      	addeq	r1, r1, r0
 80093fe:	6021      	streq	r1, [r4, #0]
 8009400:	6063      	str	r3, [r4, #4]
 8009402:	6054      	str	r4, [r2, #4]
 8009404:	e7cb      	b.n	800939e <_free_r+0x22>
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	20002900 	.word	0x20002900

0800940c <sbrk_aligned>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	4e0e      	ldr	r6, [pc, #56]	; (8009448 <sbrk_aligned+0x3c>)
 8009410:	460c      	mov	r4, r1
 8009412:	6831      	ldr	r1, [r6, #0]
 8009414:	4605      	mov	r5, r0
 8009416:	b911      	cbnz	r1, 800941e <sbrk_aligned+0x12>
 8009418:	f000 f88c 	bl	8009534 <_sbrk_r>
 800941c:	6030      	str	r0, [r6, #0]
 800941e:	4621      	mov	r1, r4
 8009420:	4628      	mov	r0, r5
 8009422:	f000 f887 	bl	8009534 <_sbrk_r>
 8009426:	1c43      	adds	r3, r0, #1
 8009428:	d00a      	beq.n	8009440 <sbrk_aligned+0x34>
 800942a:	1cc4      	adds	r4, r0, #3
 800942c:	f024 0403 	bic.w	r4, r4, #3
 8009430:	42a0      	cmp	r0, r4
 8009432:	d007      	beq.n	8009444 <sbrk_aligned+0x38>
 8009434:	1a21      	subs	r1, r4, r0
 8009436:	4628      	mov	r0, r5
 8009438:	f000 f87c 	bl	8009534 <_sbrk_r>
 800943c:	3001      	adds	r0, #1
 800943e:	d101      	bne.n	8009444 <sbrk_aligned+0x38>
 8009440:	f04f 34ff 	mov.w	r4, #4294967295
 8009444:	4620      	mov	r0, r4
 8009446:	bd70      	pop	{r4, r5, r6, pc}
 8009448:	20002904 	.word	0x20002904

0800944c <_malloc_r>:
 800944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009450:	1ccd      	adds	r5, r1, #3
 8009452:	f025 0503 	bic.w	r5, r5, #3
 8009456:	3508      	adds	r5, #8
 8009458:	2d0c      	cmp	r5, #12
 800945a:	bf38      	it	cc
 800945c:	250c      	movcc	r5, #12
 800945e:	2d00      	cmp	r5, #0
 8009460:	4607      	mov	r7, r0
 8009462:	db01      	blt.n	8009468 <_malloc_r+0x1c>
 8009464:	42a9      	cmp	r1, r5
 8009466:	d905      	bls.n	8009474 <_malloc_r+0x28>
 8009468:	230c      	movs	r3, #12
 800946a:	2600      	movs	r6, #0
 800946c:	603b      	str	r3, [r7, #0]
 800946e:	4630      	mov	r0, r6
 8009470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009474:	4e2e      	ldr	r6, [pc, #184]	; (8009530 <_malloc_r+0xe4>)
 8009476:	f001 fabf 	bl	800a9f8 <__malloc_lock>
 800947a:	6833      	ldr	r3, [r6, #0]
 800947c:	461c      	mov	r4, r3
 800947e:	bb34      	cbnz	r4, 80094ce <_malloc_r+0x82>
 8009480:	4629      	mov	r1, r5
 8009482:	4638      	mov	r0, r7
 8009484:	f7ff ffc2 	bl	800940c <sbrk_aligned>
 8009488:	1c43      	adds	r3, r0, #1
 800948a:	4604      	mov	r4, r0
 800948c:	d14d      	bne.n	800952a <_malloc_r+0xde>
 800948e:	6834      	ldr	r4, [r6, #0]
 8009490:	4626      	mov	r6, r4
 8009492:	2e00      	cmp	r6, #0
 8009494:	d140      	bne.n	8009518 <_malloc_r+0xcc>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	4631      	mov	r1, r6
 800949a:	4638      	mov	r0, r7
 800949c:	eb04 0803 	add.w	r8, r4, r3
 80094a0:	f000 f848 	bl	8009534 <_sbrk_r>
 80094a4:	4580      	cmp	r8, r0
 80094a6:	d13a      	bne.n	800951e <_malloc_r+0xd2>
 80094a8:	6821      	ldr	r1, [r4, #0]
 80094aa:	3503      	adds	r5, #3
 80094ac:	1a6d      	subs	r5, r5, r1
 80094ae:	f025 0503 	bic.w	r5, r5, #3
 80094b2:	3508      	adds	r5, #8
 80094b4:	2d0c      	cmp	r5, #12
 80094b6:	bf38      	it	cc
 80094b8:	250c      	movcc	r5, #12
 80094ba:	4638      	mov	r0, r7
 80094bc:	4629      	mov	r1, r5
 80094be:	f7ff ffa5 	bl	800940c <sbrk_aligned>
 80094c2:	3001      	adds	r0, #1
 80094c4:	d02b      	beq.n	800951e <_malloc_r+0xd2>
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	442b      	add	r3, r5
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	e00e      	b.n	80094ec <_malloc_r+0xa0>
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	1b52      	subs	r2, r2, r5
 80094d2:	d41e      	bmi.n	8009512 <_malloc_r+0xc6>
 80094d4:	2a0b      	cmp	r2, #11
 80094d6:	d916      	bls.n	8009506 <_malloc_r+0xba>
 80094d8:	1961      	adds	r1, r4, r5
 80094da:	42a3      	cmp	r3, r4
 80094dc:	6025      	str	r5, [r4, #0]
 80094de:	bf18      	it	ne
 80094e0:	6059      	strne	r1, [r3, #4]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	bf08      	it	eq
 80094e6:	6031      	streq	r1, [r6, #0]
 80094e8:	5162      	str	r2, [r4, r5]
 80094ea:	604b      	str	r3, [r1, #4]
 80094ec:	4638      	mov	r0, r7
 80094ee:	f104 060b 	add.w	r6, r4, #11
 80094f2:	f001 fa87 	bl	800aa04 <__malloc_unlock>
 80094f6:	f026 0607 	bic.w	r6, r6, #7
 80094fa:	1d23      	adds	r3, r4, #4
 80094fc:	1af2      	subs	r2, r6, r3
 80094fe:	d0b6      	beq.n	800946e <_malloc_r+0x22>
 8009500:	1b9b      	subs	r3, r3, r6
 8009502:	50a3      	str	r3, [r4, r2]
 8009504:	e7b3      	b.n	800946e <_malloc_r+0x22>
 8009506:	6862      	ldr	r2, [r4, #4]
 8009508:	42a3      	cmp	r3, r4
 800950a:	bf0c      	ite	eq
 800950c:	6032      	streq	r2, [r6, #0]
 800950e:	605a      	strne	r2, [r3, #4]
 8009510:	e7ec      	b.n	80094ec <_malloc_r+0xa0>
 8009512:	4623      	mov	r3, r4
 8009514:	6864      	ldr	r4, [r4, #4]
 8009516:	e7b2      	b.n	800947e <_malloc_r+0x32>
 8009518:	4634      	mov	r4, r6
 800951a:	6876      	ldr	r6, [r6, #4]
 800951c:	e7b9      	b.n	8009492 <_malloc_r+0x46>
 800951e:	230c      	movs	r3, #12
 8009520:	4638      	mov	r0, r7
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	f001 fa6e 	bl	800aa04 <__malloc_unlock>
 8009528:	e7a1      	b.n	800946e <_malloc_r+0x22>
 800952a:	6025      	str	r5, [r4, #0]
 800952c:	e7de      	b.n	80094ec <_malloc_r+0xa0>
 800952e:	bf00      	nop
 8009530:	20002900 	.word	0x20002900

08009534 <_sbrk_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	2300      	movs	r3, #0
 8009538:	4d05      	ldr	r5, [pc, #20]	; (8009550 <_sbrk_r+0x1c>)
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f7f8 feac 	bl	800229c <_sbrk>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_sbrk_r+0x1a>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_sbrk_r+0x1a>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20002908 	.word	0x20002908

08009554 <siprintf>:
 8009554:	b40e      	push	{r1, r2, r3}
 8009556:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800955a:	b500      	push	{lr}
 800955c:	b09c      	sub	sp, #112	; 0x70
 800955e:	ab1d      	add	r3, sp, #116	; 0x74
 8009560:	9002      	str	r0, [sp, #8]
 8009562:	9006      	str	r0, [sp, #24]
 8009564:	9107      	str	r1, [sp, #28]
 8009566:	9104      	str	r1, [sp, #16]
 8009568:	4808      	ldr	r0, [pc, #32]	; (800958c <siprintf+0x38>)
 800956a:	4909      	ldr	r1, [pc, #36]	; (8009590 <siprintf+0x3c>)
 800956c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009570:	9105      	str	r1, [sp, #20]
 8009572:	6800      	ldr	r0, [r0, #0]
 8009574:	a902      	add	r1, sp, #8
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	f001 ff5e 	bl	800b438 <_svfiprintf_r>
 800957c:	2200      	movs	r2, #0
 800957e:	9b02      	ldr	r3, [sp, #8]
 8009580:	701a      	strb	r2, [r3, #0]
 8009582:	b01c      	add	sp, #112	; 0x70
 8009584:	f85d eb04 	ldr.w	lr, [sp], #4
 8009588:	b003      	add	sp, #12
 800958a:	4770      	bx	lr
 800958c:	2000007c 	.word	0x2000007c
 8009590:	ffff0208 	.word	0xffff0208

08009594 <siscanf>:
 8009594:	b40e      	push	{r1, r2, r3}
 8009596:	f44f 7201 	mov.w	r2, #516	; 0x204
 800959a:	b530      	push	{r4, r5, lr}
 800959c:	b09c      	sub	sp, #112	; 0x70
 800959e:	ac1f      	add	r4, sp, #124	; 0x7c
 80095a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80095a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80095a8:	9002      	str	r0, [sp, #8]
 80095aa:	9006      	str	r0, [sp, #24]
 80095ac:	f7f6 fe40 	bl	8000230 <strlen>
 80095b0:	4b0b      	ldr	r3, [pc, #44]	; (80095e0 <siscanf+0x4c>)
 80095b2:	9003      	str	r0, [sp, #12]
 80095b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095b6:	2300      	movs	r3, #0
 80095b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80095ba:	9314      	str	r3, [sp, #80]	; 0x50
 80095bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095c0:	9007      	str	r0, [sp, #28]
 80095c2:	4808      	ldr	r0, [pc, #32]	; (80095e4 <siscanf+0x50>)
 80095c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80095c8:	462a      	mov	r2, r5
 80095ca:	4623      	mov	r3, r4
 80095cc:	a902      	add	r1, sp, #8
 80095ce:	6800      	ldr	r0, [r0, #0]
 80095d0:	9401      	str	r4, [sp, #4]
 80095d2:	f002 f88b 	bl	800b6ec <__ssvfiscanf_r>
 80095d6:	b01c      	add	sp, #112	; 0x70
 80095d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095dc:	b003      	add	sp, #12
 80095de:	4770      	bx	lr
 80095e0:	0800960b 	.word	0x0800960b
 80095e4:	2000007c 	.word	0x2000007c

080095e8 <__sread>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	460c      	mov	r4, r1
 80095ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f0:	f002 fcde 	bl	800bfb0 <_read_r>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	bfab      	itete	ge
 80095f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095fa:	89a3      	ldrhlt	r3, [r4, #12]
 80095fc:	181b      	addge	r3, r3, r0
 80095fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009602:	bfac      	ite	ge
 8009604:	6563      	strge	r3, [r4, #84]	; 0x54
 8009606:	81a3      	strhlt	r3, [r4, #12]
 8009608:	bd10      	pop	{r4, pc}

0800960a <__seofread>:
 800960a:	2000      	movs	r0, #0
 800960c:	4770      	bx	lr

0800960e <__swrite>:
 800960e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	461f      	mov	r7, r3
 8009614:	898b      	ldrh	r3, [r1, #12]
 8009616:	4605      	mov	r5, r0
 8009618:	05db      	lsls	r3, r3, #23
 800961a:	460c      	mov	r4, r1
 800961c:	4616      	mov	r6, r2
 800961e:	d505      	bpl.n	800962c <__swrite+0x1e>
 8009620:	2302      	movs	r3, #2
 8009622:	2200      	movs	r2, #0
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	f001 f9c2 	bl	800a9b0 <_lseek_r>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	4632      	mov	r2, r6
 8009630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	4628      	mov	r0, r5
 8009638:	463b      	mov	r3, r7
 800963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009642:	f000 be2d 	b.w	800a2a0 <_write_r>

08009646 <__sseek>:
 8009646:	b510      	push	{r4, lr}
 8009648:	460c      	mov	r4, r1
 800964a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800964e:	f001 f9af 	bl	800a9b0 <_lseek_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	bf15      	itete	ne
 8009658:	6560      	strne	r0, [r4, #84]	; 0x54
 800965a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800965e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009662:	81a3      	strheq	r3, [r4, #12]
 8009664:	bf18      	it	ne
 8009666:	81a3      	strhne	r3, [r4, #12]
 8009668:	bd10      	pop	{r4, pc}

0800966a <__sclose>:
 800966a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966e:	f000 be29 	b.w	800a2c4 <_close_r>

08009672 <sulp>:
 8009672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	460f      	mov	r7, r1
 8009678:	4690      	mov	r8, r2
 800967a:	f001 fd39 	bl	800b0f0 <__ulp>
 800967e:	4604      	mov	r4, r0
 8009680:	460d      	mov	r5, r1
 8009682:	f1b8 0f00 	cmp.w	r8, #0
 8009686:	d011      	beq.n	80096ac <sulp+0x3a>
 8009688:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800968c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009690:	2b00      	cmp	r3, #0
 8009692:	dd0b      	ble.n	80096ac <sulp+0x3a>
 8009694:	2400      	movs	r4, #0
 8009696:	051b      	lsls	r3, r3, #20
 8009698:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800969c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80096a0:	4622      	mov	r2, r4
 80096a2:	462b      	mov	r3, r5
 80096a4:	f7f6 ff88 	bl	80005b8 <__aeabi_dmul>
 80096a8:	4604      	mov	r4, r0
 80096aa:	460d      	mov	r5, r1
 80096ac:	4620      	mov	r0, r4
 80096ae:	4629      	mov	r1, r5
 80096b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b4:	0000      	movs	r0, r0
	...

080096b8 <_strtod_l>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	469b      	mov	fp, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	b09f      	sub	sp, #124	; 0x7c
 80096c2:	931a      	str	r3, [sp, #104]	; 0x68
 80096c4:	4b9e      	ldr	r3, [pc, #632]	; (8009940 <_strtod_l+0x288>)
 80096c6:	4682      	mov	sl, r0
 80096c8:	681f      	ldr	r7, [r3, #0]
 80096ca:	460e      	mov	r6, r1
 80096cc:	4638      	mov	r0, r7
 80096ce:	9215      	str	r2, [sp, #84]	; 0x54
 80096d0:	f7f6 fdae 	bl	8000230 <strlen>
 80096d4:	f04f 0800 	mov.w	r8, #0
 80096d8:	4604      	mov	r4, r0
 80096da:	f04f 0900 	mov.w	r9, #0
 80096de:	9619      	str	r6, [sp, #100]	; 0x64
 80096e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	2a2b      	cmp	r2, #43	; 0x2b
 80096e6:	d04c      	beq.n	8009782 <_strtod_l+0xca>
 80096e8:	d83a      	bhi.n	8009760 <_strtod_l+0xa8>
 80096ea:	2a0d      	cmp	r2, #13
 80096ec:	d833      	bhi.n	8009756 <_strtod_l+0x9e>
 80096ee:	2a08      	cmp	r2, #8
 80096f0:	d833      	bhi.n	800975a <_strtod_l+0xa2>
 80096f2:	2a00      	cmp	r2, #0
 80096f4:	d03d      	beq.n	8009772 <_strtod_l+0xba>
 80096f6:	2300      	movs	r3, #0
 80096f8:	930a      	str	r3, [sp, #40]	; 0x28
 80096fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80096fc:	782b      	ldrb	r3, [r5, #0]
 80096fe:	2b30      	cmp	r3, #48	; 0x30
 8009700:	f040 80aa 	bne.w	8009858 <_strtod_l+0x1a0>
 8009704:	786b      	ldrb	r3, [r5, #1]
 8009706:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800970a:	2b58      	cmp	r3, #88	; 0x58
 800970c:	d166      	bne.n	80097dc <_strtod_l+0x124>
 800970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009710:	4650      	mov	r0, sl
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	ab1a      	add	r3, sp, #104	; 0x68
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	4a8a      	ldr	r2, [pc, #552]	; (8009944 <_strtod_l+0x28c>)
 800971a:	f8cd b008 	str.w	fp, [sp, #8]
 800971e:	ab1b      	add	r3, sp, #108	; 0x6c
 8009720:	a919      	add	r1, sp, #100	; 0x64
 8009722:	f000 fe47 	bl	800a3b4 <__gethex>
 8009726:	f010 0607 	ands.w	r6, r0, #7
 800972a:	4604      	mov	r4, r0
 800972c:	d005      	beq.n	800973a <_strtod_l+0x82>
 800972e:	2e06      	cmp	r6, #6
 8009730:	d129      	bne.n	8009786 <_strtod_l+0xce>
 8009732:	2300      	movs	r3, #0
 8009734:	3501      	adds	r5, #1
 8009736:	9519      	str	r5, [sp, #100]	; 0x64
 8009738:	930a      	str	r3, [sp, #40]	; 0x28
 800973a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 858a 	bne.w	800a256 <_strtod_l+0xb9e>
 8009742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009744:	b1d3      	cbz	r3, 800977c <_strtod_l+0xc4>
 8009746:	4642      	mov	r2, r8
 8009748:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800974c:	4610      	mov	r0, r2
 800974e:	4619      	mov	r1, r3
 8009750:	b01f      	add	sp, #124	; 0x7c
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	2a20      	cmp	r2, #32
 8009758:	d1cd      	bne.n	80096f6 <_strtod_l+0x3e>
 800975a:	3301      	adds	r3, #1
 800975c:	9319      	str	r3, [sp, #100]	; 0x64
 800975e:	e7bf      	b.n	80096e0 <_strtod_l+0x28>
 8009760:	2a2d      	cmp	r2, #45	; 0x2d
 8009762:	d1c8      	bne.n	80096f6 <_strtod_l+0x3e>
 8009764:	2201      	movs	r2, #1
 8009766:	920a      	str	r2, [sp, #40]	; 0x28
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	9219      	str	r2, [sp, #100]	; 0x64
 800976c:	785b      	ldrb	r3, [r3, #1]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1c3      	bne.n	80096fa <_strtod_l+0x42>
 8009772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009774:	9619      	str	r6, [sp, #100]	; 0x64
 8009776:	2b00      	cmp	r3, #0
 8009778:	f040 856b 	bne.w	800a252 <_strtod_l+0xb9a>
 800977c:	4642      	mov	r2, r8
 800977e:	464b      	mov	r3, r9
 8009780:	e7e4      	b.n	800974c <_strtod_l+0x94>
 8009782:	2200      	movs	r2, #0
 8009784:	e7ef      	b.n	8009766 <_strtod_l+0xae>
 8009786:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009788:	b13a      	cbz	r2, 800979a <_strtod_l+0xe2>
 800978a:	2135      	movs	r1, #53	; 0x35
 800978c:	a81c      	add	r0, sp, #112	; 0x70
 800978e:	f001 fdb3 	bl	800b2f8 <__copybits>
 8009792:	4650      	mov	r0, sl
 8009794:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009796:	f001 f97b 	bl	800aa90 <_Bfree>
 800979a:	3e01      	subs	r6, #1
 800979c:	2e04      	cmp	r6, #4
 800979e:	d806      	bhi.n	80097ae <_strtod_l+0xf6>
 80097a0:	e8df f006 	tbb	[pc, r6]
 80097a4:	1714030a 	.word	0x1714030a
 80097a8:	0a          	.byte	0x0a
 80097a9:	00          	.byte	0x00
 80097aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80097ae:	0721      	lsls	r1, r4, #28
 80097b0:	d5c3      	bpl.n	800973a <_strtod_l+0x82>
 80097b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80097b6:	e7c0      	b.n	800973a <_strtod_l+0x82>
 80097b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80097ba:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80097be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80097c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80097c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80097ca:	e7f0      	b.n	80097ae <_strtod_l+0xf6>
 80097cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009948 <_strtod_l+0x290>
 80097d0:	e7ed      	b.n	80097ae <_strtod_l+0xf6>
 80097d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80097d6:	f04f 38ff 	mov.w	r8, #4294967295
 80097da:	e7e8      	b.n	80097ae <_strtod_l+0xf6>
 80097dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097de:	1c5a      	adds	r2, r3, #1
 80097e0:	9219      	str	r2, [sp, #100]	; 0x64
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b30      	cmp	r3, #48	; 0x30
 80097e6:	d0f9      	beq.n	80097dc <_strtod_l+0x124>
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0a6      	beq.n	800973a <_strtod_l+0x82>
 80097ec:	2301      	movs	r3, #1
 80097ee:	9307      	str	r3, [sp, #28]
 80097f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80097f2:	220a      	movs	r2, #10
 80097f4:	9308      	str	r3, [sp, #32]
 80097f6:	2300      	movs	r3, #0
 80097f8:	469b      	mov	fp, r3
 80097fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80097fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009800:	7805      	ldrb	r5, [r0, #0]
 8009802:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009806:	b2d9      	uxtb	r1, r3
 8009808:	2909      	cmp	r1, #9
 800980a:	d927      	bls.n	800985c <_strtod_l+0x1a4>
 800980c:	4622      	mov	r2, r4
 800980e:	4639      	mov	r1, r7
 8009810:	f002 fc1e 	bl	800c050 <strncmp>
 8009814:	2800      	cmp	r0, #0
 8009816:	d033      	beq.n	8009880 <_strtod_l+0x1c8>
 8009818:	2000      	movs	r0, #0
 800981a:	462a      	mov	r2, r5
 800981c:	465c      	mov	r4, fp
 800981e:	4603      	mov	r3, r0
 8009820:	9004      	str	r0, [sp, #16]
 8009822:	2a65      	cmp	r2, #101	; 0x65
 8009824:	d001      	beq.n	800982a <_strtod_l+0x172>
 8009826:	2a45      	cmp	r2, #69	; 0x45
 8009828:	d114      	bne.n	8009854 <_strtod_l+0x19c>
 800982a:	b91c      	cbnz	r4, 8009834 <_strtod_l+0x17c>
 800982c:	9a07      	ldr	r2, [sp, #28]
 800982e:	4302      	orrs	r2, r0
 8009830:	d09f      	beq.n	8009772 <_strtod_l+0xba>
 8009832:	2400      	movs	r4, #0
 8009834:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8009836:	1c72      	adds	r2, r6, #1
 8009838:	9219      	str	r2, [sp, #100]	; 0x64
 800983a:	7872      	ldrb	r2, [r6, #1]
 800983c:	2a2b      	cmp	r2, #43	; 0x2b
 800983e:	d079      	beq.n	8009934 <_strtod_l+0x27c>
 8009840:	2a2d      	cmp	r2, #45	; 0x2d
 8009842:	f000 8083 	beq.w	800994c <_strtod_l+0x294>
 8009846:	2700      	movs	r7, #0
 8009848:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800984c:	2909      	cmp	r1, #9
 800984e:	f240 8083 	bls.w	8009958 <_strtod_l+0x2a0>
 8009852:	9619      	str	r6, [sp, #100]	; 0x64
 8009854:	2500      	movs	r5, #0
 8009856:	e09f      	b.n	8009998 <_strtod_l+0x2e0>
 8009858:	2300      	movs	r3, #0
 800985a:	e7c8      	b.n	80097ee <_strtod_l+0x136>
 800985c:	f1bb 0f08 	cmp.w	fp, #8
 8009860:	bfd5      	itete	le
 8009862:	9906      	ldrle	r1, [sp, #24]
 8009864:	9905      	ldrgt	r1, [sp, #20]
 8009866:	fb02 3301 	mlale	r3, r2, r1, r3
 800986a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800986e:	f100 0001 	add.w	r0, r0, #1
 8009872:	bfd4      	ite	le
 8009874:	9306      	strle	r3, [sp, #24]
 8009876:	9305      	strgt	r3, [sp, #20]
 8009878:	f10b 0b01 	add.w	fp, fp, #1
 800987c:	9019      	str	r0, [sp, #100]	; 0x64
 800987e:	e7be      	b.n	80097fe <_strtod_l+0x146>
 8009880:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009882:	191a      	adds	r2, r3, r4
 8009884:	9219      	str	r2, [sp, #100]	; 0x64
 8009886:	5d1a      	ldrb	r2, [r3, r4]
 8009888:	f1bb 0f00 	cmp.w	fp, #0
 800988c:	d036      	beq.n	80098fc <_strtod_l+0x244>
 800988e:	465c      	mov	r4, fp
 8009890:	9004      	str	r0, [sp, #16]
 8009892:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009896:	2b09      	cmp	r3, #9
 8009898:	d912      	bls.n	80098c0 <_strtod_l+0x208>
 800989a:	2301      	movs	r3, #1
 800989c:	e7c1      	b.n	8009822 <_strtod_l+0x16a>
 800989e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098a0:	3001      	adds	r0, #1
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	9219      	str	r2, [sp, #100]	; 0x64
 80098a6:	785a      	ldrb	r2, [r3, #1]
 80098a8:	2a30      	cmp	r2, #48	; 0x30
 80098aa:	d0f8      	beq.n	800989e <_strtod_l+0x1e6>
 80098ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	f200 84d5 	bhi.w	800a260 <_strtod_l+0xba8>
 80098b6:	9004      	str	r0, [sp, #16]
 80098b8:	2000      	movs	r0, #0
 80098ba:	4604      	mov	r4, r0
 80098bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098be:	9308      	str	r3, [sp, #32]
 80098c0:	3a30      	subs	r2, #48	; 0x30
 80098c2:	f100 0301 	add.w	r3, r0, #1
 80098c6:	d013      	beq.n	80098f0 <_strtod_l+0x238>
 80098c8:	9904      	ldr	r1, [sp, #16]
 80098ca:	1905      	adds	r5, r0, r4
 80098cc:	4419      	add	r1, r3
 80098ce:	9104      	str	r1, [sp, #16]
 80098d0:	4623      	mov	r3, r4
 80098d2:	210a      	movs	r1, #10
 80098d4:	42ab      	cmp	r3, r5
 80098d6:	d113      	bne.n	8009900 <_strtod_l+0x248>
 80098d8:	1823      	adds	r3, r4, r0
 80098da:	2b08      	cmp	r3, #8
 80098dc:	f104 0401 	add.w	r4, r4, #1
 80098e0:	4404      	add	r4, r0
 80098e2:	dc1b      	bgt.n	800991c <_strtod_l+0x264>
 80098e4:	230a      	movs	r3, #10
 80098e6:	9906      	ldr	r1, [sp, #24]
 80098e8:	fb03 2301 	mla	r3, r3, r1, r2
 80098ec:	9306      	str	r3, [sp, #24]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098f2:	4618      	mov	r0, r3
 80098f4:	1c51      	adds	r1, r2, #1
 80098f6:	9119      	str	r1, [sp, #100]	; 0x64
 80098f8:	7852      	ldrb	r2, [r2, #1]
 80098fa:	e7ca      	b.n	8009892 <_strtod_l+0x1da>
 80098fc:	4658      	mov	r0, fp
 80098fe:	e7d3      	b.n	80098a8 <_strtod_l+0x1f0>
 8009900:	2b08      	cmp	r3, #8
 8009902:	dc04      	bgt.n	800990e <_strtod_l+0x256>
 8009904:	9f06      	ldr	r7, [sp, #24]
 8009906:	434f      	muls	r7, r1
 8009908:	9706      	str	r7, [sp, #24]
 800990a:	3301      	adds	r3, #1
 800990c:	e7e2      	b.n	80098d4 <_strtod_l+0x21c>
 800990e:	1c5f      	adds	r7, r3, #1
 8009910:	2f10      	cmp	r7, #16
 8009912:	bfde      	ittt	le
 8009914:	9f05      	ldrle	r7, [sp, #20]
 8009916:	434f      	mulle	r7, r1
 8009918:	9705      	strle	r7, [sp, #20]
 800991a:	e7f6      	b.n	800990a <_strtod_l+0x252>
 800991c:	2c10      	cmp	r4, #16
 800991e:	bfdf      	itttt	le
 8009920:	230a      	movle	r3, #10
 8009922:	9905      	ldrle	r1, [sp, #20]
 8009924:	fb03 2301 	mlale	r3, r3, r1, r2
 8009928:	9305      	strle	r3, [sp, #20]
 800992a:	e7e0      	b.n	80098ee <_strtod_l+0x236>
 800992c:	2300      	movs	r3, #0
 800992e:	9304      	str	r3, [sp, #16]
 8009930:	2301      	movs	r3, #1
 8009932:	e77b      	b.n	800982c <_strtod_l+0x174>
 8009934:	2700      	movs	r7, #0
 8009936:	1cb2      	adds	r2, r6, #2
 8009938:	9219      	str	r2, [sp, #100]	; 0x64
 800993a:	78b2      	ldrb	r2, [r6, #2]
 800993c:	e784      	b.n	8009848 <_strtod_l+0x190>
 800993e:	bf00      	nop
 8009940:	0800dce8 	.word	0x0800dce8
 8009944:	0800dc20 	.word	0x0800dc20
 8009948:	7ff00000 	.word	0x7ff00000
 800994c:	2701      	movs	r7, #1
 800994e:	e7f2      	b.n	8009936 <_strtod_l+0x27e>
 8009950:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009952:	1c51      	adds	r1, r2, #1
 8009954:	9119      	str	r1, [sp, #100]	; 0x64
 8009956:	7852      	ldrb	r2, [r2, #1]
 8009958:	2a30      	cmp	r2, #48	; 0x30
 800995a:	d0f9      	beq.n	8009950 <_strtod_l+0x298>
 800995c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009960:	2908      	cmp	r1, #8
 8009962:	f63f af77 	bhi.w	8009854 <_strtod_l+0x19c>
 8009966:	f04f 0e0a 	mov.w	lr, #10
 800996a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800996e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009970:	9209      	str	r2, [sp, #36]	; 0x24
 8009972:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009974:	1c51      	adds	r1, r2, #1
 8009976:	9119      	str	r1, [sp, #100]	; 0x64
 8009978:	7852      	ldrb	r2, [r2, #1]
 800997a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800997e:	2d09      	cmp	r5, #9
 8009980:	d935      	bls.n	80099ee <_strtod_l+0x336>
 8009982:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009984:	1b49      	subs	r1, r1, r5
 8009986:	2908      	cmp	r1, #8
 8009988:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800998c:	dc02      	bgt.n	8009994 <_strtod_l+0x2dc>
 800998e:	4565      	cmp	r5, ip
 8009990:	bfa8      	it	ge
 8009992:	4665      	movge	r5, ip
 8009994:	b107      	cbz	r7, 8009998 <_strtod_l+0x2e0>
 8009996:	426d      	negs	r5, r5
 8009998:	2c00      	cmp	r4, #0
 800999a:	d14c      	bne.n	8009a36 <_strtod_l+0x37e>
 800999c:	9907      	ldr	r1, [sp, #28]
 800999e:	4301      	orrs	r1, r0
 80099a0:	f47f aecb 	bne.w	800973a <_strtod_l+0x82>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f47f aee4 	bne.w	8009772 <_strtod_l+0xba>
 80099aa:	2a69      	cmp	r2, #105	; 0x69
 80099ac:	d026      	beq.n	80099fc <_strtod_l+0x344>
 80099ae:	dc23      	bgt.n	80099f8 <_strtod_l+0x340>
 80099b0:	2a49      	cmp	r2, #73	; 0x49
 80099b2:	d023      	beq.n	80099fc <_strtod_l+0x344>
 80099b4:	2a4e      	cmp	r2, #78	; 0x4e
 80099b6:	f47f aedc 	bne.w	8009772 <_strtod_l+0xba>
 80099ba:	499d      	ldr	r1, [pc, #628]	; (8009c30 <_strtod_l+0x578>)
 80099bc:	a819      	add	r0, sp, #100	; 0x64
 80099be:	f000 ff47 	bl	800a850 <__match>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	f43f aed5 	beq.w	8009772 <_strtod_l+0xba>
 80099c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	2b28      	cmp	r3, #40	; 0x28
 80099ce:	d12c      	bne.n	8009a2a <_strtod_l+0x372>
 80099d0:	4998      	ldr	r1, [pc, #608]	; (8009c34 <_strtod_l+0x57c>)
 80099d2:	aa1c      	add	r2, sp, #112	; 0x70
 80099d4:	a819      	add	r0, sp, #100	; 0x64
 80099d6:	f000 ff4f 	bl	800a878 <__hexnan>
 80099da:	2805      	cmp	r0, #5
 80099dc:	d125      	bne.n	8009a2a <_strtod_l+0x372>
 80099de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80099e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80099e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80099ec:	e6a5      	b.n	800973a <_strtod_l+0x82>
 80099ee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80099f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80099f6:	e7bc      	b.n	8009972 <_strtod_l+0x2ba>
 80099f8:	2a6e      	cmp	r2, #110	; 0x6e
 80099fa:	e7dc      	b.n	80099b6 <_strtod_l+0x2fe>
 80099fc:	498e      	ldr	r1, [pc, #568]	; (8009c38 <_strtod_l+0x580>)
 80099fe:	a819      	add	r0, sp, #100	; 0x64
 8009a00:	f000 ff26 	bl	800a850 <__match>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f43f aeb4 	beq.w	8009772 <_strtod_l+0xba>
 8009a0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a0c:	498b      	ldr	r1, [pc, #556]	; (8009c3c <_strtod_l+0x584>)
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	a819      	add	r0, sp, #100	; 0x64
 8009a12:	9319      	str	r3, [sp, #100]	; 0x64
 8009a14:	f000 ff1c 	bl	800a850 <__match>
 8009a18:	b910      	cbnz	r0, 8009a20 <_strtod_l+0x368>
 8009a1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	9319      	str	r3, [sp, #100]	; 0x64
 8009a20:	f04f 0800 	mov.w	r8, #0
 8009a24:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009c40 <_strtod_l+0x588>
 8009a28:	e687      	b.n	800973a <_strtod_l+0x82>
 8009a2a:	4886      	ldr	r0, [pc, #536]	; (8009c44 <_strtod_l+0x58c>)
 8009a2c:	f002 fad2 	bl	800bfd4 <nan>
 8009a30:	4680      	mov	r8, r0
 8009a32:	4689      	mov	r9, r1
 8009a34:	e681      	b.n	800973a <_strtod_l+0x82>
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	f1bb 0f00 	cmp.w	fp, #0
 8009a3c:	bf08      	it	eq
 8009a3e:	46a3      	moveq	fp, r4
 8009a40:	1aeb      	subs	r3, r5, r3
 8009a42:	2c10      	cmp	r4, #16
 8009a44:	9806      	ldr	r0, [sp, #24]
 8009a46:	4626      	mov	r6, r4
 8009a48:	9307      	str	r3, [sp, #28]
 8009a4a:	bfa8      	it	ge
 8009a4c:	2610      	movge	r6, #16
 8009a4e:	f7f6 fd39 	bl	80004c4 <__aeabi_ui2d>
 8009a52:	2c09      	cmp	r4, #9
 8009a54:	4680      	mov	r8, r0
 8009a56:	4689      	mov	r9, r1
 8009a58:	dd13      	ble.n	8009a82 <_strtod_l+0x3ca>
 8009a5a:	4b7b      	ldr	r3, [pc, #492]	; (8009c48 <_strtod_l+0x590>)
 8009a5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009a64:	f7f6 fda8 	bl	80005b8 <__aeabi_dmul>
 8009a68:	4680      	mov	r8, r0
 8009a6a:	9805      	ldr	r0, [sp, #20]
 8009a6c:	4689      	mov	r9, r1
 8009a6e:	f7f6 fd29 	bl	80004c4 <__aeabi_ui2d>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	4640      	mov	r0, r8
 8009a78:	4649      	mov	r1, r9
 8009a7a:	f7f6 fbe7 	bl	800024c <__adddf3>
 8009a7e:	4680      	mov	r8, r0
 8009a80:	4689      	mov	r9, r1
 8009a82:	2c0f      	cmp	r4, #15
 8009a84:	dc36      	bgt.n	8009af4 <_strtod_l+0x43c>
 8009a86:	9b07      	ldr	r3, [sp, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f43f ae56 	beq.w	800973a <_strtod_l+0x82>
 8009a8e:	dd22      	ble.n	8009ad6 <_strtod_l+0x41e>
 8009a90:	2b16      	cmp	r3, #22
 8009a92:	dc09      	bgt.n	8009aa8 <_strtod_l+0x3f0>
 8009a94:	496c      	ldr	r1, [pc, #432]	; (8009c48 <_strtod_l+0x590>)
 8009a96:	4642      	mov	r2, r8
 8009a98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aa2:	f7f6 fd89 	bl	80005b8 <__aeabi_dmul>
 8009aa6:	e7c3      	b.n	8009a30 <_strtod_l+0x378>
 8009aa8:	9a07      	ldr	r2, [sp, #28]
 8009aaa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	db20      	blt.n	8009af4 <_strtod_l+0x43c>
 8009ab2:	4d65      	ldr	r5, [pc, #404]	; (8009c48 <_strtod_l+0x590>)
 8009ab4:	f1c4 040f 	rsb	r4, r4, #15
 8009ab8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009abc:	4642      	mov	r2, r8
 8009abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	f7f6 fd78 	bl	80005b8 <__aeabi_dmul>
 8009ac8:	9b07      	ldr	r3, [sp, #28]
 8009aca:	1b1c      	subs	r4, r3, r4
 8009acc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009ad0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ad4:	e7e5      	b.n	8009aa2 <_strtod_l+0x3ea>
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	3316      	adds	r3, #22
 8009ada:	db0b      	blt.n	8009af4 <_strtod_l+0x43c>
 8009adc:	9b04      	ldr	r3, [sp, #16]
 8009ade:	4640      	mov	r0, r8
 8009ae0:	1b5d      	subs	r5, r3, r5
 8009ae2:	4b59      	ldr	r3, [pc, #356]	; (8009c48 <_strtod_l+0x590>)
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009aea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009aee:	f7f6 fe8d 	bl	800080c <__aeabi_ddiv>
 8009af2:	e79d      	b.n	8009a30 <_strtod_l+0x378>
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	1ba6      	subs	r6, r4, r6
 8009af8:	441e      	add	r6, r3
 8009afa:	2e00      	cmp	r6, #0
 8009afc:	dd74      	ble.n	8009be8 <_strtod_l+0x530>
 8009afe:	f016 030f 	ands.w	r3, r6, #15
 8009b02:	d00a      	beq.n	8009b1a <_strtod_l+0x462>
 8009b04:	4950      	ldr	r1, [pc, #320]	; (8009c48 <_strtod_l+0x590>)
 8009b06:	4642      	mov	r2, r8
 8009b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b10:	464b      	mov	r3, r9
 8009b12:	f7f6 fd51 	bl	80005b8 <__aeabi_dmul>
 8009b16:	4680      	mov	r8, r0
 8009b18:	4689      	mov	r9, r1
 8009b1a:	f036 060f 	bics.w	r6, r6, #15
 8009b1e:	d052      	beq.n	8009bc6 <_strtod_l+0x50e>
 8009b20:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009b24:	dd27      	ble.n	8009b76 <_strtod_l+0x4be>
 8009b26:	f04f 0b00 	mov.w	fp, #0
 8009b2a:	f8cd b010 	str.w	fp, [sp, #16]
 8009b2e:	f8cd b020 	str.w	fp, [sp, #32]
 8009b32:	f8cd b018 	str.w	fp, [sp, #24]
 8009b36:	2322      	movs	r3, #34	; 0x22
 8009b38:	f04f 0800 	mov.w	r8, #0
 8009b3c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009c40 <_strtod_l+0x588>
 8009b40:	f8ca 3000 	str.w	r3, [sl]
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f43f adf7 	beq.w	800973a <_strtod_l+0x82>
 8009b4c:	4650      	mov	r0, sl
 8009b4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009b50:	f000 ff9e 	bl	800aa90 <_Bfree>
 8009b54:	4650      	mov	r0, sl
 8009b56:	9906      	ldr	r1, [sp, #24]
 8009b58:	f000 ff9a 	bl	800aa90 <_Bfree>
 8009b5c:	4650      	mov	r0, sl
 8009b5e:	9904      	ldr	r1, [sp, #16]
 8009b60:	f000 ff96 	bl	800aa90 <_Bfree>
 8009b64:	4650      	mov	r0, sl
 8009b66:	9908      	ldr	r1, [sp, #32]
 8009b68:	f000 ff92 	bl	800aa90 <_Bfree>
 8009b6c:	4659      	mov	r1, fp
 8009b6e:	4650      	mov	r0, sl
 8009b70:	f000 ff8e 	bl	800aa90 <_Bfree>
 8009b74:	e5e1      	b.n	800973a <_strtod_l+0x82>
 8009b76:	4b35      	ldr	r3, [pc, #212]	; (8009c4c <_strtod_l+0x594>)
 8009b78:	4640      	mov	r0, r8
 8009b7a:	9305      	str	r3, [sp, #20]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4649      	mov	r1, r9
 8009b80:	461f      	mov	r7, r3
 8009b82:	1136      	asrs	r6, r6, #4
 8009b84:	2e01      	cmp	r6, #1
 8009b86:	dc21      	bgt.n	8009bcc <_strtod_l+0x514>
 8009b88:	b10b      	cbz	r3, 8009b8e <_strtod_l+0x4d6>
 8009b8a:	4680      	mov	r8, r0
 8009b8c:	4689      	mov	r9, r1
 8009b8e:	4b2f      	ldr	r3, [pc, #188]	; (8009c4c <_strtod_l+0x594>)
 8009b90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009b94:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009b98:	4642      	mov	r2, r8
 8009b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	f7f6 fd0a 	bl	80005b8 <__aeabi_dmul>
 8009ba4:	4b26      	ldr	r3, [pc, #152]	; (8009c40 <_strtod_l+0x588>)
 8009ba6:	460a      	mov	r2, r1
 8009ba8:	400b      	ands	r3, r1
 8009baa:	4929      	ldr	r1, [pc, #164]	; (8009c50 <_strtod_l+0x598>)
 8009bac:	4680      	mov	r8, r0
 8009bae:	428b      	cmp	r3, r1
 8009bb0:	d8b9      	bhi.n	8009b26 <_strtod_l+0x46e>
 8009bb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009bb6:	428b      	cmp	r3, r1
 8009bb8:	bf86      	itte	hi
 8009bba:	f04f 38ff 	movhi.w	r8, #4294967295
 8009bbe:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009c54 <_strtod_l+0x59c>
 8009bc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9305      	str	r3, [sp, #20]
 8009bca:	e07f      	b.n	8009ccc <_strtod_l+0x614>
 8009bcc:	07f2      	lsls	r2, r6, #31
 8009bce:	d505      	bpl.n	8009bdc <_strtod_l+0x524>
 8009bd0:	9b05      	ldr	r3, [sp, #20]
 8009bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd6:	f7f6 fcef 	bl	80005b8 <__aeabi_dmul>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	9a05      	ldr	r2, [sp, #20]
 8009bde:	3701      	adds	r7, #1
 8009be0:	3208      	adds	r2, #8
 8009be2:	1076      	asrs	r6, r6, #1
 8009be4:	9205      	str	r2, [sp, #20]
 8009be6:	e7cd      	b.n	8009b84 <_strtod_l+0x4cc>
 8009be8:	d0ed      	beq.n	8009bc6 <_strtod_l+0x50e>
 8009bea:	4276      	negs	r6, r6
 8009bec:	f016 020f 	ands.w	r2, r6, #15
 8009bf0:	d00a      	beq.n	8009c08 <_strtod_l+0x550>
 8009bf2:	4b15      	ldr	r3, [pc, #84]	; (8009c48 <_strtod_l+0x590>)
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bfa:	4649      	mov	r1, r9
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f7f6 fe04 	bl	800080c <__aeabi_ddiv>
 8009c04:	4680      	mov	r8, r0
 8009c06:	4689      	mov	r9, r1
 8009c08:	1136      	asrs	r6, r6, #4
 8009c0a:	d0dc      	beq.n	8009bc6 <_strtod_l+0x50e>
 8009c0c:	2e1f      	cmp	r6, #31
 8009c0e:	dd23      	ble.n	8009c58 <_strtod_l+0x5a0>
 8009c10:	f04f 0b00 	mov.w	fp, #0
 8009c14:	f8cd b010 	str.w	fp, [sp, #16]
 8009c18:	f8cd b020 	str.w	fp, [sp, #32]
 8009c1c:	f8cd b018 	str.w	fp, [sp, #24]
 8009c20:	2322      	movs	r3, #34	; 0x22
 8009c22:	f04f 0800 	mov.w	r8, #0
 8009c26:	f04f 0900 	mov.w	r9, #0
 8009c2a:	f8ca 3000 	str.w	r3, [sl]
 8009c2e:	e789      	b.n	8009b44 <_strtod_l+0x48c>
 8009c30:	0800dc1d 	.word	0x0800dc1d
 8009c34:	0800dc34 	.word	0x0800dc34
 8009c38:	0800dc14 	.word	0x0800dc14
 8009c3c:	0800dc17 	.word	0x0800dc17
 8009c40:	7ff00000 	.word	0x7ff00000
 8009c44:	0800def5 	.word	0x0800def5
 8009c48:	0800dd98 	.word	0x0800dd98
 8009c4c:	0800dd70 	.word	0x0800dd70
 8009c50:	7ca00000 	.word	0x7ca00000
 8009c54:	7fefffff 	.word	0x7fefffff
 8009c58:	f016 0310 	ands.w	r3, r6, #16
 8009c5c:	bf18      	it	ne
 8009c5e:	236a      	movne	r3, #106	; 0x6a
 8009c60:	4640      	mov	r0, r8
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	4649      	mov	r1, r9
 8009c66:	2300      	movs	r3, #0
 8009c68:	4fb0      	ldr	r7, [pc, #704]	; (8009f2c <_strtod_l+0x874>)
 8009c6a:	07f2      	lsls	r2, r6, #31
 8009c6c:	d504      	bpl.n	8009c78 <_strtod_l+0x5c0>
 8009c6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c72:	f7f6 fca1 	bl	80005b8 <__aeabi_dmul>
 8009c76:	2301      	movs	r3, #1
 8009c78:	1076      	asrs	r6, r6, #1
 8009c7a:	f107 0708 	add.w	r7, r7, #8
 8009c7e:	d1f4      	bne.n	8009c6a <_strtod_l+0x5b2>
 8009c80:	b10b      	cbz	r3, 8009c86 <_strtod_l+0x5ce>
 8009c82:	4680      	mov	r8, r0
 8009c84:	4689      	mov	r9, r1
 8009c86:	9b05      	ldr	r3, [sp, #20]
 8009c88:	b1c3      	cbz	r3, 8009cbc <_strtod_l+0x604>
 8009c8a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009c8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	4649      	mov	r1, r9
 8009c96:	dd11      	ble.n	8009cbc <_strtod_l+0x604>
 8009c98:	2b1f      	cmp	r3, #31
 8009c9a:	f340 8127 	ble.w	8009eec <_strtod_l+0x834>
 8009c9e:	2b34      	cmp	r3, #52	; 0x34
 8009ca0:	bfd8      	it	le
 8009ca2:	f04f 33ff 	movle.w	r3, #4294967295
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	bfcf      	iteee	gt
 8009cac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009cb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009cb4:	fa03 f202 	lslle.w	r2, r3, r2
 8009cb8:	ea02 0901 	andle.w	r9, r2, r1
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	f7f6 fee0 	bl	8000a88 <__aeabi_dcmpeq>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d1a1      	bne.n	8009c10 <_strtod_l+0x558>
 8009ccc:	9b06      	ldr	r3, [sp, #24]
 8009cce:	465a      	mov	r2, fp
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4623      	mov	r3, r4
 8009cd6:	9908      	ldr	r1, [sp, #32]
 8009cd8:	f000 ff42 	bl	800ab60 <__s2b>
 8009cdc:	9008      	str	r0, [sp, #32]
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f43f af21 	beq.w	8009b26 <_strtod_l+0x46e>
 8009ce4:	9b04      	ldr	r3, [sp, #16]
 8009ce6:	f04f 0b00 	mov.w	fp, #0
 8009cea:	1b5d      	subs	r5, r3, r5
 8009cec:	9b07      	ldr	r3, [sp, #28]
 8009cee:	f8cd b010 	str.w	fp, [sp, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfb4      	ite	lt
 8009cf6:	462b      	movlt	r3, r5
 8009cf8:	2300      	movge	r3, #0
 8009cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8009cfc:	9b07      	ldr	r3, [sp, #28]
 8009cfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d02:	9314      	str	r3, [sp, #80]	; 0x50
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	4650      	mov	r0, sl
 8009d08:	6859      	ldr	r1, [r3, #4]
 8009d0a:	f000 fe81 	bl	800aa10 <_Balloc>
 8009d0e:	9006      	str	r0, [sp, #24]
 8009d10:	2800      	cmp	r0, #0
 8009d12:	f43f af10 	beq.w	8009b36 <_strtod_l+0x47e>
 8009d16:	9b08      	ldr	r3, [sp, #32]
 8009d18:	300c      	adds	r0, #12
 8009d1a:	691a      	ldr	r2, [r3, #16]
 8009d1c:	f103 010c 	add.w	r1, r3, #12
 8009d20:	3202      	adds	r2, #2
 8009d22:	0092      	lsls	r2, r2, #2
 8009d24:	f7ff fb00 	bl	8009328 <memcpy>
 8009d28:	ab1c      	add	r3, sp, #112	; 0x70
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	4642      	mov	r2, r8
 8009d32:	464b      	mov	r3, r9
 8009d34:	4650      	mov	r0, sl
 8009d36:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009d3a:	f001 fa53 	bl	800b1e4 <__d2b>
 8009d3e:	901a      	str	r0, [sp, #104]	; 0x68
 8009d40:	2800      	cmp	r0, #0
 8009d42:	f43f aef8 	beq.w	8009b36 <_strtod_l+0x47e>
 8009d46:	2101      	movs	r1, #1
 8009d48:	4650      	mov	r0, sl
 8009d4a:	f000 ffa1 	bl	800ac90 <__i2b>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	9004      	str	r0, [sp, #16]
 8009d52:	2800      	cmp	r0, #0
 8009d54:	f43f aeef 	beq.w	8009b36 <_strtod_l+0x47e>
 8009d58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009d5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d5c:	2d00      	cmp	r5, #0
 8009d5e:	bfab      	itete	ge
 8009d60:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009d62:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009d64:	18ee      	addge	r6, r5, r3
 8009d66:	1b5c      	sublt	r4, r3, r5
 8009d68:	9b05      	ldr	r3, [sp, #20]
 8009d6a:	bfa8      	it	ge
 8009d6c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009d6e:	eba5 0503 	sub.w	r5, r5, r3
 8009d72:	4415      	add	r5, r2
 8009d74:	4b6e      	ldr	r3, [pc, #440]	; (8009f30 <_strtod_l+0x878>)
 8009d76:	f105 35ff 	add.w	r5, r5, #4294967295
 8009d7a:	bfb8      	it	lt
 8009d7c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009d7e:	429d      	cmp	r5, r3
 8009d80:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d84:	f280 80c4 	bge.w	8009f10 <_strtod_l+0x858>
 8009d88:	1b5b      	subs	r3, r3, r5
 8009d8a:	2b1f      	cmp	r3, #31
 8009d8c:	f04f 0701 	mov.w	r7, #1
 8009d90:	eba2 0203 	sub.w	r2, r2, r3
 8009d94:	f300 80b1 	bgt.w	8009efa <_strtod_l+0x842>
 8009d98:	2500      	movs	r5, #0
 8009d9a:	fa07 f303 	lsl.w	r3, r7, r3
 8009d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009da0:	18b7      	adds	r7, r6, r2
 8009da2:	9b05      	ldr	r3, [sp, #20]
 8009da4:	42be      	cmp	r6, r7
 8009da6:	4414      	add	r4, r2
 8009da8:	441c      	add	r4, r3
 8009daa:	4633      	mov	r3, r6
 8009dac:	bfa8      	it	ge
 8009dae:	463b      	movge	r3, r7
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	bfa8      	it	ge
 8009db4:	4623      	movge	r3, r4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfc2      	ittt	gt
 8009dba:	1aff      	subgt	r7, r7, r3
 8009dbc:	1ae4      	subgt	r4, r4, r3
 8009dbe:	1af6      	subgt	r6, r6, r3
 8009dc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dd17      	ble.n	8009df6 <_strtod_l+0x73e>
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4650      	mov	r0, sl
 8009dca:	9904      	ldr	r1, [sp, #16]
 8009dcc:	f001 f81e 	bl	800ae0c <__pow5mult>
 8009dd0:	9004      	str	r0, [sp, #16]
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f43f aeaf 	beq.w	8009b36 <_strtod_l+0x47e>
 8009dd8:	4601      	mov	r1, r0
 8009dda:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ddc:	4650      	mov	r0, sl
 8009dde:	f000 ff6d 	bl	800acbc <__multiply>
 8009de2:	9009      	str	r0, [sp, #36]	; 0x24
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f43f aea6 	beq.w	8009b36 <_strtod_l+0x47e>
 8009dea:	4650      	mov	r0, sl
 8009dec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009dee:	f000 fe4f 	bl	800aa90 <_Bfree>
 8009df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df4:	931a      	str	r3, [sp, #104]	; 0x68
 8009df6:	2f00      	cmp	r7, #0
 8009df8:	f300 808e 	bgt.w	8009f18 <_strtod_l+0x860>
 8009dfc:	9b07      	ldr	r3, [sp, #28]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	dd08      	ble.n	8009e14 <_strtod_l+0x75c>
 8009e02:	4650      	mov	r0, sl
 8009e04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e06:	9906      	ldr	r1, [sp, #24]
 8009e08:	f001 f800 	bl	800ae0c <__pow5mult>
 8009e0c:	9006      	str	r0, [sp, #24]
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f ae91 	beq.w	8009b36 <_strtod_l+0x47e>
 8009e14:	2c00      	cmp	r4, #0
 8009e16:	dd08      	ble.n	8009e2a <_strtod_l+0x772>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	4650      	mov	r0, sl
 8009e1c:	9906      	ldr	r1, [sp, #24]
 8009e1e:	f001 f84f 	bl	800aec0 <__lshift>
 8009e22:	9006      	str	r0, [sp, #24]
 8009e24:	2800      	cmp	r0, #0
 8009e26:	f43f ae86 	beq.w	8009b36 <_strtod_l+0x47e>
 8009e2a:	2e00      	cmp	r6, #0
 8009e2c:	dd08      	ble.n	8009e40 <_strtod_l+0x788>
 8009e2e:	4632      	mov	r2, r6
 8009e30:	4650      	mov	r0, sl
 8009e32:	9904      	ldr	r1, [sp, #16]
 8009e34:	f001 f844 	bl	800aec0 <__lshift>
 8009e38:	9004      	str	r0, [sp, #16]
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	f43f ae7b 	beq.w	8009b36 <_strtod_l+0x47e>
 8009e40:	4650      	mov	r0, sl
 8009e42:	9a06      	ldr	r2, [sp, #24]
 8009e44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009e46:	f001 f8c7 	bl	800afd8 <__mdiff>
 8009e4a:	4683      	mov	fp, r0
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	f43f ae72 	beq.w	8009b36 <_strtod_l+0x47e>
 8009e52:	2400      	movs	r4, #0
 8009e54:	68c3      	ldr	r3, [r0, #12]
 8009e56:	9904      	ldr	r1, [sp, #16]
 8009e58:	60c4      	str	r4, [r0, #12]
 8009e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e5c:	f001 f8a0 	bl	800afa0 <__mcmp>
 8009e60:	42a0      	cmp	r0, r4
 8009e62:	da6b      	bge.n	8009f3c <_strtod_l+0x884>
 8009e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e66:	ea53 0308 	orrs.w	r3, r3, r8
 8009e6a:	f040 8091 	bne.w	8009f90 <_strtod_l+0x8d8>
 8009e6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f040 808c 	bne.w	8009f90 <_strtod_l+0x8d8>
 8009e78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e7c:	0d1b      	lsrs	r3, r3, #20
 8009e7e:	051b      	lsls	r3, r3, #20
 8009e80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009e84:	f240 8084 	bls.w	8009f90 <_strtod_l+0x8d8>
 8009e88:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009e8c:	b91b      	cbnz	r3, 8009e96 <_strtod_l+0x7de>
 8009e8e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	dd7c      	ble.n	8009f90 <_strtod_l+0x8d8>
 8009e96:	4659      	mov	r1, fp
 8009e98:	2201      	movs	r2, #1
 8009e9a:	4650      	mov	r0, sl
 8009e9c:	f001 f810 	bl	800aec0 <__lshift>
 8009ea0:	9904      	ldr	r1, [sp, #16]
 8009ea2:	4683      	mov	fp, r0
 8009ea4:	f001 f87c 	bl	800afa0 <__mcmp>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dd71      	ble.n	8009f90 <_strtod_l+0x8d8>
 8009eac:	9905      	ldr	r1, [sp, #20]
 8009eae:	464b      	mov	r3, r9
 8009eb0:	4a20      	ldr	r2, [pc, #128]	; (8009f34 <_strtod_l+0x87c>)
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	f000 808c 	beq.w	8009fd0 <_strtod_l+0x918>
 8009eb8:	ea02 0109 	and.w	r1, r2, r9
 8009ebc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ec0:	f300 8086 	bgt.w	8009fd0 <_strtod_l+0x918>
 8009ec4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ec8:	f77f aeaa 	ble.w	8009c20 <_strtod_l+0x568>
 8009ecc:	4640      	mov	r0, r8
 8009ece:	4649      	mov	r1, r9
 8009ed0:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <_strtod_l+0x880>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f7f6 fb70 	bl	80005b8 <__aeabi_dmul>
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4303      	orrs	r3, r0
 8009edc:	bf08      	it	eq
 8009ede:	2322      	moveq	r3, #34	; 0x22
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	4689      	mov	r9, r1
 8009ee4:	bf08      	it	eq
 8009ee6:	f8ca 3000 	streq.w	r3, [sl]
 8009eea:	e62f      	b.n	8009b4c <_strtod_l+0x494>
 8009eec:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef4:	ea03 0808 	and.w	r8, r3, r8
 8009ef8:	e6e0      	b.n	8009cbc <_strtod_l+0x604>
 8009efa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009efe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009f02:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009f06:	35e2      	adds	r5, #226	; 0xe2
 8009f08:	fa07 f505 	lsl.w	r5, r7, r5
 8009f0c:	970f      	str	r7, [sp, #60]	; 0x3c
 8009f0e:	e747      	b.n	8009da0 <_strtod_l+0x6e8>
 8009f10:	2301      	movs	r3, #1
 8009f12:	2500      	movs	r5, #0
 8009f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f16:	e743      	b.n	8009da0 <_strtod_l+0x6e8>
 8009f18:	463a      	mov	r2, r7
 8009f1a:	4650      	mov	r0, sl
 8009f1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f1e:	f000 ffcf 	bl	800aec0 <__lshift>
 8009f22:	901a      	str	r0, [sp, #104]	; 0x68
 8009f24:	2800      	cmp	r0, #0
 8009f26:	f47f af69 	bne.w	8009dfc <_strtod_l+0x744>
 8009f2a:	e604      	b.n	8009b36 <_strtod_l+0x47e>
 8009f2c:	0800dc48 	.word	0x0800dc48
 8009f30:	fffffc02 	.word	0xfffffc02
 8009f34:	7ff00000 	.word	0x7ff00000
 8009f38:	39500000 	.word	0x39500000
 8009f3c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009f40:	d165      	bne.n	800a00e <_strtod_l+0x956>
 8009f42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f48:	b35a      	cbz	r2, 8009fa2 <_strtod_l+0x8ea>
 8009f4a:	4a99      	ldr	r2, [pc, #612]	; (800a1b0 <_strtod_l+0xaf8>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d12b      	bne.n	8009fa8 <_strtod_l+0x8f0>
 8009f50:	9b05      	ldr	r3, [sp, #20]
 8009f52:	4641      	mov	r1, r8
 8009f54:	b303      	cbz	r3, 8009f98 <_strtod_l+0x8e0>
 8009f56:	464a      	mov	r2, r9
 8009f58:	4b96      	ldr	r3, [pc, #600]	; (800a1b4 <_strtod_l+0xafc>)
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009f60:	f04f 32ff 	mov.w	r2, #4294967295
 8009f64:	d81b      	bhi.n	8009f9e <_strtod_l+0x8e6>
 8009f66:	0d1b      	lsrs	r3, r3, #20
 8009f68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	4299      	cmp	r1, r3
 8009f72:	d119      	bne.n	8009fa8 <_strtod_l+0x8f0>
 8009f74:	4b90      	ldr	r3, [pc, #576]	; (800a1b8 <_strtod_l+0xb00>)
 8009f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d102      	bne.n	8009f82 <_strtod_l+0x8ca>
 8009f7c:	3101      	adds	r1, #1
 8009f7e:	f43f adda 	beq.w	8009b36 <_strtod_l+0x47e>
 8009f82:	f04f 0800 	mov.w	r8, #0
 8009f86:	4b8b      	ldr	r3, [pc, #556]	; (800a1b4 <_strtod_l+0xafc>)
 8009f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f8a:	401a      	ands	r2, r3
 8009f8c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009f90:	9b05      	ldr	r3, [sp, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d19a      	bne.n	8009ecc <_strtod_l+0x814>
 8009f96:	e5d9      	b.n	8009b4c <_strtod_l+0x494>
 8009f98:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9c:	e7e8      	b.n	8009f70 <_strtod_l+0x8b8>
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	e7e6      	b.n	8009f70 <_strtod_l+0x8b8>
 8009fa2:	ea53 0308 	orrs.w	r3, r3, r8
 8009fa6:	d081      	beq.n	8009eac <_strtod_l+0x7f4>
 8009fa8:	b1e5      	cbz	r5, 8009fe4 <_strtod_l+0x92c>
 8009faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fac:	421d      	tst	r5, r3
 8009fae:	d0ef      	beq.n	8009f90 <_strtod_l+0x8d8>
 8009fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	4649      	mov	r1, r9
 8009fb6:	9a05      	ldr	r2, [sp, #20]
 8009fb8:	b1c3      	cbz	r3, 8009fec <_strtod_l+0x934>
 8009fba:	f7ff fb5a 	bl	8009672 <sulp>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fc6:	f7f6 f941 	bl	800024c <__adddf3>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	4689      	mov	r9, r1
 8009fce:	e7df      	b.n	8009f90 <_strtod_l+0x8d8>
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009fd6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009fda:	f04f 38ff 	mov.w	r8, #4294967295
 8009fde:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009fe2:	e7d5      	b.n	8009f90 <_strtod_l+0x8d8>
 8009fe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fe6:	ea13 0f08 	tst.w	r3, r8
 8009fea:	e7e0      	b.n	8009fae <_strtod_l+0x8f6>
 8009fec:	f7ff fb41 	bl	8009672 <sulp>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ff8:	f7f6 f926 	bl	8000248 <__aeabi_dsub>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	4680      	mov	r8, r0
 800a002:	4689      	mov	r9, r1
 800a004:	f7f6 fd40 	bl	8000a88 <__aeabi_dcmpeq>
 800a008:	2800      	cmp	r0, #0
 800a00a:	d0c1      	beq.n	8009f90 <_strtod_l+0x8d8>
 800a00c:	e608      	b.n	8009c20 <_strtod_l+0x568>
 800a00e:	4658      	mov	r0, fp
 800a010:	9904      	ldr	r1, [sp, #16]
 800a012:	f001 f943 	bl	800b29c <__ratio>
 800a016:	2200      	movs	r2, #0
 800a018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a01c:	4606      	mov	r6, r0
 800a01e:	460f      	mov	r7, r1
 800a020:	f7f6 fd46 	bl	8000ab0 <__aeabi_dcmple>
 800a024:	2800      	cmp	r0, #0
 800a026:	d070      	beq.n	800a10a <_strtod_l+0xa52>
 800a028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d042      	beq.n	800a0b4 <_strtod_l+0x9fc>
 800a02e:	2600      	movs	r6, #0
 800a030:	4f62      	ldr	r7, [pc, #392]	; (800a1bc <_strtod_l+0xb04>)
 800a032:	4d62      	ldr	r5, [pc, #392]	; (800a1bc <_strtod_l+0xb04>)
 800a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a03a:	0d1b      	lsrs	r3, r3, #20
 800a03c:	051b      	lsls	r3, r3, #20
 800a03e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a040:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a042:	4b5f      	ldr	r3, [pc, #380]	; (800a1c0 <_strtod_l+0xb08>)
 800a044:	429a      	cmp	r2, r3
 800a046:	f040 80c3 	bne.w	800a1d0 <_strtod_l+0xb18>
 800a04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a04c:	4640      	mov	r0, r8
 800a04e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a052:	4649      	mov	r1, r9
 800a054:	f001 f84c 	bl	800b0f0 <__ulp>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 faaa 	bl	80005b8 <__aeabi_dmul>
 800a064:	4642      	mov	r2, r8
 800a066:	464b      	mov	r3, r9
 800a068:	f7f6 f8f0 	bl	800024c <__adddf3>
 800a06c:	460b      	mov	r3, r1
 800a06e:	4951      	ldr	r1, [pc, #324]	; (800a1b4 <_strtod_l+0xafc>)
 800a070:	4a54      	ldr	r2, [pc, #336]	; (800a1c4 <_strtod_l+0xb0c>)
 800a072:	4019      	ands	r1, r3
 800a074:	4291      	cmp	r1, r2
 800a076:	4680      	mov	r8, r0
 800a078:	d95d      	bls.n	800a136 <_strtod_l+0xa7e>
 800a07a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a07c:	4b4e      	ldr	r3, [pc, #312]	; (800a1b8 <_strtod_l+0xb00>)
 800a07e:	429a      	cmp	r2, r3
 800a080:	d103      	bne.n	800a08a <_strtod_l+0x9d2>
 800a082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a084:	3301      	adds	r3, #1
 800a086:	f43f ad56 	beq.w	8009b36 <_strtod_l+0x47e>
 800a08a:	f04f 38ff 	mov.w	r8, #4294967295
 800a08e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a1b8 <_strtod_l+0xb00>
 800a092:	4650      	mov	r0, sl
 800a094:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a096:	f000 fcfb 	bl	800aa90 <_Bfree>
 800a09a:	4650      	mov	r0, sl
 800a09c:	9906      	ldr	r1, [sp, #24]
 800a09e:	f000 fcf7 	bl	800aa90 <_Bfree>
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	9904      	ldr	r1, [sp, #16]
 800a0a6:	f000 fcf3 	bl	800aa90 <_Bfree>
 800a0aa:	4659      	mov	r1, fp
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	f000 fcef 	bl	800aa90 <_Bfree>
 800a0b2:	e627      	b.n	8009d04 <_strtod_l+0x64c>
 800a0b4:	f1b8 0f00 	cmp.w	r8, #0
 800a0b8:	d119      	bne.n	800a0ee <_strtod_l+0xa36>
 800a0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c0:	b9e3      	cbnz	r3, 800a0fc <_strtod_l+0xa44>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	4639      	mov	r1, r7
 800a0c8:	4b3c      	ldr	r3, [pc, #240]	; (800a1bc <_strtod_l+0xb04>)
 800a0ca:	f7f6 fce7 	bl	8000a9c <__aeabi_dcmplt>
 800a0ce:	b9c8      	cbnz	r0, 800a104 <_strtod_l+0xa4c>
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	4b3c      	ldr	r3, [pc, #240]	; (800a1c8 <_strtod_l+0xb10>)
 800a0d8:	f7f6 fa6e 	bl	80005b8 <__aeabi_dmul>
 800a0dc:	4604      	mov	r4, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a0e4:	9416      	str	r4, [sp, #88]	; 0x58
 800a0e6:	9317      	str	r3, [sp, #92]	; 0x5c
 800a0e8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800a0ec:	e7a2      	b.n	800a034 <_strtod_l+0x97c>
 800a0ee:	f1b8 0f01 	cmp.w	r8, #1
 800a0f2:	d103      	bne.n	800a0fc <_strtod_l+0xa44>
 800a0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f43f ad92 	beq.w	8009c20 <_strtod_l+0x568>
 800a0fc:	2600      	movs	r6, #0
 800a0fe:	2400      	movs	r4, #0
 800a100:	4f32      	ldr	r7, [pc, #200]	; (800a1cc <_strtod_l+0xb14>)
 800a102:	e796      	b.n	800a032 <_strtod_l+0x97a>
 800a104:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a106:	4d30      	ldr	r5, [pc, #192]	; (800a1c8 <_strtod_l+0xb10>)
 800a108:	e7ea      	b.n	800a0e0 <_strtod_l+0xa28>
 800a10a:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <_strtod_l+0xb10>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	4630      	mov	r0, r6
 800a110:	4639      	mov	r1, r7
 800a112:	f7f6 fa51 	bl	80005b8 <__aeabi_dmul>
 800a116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a118:	4604      	mov	r4, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	b933      	cbnz	r3, 800a12c <_strtod_l+0xa74>
 800a11e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a122:	9010      	str	r0, [sp, #64]	; 0x40
 800a124:	9311      	str	r3, [sp, #68]	; 0x44
 800a126:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a12a:	e783      	b.n	800a034 <_strtod_l+0x97c>
 800a12c:	4602      	mov	r2, r0
 800a12e:	460b      	mov	r3, r1
 800a130:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a134:	e7f7      	b.n	800a126 <_strtod_l+0xa6e>
 800a136:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a13a:	9b05      	ldr	r3, [sp, #20]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1a8      	bne.n	800a092 <_strtod_l+0x9da>
 800a140:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a144:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a146:	0d1b      	lsrs	r3, r3, #20
 800a148:	051b      	lsls	r3, r3, #20
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d1a1      	bne.n	800a092 <_strtod_l+0x9da>
 800a14e:	4620      	mov	r0, r4
 800a150:	4629      	mov	r1, r5
 800a152:	f7f6 fd29 	bl	8000ba8 <__aeabi_d2lz>
 800a156:	f7f6 fa01 	bl	800055c <__aeabi_l2d>
 800a15a:	4602      	mov	r2, r0
 800a15c:	460b      	mov	r3, r1
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 f871 	bl	8000248 <__aeabi_dsub>
 800a166:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a168:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a16c:	ea43 0308 	orr.w	r3, r3, r8
 800a170:	4313      	orrs	r3, r2
 800a172:	4604      	mov	r4, r0
 800a174:	460d      	mov	r5, r1
 800a176:	d066      	beq.n	800a246 <_strtod_l+0xb8e>
 800a178:	a309      	add	r3, pc, #36	; (adr r3, 800a1a0 <_strtod_l+0xae8>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 fc8d 	bl	8000a9c <__aeabi_dcmplt>
 800a182:	2800      	cmp	r0, #0
 800a184:	f47f ace2 	bne.w	8009b4c <_strtod_l+0x494>
 800a188:	a307      	add	r3, pc, #28	; (adr r3, 800a1a8 <_strtod_l+0xaf0>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	4620      	mov	r0, r4
 800a190:	4629      	mov	r1, r5
 800a192:	f7f6 fca1 	bl	8000ad8 <__aeabi_dcmpgt>
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f af7b 	beq.w	800a092 <_strtod_l+0x9da>
 800a19c:	e4d6      	b.n	8009b4c <_strtod_l+0x494>
 800a19e:	bf00      	nop
 800a1a0:	94a03595 	.word	0x94a03595
 800a1a4:	3fdfffff 	.word	0x3fdfffff
 800a1a8:	35afe535 	.word	0x35afe535
 800a1ac:	3fe00000 	.word	0x3fe00000
 800a1b0:	000fffff 	.word	0x000fffff
 800a1b4:	7ff00000 	.word	0x7ff00000
 800a1b8:	7fefffff 	.word	0x7fefffff
 800a1bc:	3ff00000 	.word	0x3ff00000
 800a1c0:	7fe00000 	.word	0x7fe00000
 800a1c4:	7c9fffff 	.word	0x7c9fffff
 800a1c8:	3fe00000 	.word	0x3fe00000
 800a1cc:	bff00000 	.word	0xbff00000
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	b313      	cbz	r3, 800a21a <_strtod_l+0xb62>
 800a1d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a1da:	d81e      	bhi.n	800a21a <_strtod_l+0xb62>
 800a1dc:	a326      	add	r3, pc, #152	; (adr r3, 800a278 <_strtod_l+0xbc0>)
 800a1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7f6 fc63 	bl	8000ab0 <__aeabi_dcmple>
 800a1ea:	b190      	cbz	r0, 800a212 <_strtod_l+0xb5a>
 800a1ec:	4629      	mov	r1, r5
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f7f6 fcba 	bl	8000b68 <__aeabi_d2uiz>
 800a1f4:	2801      	cmp	r0, #1
 800a1f6:	bf38      	it	cc
 800a1f8:	2001      	movcc	r0, #1
 800a1fa:	f7f6 f963 	bl	80004c4 <__aeabi_ui2d>
 800a1fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	b9d3      	cbnz	r3, 800a23c <_strtod_l+0xb84>
 800a206:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a20a:	9012      	str	r0, [sp, #72]	; 0x48
 800a20c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a20e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a212:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a214:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a218:	1a9f      	subs	r7, r3, r2
 800a21a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a21e:	f000 ff67 	bl	800b0f0 <__ulp>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	4630      	mov	r0, r6
 800a228:	4639      	mov	r1, r7
 800a22a:	f7f6 f9c5 	bl	80005b8 <__aeabi_dmul>
 800a22e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a232:	f7f6 f80b 	bl	800024c <__adddf3>
 800a236:	4680      	mov	r8, r0
 800a238:	4689      	mov	r9, r1
 800a23a:	e77e      	b.n	800a13a <_strtod_l+0xa82>
 800a23c:	4602      	mov	r2, r0
 800a23e:	460b      	mov	r3, r1
 800a240:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a244:	e7e3      	b.n	800a20e <_strtod_l+0xb56>
 800a246:	a30e      	add	r3, pc, #56	; (adr r3, 800a280 <_strtod_l+0xbc8>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f6 fc26 	bl	8000a9c <__aeabi_dcmplt>
 800a250:	e7a1      	b.n	800a196 <_strtod_l+0xade>
 800a252:	2300      	movs	r3, #0
 800a254:	930a      	str	r3, [sp, #40]	; 0x28
 800a256:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a258:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a25a:	6013      	str	r3, [r2, #0]
 800a25c:	f7ff ba71 	b.w	8009742 <_strtod_l+0x8a>
 800a260:	2a65      	cmp	r2, #101	; 0x65
 800a262:	f43f ab63 	beq.w	800992c <_strtod_l+0x274>
 800a266:	2a45      	cmp	r2, #69	; 0x45
 800a268:	f43f ab60 	beq.w	800992c <_strtod_l+0x274>
 800a26c:	2301      	movs	r3, #1
 800a26e:	f7ff bb95 	b.w	800999c <_strtod_l+0x2e4>
 800a272:	bf00      	nop
 800a274:	f3af 8000 	nop.w
 800a278:	ffc00000 	.word	0xffc00000
 800a27c:	41dfffff 	.word	0x41dfffff
 800a280:	94a03595 	.word	0x94a03595
 800a284:	3fcfffff 	.word	0x3fcfffff

0800a288 <strtod>:
 800a288:	460a      	mov	r2, r1
 800a28a:	4601      	mov	r1, r0
 800a28c:	4802      	ldr	r0, [pc, #8]	; (800a298 <strtod+0x10>)
 800a28e:	4b03      	ldr	r3, [pc, #12]	; (800a29c <strtod+0x14>)
 800a290:	6800      	ldr	r0, [r0, #0]
 800a292:	f7ff ba11 	b.w	80096b8 <_strtod_l>
 800a296:	bf00      	nop
 800a298:	2000007c 	.word	0x2000007c
 800a29c:	200000e4 	.word	0x200000e4

0800a2a0 <_write_r>:
 800a2a0:	b538      	push	{r3, r4, r5, lr}
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	4608      	mov	r0, r1
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4d05      	ldr	r5, [pc, #20]	; (800a2c0 <_write_r+0x20>)
 800a2ac:	602a      	str	r2, [r5, #0]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f7f7 ffa8 	bl	8002204 <_write>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	d102      	bne.n	800a2be <_write_r+0x1e>
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	b103      	cbz	r3, 800a2be <_write_r+0x1e>
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	20002908 	.word	0x20002908

0800a2c4 <_close_r>:
 800a2c4:	b538      	push	{r3, r4, r5, lr}
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	4d05      	ldr	r5, [pc, #20]	; (800a2e0 <_close_r+0x1c>)
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	602b      	str	r3, [r5, #0]
 800a2d0:	f7f7 ffb4 	bl	800223c <_close>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_close_r+0x1a>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_close_r+0x1a>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20002908 	.word	0x20002908

0800a2e4 <rshift>:
 800a2e4:	6903      	ldr	r3, [r0, #16]
 800a2e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2ee:	f100 0414 	add.w	r4, r0, #20
 800a2f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2f6:	dd46      	ble.n	800a386 <rshift+0xa2>
 800a2f8:	f011 011f 	ands.w	r1, r1, #31
 800a2fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a304:	d10c      	bne.n	800a320 <rshift+0x3c>
 800a306:	4629      	mov	r1, r5
 800a308:	f100 0710 	add.w	r7, r0, #16
 800a30c:	42b1      	cmp	r1, r6
 800a30e:	d335      	bcc.n	800a37c <rshift+0x98>
 800a310:	1a9b      	subs	r3, r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	1eea      	subs	r2, r5, #3
 800a316:	4296      	cmp	r6, r2
 800a318:	bf38      	it	cc
 800a31a:	2300      	movcc	r3, #0
 800a31c:	4423      	add	r3, r4
 800a31e:	e015      	b.n	800a34c <rshift+0x68>
 800a320:	46a1      	mov	r9, r4
 800a322:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a326:	f1c1 0820 	rsb	r8, r1, #32
 800a32a:	40cf      	lsrs	r7, r1
 800a32c:	f105 0e04 	add.w	lr, r5, #4
 800a330:	4576      	cmp	r6, lr
 800a332:	46f4      	mov	ip, lr
 800a334:	d816      	bhi.n	800a364 <rshift+0x80>
 800a336:	1a9a      	subs	r2, r3, r2
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	3a04      	subs	r2, #4
 800a33c:	3501      	adds	r5, #1
 800a33e:	42ae      	cmp	r6, r5
 800a340:	bf38      	it	cc
 800a342:	2200      	movcc	r2, #0
 800a344:	18a3      	adds	r3, r4, r2
 800a346:	50a7      	str	r7, [r4, r2]
 800a348:	b107      	cbz	r7, 800a34c <rshift+0x68>
 800a34a:	3304      	adds	r3, #4
 800a34c:	42a3      	cmp	r3, r4
 800a34e:	eba3 0204 	sub.w	r2, r3, r4
 800a352:	bf08      	it	eq
 800a354:	2300      	moveq	r3, #0
 800a356:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a35a:	6102      	str	r2, [r0, #16]
 800a35c:	bf08      	it	eq
 800a35e:	6143      	streq	r3, [r0, #20]
 800a360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a364:	f8dc c000 	ldr.w	ip, [ip]
 800a368:	fa0c fc08 	lsl.w	ip, ip, r8
 800a36c:	ea4c 0707 	orr.w	r7, ip, r7
 800a370:	f849 7b04 	str.w	r7, [r9], #4
 800a374:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a378:	40cf      	lsrs	r7, r1
 800a37a:	e7d9      	b.n	800a330 <rshift+0x4c>
 800a37c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a380:	f847 cf04 	str.w	ip, [r7, #4]!
 800a384:	e7c2      	b.n	800a30c <rshift+0x28>
 800a386:	4623      	mov	r3, r4
 800a388:	e7e0      	b.n	800a34c <rshift+0x68>

0800a38a <__hexdig_fun>:
 800a38a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a38e:	2b09      	cmp	r3, #9
 800a390:	d802      	bhi.n	800a398 <__hexdig_fun+0xe>
 800a392:	3820      	subs	r0, #32
 800a394:	b2c0      	uxtb	r0, r0
 800a396:	4770      	bx	lr
 800a398:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a39c:	2b05      	cmp	r3, #5
 800a39e:	d801      	bhi.n	800a3a4 <__hexdig_fun+0x1a>
 800a3a0:	3847      	subs	r0, #71	; 0x47
 800a3a2:	e7f7      	b.n	800a394 <__hexdig_fun+0xa>
 800a3a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3a8:	2b05      	cmp	r3, #5
 800a3aa:	d801      	bhi.n	800a3b0 <__hexdig_fun+0x26>
 800a3ac:	3827      	subs	r0, #39	; 0x27
 800a3ae:	e7f1      	b.n	800a394 <__hexdig_fun+0xa>
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	4770      	bx	lr

0800a3b4 <__gethex>:
 800a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	b08b      	sub	sp, #44	; 0x2c
 800a3ba:	9305      	str	r3, [sp, #20]
 800a3bc:	4bb2      	ldr	r3, [pc, #712]	; (800a688 <__gethex+0x2d4>)
 800a3be:	9002      	str	r0, [sp, #8]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	468b      	mov	fp, r1
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	4690      	mov	r8, r2
 800a3c8:	9303      	str	r3, [sp, #12]
 800a3ca:	f7f5 ff31 	bl	8000230 <strlen>
 800a3ce:	4682      	mov	sl, r0
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	f8db 2000 	ldr.w	r2, [fp]
 800a3d6:	4403      	add	r3, r0
 800a3d8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a3dc:	9306      	str	r3, [sp, #24]
 800a3de:	1c93      	adds	r3, r2, #2
 800a3e0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a3e4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a3e8:	32fe      	adds	r2, #254	; 0xfe
 800a3ea:	18d1      	adds	r1, r2, r3
 800a3ec:	461f      	mov	r7, r3
 800a3ee:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a3f2:	9101      	str	r1, [sp, #4]
 800a3f4:	2830      	cmp	r0, #48	; 0x30
 800a3f6:	d0f8      	beq.n	800a3ea <__gethex+0x36>
 800a3f8:	f7ff ffc7 	bl	800a38a <__hexdig_fun>
 800a3fc:	4604      	mov	r4, r0
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d13a      	bne.n	800a478 <__gethex+0xc4>
 800a402:	4652      	mov	r2, sl
 800a404:	4638      	mov	r0, r7
 800a406:	9903      	ldr	r1, [sp, #12]
 800a408:	f001 fe22 	bl	800c050 <strncmp>
 800a40c:	4605      	mov	r5, r0
 800a40e:	2800      	cmp	r0, #0
 800a410:	d166      	bne.n	800a4e0 <__gethex+0x12c>
 800a412:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a416:	eb07 060a 	add.w	r6, r7, sl
 800a41a:	f7ff ffb6 	bl	800a38a <__hexdig_fun>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d060      	beq.n	800a4e4 <__gethex+0x130>
 800a422:	4633      	mov	r3, r6
 800a424:	7818      	ldrb	r0, [r3, #0]
 800a426:	461f      	mov	r7, r3
 800a428:	2830      	cmp	r0, #48	; 0x30
 800a42a:	f103 0301 	add.w	r3, r3, #1
 800a42e:	d0f9      	beq.n	800a424 <__gethex+0x70>
 800a430:	f7ff ffab 	bl	800a38a <__hexdig_fun>
 800a434:	2301      	movs	r3, #1
 800a436:	fab0 f480 	clz	r4, r0
 800a43a:	4635      	mov	r5, r6
 800a43c:	0964      	lsrs	r4, r4, #5
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	463a      	mov	r2, r7
 800a442:	4616      	mov	r6, r2
 800a444:	7830      	ldrb	r0, [r6, #0]
 800a446:	3201      	adds	r2, #1
 800a448:	f7ff ff9f 	bl	800a38a <__hexdig_fun>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	d1f8      	bne.n	800a442 <__gethex+0x8e>
 800a450:	4652      	mov	r2, sl
 800a452:	4630      	mov	r0, r6
 800a454:	9903      	ldr	r1, [sp, #12]
 800a456:	f001 fdfb 	bl	800c050 <strncmp>
 800a45a:	b980      	cbnz	r0, 800a47e <__gethex+0xca>
 800a45c:	b94d      	cbnz	r5, 800a472 <__gethex+0xbe>
 800a45e:	eb06 050a 	add.w	r5, r6, sl
 800a462:	462a      	mov	r2, r5
 800a464:	4616      	mov	r6, r2
 800a466:	7830      	ldrb	r0, [r6, #0]
 800a468:	3201      	adds	r2, #1
 800a46a:	f7ff ff8e 	bl	800a38a <__hexdig_fun>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d1f8      	bne.n	800a464 <__gethex+0xb0>
 800a472:	1bad      	subs	r5, r5, r6
 800a474:	00ad      	lsls	r5, r5, #2
 800a476:	e004      	b.n	800a482 <__gethex+0xce>
 800a478:	2400      	movs	r4, #0
 800a47a:	4625      	mov	r5, r4
 800a47c:	e7e0      	b.n	800a440 <__gethex+0x8c>
 800a47e:	2d00      	cmp	r5, #0
 800a480:	d1f7      	bne.n	800a472 <__gethex+0xbe>
 800a482:	7833      	ldrb	r3, [r6, #0]
 800a484:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a488:	2b50      	cmp	r3, #80	; 0x50
 800a48a:	d139      	bne.n	800a500 <__gethex+0x14c>
 800a48c:	7873      	ldrb	r3, [r6, #1]
 800a48e:	2b2b      	cmp	r3, #43	; 0x2b
 800a490:	d02a      	beq.n	800a4e8 <__gethex+0x134>
 800a492:	2b2d      	cmp	r3, #45	; 0x2d
 800a494:	d02c      	beq.n	800a4f0 <__gethex+0x13c>
 800a496:	f04f 0900 	mov.w	r9, #0
 800a49a:	1c71      	adds	r1, r6, #1
 800a49c:	7808      	ldrb	r0, [r1, #0]
 800a49e:	f7ff ff74 	bl	800a38a <__hexdig_fun>
 800a4a2:	1e43      	subs	r3, r0, #1
 800a4a4:	b2db      	uxtb	r3, r3
 800a4a6:	2b18      	cmp	r3, #24
 800a4a8:	d82a      	bhi.n	800a500 <__gethex+0x14c>
 800a4aa:	f1a0 0210 	sub.w	r2, r0, #16
 800a4ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4b2:	f7ff ff6a 	bl	800a38a <__hexdig_fun>
 800a4b6:	1e43      	subs	r3, r0, #1
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b18      	cmp	r3, #24
 800a4bc:	d91b      	bls.n	800a4f6 <__gethex+0x142>
 800a4be:	f1b9 0f00 	cmp.w	r9, #0
 800a4c2:	d000      	beq.n	800a4c6 <__gethex+0x112>
 800a4c4:	4252      	negs	r2, r2
 800a4c6:	4415      	add	r5, r2
 800a4c8:	f8cb 1000 	str.w	r1, [fp]
 800a4cc:	b1d4      	cbz	r4, 800a504 <__gethex+0x150>
 800a4ce:	9b01      	ldr	r3, [sp, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bf14      	ite	ne
 800a4d4:	2700      	movne	r7, #0
 800a4d6:	2706      	moveq	r7, #6
 800a4d8:	4638      	mov	r0, r7
 800a4da:	b00b      	add	sp, #44	; 0x2c
 800a4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4e0:	463e      	mov	r6, r7
 800a4e2:	4625      	mov	r5, r4
 800a4e4:	2401      	movs	r4, #1
 800a4e6:	e7cc      	b.n	800a482 <__gethex+0xce>
 800a4e8:	f04f 0900 	mov.w	r9, #0
 800a4ec:	1cb1      	adds	r1, r6, #2
 800a4ee:	e7d5      	b.n	800a49c <__gethex+0xe8>
 800a4f0:	f04f 0901 	mov.w	r9, #1
 800a4f4:	e7fa      	b.n	800a4ec <__gethex+0x138>
 800a4f6:	230a      	movs	r3, #10
 800a4f8:	fb03 0202 	mla	r2, r3, r2, r0
 800a4fc:	3a10      	subs	r2, #16
 800a4fe:	e7d6      	b.n	800a4ae <__gethex+0xfa>
 800a500:	4631      	mov	r1, r6
 800a502:	e7e1      	b.n	800a4c8 <__gethex+0x114>
 800a504:	4621      	mov	r1, r4
 800a506:	1bf3      	subs	r3, r6, r7
 800a508:	3b01      	subs	r3, #1
 800a50a:	2b07      	cmp	r3, #7
 800a50c:	dc0a      	bgt.n	800a524 <__gethex+0x170>
 800a50e:	9802      	ldr	r0, [sp, #8]
 800a510:	f000 fa7e 	bl	800aa10 <_Balloc>
 800a514:	4604      	mov	r4, r0
 800a516:	b940      	cbnz	r0, 800a52a <__gethex+0x176>
 800a518:	4602      	mov	r2, r0
 800a51a:	21de      	movs	r1, #222	; 0xde
 800a51c:	4b5b      	ldr	r3, [pc, #364]	; (800a68c <__gethex+0x2d8>)
 800a51e:	485c      	ldr	r0, [pc, #368]	; (800a690 <__gethex+0x2dc>)
 800a520:	f001 fee2 	bl	800c2e8 <__assert_func>
 800a524:	3101      	adds	r1, #1
 800a526:	105b      	asrs	r3, r3, #1
 800a528:	e7ef      	b.n	800a50a <__gethex+0x156>
 800a52a:	f04f 0b00 	mov.w	fp, #0
 800a52e:	f100 0914 	add.w	r9, r0, #20
 800a532:	f1ca 0301 	rsb	r3, sl, #1
 800a536:	f8cd 9010 	str.w	r9, [sp, #16]
 800a53a:	f8cd b004 	str.w	fp, [sp, #4]
 800a53e:	9308      	str	r3, [sp, #32]
 800a540:	42b7      	cmp	r7, r6
 800a542:	d33f      	bcc.n	800a5c4 <__gethex+0x210>
 800a544:	9f04      	ldr	r7, [sp, #16]
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	f847 3b04 	str.w	r3, [r7], #4
 800a54c:	eba7 0709 	sub.w	r7, r7, r9
 800a550:	10bf      	asrs	r7, r7, #2
 800a552:	6127      	str	r7, [r4, #16]
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fb4d 	bl	800abf4 <__hi0bits>
 800a55a:	017f      	lsls	r7, r7, #5
 800a55c:	f8d8 6000 	ldr.w	r6, [r8]
 800a560:	1a3f      	subs	r7, r7, r0
 800a562:	42b7      	cmp	r7, r6
 800a564:	dd62      	ble.n	800a62c <__gethex+0x278>
 800a566:	1bbf      	subs	r7, r7, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 fee7 	bl	800b33e <__any_on>
 800a570:	4682      	mov	sl, r0
 800a572:	b1a8      	cbz	r0, 800a5a0 <__gethex+0x1ec>
 800a574:	f04f 0a01 	mov.w	sl, #1
 800a578:	1e7b      	subs	r3, r7, #1
 800a57a:	1159      	asrs	r1, r3, #5
 800a57c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a580:	f003 021f 	and.w	r2, r3, #31
 800a584:	fa0a f202 	lsl.w	r2, sl, r2
 800a588:	420a      	tst	r2, r1
 800a58a:	d009      	beq.n	800a5a0 <__gethex+0x1ec>
 800a58c:	4553      	cmp	r3, sl
 800a58e:	dd05      	ble.n	800a59c <__gethex+0x1e8>
 800a590:	4620      	mov	r0, r4
 800a592:	1eb9      	subs	r1, r7, #2
 800a594:	f000 fed3 	bl	800b33e <__any_on>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d144      	bne.n	800a626 <__gethex+0x272>
 800a59c:	f04f 0a02 	mov.w	sl, #2
 800a5a0:	4639      	mov	r1, r7
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	f7ff fe9e 	bl	800a2e4 <rshift>
 800a5a8:	443d      	add	r5, r7
 800a5aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5ae:	42ab      	cmp	r3, r5
 800a5b0:	da4a      	bge.n	800a648 <__gethex+0x294>
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	9802      	ldr	r0, [sp, #8]
 800a5b6:	f000 fa6b 	bl	800aa90 <_Bfree>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5be:	27a3      	movs	r7, #163	; 0xa3
 800a5c0:	6013      	str	r3, [r2, #0]
 800a5c2:	e789      	b.n	800a4d8 <__gethex+0x124>
 800a5c4:	1e73      	subs	r3, r6, #1
 800a5c6:	9a06      	ldr	r2, [sp, #24]
 800a5c8:	9307      	str	r3, [sp, #28]
 800a5ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d019      	beq.n	800a606 <__gethex+0x252>
 800a5d2:	f1bb 0f20 	cmp.w	fp, #32
 800a5d6:	d107      	bne.n	800a5e8 <__gethex+0x234>
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	9a01      	ldr	r2, [sp, #4]
 800a5dc:	f843 2b04 	str.w	r2, [r3], #4
 800a5e0:	9304      	str	r3, [sp, #16]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	469b      	mov	fp, r3
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a5ec:	f7ff fecd 	bl	800a38a <__hexdig_fun>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f000 000f 	and.w	r0, r0, #15
 800a5f6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a5fa:	4303      	orrs	r3, r0
 800a5fc:	9301      	str	r3, [sp, #4]
 800a5fe:	f10b 0b04 	add.w	fp, fp, #4
 800a602:	9b07      	ldr	r3, [sp, #28]
 800a604:	e00d      	b.n	800a622 <__gethex+0x26e>
 800a606:	9a08      	ldr	r2, [sp, #32]
 800a608:	1e73      	subs	r3, r6, #1
 800a60a:	4413      	add	r3, r2
 800a60c:	42bb      	cmp	r3, r7
 800a60e:	d3e0      	bcc.n	800a5d2 <__gethex+0x21e>
 800a610:	4618      	mov	r0, r3
 800a612:	4652      	mov	r2, sl
 800a614:	9903      	ldr	r1, [sp, #12]
 800a616:	9309      	str	r3, [sp, #36]	; 0x24
 800a618:	f001 fd1a 	bl	800c050 <strncmp>
 800a61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61e:	2800      	cmp	r0, #0
 800a620:	d1d7      	bne.n	800a5d2 <__gethex+0x21e>
 800a622:	461e      	mov	r6, r3
 800a624:	e78c      	b.n	800a540 <__gethex+0x18c>
 800a626:	f04f 0a03 	mov.w	sl, #3
 800a62a:	e7b9      	b.n	800a5a0 <__gethex+0x1ec>
 800a62c:	da09      	bge.n	800a642 <__gethex+0x28e>
 800a62e:	1bf7      	subs	r7, r6, r7
 800a630:	4621      	mov	r1, r4
 800a632:	463a      	mov	r2, r7
 800a634:	9802      	ldr	r0, [sp, #8]
 800a636:	f000 fc43 	bl	800aec0 <__lshift>
 800a63a:	4604      	mov	r4, r0
 800a63c:	1bed      	subs	r5, r5, r7
 800a63e:	f100 0914 	add.w	r9, r0, #20
 800a642:	f04f 0a00 	mov.w	sl, #0
 800a646:	e7b0      	b.n	800a5aa <__gethex+0x1f6>
 800a648:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a64c:	42a8      	cmp	r0, r5
 800a64e:	dd72      	ble.n	800a736 <__gethex+0x382>
 800a650:	1b45      	subs	r5, r0, r5
 800a652:	42ae      	cmp	r6, r5
 800a654:	dc35      	bgt.n	800a6c2 <__gethex+0x30e>
 800a656:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d029      	beq.n	800a6b2 <__gethex+0x2fe>
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d02b      	beq.n	800a6ba <__gethex+0x306>
 800a662:	2b01      	cmp	r3, #1
 800a664:	d11c      	bne.n	800a6a0 <__gethex+0x2ec>
 800a666:	42ae      	cmp	r6, r5
 800a668:	d11a      	bne.n	800a6a0 <__gethex+0x2ec>
 800a66a:	2e01      	cmp	r6, #1
 800a66c:	d112      	bne.n	800a694 <__gethex+0x2e0>
 800a66e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a672:	9a05      	ldr	r2, [sp, #20]
 800a674:	2762      	movs	r7, #98	; 0x62
 800a676:	6013      	str	r3, [r2, #0]
 800a678:	2301      	movs	r3, #1
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	f8c9 3000 	str.w	r3, [r9]
 800a680:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a682:	601c      	str	r4, [r3, #0]
 800a684:	e728      	b.n	800a4d8 <__gethex+0x124>
 800a686:	bf00      	nop
 800a688:	0800dce8 	.word	0x0800dce8
 800a68c:	0800dc70 	.word	0x0800dc70
 800a690:	0800dc81 	.word	0x0800dc81
 800a694:	4620      	mov	r0, r4
 800a696:	1e71      	subs	r1, r6, #1
 800a698:	f000 fe51 	bl	800b33e <__any_on>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	d1e6      	bne.n	800a66e <__gethex+0x2ba>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	9802      	ldr	r0, [sp, #8]
 800a6a4:	f000 f9f4 	bl	800aa90 <_Bfree>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6ac:	2750      	movs	r7, #80	; 0x50
 800a6ae:	6013      	str	r3, [r2, #0]
 800a6b0:	e712      	b.n	800a4d8 <__gethex+0x124>
 800a6b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d1f3      	bne.n	800a6a0 <__gethex+0x2ec>
 800a6b8:	e7d9      	b.n	800a66e <__gethex+0x2ba>
 800a6ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d1d6      	bne.n	800a66e <__gethex+0x2ba>
 800a6c0:	e7ee      	b.n	800a6a0 <__gethex+0x2ec>
 800a6c2:	1e6f      	subs	r7, r5, #1
 800a6c4:	f1ba 0f00 	cmp.w	sl, #0
 800a6c8:	d132      	bne.n	800a730 <__gethex+0x37c>
 800a6ca:	b127      	cbz	r7, 800a6d6 <__gethex+0x322>
 800a6cc:	4639      	mov	r1, r7
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 fe35 	bl	800b33e <__any_on>
 800a6d4:	4682      	mov	sl, r0
 800a6d6:	2101      	movs	r1, #1
 800a6d8:	117b      	asrs	r3, r7, #5
 800a6da:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a6de:	f007 071f 	and.w	r7, r7, #31
 800a6e2:	fa01 f707 	lsl.w	r7, r1, r7
 800a6e6:	421f      	tst	r7, r3
 800a6e8:	f04f 0702 	mov.w	r7, #2
 800a6ec:	4629      	mov	r1, r5
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	bf18      	it	ne
 800a6f2:	f04a 0a02 	orrne.w	sl, sl, #2
 800a6f6:	1b76      	subs	r6, r6, r5
 800a6f8:	f7ff fdf4 	bl	800a2e4 <rshift>
 800a6fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a700:	f1ba 0f00 	cmp.w	sl, #0
 800a704:	d048      	beq.n	800a798 <__gethex+0x3e4>
 800a706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d015      	beq.n	800a73a <__gethex+0x386>
 800a70e:	2b03      	cmp	r3, #3
 800a710:	d017      	beq.n	800a742 <__gethex+0x38e>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d109      	bne.n	800a72a <__gethex+0x376>
 800a716:	f01a 0f02 	tst.w	sl, #2
 800a71a:	d006      	beq.n	800a72a <__gethex+0x376>
 800a71c:	f8d9 0000 	ldr.w	r0, [r9]
 800a720:	ea4a 0a00 	orr.w	sl, sl, r0
 800a724:	f01a 0f01 	tst.w	sl, #1
 800a728:	d10e      	bne.n	800a748 <__gethex+0x394>
 800a72a:	f047 0710 	orr.w	r7, r7, #16
 800a72e:	e033      	b.n	800a798 <__gethex+0x3e4>
 800a730:	f04f 0a01 	mov.w	sl, #1
 800a734:	e7cf      	b.n	800a6d6 <__gethex+0x322>
 800a736:	2701      	movs	r7, #1
 800a738:	e7e2      	b.n	800a700 <__gethex+0x34c>
 800a73a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a73c:	f1c3 0301 	rsb	r3, r3, #1
 800a740:	9315      	str	r3, [sp, #84]	; 0x54
 800a742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0f0      	beq.n	800a72a <__gethex+0x376>
 800a748:	f04f 0c00 	mov.w	ip, #0
 800a74c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a750:	f104 0314 	add.w	r3, r4, #20
 800a754:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a758:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a762:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a766:	d01c      	beq.n	800a7a2 <__gethex+0x3ee>
 800a768:	3201      	adds	r2, #1
 800a76a:	6002      	str	r2, [r0, #0]
 800a76c:	2f02      	cmp	r7, #2
 800a76e:	f104 0314 	add.w	r3, r4, #20
 800a772:	d13d      	bne.n	800a7f0 <__gethex+0x43c>
 800a774:	f8d8 2000 	ldr.w	r2, [r8]
 800a778:	3a01      	subs	r2, #1
 800a77a:	42b2      	cmp	r2, r6
 800a77c:	d10a      	bne.n	800a794 <__gethex+0x3e0>
 800a77e:	2201      	movs	r2, #1
 800a780:	1171      	asrs	r1, r6, #5
 800a782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a786:	f006 061f 	and.w	r6, r6, #31
 800a78a:	fa02 f606 	lsl.w	r6, r2, r6
 800a78e:	421e      	tst	r6, r3
 800a790:	bf18      	it	ne
 800a792:	4617      	movne	r7, r2
 800a794:	f047 0720 	orr.w	r7, r7, #32
 800a798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a79a:	601c      	str	r4, [r3, #0]
 800a79c:	9b05      	ldr	r3, [sp, #20]
 800a79e:	601d      	str	r5, [r3, #0]
 800a7a0:	e69a      	b.n	800a4d8 <__gethex+0x124>
 800a7a2:	4299      	cmp	r1, r3
 800a7a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7a8:	d8d8      	bhi.n	800a75c <__gethex+0x3a8>
 800a7aa:	68a3      	ldr	r3, [r4, #8]
 800a7ac:	459b      	cmp	fp, r3
 800a7ae:	db17      	blt.n	800a7e0 <__gethex+0x42c>
 800a7b0:	6861      	ldr	r1, [r4, #4]
 800a7b2:	9802      	ldr	r0, [sp, #8]
 800a7b4:	3101      	adds	r1, #1
 800a7b6:	f000 f92b 	bl	800aa10 <_Balloc>
 800a7ba:	4681      	mov	r9, r0
 800a7bc:	b918      	cbnz	r0, 800a7c6 <__gethex+0x412>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	2184      	movs	r1, #132	; 0x84
 800a7c2:	4b19      	ldr	r3, [pc, #100]	; (800a828 <__gethex+0x474>)
 800a7c4:	e6ab      	b.n	800a51e <__gethex+0x16a>
 800a7c6:	6922      	ldr	r2, [r4, #16]
 800a7c8:	f104 010c 	add.w	r1, r4, #12
 800a7cc:	3202      	adds	r2, #2
 800a7ce:	0092      	lsls	r2, r2, #2
 800a7d0:	300c      	adds	r0, #12
 800a7d2:	f7fe fda9 	bl	8009328 <memcpy>
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	9802      	ldr	r0, [sp, #8]
 800a7da:	f000 f959 	bl	800aa90 <_Bfree>
 800a7de:	464c      	mov	r4, r9
 800a7e0:	6923      	ldr	r3, [r4, #16]
 800a7e2:	1c5a      	adds	r2, r3, #1
 800a7e4:	6122      	str	r2, [r4, #16]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a7ec:	615a      	str	r2, [r3, #20]
 800a7ee:	e7bd      	b.n	800a76c <__gethex+0x3b8>
 800a7f0:	6922      	ldr	r2, [r4, #16]
 800a7f2:	455a      	cmp	r2, fp
 800a7f4:	dd0b      	ble.n	800a80e <__gethex+0x45a>
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f7ff fd73 	bl	800a2e4 <rshift>
 800a7fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a802:	3501      	adds	r5, #1
 800a804:	42ab      	cmp	r3, r5
 800a806:	f6ff aed4 	blt.w	800a5b2 <__gethex+0x1fe>
 800a80a:	2701      	movs	r7, #1
 800a80c:	e7c2      	b.n	800a794 <__gethex+0x3e0>
 800a80e:	f016 061f 	ands.w	r6, r6, #31
 800a812:	d0fa      	beq.n	800a80a <__gethex+0x456>
 800a814:	4453      	add	r3, sl
 800a816:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a81a:	f000 f9eb 	bl	800abf4 <__hi0bits>
 800a81e:	f1c6 0620 	rsb	r6, r6, #32
 800a822:	42b0      	cmp	r0, r6
 800a824:	dbe7      	blt.n	800a7f6 <__gethex+0x442>
 800a826:	e7f0      	b.n	800a80a <__gethex+0x456>
 800a828:	0800dc70 	.word	0x0800dc70

0800a82c <L_shift>:
 800a82c:	f1c2 0208 	rsb	r2, r2, #8
 800a830:	0092      	lsls	r2, r2, #2
 800a832:	b570      	push	{r4, r5, r6, lr}
 800a834:	f1c2 0620 	rsb	r6, r2, #32
 800a838:	6843      	ldr	r3, [r0, #4]
 800a83a:	6804      	ldr	r4, [r0, #0]
 800a83c:	fa03 f506 	lsl.w	r5, r3, r6
 800a840:	432c      	orrs	r4, r5
 800a842:	40d3      	lsrs	r3, r2
 800a844:	6004      	str	r4, [r0, #0]
 800a846:	f840 3f04 	str.w	r3, [r0, #4]!
 800a84a:	4288      	cmp	r0, r1
 800a84c:	d3f4      	bcc.n	800a838 <L_shift+0xc>
 800a84e:	bd70      	pop	{r4, r5, r6, pc}

0800a850 <__match>:
 800a850:	b530      	push	{r4, r5, lr}
 800a852:	6803      	ldr	r3, [r0, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85a:	b914      	cbnz	r4, 800a862 <__match+0x12>
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	2001      	movs	r0, #1
 800a860:	bd30      	pop	{r4, r5, pc}
 800a862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a866:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a86a:	2d19      	cmp	r5, #25
 800a86c:	bf98      	it	ls
 800a86e:	3220      	addls	r2, #32
 800a870:	42a2      	cmp	r2, r4
 800a872:	d0f0      	beq.n	800a856 <__match+0x6>
 800a874:	2000      	movs	r0, #0
 800a876:	e7f3      	b.n	800a860 <__match+0x10>

0800a878 <__hexnan>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	2500      	movs	r5, #0
 800a87e:	680b      	ldr	r3, [r1, #0]
 800a880:	4682      	mov	sl, r0
 800a882:	115e      	asrs	r6, r3, #5
 800a884:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a888:	f013 031f 	ands.w	r3, r3, #31
 800a88c:	bf18      	it	ne
 800a88e:	3604      	addne	r6, #4
 800a890:	1f37      	subs	r7, r6, #4
 800a892:	46b9      	mov	r9, r7
 800a894:	463c      	mov	r4, r7
 800a896:	46ab      	mov	fp, r5
 800a898:	b087      	sub	sp, #28
 800a89a:	4690      	mov	r8, r2
 800a89c:	6802      	ldr	r2, [r0, #0]
 800a89e:	9301      	str	r3, [sp, #4]
 800a8a0:	f846 5c04 	str.w	r5, [r6, #-4]
 800a8a4:	9502      	str	r5, [sp, #8]
 800a8a6:	7851      	ldrb	r1, [r2, #1]
 800a8a8:	1c53      	adds	r3, r2, #1
 800a8aa:	9303      	str	r3, [sp, #12]
 800a8ac:	b341      	cbz	r1, 800a900 <__hexnan+0x88>
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	9205      	str	r2, [sp, #20]
 800a8b2:	9104      	str	r1, [sp, #16]
 800a8b4:	f7ff fd69 	bl	800a38a <__hexdig_fun>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d14f      	bne.n	800a95c <__hexnan+0xe4>
 800a8bc:	9904      	ldr	r1, [sp, #16]
 800a8be:	9a05      	ldr	r2, [sp, #20]
 800a8c0:	2920      	cmp	r1, #32
 800a8c2:	d818      	bhi.n	800a8f6 <__hexnan+0x7e>
 800a8c4:	9b02      	ldr	r3, [sp, #8]
 800a8c6:	459b      	cmp	fp, r3
 800a8c8:	dd13      	ble.n	800a8f2 <__hexnan+0x7a>
 800a8ca:	454c      	cmp	r4, r9
 800a8cc:	d206      	bcs.n	800a8dc <__hexnan+0x64>
 800a8ce:	2d07      	cmp	r5, #7
 800a8d0:	dc04      	bgt.n	800a8dc <__hexnan+0x64>
 800a8d2:	462a      	mov	r2, r5
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f7ff ffa8 	bl	800a82c <L_shift>
 800a8dc:	4544      	cmp	r4, r8
 800a8de:	d950      	bls.n	800a982 <__hexnan+0x10a>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f1a4 0904 	sub.w	r9, r4, #4
 800a8e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8ea:	461d      	mov	r5, r3
 800a8ec:	464c      	mov	r4, r9
 800a8ee:	f8cd b008 	str.w	fp, [sp, #8]
 800a8f2:	9a03      	ldr	r2, [sp, #12]
 800a8f4:	e7d7      	b.n	800a8a6 <__hexnan+0x2e>
 800a8f6:	2929      	cmp	r1, #41	; 0x29
 800a8f8:	d156      	bne.n	800a9a8 <__hexnan+0x130>
 800a8fa:	3202      	adds	r2, #2
 800a8fc:	f8ca 2000 	str.w	r2, [sl]
 800a900:	f1bb 0f00 	cmp.w	fp, #0
 800a904:	d050      	beq.n	800a9a8 <__hexnan+0x130>
 800a906:	454c      	cmp	r4, r9
 800a908:	d206      	bcs.n	800a918 <__hexnan+0xa0>
 800a90a:	2d07      	cmp	r5, #7
 800a90c:	dc04      	bgt.n	800a918 <__hexnan+0xa0>
 800a90e:	462a      	mov	r2, r5
 800a910:	4649      	mov	r1, r9
 800a912:	4620      	mov	r0, r4
 800a914:	f7ff ff8a 	bl	800a82c <L_shift>
 800a918:	4544      	cmp	r4, r8
 800a91a:	d934      	bls.n	800a986 <__hexnan+0x10e>
 800a91c:	4623      	mov	r3, r4
 800a91e:	f1a8 0204 	sub.w	r2, r8, #4
 800a922:	f853 1b04 	ldr.w	r1, [r3], #4
 800a926:	429f      	cmp	r7, r3
 800a928:	f842 1f04 	str.w	r1, [r2, #4]!
 800a92c:	d2f9      	bcs.n	800a922 <__hexnan+0xaa>
 800a92e:	1b3b      	subs	r3, r7, r4
 800a930:	f023 0303 	bic.w	r3, r3, #3
 800a934:	3304      	adds	r3, #4
 800a936:	3401      	adds	r4, #1
 800a938:	3e03      	subs	r6, #3
 800a93a:	42b4      	cmp	r4, r6
 800a93c:	bf88      	it	hi
 800a93e:	2304      	movhi	r3, #4
 800a940:	2200      	movs	r2, #0
 800a942:	4443      	add	r3, r8
 800a944:	f843 2b04 	str.w	r2, [r3], #4
 800a948:	429f      	cmp	r7, r3
 800a94a:	d2fb      	bcs.n	800a944 <__hexnan+0xcc>
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	b91b      	cbnz	r3, 800a958 <__hexnan+0xe0>
 800a950:	4547      	cmp	r7, r8
 800a952:	d127      	bne.n	800a9a4 <__hexnan+0x12c>
 800a954:	2301      	movs	r3, #1
 800a956:	603b      	str	r3, [r7, #0]
 800a958:	2005      	movs	r0, #5
 800a95a:	e026      	b.n	800a9aa <__hexnan+0x132>
 800a95c:	3501      	adds	r5, #1
 800a95e:	2d08      	cmp	r5, #8
 800a960:	f10b 0b01 	add.w	fp, fp, #1
 800a964:	dd06      	ble.n	800a974 <__hexnan+0xfc>
 800a966:	4544      	cmp	r4, r8
 800a968:	d9c3      	bls.n	800a8f2 <__hexnan+0x7a>
 800a96a:	2300      	movs	r3, #0
 800a96c:	2501      	movs	r5, #1
 800a96e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a972:	3c04      	subs	r4, #4
 800a974:	6822      	ldr	r2, [r4, #0]
 800a976:	f000 000f 	and.w	r0, r0, #15
 800a97a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a97e:	6022      	str	r2, [r4, #0]
 800a980:	e7b7      	b.n	800a8f2 <__hexnan+0x7a>
 800a982:	2508      	movs	r5, #8
 800a984:	e7b5      	b.n	800a8f2 <__hexnan+0x7a>
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d0df      	beq.n	800a94c <__hexnan+0xd4>
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	f1c3 0320 	rsb	r3, r3, #32
 800a994:	fa22 f303 	lsr.w	r3, r2, r3
 800a998:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a99c:	401a      	ands	r2, r3
 800a99e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a9a2:	e7d3      	b.n	800a94c <__hexnan+0xd4>
 800a9a4:	3f04      	subs	r7, #4
 800a9a6:	e7d1      	b.n	800a94c <__hexnan+0xd4>
 800a9a8:	2004      	movs	r0, #4
 800a9aa:	b007      	add	sp, #28
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9b0 <_lseek_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	4608      	mov	r0, r1
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	4d05      	ldr	r5, [pc, #20]	; (800a9d0 <_lseek_r+0x20>)
 800a9bc:	602a      	str	r2, [r5, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	f7f7 fc60 	bl	8002284 <_lseek>
 800a9c4:	1c43      	adds	r3, r0, #1
 800a9c6:	d102      	bne.n	800a9ce <_lseek_r+0x1e>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	b103      	cbz	r3, 800a9ce <_lseek_r+0x1e>
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	bd38      	pop	{r3, r4, r5, pc}
 800a9d0:	20002908 	.word	0x20002908

0800a9d4 <__ascii_mbtowc>:
 800a9d4:	b082      	sub	sp, #8
 800a9d6:	b901      	cbnz	r1, 800a9da <__ascii_mbtowc+0x6>
 800a9d8:	a901      	add	r1, sp, #4
 800a9da:	b142      	cbz	r2, 800a9ee <__ascii_mbtowc+0x1a>
 800a9dc:	b14b      	cbz	r3, 800a9f2 <__ascii_mbtowc+0x1e>
 800a9de:	7813      	ldrb	r3, [r2, #0]
 800a9e0:	600b      	str	r3, [r1, #0]
 800a9e2:	7812      	ldrb	r2, [r2, #0]
 800a9e4:	1e10      	subs	r0, r2, #0
 800a9e6:	bf18      	it	ne
 800a9e8:	2001      	movne	r0, #1
 800a9ea:	b002      	add	sp, #8
 800a9ec:	4770      	bx	lr
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	e7fb      	b.n	800a9ea <__ascii_mbtowc+0x16>
 800a9f2:	f06f 0001 	mvn.w	r0, #1
 800a9f6:	e7f8      	b.n	800a9ea <__ascii_mbtowc+0x16>

0800a9f8 <__malloc_lock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__malloc_lock+0x8>)
 800a9fa:	f001 be59 	b.w	800c6b0 <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	2000290c 	.word	0x2000290c

0800aa04 <__malloc_unlock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__malloc_unlock+0x8>)
 800aa06:	f001 be54 	b.w	800c6b2 <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	2000290c 	.word	0x2000290c

0800aa10 <_Balloc>:
 800aa10:	b570      	push	{r4, r5, r6, lr}
 800aa12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa14:	4604      	mov	r4, r0
 800aa16:	460d      	mov	r5, r1
 800aa18:	b976      	cbnz	r6, 800aa38 <_Balloc+0x28>
 800aa1a:	2010      	movs	r0, #16
 800aa1c:	f7fe fc74 	bl	8009308 <malloc>
 800aa20:	4602      	mov	r2, r0
 800aa22:	6260      	str	r0, [r4, #36]	; 0x24
 800aa24:	b920      	cbnz	r0, 800aa30 <_Balloc+0x20>
 800aa26:	2166      	movs	r1, #102	; 0x66
 800aa28:	4b17      	ldr	r3, [pc, #92]	; (800aa88 <_Balloc+0x78>)
 800aa2a:	4818      	ldr	r0, [pc, #96]	; (800aa8c <_Balloc+0x7c>)
 800aa2c:	f001 fc5c 	bl	800c2e8 <__assert_func>
 800aa30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa34:	6006      	str	r6, [r0, #0]
 800aa36:	60c6      	str	r6, [r0, #12]
 800aa38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aa3a:	68f3      	ldr	r3, [r6, #12]
 800aa3c:	b183      	cbz	r3, 800aa60 <_Balloc+0x50>
 800aa3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa46:	b9b8      	cbnz	r0, 800aa78 <_Balloc+0x68>
 800aa48:	2101      	movs	r1, #1
 800aa4a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa4e:	1d72      	adds	r2, r6, #5
 800aa50:	4620      	mov	r0, r4
 800aa52:	0092      	lsls	r2, r2, #2
 800aa54:	f7fe fc7e 	bl	8009354 <_calloc_r>
 800aa58:	b160      	cbz	r0, 800aa74 <_Balloc+0x64>
 800aa5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa5e:	e00e      	b.n	800aa7e <_Balloc+0x6e>
 800aa60:	2221      	movs	r2, #33	; 0x21
 800aa62:	2104      	movs	r1, #4
 800aa64:	4620      	mov	r0, r4
 800aa66:	f7fe fc75 	bl	8009354 <_calloc_r>
 800aa6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa6c:	60f0      	str	r0, [r6, #12]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e4      	bne.n	800aa3e <_Balloc+0x2e>
 800aa74:	2000      	movs	r0, #0
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	6802      	ldr	r2, [r0, #0]
 800aa7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa84:	e7f7      	b.n	800aa76 <_Balloc+0x66>
 800aa86:	bf00      	nop
 800aa88:	0800dcfc 	.word	0x0800dcfc
 800aa8c:	0800dd13 	.word	0x0800dd13

0800aa90 <_Bfree>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa94:	4605      	mov	r5, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	b976      	cbnz	r6, 800aab8 <_Bfree+0x28>
 800aa9a:	2010      	movs	r0, #16
 800aa9c:	f7fe fc34 	bl	8009308 <malloc>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	6268      	str	r0, [r5, #36]	; 0x24
 800aaa4:	b920      	cbnz	r0, 800aab0 <_Bfree+0x20>
 800aaa6:	218a      	movs	r1, #138	; 0x8a
 800aaa8:	4b08      	ldr	r3, [pc, #32]	; (800aacc <_Bfree+0x3c>)
 800aaaa:	4809      	ldr	r0, [pc, #36]	; (800aad0 <_Bfree+0x40>)
 800aaac:	f001 fc1c 	bl	800c2e8 <__assert_func>
 800aab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aab4:	6006      	str	r6, [r0, #0]
 800aab6:	60c6      	str	r6, [r0, #12]
 800aab8:	b13c      	cbz	r4, 800aaca <_Bfree+0x3a>
 800aaba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aabc:	6862      	ldr	r2, [r4, #4]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aac4:	6021      	str	r1, [r4, #0]
 800aac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aaca:	bd70      	pop	{r4, r5, r6, pc}
 800aacc:	0800dcfc 	.word	0x0800dcfc
 800aad0:	0800dd13 	.word	0x0800dd13

0800aad4 <__multadd>:
 800aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad8:	4607      	mov	r7, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	461e      	mov	r6, r3
 800aade:	2000      	movs	r0, #0
 800aae0:	690d      	ldr	r5, [r1, #16]
 800aae2:	f101 0c14 	add.w	ip, r1, #20
 800aae6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaea:	3001      	adds	r0, #1
 800aaec:	b299      	uxth	r1, r3
 800aaee:	fb02 6101 	mla	r1, r2, r1, r6
 800aaf2:	0c1e      	lsrs	r6, r3, #16
 800aaf4:	0c0b      	lsrs	r3, r1, #16
 800aaf6:	fb02 3306 	mla	r3, r2, r6, r3
 800aafa:	b289      	uxth	r1, r1
 800aafc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab00:	4285      	cmp	r5, r0
 800ab02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab06:	f84c 1b04 	str.w	r1, [ip], #4
 800ab0a:	dcec      	bgt.n	800aae6 <__multadd+0x12>
 800ab0c:	b30e      	cbz	r6, 800ab52 <__multadd+0x7e>
 800ab0e:	68a3      	ldr	r3, [r4, #8]
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dc19      	bgt.n	800ab48 <__multadd+0x74>
 800ab14:	6861      	ldr	r1, [r4, #4]
 800ab16:	4638      	mov	r0, r7
 800ab18:	3101      	adds	r1, #1
 800ab1a:	f7ff ff79 	bl	800aa10 <_Balloc>
 800ab1e:	4680      	mov	r8, r0
 800ab20:	b928      	cbnz	r0, 800ab2e <__multadd+0x5a>
 800ab22:	4602      	mov	r2, r0
 800ab24:	21b5      	movs	r1, #181	; 0xb5
 800ab26:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <__multadd+0x84>)
 800ab28:	480c      	ldr	r0, [pc, #48]	; (800ab5c <__multadd+0x88>)
 800ab2a:	f001 fbdd 	bl	800c2e8 <__assert_func>
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	f104 010c 	add.w	r1, r4, #12
 800ab34:	3202      	adds	r2, #2
 800ab36:	0092      	lsls	r2, r2, #2
 800ab38:	300c      	adds	r0, #12
 800ab3a:	f7fe fbf5 	bl	8009328 <memcpy>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	4638      	mov	r0, r7
 800ab42:	f7ff ffa5 	bl	800aa90 <_Bfree>
 800ab46:	4644      	mov	r4, r8
 800ab48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab4c:	3501      	adds	r5, #1
 800ab4e:	615e      	str	r6, [r3, #20]
 800ab50:	6125      	str	r5, [r4, #16]
 800ab52:	4620      	mov	r0, r4
 800ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab58:	0800dc70 	.word	0x0800dc70
 800ab5c:	0800dd13 	.word	0x0800dd13

0800ab60 <__s2b>:
 800ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	4615      	mov	r5, r2
 800ab66:	2209      	movs	r2, #9
 800ab68:	461f      	mov	r7, r3
 800ab6a:	3308      	adds	r3, #8
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab72:	4606      	mov	r6, r0
 800ab74:	2201      	movs	r2, #1
 800ab76:	2100      	movs	r1, #0
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	db09      	blt.n	800ab90 <__s2b+0x30>
 800ab7c:	4630      	mov	r0, r6
 800ab7e:	f7ff ff47 	bl	800aa10 <_Balloc>
 800ab82:	b940      	cbnz	r0, 800ab96 <__s2b+0x36>
 800ab84:	4602      	mov	r2, r0
 800ab86:	21ce      	movs	r1, #206	; 0xce
 800ab88:	4b18      	ldr	r3, [pc, #96]	; (800abec <__s2b+0x8c>)
 800ab8a:	4819      	ldr	r0, [pc, #100]	; (800abf0 <__s2b+0x90>)
 800ab8c:	f001 fbac 	bl	800c2e8 <__assert_func>
 800ab90:	0052      	lsls	r2, r2, #1
 800ab92:	3101      	adds	r1, #1
 800ab94:	e7f0      	b.n	800ab78 <__s2b+0x18>
 800ab96:	9b08      	ldr	r3, [sp, #32]
 800ab98:	2d09      	cmp	r5, #9
 800ab9a:	6143      	str	r3, [r0, #20]
 800ab9c:	f04f 0301 	mov.w	r3, #1
 800aba0:	6103      	str	r3, [r0, #16]
 800aba2:	dd16      	ble.n	800abd2 <__s2b+0x72>
 800aba4:	f104 0909 	add.w	r9, r4, #9
 800aba8:	46c8      	mov	r8, r9
 800abaa:	442c      	add	r4, r5
 800abac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800abb0:	4601      	mov	r1, r0
 800abb2:	220a      	movs	r2, #10
 800abb4:	4630      	mov	r0, r6
 800abb6:	3b30      	subs	r3, #48	; 0x30
 800abb8:	f7ff ff8c 	bl	800aad4 <__multadd>
 800abbc:	45a0      	cmp	r8, r4
 800abbe:	d1f5      	bne.n	800abac <__s2b+0x4c>
 800abc0:	f1a5 0408 	sub.w	r4, r5, #8
 800abc4:	444c      	add	r4, r9
 800abc6:	1b2d      	subs	r5, r5, r4
 800abc8:	1963      	adds	r3, r4, r5
 800abca:	42bb      	cmp	r3, r7
 800abcc:	db04      	blt.n	800abd8 <__s2b+0x78>
 800abce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abd2:	2509      	movs	r5, #9
 800abd4:	340a      	adds	r4, #10
 800abd6:	e7f6      	b.n	800abc6 <__s2b+0x66>
 800abd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abdc:	4601      	mov	r1, r0
 800abde:	220a      	movs	r2, #10
 800abe0:	4630      	mov	r0, r6
 800abe2:	3b30      	subs	r3, #48	; 0x30
 800abe4:	f7ff ff76 	bl	800aad4 <__multadd>
 800abe8:	e7ee      	b.n	800abc8 <__s2b+0x68>
 800abea:	bf00      	nop
 800abec:	0800dc70 	.word	0x0800dc70
 800abf0:	0800dd13 	.word	0x0800dd13

0800abf4 <__hi0bits>:
 800abf4:	0c02      	lsrs	r2, r0, #16
 800abf6:	0412      	lsls	r2, r2, #16
 800abf8:	4603      	mov	r3, r0
 800abfa:	b9ca      	cbnz	r2, 800ac30 <__hi0bits+0x3c>
 800abfc:	0403      	lsls	r3, r0, #16
 800abfe:	2010      	movs	r0, #16
 800ac00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ac04:	bf04      	itt	eq
 800ac06:	021b      	lsleq	r3, r3, #8
 800ac08:	3008      	addeq	r0, #8
 800ac0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ac0e:	bf04      	itt	eq
 800ac10:	011b      	lsleq	r3, r3, #4
 800ac12:	3004      	addeq	r0, #4
 800ac14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ac18:	bf04      	itt	eq
 800ac1a:	009b      	lsleq	r3, r3, #2
 800ac1c:	3002      	addeq	r0, #2
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	db05      	blt.n	800ac2e <__hi0bits+0x3a>
 800ac22:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ac26:	f100 0001 	add.w	r0, r0, #1
 800ac2a:	bf08      	it	eq
 800ac2c:	2020      	moveq	r0, #32
 800ac2e:	4770      	bx	lr
 800ac30:	2000      	movs	r0, #0
 800ac32:	e7e5      	b.n	800ac00 <__hi0bits+0xc>

0800ac34 <__lo0bits>:
 800ac34:	6803      	ldr	r3, [r0, #0]
 800ac36:	4602      	mov	r2, r0
 800ac38:	f013 0007 	ands.w	r0, r3, #7
 800ac3c:	d00b      	beq.n	800ac56 <__lo0bits+0x22>
 800ac3e:	07d9      	lsls	r1, r3, #31
 800ac40:	d421      	bmi.n	800ac86 <__lo0bits+0x52>
 800ac42:	0798      	lsls	r0, r3, #30
 800ac44:	bf49      	itett	mi
 800ac46:	085b      	lsrmi	r3, r3, #1
 800ac48:	089b      	lsrpl	r3, r3, #2
 800ac4a:	2001      	movmi	r0, #1
 800ac4c:	6013      	strmi	r3, [r2, #0]
 800ac4e:	bf5c      	itt	pl
 800ac50:	2002      	movpl	r0, #2
 800ac52:	6013      	strpl	r3, [r2, #0]
 800ac54:	4770      	bx	lr
 800ac56:	b299      	uxth	r1, r3
 800ac58:	b909      	cbnz	r1, 800ac5e <__lo0bits+0x2a>
 800ac5a:	2010      	movs	r0, #16
 800ac5c:	0c1b      	lsrs	r3, r3, #16
 800ac5e:	b2d9      	uxtb	r1, r3
 800ac60:	b909      	cbnz	r1, 800ac66 <__lo0bits+0x32>
 800ac62:	3008      	adds	r0, #8
 800ac64:	0a1b      	lsrs	r3, r3, #8
 800ac66:	0719      	lsls	r1, r3, #28
 800ac68:	bf04      	itt	eq
 800ac6a:	091b      	lsreq	r3, r3, #4
 800ac6c:	3004      	addeq	r0, #4
 800ac6e:	0799      	lsls	r1, r3, #30
 800ac70:	bf04      	itt	eq
 800ac72:	089b      	lsreq	r3, r3, #2
 800ac74:	3002      	addeq	r0, #2
 800ac76:	07d9      	lsls	r1, r3, #31
 800ac78:	d403      	bmi.n	800ac82 <__lo0bits+0x4e>
 800ac7a:	085b      	lsrs	r3, r3, #1
 800ac7c:	f100 0001 	add.w	r0, r0, #1
 800ac80:	d003      	beq.n	800ac8a <__lo0bits+0x56>
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	4770      	bx	lr
 800ac86:	2000      	movs	r0, #0
 800ac88:	4770      	bx	lr
 800ac8a:	2020      	movs	r0, #32
 800ac8c:	4770      	bx	lr
	...

0800ac90 <__i2b>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	460c      	mov	r4, r1
 800ac94:	2101      	movs	r1, #1
 800ac96:	f7ff febb 	bl	800aa10 <_Balloc>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	b928      	cbnz	r0, 800acaa <__i2b+0x1a>
 800ac9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aca2:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <__i2b+0x24>)
 800aca4:	4804      	ldr	r0, [pc, #16]	; (800acb8 <__i2b+0x28>)
 800aca6:	f001 fb1f 	bl	800c2e8 <__assert_func>
 800acaa:	2301      	movs	r3, #1
 800acac:	6144      	str	r4, [r0, #20]
 800acae:	6103      	str	r3, [r0, #16]
 800acb0:	bd10      	pop	{r4, pc}
 800acb2:	bf00      	nop
 800acb4:	0800dc70 	.word	0x0800dc70
 800acb8:	0800dd13 	.word	0x0800dd13

0800acbc <__multiply>:
 800acbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc0:	4691      	mov	r9, r2
 800acc2:	690a      	ldr	r2, [r1, #16]
 800acc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800acc8:	460c      	mov	r4, r1
 800acca:	429a      	cmp	r2, r3
 800accc:	bfbe      	ittt	lt
 800acce:	460b      	movlt	r3, r1
 800acd0:	464c      	movlt	r4, r9
 800acd2:	4699      	movlt	r9, r3
 800acd4:	6927      	ldr	r7, [r4, #16]
 800acd6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800acda:	68a3      	ldr	r3, [r4, #8]
 800acdc:	6861      	ldr	r1, [r4, #4]
 800acde:	eb07 060a 	add.w	r6, r7, sl
 800ace2:	42b3      	cmp	r3, r6
 800ace4:	b085      	sub	sp, #20
 800ace6:	bfb8      	it	lt
 800ace8:	3101      	addlt	r1, #1
 800acea:	f7ff fe91 	bl	800aa10 <_Balloc>
 800acee:	b930      	cbnz	r0, 800acfe <__multiply+0x42>
 800acf0:	4602      	mov	r2, r0
 800acf2:	f240 115d 	movw	r1, #349	; 0x15d
 800acf6:	4b43      	ldr	r3, [pc, #268]	; (800ae04 <__multiply+0x148>)
 800acf8:	4843      	ldr	r0, [pc, #268]	; (800ae08 <__multiply+0x14c>)
 800acfa:	f001 faf5 	bl	800c2e8 <__assert_func>
 800acfe:	f100 0514 	add.w	r5, r0, #20
 800ad02:	462b      	mov	r3, r5
 800ad04:	2200      	movs	r2, #0
 800ad06:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad0a:	4543      	cmp	r3, r8
 800ad0c:	d321      	bcc.n	800ad52 <__multiply+0x96>
 800ad0e:	f104 0314 	add.w	r3, r4, #20
 800ad12:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ad16:	f109 0314 	add.w	r3, r9, #20
 800ad1a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ad1e:	9202      	str	r2, [sp, #8]
 800ad20:	1b3a      	subs	r2, r7, r4
 800ad22:	3a15      	subs	r2, #21
 800ad24:	f022 0203 	bic.w	r2, r2, #3
 800ad28:	3204      	adds	r2, #4
 800ad2a:	f104 0115 	add.w	r1, r4, #21
 800ad2e:	428f      	cmp	r7, r1
 800ad30:	bf38      	it	cc
 800ad32:	2204      	movcc	r2, #4
 800ad34:	9201      	str	r2, [sp, #4]
 800ad36:	9a02      	ldr	r2, [sp, #8]
 800ad38:	9303      	str	r3, [sp, #12]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d80c      	bhi.n	800ad58 <__multiply+0x9c>
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	dd03      	ble.n	800ad4a <__multiply+0x8e>
 800ad42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d059      	beq.n	800adfe <__multiply+0x142>
 800ad4a:	6106      	str	r6, [r0, #16]
 800ad4c:	b005      	add	sp, #20
 800ad4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad52:	f843 2b04 	str.w	r2, [r3], #4
 800ad56:	e7d8      	b.n	800ad0a <__multiply+0x4e>
 800ad58:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad5c:	f1ba 0f00 	cmp.w	sl, #0
 800ad60:	d023      	beq.n	800adaa <__multiply+0xee>
 800ad62:	46a9      	mov	r9, r5
 800ad64:	f04f 0c00 	mov.w	ip, #0
 800ad68:	f104 0e14 	add.w	lr, r4, #20
 800ad6c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad70:	f8d9 1000 	ldr.w	r1, [r9]
 800ad74:	fa1f fb82 	uxth.w	fp, r2
 800ad78:	b289      	uxth	r1, r1
 800ad7a:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad7e:	4461      	add	r1, ip
 800ad80:	f8d9 c000 	ldr.w	ip, [r9]
 800ad84:	0c12      	lsrs	r2, r2, #16
 800ad86:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ad8a:	fb0a c202 	mla	r2, sl, r2, ip
 800ad8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad92:	b289      	uxth	r1, r1
 800ad94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad98:	4577      	cmp	r7, lr
 800ad9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad9e:	f849 1b04 	str.w	r1, [r9], #4
 800ada2:	d8e3      	bhi.n	800ad6c <__multiply+0xb0>
 800ada4:	9a01      	ldr	r2, [sp, #4]
 800ada6:	f845 c002 	str.w	ip, [r5, r2]
 800adaa:	9a03      	ldr	r2, [sp, #12]
 800adac:	3304      	adds	r3, #4
 800adae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adb2:	f1b9 0f00 	cmp.w	r9, #0
 800adb6:	d020      	beq.n	800adfa <__multiply+0x13e>
 800adb8:	46ae      	mov	lr, r5
 800adba:	f04f 0a00 	mov.w	sl, #0
 800adbe:	6829      	ldr	r1, [r5, #0]
 800adc0:	f104 0c14 	add.w	ip, r4, #20
 800adc4:	f8bc b000 	ldrh.w	fp, [ip]
 800adc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800adcc:	b289      	uxth	r1, r1
 800adce:	fb09 220b 	mla	r2, r9, fp, r2
 800add2:	4492      	add	sl, r2
 800add4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800add8:	f84e 1b04 	str.w	r1, [lr], #4
 800addc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ade0:	f8be 1000 	ldrh.w	r1, [lr]
 800ade4:	0c12      	lsrs	r2, r2, #16
 800ade6:	fb09 1102 	mla	r1, r9, r2, r1
 800adea:	4567      	cmp	r7, ip
 800adec:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800adf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800adf4:	d8e6      	bhi.n	800adc4 <__multiply+0x108>
 800adf6:	9a01      	ldr	r2, [sp, #4]
 800adf8:	50a9      	str	r1, [r5, r2]
 800adfa:	3504      	adds	r5, #4
 800adfc:	e79b      	b.n	800ad36 <__multiply+0x7a>
 800adfe:	3e01      	subs	r6, #1
 800ae00:	e79d      	b.n	800ad3e <__multiply+0x82>
 800ae02:	bf00      	nop
 800ae04:	0800dc70 	.word	0x0800dc70
 800ae08:	0800dd13 	.word	0x0800dd13

0800ae0c <__pow5mult>:
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	4615      	mov	r5, r2
 800ae12:	f012 0203 	ands.w	r2, r2, #3
 800ae16:	4606      	mov	r6, r0
 800ae18:	460f      	mov	r7, r1
 800ae1a:	d007      	beq.n	800ae2c <__pow5mult+0x20>
 800ae1c:	4c25      	ldr	r4, [pc, #148]	; (800aeb4 <__pow5mult+0xa8>)
 800ae1e:	3a01      	subs	r2, #1
 800ae20:	2300      	movs	r3, #0
 800ae22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae26:	f7ff fe55 	bl	800aad4 <__multadd>
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	10ad      	asrs	r5, r5, #2
 800ae2e:	d03d      	beq.n	800aeac <__pow5mult+0xa0>
 800ae30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae32:	b97c      	cbnz	r4, 800ae54 <__pow5mult+0x48>
 800ae34:	2010      	movs	r0, #16
 800ae36:	f7fe fa67 	bl	8009308 <malloc>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ae3e:	b928      	cbnz	r0, 800ae4c <__pow5mult+0x40>
 800ae40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae44:	4b1c      	ldr	r3, [pc, #112]	; (800aeb8 <__pow5mult+0xac>)
 800ae46:	481d      	ldr	r0, [pc, #116]	; (800aebc <__pow5mult+0xb0>)
 800ae48:	f001 fa4e 	bl	800c2e8 <__assert_func>
 800ae4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae50:	6004      	str	r4, [r0, #0]
 800ae52:	60c4      	str	r4, [r0, #12]
 800ae54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae5c:	b94c      	cbnz	r4, 800ae72 <__pow5mult+0x66>
 800ae5e:	f240 2171 	movw	r1, #625	; 0x271
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ff14 	bl	800ac90 <__i2b>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	f04f 0900 	mov.w	r9, #0
 800ae76:	07eb      	lsls	r3, r5, #31
 800ae78:	d50a      	bpl.n	800ae90 <__pow5mult+0x84>
 800ae7a:	4639      	mov	r1, r7
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	4630      	mov	r0, r6
 800ae80:	f7ff ff1c 	bl	800acbc <__multiply>
 800ae84:	4680      	mov	r8, r0
 800ae86:	4639      	mov	r1, r7
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f7ff fe01 	bl	800aa90 <_Bfree>
 800ae8e:	4647      	mov	r7, r8
 800ae90:	106d      	asrs	r5, r5, #1
 800ae92:	d00b      	beq.n	800aeac <__pow5mult+0xa0>
 800ae94:	6820      	ldr	r0, [r4, #0]
 800ae96:	b938      	cbnz	r0, 800aea8 <__pow5mult+0x9c>
 800ae98:	4622      	mov	r2, r4
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff ff0d 	bl	800acbc <__multiply>
 800aea2:	6020      	str	r0, [r4, #0]
 800aea4:	f8c0 9000 	str.w	r9, [r0]
 800aea8:	4604      	mov	r4, r0
 800aeaa:	e7e4      	b.n	800ae76 <__pow5mult+0x6a>
 800aeac:	4638      	mov	r0, r7
 800aeae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800de60 	.word	0x0800de60
 800aeb8:	0800dcfc 	.word	0x0800dcfc
 800aebc:	0800dd13 	.word	0x0800dd13

0800aec0 <__lshift>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	460c      	mov	r4, r1
 800aec6:	4607      	mov	r7, r0
 800aec8:	4691      	mov	r9, r2
 800aeca:	6923      	ldr	r3, [r4, #16]
 800aecc:	6849      	ldr	r1, [r1, #4]
 800aece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aed2:	68a3      	ldr	r3, [r4, #8]
 800aed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aed8:	f108 0601 	add.w	r6, r8, #1
 800aedc:	42b3      	cmp	r3, r6
 800aede:	db0b      	blt.n	800aef8 <__lshift+0x38>
 800aee0:	4638      	mov	r0, r7
 800aee2:	f7ff fd95 	bl	800aa10 <_Balloc>
 800aee6:	4605      	mov	r5, r0
 800aee8:	b948      	cbnz	r0, 800aefe <__lshift+0x3e>
 800aeea:	4602      	mov	r2, r0
 800aeec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aef0:	4b29      	ldr	r3, [pc, #164]	; (800af98 <__lshift+0xd8>)
 800aef2:	482a      	ldr	r0, [pc, #168]	; (800af9c <__lshift+0xdc>)
 800aef4:	f001 f9f8 	bl	800c2e8 <__assert_func>
 800aef8:	3101      	adds	r1, #1
 800aefa:	005b      	lsls	r3, r3, #1
 800aefc:	e7ee      	b.n	800aedc <__lshift+0x1c>
 800aefe:	2300      	movs	r3, #0
 800af00:	f100 0114 	add.w	r1, r0, #20
 800af04:	f100 0210 	add.w	r2, r0, #16
 800af08:	4618      	mov	r0, r3
 800af0a:	4553      	cmp	r3, sl
 800af0c:	db37      	blt.n	800af7e <__lshift+0xbe>
 800af0e:	6920      	ldr	r0, [r4, #16]
 800af10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af14:	f104 0314 	add.w	r3, r4, #20
 800af18:	f019 091f 	ands.w	r9, r9, #31
 800af1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800af24:	d02f      	beq.n	800af86 <__lshift+0xc6>
 800af26:	468a      	mov	sl, r1
 800af28:	f04f 0c00 	mov.w	ip, #0
 800af2c:	f1c9 0e20 	rsb	lr, r9, #32
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	fa02 f209 	lsl.w	r2, r2, r9
 800af36:	ea42 020c 	orr.w	r2, r2, ip
 800af3a:	f84a 2b04 	str.w	r2, [sl], #4
 800af3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af42:	4298      	cmp	r0, r3
 800af44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800af48:	d8f2      	bhi.n	800af30 <__lshift+0x70>
 800af4a:	1b03      	subs	r3, r0, r4
 800af4c:	3b15      	subs	r3, #21
 800af4e:	f023 0303 	bic.w	r3, r3, #3
 800af52:	3304      	adds	r3, #4
 800af54:	f104 0215 	add.w	r2, r4, #21
 800af58:	4290      	cmp	r0, r2
 800af5a:	bf38      	it	cc
 800af5c:	2304      	movcc	r3, #4
 800af5e:	f841 c003 	str.w	ip, [r1, r3]
 800af62:	f1bc 0f00 	cmp.w	ip, #0
 800af66:	d001      	beq.n	800af6c <__lshift+0xac>
 800af68:	f108 0602 	add.w	r6, r8, #2
 800af6c:	3e01      	subs	r6, #1
 800af6e:	4638      	mov	r0, r7
 800af70:	4621      	mov	r1, r4
 800af72:	612e      	str	r6, [r5, #16]
 800af74:	f7ff fd8c 	bl	800aa90 <_Bfree>
 800af78:	4628      	mov	r0, r5
 800af7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af82:	3301      	adds	r3, #1
 800af84:	e7c1      	b.n	800af0a <__lshift+0x4a>
 800af86:	3904      	subs	r1, #4
 800af88:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8c:	4298      	cmp	r0, r3
 800af8e:	f841 2f04 	str.w	r2, [r1, #4]!
 800af92:	d8f9      	bhi.n	800af88 <__lshift+0xc8>
 800af94:	e7ea      	b.n	800af6c <__lshift+0xac>
 800af96:	bf00      	nop
 800af98:	0800dc70 	.word	0x0800dc70
 800af9c:	0800dd13 	.word	0x0800dd13

0800afa0 <__mcmp>:
 800afa0:	4603      	mov	r3, r0
 800afa2:	690a      	ldr	r2, [r1, #16]
 800afa4:	6900      	ldr	r0, [r0, #16]
 800afa6:	b530      	push	{r4, r5, lr}
 800afa8:	1a80      	subs	r0, r0, r2
 800afaa:	d10d      	bne.n	800afc8 <__mcmp+0x28>
 800afac:	3314      	adds	r3, #20
 800afae:	3114      	adds	r1, #20
 800afb0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afb4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afc0:	4295      	cmp	r5, r2
 800afc2:	d002      	beq.n	800afca <__mcmp+0x2a>
 800afc4:	d304      	bcc.n	800afd0 <__mcmp+0x30>
 800afc6:	2001      	movs	r0, #1
 800afc8:	bd30      	pop	{r4, r5, pc}
 800afca:	42a3      	cmp	r3, r4
 800afcc:	d3f4      	bcc.n	800afb8 <__mcmp+0x18>
 800afce:	e7fb      	b.n	800afc8 <__mcmp+0x28>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	e7f8      	b.n	800afc8 <__mcmp+0x28>
	...

0800afd8 <__mdiff>:
 800afd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	460d      	mov	r5, r1
 800afde:	4607      	mov	r7, r0
 800afe0:	4611      	mov	r1, r2
 800afe2:	4628      	mov	r0, r5
 800afe4:	4614      	mov	r4, r2
 800afe6:	f7ff ffdb 	bl	800afa0 <__mcmp>
 800afea:	1e06      	subs	r6, r0, #0
 800afec:	d111      	bne.n	800b012 <__mdiff+0x3a>
 800afee:	4631      	mov	r1, r6
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff fd0d 	bl	800aa10 <_Balloc>
 800aff6:	4602      	mov	r2, r0
 800aff8:	b928      	cbnz	r0, 800b006 <__mdiff+0x2e>
 800affa:	f240 2132 	movw	r1, #562	; 0x232
 800affe:	4b3a      	ldr	r3, [pc, #232]	; (800b0e8 <__mdiff+0x110>)
 800b000:	483a      	ldr	r0, [pc, #232]	; (800b0ec <__mdiff+0x114>)
 800b002:	f001 f971 	bl	800c2e8 <__assert_func>
 800b006:	2301      	movs	r3, #1
 800b008:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b00c:	4610      	mov	r0, r2
 800b00e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b012:	bfa4      	itt	ge
 800b014:	4623      	movge	r3, r4
 800b016:	462c      	movge	r4, r5
 800b018:	4638      	mov	r0, r7
 800b01a:	6861      	ldr	r1, [r4, #4]
 800b01c:	bfa6      	itte	ge
 800b01e:	461d      	movge	r5, r3
 800b020:	2600      	movge	r6, #0
 800b022:	2601      	movlt	r6, #1
 800b024:	f7ff fcf4 	bl	800aa10 <_Balloc>
 800b028:	4602      	mov	r2, r0
 800b02a:	b918      	cbnz	r0, 800b034 <__mdiff+0x5c>
 800b02c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b030:	4b2d      	ldr	r3, [pc, #180]	; (800b0e8 <__mdiff+0x110>)
 800b032:	e7e5      	b.n	800b000 <__mdiff+0x28>
 800b034:	f102 0814 	add.w	r8, r2, #20
 800b038:	46c2      	mov	sl, r8
 800b03a:	f04f 0c00 	mov.w	ip, #0
 800b03e:	6927      	ldr	r7, [r4, #16]
 800b040:	60c6      	str	r6, [r0, #12]
 800b042:	692e      	ldr	r6, [r5, #16]
 800b044:	f104 0014 	add.w	r0, r4, #20
 800b048:	f105 0914 	add.w	r9, r5, #20
 800b04c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b054:	3410      	adds	r4, #16
 800b056:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b05a:	f859 3b04 	ldr.w	r3, [r9], #4
 800b05e:	fa1f f18b 	uxth.w	r1, fp
 800b062:	448c      	add	ip, r1
 800b064:	b299      	uxth	r1, r3
 800b066:	0c1b      	lsrs	r3, r3, #16
 800b068:	ebac 0101 	sub.w	r1, ip, r1
 800b06c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b070:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b074:	b289      	uxth	r1, r1
 800b076:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b07a:	454e      	cmp	r6, r9
 800b07c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b080:	f84a 3b04 	str.w	r3, [sl], #4
 800b084:	d8e7      	bhi.n	800b056 <__mdiff+0x7e>
 800b086:	1b73      	subs	r3, r6, r5
 800b088:	3b15      	subs	r3, #21
 800b08a:	f023 0303 	bic.w	r3, r3, #3
 800b08e:	3515      	adds	r5, #21
 800b090:	3304      	adds	r3, #4
 800b092:	42ae      	cmp	r6, r5
 800b094:	bf38      	it	cc
 800b096:	2304      	movcc	r3, #4
 800b098:	4418      	add	r0, r3
 800b09a:	4443      	add	r3, r8
 800b09c:	461e      	mov	r6, r3
 800b09e:	4605      	mov	r5, r0
 800b0a0:	4575      	cmp	r5, lr
 800b0a2:	d30e      	bcc.n	800b0c2 <__mdiff+0xea>
 800b0a4:	f10e 0103 	add.w	r1, lr, #3
 800b0a8:	1a09      	subs	r1, r1, r0
 800b0aa:	f021 0103 	bic.w	r1, r1, #3
 800b0ae:	3803      	subs	r0, #3
 800b0b0:	4586      	cmp	lr, r0
 800b0b2:	bf38      	it	cc
 800b0b4:	2100      	movcc	r1, #0
 800b0b6:	4419      	add	r1, r3
 800b0b8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b0bc:	b18b      	cbz	r3, 800b0e2 <__mdiff+0x10a>
 800b0be:	6117      	str	r7, [r2, #16]
 800b0c0:	e7a4      	b.n	800b00c <__mdiff+0x34>
 800b0c2:	f855 8b04 	ldr.w	r8, [r5], #4
 800b0c6:	fa1f f188 	uxth.w	r1, r8
 800b0ca:	4461      	add	r1, ip
 800b0cc:	140c      	asrs	r4, r1, #16
 800b0ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b0d2:	b289      	uxth	r1, r1
 800b0d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b0d8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b0dc:	f846 1b04 	str.w	r1, [r6], #4
 800b0e0:	e7de      	b.n	800b0a0 <__mdiff+0xc8>
 800b0e2:	3f01      	subs	r7, #1
 800b0e4:	e7e8      	b.n	800b0b8 <__mdiff+0xe0>
 800b0e6:	bf00      	nop
 800b0e8:	0800dc70 	.word	0x0800dc70
 800b0ec:	0800dd13 	.word	0x0800dd13

0800b0f0 <__ulp>:
 800b0f0:	4b11      	ldr	r3, [pc, #68]	; (800b138 <__ulp+0x48>)
 800b0f2:	400b      	ands	r3, r1
 800b0f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	dd02      	ble.n	800b102 <__ulp+0x12>
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	4619      	mov	r1, r3
 800b100:	4770      	bx	lr
 800b102:	425b      	negs	r3, r3
 800b104:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b108:	f04f 0000 	mov.w	r0, #0
 800b10c:	f04f 0100 	mov.w	r1, #0
 800b110:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b114:	da04      	bge.n	800b120 <__ulp+0x30>
 800b116:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b11a:	fa43 f102 	asr.w	r1, r3, r2
 800b11e:	4770      	bx	lr
 800b120:	f1a2 0314 	sub.w	r3, r2, #20
 800b124:	2b1e      	cmp	r3, #30
 800b126:	bfd6      	itet	le
 800b128:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b12c:	2301      	movgt	r3, #1
 800b12e:	fa22 f303 	lsrle.w	r3, r2, r3
 800b132:	4618      	mov	r0, r3
 800b134:	4770      	bx	lr
 800b136:	bf00      	nop
 800b138:	7ff00000 	.word	0x7ff00000

0800b13c <__b2d>:
 800b13c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b140:	6907      	ldr	r7, [r0, #16]
 800b142:	f100 0914 	add.w	r9, r0, #20
 800b146:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b14a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b14e:	f1a7 0804 	sub.w	r8, r7, #4
 800b152:	4630      	mov	r0, r6
 800b154:	f7ff fd4e 	bl	800abf4 <__hi0bits>
 800b158:	f1c0 0320 	rsb	r3, r0, #32
 800b15c:	280a      	cmp	r0, #10
 800b15e:	600b      	str	r3, [r1, #0]
 800b160:	491f      	ldr	r1, [pc, #124]	; (800b1e0 <__b2d+0xa4>)
 800b162:	dc17      	bgt.n	800b194 <__b2d+0x58>
 800b164:	45c1      	cmp	r9, r8
 800b166:	bf28      	it	cs
 800b168:	2200      	movcs	r2, #0
 800b16a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b16e:	fa26 f30c 	lsr.w	r3, r6, ip
 800b172:	bf38      	it	cc
 800b174:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b178:	ea43 0501 	orr.w	r5, r3, r1
 800b17c:	f100 0315 	add.w	r3, r0, #21
 800b180:	fa06 f303 	lsl.w	r3, r6, r3
 800b184:	fa22 f20c 	lsr.w	r2, r2, ip
 800b188:	ea43 0402 	orr.w	r4, r3, r2
 800b18c:	4620      	mov	r0, r4
 800b18e:	4629      	mov	r1, r5
 800b190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b194:	45c1      	cmp	r9, r8
 800b196:	bf2e      	itee	cs
 800b198:	2200      	movcs	r2, #0
 800b19a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b19e:	f1a7 0808 	subcc.w	r8, r7, #8
 800b1a2:	f1b0 030b 	subs.w	r3, r0, #11
 800b1a6:	d016      	beq.n	800b1d6 <__b2d+0x9a>
 800b1a8:	f1c3 0720 	rsb	r7, r3, #32
 800b1ac:	fa22 f107 	lsr.w	r1, r2, r7
 800b1b0:	45c8      	cmp	r8, r9
 800b1b2:	fa06 f603 	lsl.w	r6, r6, r3
 800b1b6:	ea46 0601 	orr.w	r6, r6, r1
 800b1ba:	bf94      	ite	ls
 800b1bc:	2100      	movls	r1, #0
 800b1be:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b1c2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b1c6:	fa02 f003 	lsl.w	r0, r2, r3
 800b1ca:	40f9      	lsrs	r1, r7
 800b1cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b1d0:	ea40 0401 	orr.w	r4, r0, r1
 800b1d4:	e7da      	b.n	800b18c <__b2d+0x50>
 800b1d6:	4614      	mov	r4, r2
 800b1d8:	ea46 0501 	orr.w	r5, r6, r1
 800b1dc:	e7d6      	b.n	800b18c <__b2d+0x50>
 800b1de:	bf00      	nop
 800b1e0:	3ff00000 	.word	0x3ff00000

0800b1e4 <__d2b>:
 800b1e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b1ee:	4690      	mov	r8, r2
 800b1f0:	461d      	mov	r5, r3
 800b1f2:	f7ff fc0d 	bl	800aa10 <_Balloc>
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	b930      	cbnz	r0, 800b208 <__d2b+0x24>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	f240 310a 	movw	r1, #778	; 0x30a
 800b200:	4b24      	ldr	r3, [pc, #144]	; (800b294 <__d2b+0xb0>)
 800b202:	4825      	ldr	r0, [pc, #148]	; (800b298 <__d2b+0xb4>)
 800b204:	f001 f870 	bl	800c2e8 <__assert_func>
 800b208:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b20c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b210:	bb2d      	cbnz	r5, 800b25e <__d2b+0x7a>
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	f1b8 0300 	subs.w	r3, r8, #0
 800b218:	d026      	beq.n	800b268 <__d2b+0x84>
 800b21a:	4668      	mov	r0, sp
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	f7ff fd09 	bl	800ac34 <__lo0bits>
 800b222:	9900      	ldr	r1, [sp, #0]
 800b224:	b1f0      	cbz	r0, 800b264 <__d2b+0x80>
 800b226:	9a01      	ldr	r2, [sp, #4]
 800b228:	f1c0 0320 	rsb	r3, r0, #32
 800b22c:	fa02 f303 	lsl.w	r3, r2, r3
 800b230:	430b      	orrs	r3, r1
 800b232:	40c2      	lsrs	r2, r0
 800b234:	6163      	str	r3, [r4, #20]
 800b236:	9201      	str	r2, [sp, #4]
 800b238:	9b01      	ldr	r3, [sp, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	bf14      	ite	ne
 800b23e:	2102      	movne	r1, #2
 800b240:	2101      	moveq	r1, #1
 800b242:	61a3      	str	r3, [r4, #24]
 800b244:	6121      	str	r1, [r4, #16]
 800b246:	b1c5      	cbz	r5, 800b27a <__d2b+0x96>
 800b248:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b24c:	4405      	add	r5, r0
 800b24e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b252:	603d      	str	r5, [r7, #0]
 800b254:	6030      	str	r0, [r6, #0]
 800b256:	4620      	mov	r0, r4
 800b258:	b002      	add	sp, #8
 800b25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b25e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b262:	e7d6      	b.n	800b212 <__d2b+0x2e>
 800b264:	6161      	str	r1, [r4, #20]
 800b266:	e7e7      	b.n	800b238 <__d2b+0x54>
 800b268:	a801      	add	r0, sp, #4
 800b26a:	f7ff fce3 	bl	800ac34 <__lo0bits>
 800b26e:	2101      	movs	r1, #1
 800b270:	9b01      	ldr	r3, [sp, #4]
 800b272:	6121      	str	r1, [r4, #16]
 800b274:	6163      	str	r3, [r4, #20]
 800b276:	3020      	adds	r0, #32
 800b278:	e7e5      	b.n	800b246 <__d2b+0x62>
 800b27a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b27e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b282:	6038      	str	r0, [r7, #0]
 800b284:	6918      	ldr	r0, [r3, #16]
 800b286:	f7ff fcb5 	bl	800abf4 <__hi0bits>
 800b28a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b28e:	6031      	str	r1, [r6, #0]
 800b290:	e7e1      	b.n	800b256 <__d2b+0x72>
 800b292:	bf00      	nop
 800b294:	0800dc70 	.word	0x0800dc70
 800b298:	0800dd13 	.word	0x0800dd13

0800b29c <__ratio>:
 800b29c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a0:	4688      	mov	r8, r1
 800b2a2:	4669      	mov	r1, sp
 800b2a4:	4681      	mov	r9, r0
 800b2a6:	f7ff ff49 	bl	800b13c <__b2d>
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	4604      	mov	r4, r0
 800b2ae:	460d      	mov	r5, r1
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	a901      	add	r1, sp, #4
 800b2b4:	f7ff ff42 	bl	800b13c <__b2d>
 800b2b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b2c0:	468b      	mov	fp, r1
 800b2c2:	eba3 0c02 	sub.w	ip, r3, r2
 800b2c6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2ca:	1a9b      	subs	r3, r3, r2
 800b2cc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	bfd5      	itete	le
 800b2d4:	460a      	movle	r2, r1
 800b2d6:	462a      	movgt	r2, r5
 800b2d8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b2dc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b2e0:	bfd8      	it	le
 800b2e2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b2e6:	465b      	mov	r3, fp
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	4639      	mov	r1, r7
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f7f5 fa8d 	bl	800080c <__aeabi_ddiv>
 800b2f2:	b003      	add	sp, #12
 800b2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2f8 <__copybits>:
 800b2f8:	3901      	subs	r1, #1
 800b2fa:	b570      	push	{r4, r5, r6, lr}
 800b2fc:	1149      	asrs	r1, r1, #5
 800b2fe:	6914      	ldr	r4, [r2, #16]
 800b300:	3101      	adds	r1, #1
 800b302:	f102 0314 	add.w	r3, r2, #20
 800b306:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b30a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b30e:	1f05      	subs	r5, r0, #4
 800b310:	42a3      	cmp	r3, r4
 800b312:	d30c      	bcc.n	800b32e <__copybits+0x36>
 800b314:	1aa3      	subs	r3, r4, r2
 800b316:	3b11      	subs	r3, #17
 800b318:	f023 0303 	bic.w	r3, r3, #3
 800b31c:	3211      	adds	r2, #17
 800b31e:	42a2      	cmp	r2, r4
 800b320:	bf88      	it	hi
 800b322:	2300      	movhi	r3, #0
 800b324:	4418      	add	r0, r3
 800b326:	2300      	movs	r3, #0
 800b328:	4288      	cmp	r0, r1
 800b32a:	d305      	bcc.n	800b338 <__copybits+0x40>
 800b32c:	bd70      	pop	{r4, r5, r6, pc}
 800b32e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b332:	f845 6f04 	str.w	r6, [r5, #4]!
 800b336:	e7eb      	b.n	800b310 <__copybits+0x18>
 800b338:	f840 3b04 	str.w	r3, [r0], #4
 800b33c:	e7f4      	b.n	800b328 <__copybits+0x30>

0800b33e <__any_on>:
 800b33e:	f100 0214 	add.w	r2, r0, #20
 800b342:	6900      	ldr	r0, [r0, #16]
 800b344:	114b      	asrs	r3, r1, #5
 800b346:	4298      	cmp	r0, r3
 800b348:	b510      	push	{r4, lr}
 800b34a:	db11      	blt.n	800b370 <__any_on+0x32>
 800b34c:	dd0a      	ble.n	800b364 <__any_on+0x26>
 800b34e:	f011 011f 	ands.w	r1, r1, #31
 800b352:	d007      	beq.n	800b364 <__any_on+0x26>
 800b354:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b358:	fa24 f001 	lsr.w	r0, r4, r1
 800b35c:	fa00 f101 	lsl.w	r1, r0, r1
 800b360:	428c      	cmp	r4, r1
 800b362:	d10b      	bne.n	800b37c <__any_on+0x3e>
 800b364:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b368:	4293      	cmp	r3, r2
 800b36a:	d803      	bhi.n	800b374 <__any_on+0x36>
 800b36c:	2000      	movs	r0, #0
 800b36e:	bd10      	pop	{r4, pc}
 800b370:	4603      	mov	r3, r0
 800b372:	e7f7      	b.n	800b364 <__any_on+0x26>
 800b374:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b378:	2900      	cmp	r1, #0
 800b37a:	d0f5      	beq.n	800b368 <__any_on+0x2a>
 800b37c:	2001      	movs	r0, #1
 800b37e:	e7f6      	b.n	800b36e <__any_on+0x30>

0800b380 <__ssputs_r>:
 800b380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b384:	688e      	ldr	r6, [r1, #8]
 800b386:	4682      	mov	sl, r0
 800b388:	429e      	cmp	r6, r3
 800b38a:	460c      	mov	r4, r1
 800b38c:	4690      	mov	r8, r2
 800b38e:	461f      	mov	r7, r3
 800b390:	d838      	bhi.n	800b404 <__ssputs_r+0x84>
 800b392:	898a      	ldrh	r2, [r1, #12]
 800b394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b398:	d032      	beq.n	800b400 <__ssputs_r+0x80>
 800b39a:	6825      	ldr	r5, [r4, #0]
 800b39c:	6909      	ldr	r1, [r1, #16]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	eba5 0901 	sub.w	r9, r5, r1
 800b3a4:	6965      	ldr	r5, [r4, #20]
 800b3a6:	444b      	add	r3, r9
 800b3a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3b0:	106d      	asrs	r5, r5, #1
 800b3b2:	429d      	cmp	r5, r3
 800b3b4:	bf38      	it	cc
 800b3b6:	461d      	movcc	r5, r3
 800b3b8:	0553      	lsls	r3, r2, #21
 800b3ba:	d531      	bpl.n	800b420 <__ssputs_r+0xa0>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	f7fe f845 	bl	800944c <_malloc_r>
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	b950      	cbnz	r0, 800b3dc <__ssputs_r+0x5c>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	f8ca 3000 	str.w	r3, [sl]
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3d6:	81a3      	strh	r3, [r4, #12]
 800b3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3dc:	464a      	mov	r2, r9
 800b3de:	6921      	ldr	r1, [r4, #16]
 800b3e0:	f7fd ffa2 	bl	8009328 <memcpy>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ee:	81a3      	strh	r3, [r4, #12]
 800b3f0:	6126      	str	r6, [r4, #16]
 800b3f2:	444e      	add	r6, r9
 800b3f4:	6026      	str	r6, [r4, #0]
 800b3f6:	463e      	mov	r6, r7
 800b3f8:	6165      	str	r5, [r4, #20]
 800b3fa:	eba5 0509 	sub.w	r5, r5, r9
 800b3fe:	60a5      	str	r5, [r4, #8]
 800b400:	42be      	cmp	r6, r7
 800b402:	d900      	bls.n	800b406 <__ssputs_r+0x86>
 800b404:	463e      	mov	r6, r7
 800b406:	4632      	mov	r2, r6
 800b408:	4641      	mov	r1, r8
 800b40a:	6820      	ldr	r0, [r4, #0]
 800b40c:	f001 f960 	bl	800c6d0 <memmove>
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	2000      	movs	r0, #0
 800b414:	1b9b      	subs	r3, r3, r6
 800b416:	60a3      	str	r3, [r4, #8]
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	4433      	add	r3, r6
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	e7db      	b.n	800b3d8 <__ssputs_r+0x58>
 800b420:	462a      	mov	r2, r5
 800b422:	f001 f96f 	bl	800c704 <_realloc_r>
 800b426:	4606      	mov	r6, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d1e1      	bne.n	800b3f0 <__ssputs_r+0x70>
 800b42c:	4650      	mov	r0, sl
 800b42e:	6921      	ldr	r1, [r4, #16]
 800b430:	f7fd ffa4 	bl	800937c <_free_r>
 800b434:	e7c7      	b.n	800b3c6 <__ssputs_r+0x46>
	...

0800b438 <_svfiprintf_r>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	4698      	mov	r8, r3
 800b43e:	898b      	ldrh	r3, [r1, #12]
 800b440:	4607      	mov	r7, r0
 800b442:	061b      	lsls	r3, r3, #24
 800b444:	460d      	mov	r5, r1
 800b446:	4614      	mov	r4, r2
 800b448:	b09d      	sub	sp, #116	; 0x74
 800b44a:	d50e      	bpl.n	800b46a <_svfiprintf_r+0x32>
 800b44c:	690b      	ldr	r3, [r1, #16]
 800b44e:	b963      	cbnz	r3, 800b46a <_svfiprintf_r+0x32>
 800b450:	2140      	movs	r1, #64	; 0x40
 800b452:	f7fd fffb 	bl	800944c <_malloc_r>
 800b456:	6028      	str	r0, [r5, #0]
 800b458:	6128      	str	r0, [r5, #16]
 800b45a:	b920      	cbnz	r0, 800b466 <_svfiprintf_r+0x2e>
 800b45c:	230c      	movs	r3, #12
 800b45e:	603b      	str	r3, [r7, #0]
 800b460:	f04f 30ff 	mov.w	r0, #4294967295
 800b464:	e0d1      	b.n	800b60a <_svfiprintf_r+0x1d2>
 800b466:	2340      	movs	r3, #64	; 0x40
 800b468:	616b      	str	r3, [r5, #20]
 800b46a:	2300      	movs	r3, #0
 800b46c:	9309      	str	r3, [sp, #36]	; 0x24
 800b46e:	2320      	movs	r3, #32
 800b470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b474:	2330      	movs	r3, #48	; 0x30
 800b476:	f04f 0901 	mov.w	r9, #1
 800b47a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b47e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b624 <_svfiprintf_r+0x1ec>
 800b482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b486:	4623      	mov	r3, r4
 800b488:	469a      	mov	sl, r3
 800b48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b48e:	b10a      	cbz	r2, 800b494 <_svfiprintf_r+0x5c>
 800b490:	2a25      	cmp	r2, #37	; 0x25
 800b492:	d1f9      	bne.n	800b488 <_svfiprintf_r+0x50>
 800b494:	ebba 0b04 	subs.w	fp, sl, r4
 800b498:	d00b      	beq.n	800b4b2 <_svfiprintf_r+0x7a>
 800b49a:	465b      	mov	r3, fp
 800b49c:	4622      	mov	r2, r4
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ff6d 	bl	800b380 <__ssputs_r>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f000 80aa 	beq.w	800b600 <_svfiprintf_r+0x1c8>
 800b4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4ae:	445a      	add	r2, fp
 800b4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	f000 80a2 	beq.w	800b600 <_svfiprintf_r+0x1c8>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f04f 32ff 	mov.w	r2, #4294967295
 800b4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4c6:	f10a 0a01 	add.w	sl, sl, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	9307      	str	r3, [sp, #28]
 800b4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4d4:	4654      	mov	r4, sl
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4dc:	4851      	ldr	r0, [pc, #324]	; (800b624 <_svfiprintf_r+0x1ec>)
 800b4de:	f001 f8e9 	bl	800c6b4 <memchr>
 800b4e2:	9a04      	ldr	r2, [sp, #16]
 800b4e4:	b9d8      	cbnz	r0, 800b51e <_svfiprintf_r+0xe6>
 800b4e6:	06d0      	lsls	r0, r2, #27
 800b4e8:	bf44      	itt	mi
 800b4ea:	2320      	movmi	r3, #32
 800b4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4f0:	0711      	lsls	r1, r2, #28
 800b4f2:	bf44      	itt	mi
 800b4f4:	232b      	movmi	r3, #43	; 0x2b
 800b4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b500:	d015      	beq.n	800b52e <_svfiprintf_r+0xf6>
 800b502:	4654      	mov	r4, sl
 800b504:	2000      	movs	r0, #0
 800b506:	f04f 0c0a 	mov.w	ip, #10
 800b50a:	9a07      	ldr	r2, [sp, #28]
 800b50c:	4621      	mov	r1, r4
 800b50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b512:	3b30      	subs	r3, #48	; 0x30
 800b514:	2b09      	cmp	r3, #9
 800b516:	d94e      	bls.n	800b5b6 <_svfiprintf_r+0x17e>
 800b518:	b1b0      	cbz	r0, 800b548 <_svfiprintf_r+0x110>
 800b51a:	9207      	str	r2, [sp, #28]
 800b51c:	e014      	b.n	800b548 <_svfiprintf_r+0x110>
 800b51e:	eba0 0308 	sub.w	r3, r0, r8
 800b522:	fa09 f303 	lsl.w	r3, r9, r3
 800b526:	4313      	orrs	r3, r2
 800b528:	46a2      	mov	sl, r4
 800b52a:	9304      	str	r3, [sp, #16]
 800b52c:	e7d2      	b.n	800b4d4 <_svfiprintf_r+0x9c>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	1d19      	adds	r1, r3, #4
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	9103      	str	r1, [sp, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	bfbb      	ittet	lt
 800b53a:	425b      	neglt	r3, r3
 800b53c:	f042 0202 	orrlt.w	r2, r2, #2
 800b540:	9307      	strge	r3, [sp, #28]
 800b542:	9307      	strlt	r3, [sp, #28]
 800b544:	bfb8      	it	lt
 800b546:	9204      	strlt	r2, [sp, #16]
 800b548:	7823      	ldrb	r3, [r4, #0]
 800b54a:	2b2e      	cmp	r3, #46	; 0x2e
 800b54c:	d10c      	bne.n	800b568 <_svfiprintf_r+0x130>
 800b54e:	7863      	ldrb	r3, [r4, #1]
 800b550:	2b2a      	cmp	r3, #42	; 0x2a
 800b552:	d135      	bne.n	800b5c0 <_svfiprintf_r+0x188>
 800b554:	9b03      	ldr	r3, [sp, #12]
 800b556:	3402      	adds	r4, #2
 800b558:	1d1a      	adds	r2, r3, #4
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	9203      	str	r2, [sp, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	bfb8      	it	lt
 800b562:	f04f 33ff 	movlt.w	r3, #4294967295
 800b566:	9305      	str	r3, [sp, #20]
 800b568:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b628 <_svfiprintf_r+0x1f0>
 800b56c:	2203      	movs	r2, #3
 800b56e:	4650      	mov	r0, sl
 800b570:	7821      	ldrb	r1, [r4, #0]
 800b572:	f001 f89f 	bl	800c6b4 <memchr>
 800b576:	b140      	cbz	r0, 800b58a <_svfiprintf_r+0x152>
 800b578:	2340      	movs	r3, #64	; 0x40
 800b57a:	eba0 000a 	sub.w	r0, r0, sl
 800b57e:	fa03 f000 	lsl.w	r0, r3, r0
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	3401      	adds	r4, #1
 800b586:	4303      	orrs	r3, r0
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b58e:	2206      	movs	r2, #6
 800b590:	4826      	ldr	r0, [pc, #152]	; (800b62c <_svfiprintf_r+0x1f4>)
 800b592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b596:	f001 f88d 	bl	800c6b4 <memchr>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d038      	beq.n	800b610 <_svfiprintf_r+0x1d8>
 800b59e:	4b24      	ldr	r3, [pc, #144]	; (800b630 <_svfiprintf_r+0x1f8>)
 800b5a0:	bb1b      	cbnz	r3, 800b5ea <_svfiprintf_r+0x1b2>
 800b5a2:	9b03      	ldr	r3, [sp, #12]
 800b5a4:	3307      	adds	r3, #7
 800b5a6:	f023 0307 	bic.w	r3, r3, #7
 800b5aa:	3308      	adds	r3, #8
 800b5ac:	9303      	str	r3, [sp, #12]
 800b5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b0:	4433      	add	r3, r6
 800b5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b4:	e767      	b.n	800b486 <_svfiprintf_r+0x4e>
 800b5b6:	460c      	mov	r4, r1
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5be:	e7a5      	b.n	800b50c <_svfiprintf_r+0xd4>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f04f 0c0a 	mov.w	ip, #10
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	3401      	adds	r4, #1
 800b5ca:	9305      	str	r3, [sp, #20]
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5d2:	3a30      	subs	r2, #48	; 0x30
 800b5d4:	2a09      	cmp	r2, #9
 800b5d6:	d903      	bls.n	800b5e0 <_svfiprintf_r+0x1a8>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d0c5      	beq.n	800b568 <_svfiprintf_r+0x130>
 800b5dc:	9105      	str	r1, [sp, #20]
 800b5de:	e7c3      	b.n	800b568 <_svfiprintf_r+0x130>
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5e8:	e7f0      	b.n	800b5cc <_svfiprintf_r+0x194>
 800b5ea:	ab03      	add	r3, sp, #12
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	4b10      	ldr	r3, [pc, #64]	; (800b634 <_svfiprintf_r+0x1fc>)
 800b5f4:	a904      	add	r1, sp, #16
 800b5f6:	f3af 8000 	nop.w
 800b5fa:	1c42      	adds	r2, r0, #1
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	d1d6      	bne.n	800b5ae <_svfiprintf_r+0x176>
 800b600:	89ab      	ldrh	r3, [r5, #12]
 800b602:	065b      	lsls	r3, r3, #25
 800b604:	f53f af2c 	bmi.w	800b460 <_svfiprintf_r+0x28>
 800b608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b60a:	b01d      	add	sp, #116	; 0x74
 800b60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b610:	ab03      	add	r3, sp, #12
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	462a      	mov	r2, r5
 800b616:	4638      	mov	r0, r7
 800b618:	4b06      	ldr	r3, [pc, #24]	; (800b634 <_svfiprintf_r+0x1fc>)
 800b61a:	a904      	add	r1, sp, #16
 800b61c:	f000 fa50 	bl	800bac0 <_printf_i>
 800b620:	e7eb      	b.n	800b5fa <_svfiprintf_r+0x1c2>
 800b622:	bf00      	nop
 800b624:	0800de6c 	.word	0x0800de6c
 800b628:	0800de72 	.word	0x0800de72
 800b62c:	0800de76 	.word	0x0800de76
 800b630:	00000000 	.word	0x00000000
 800b634:	0800b381 	.word	0x0800b381

0800b638 <_sungetc_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	1c4b      	adds	r3, r1, #1
 800b63c:	4614      	mov	r4, r2
 800b63e:	d103      	bne.n	800b648 <_sungetc_r+0x10>
 800b640:	f04f 35ff 	mov.w	r5, #4294967295
 800b644:	4628      	mov	r0, r5
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	8993      	ldrh	r3, [r2, #12]
 800b64a:	b2cd      	uxtb	r5, r1
 800b64c:	f023 0320 	bic.w	r3, r3, #32
 800b650:	8193      	strh	r3, [r2, #12]
 800b652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b654:	6852      	ldr	r2, [r2, #4]
 800b656:	b18b      	cbz	r3, 800b67c <_sungetc_r+0x44>
 800b658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b65a:	4293      	cmp	r3, r2
 800b65c:	dd08      	ble.n	800b670 <_sungetc_r+0x38>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	1e5a      	subs	r2, r3, #1
 800b662:	6022      	str	r2, [r4, #0]
 800b664:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b668:	6863      	ldr	r3, [r4, #4]
 800b66a:	3301      	adds	r3, #1
 800b66c:	6063      	str	r3, [r4, #4]
 800b66e:	e7e9      	b.n	800b644 <_sungetc_r+0xc>
 800b670:	4621      	mov	r1, r4
 800b672:	f000 fdf3 	bl	800c25c <__submore>
 800b676:	2800      	cmp	r0, #0
 800b678:	d0f1      	beq.n	800b65e <_sungetc_r+0x26>
 800b67a:	e7e1      	b.n	800b640 <_sungetc_r+0x8>
 800b67c:	6921      	ldr	r1, [r4, #16]
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	b151      	cbz	r1, 800b698 <_sungetc_r+0x60>
 800b682:	4299      	cmp	r1, r3
 800b684:	d208      	bcs.n	800b698 <_sungetc_r+0x60>
 800b686:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b68a:	42a9      	cmp	r1, r5
 800b68c:	d104      	bne.n	800b698 <_sungetc_r+0x60>
 800b68e:	3b01      	subs	r3, #1
 800b690:	3201      	adds	r2, #1
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	6062      	str	r2, [r4, #4]
 800b696:	e7d5      	b.n	800b644 <_sungetc_r+0xc>
 800b698:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800b6a6:	4623      	mov	r3, r4
 800b6a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	e7dc      	b.n	800b66c <_sungetc_r+0x34>

0800b6b2 <__ssrefill_r>:
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	460c      	mov	r4, r1
 800b6b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b6b8:	b169      	cbz	r1, 800b6d6 <__ssrefill_r+0x24>
 800b6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6be:	4299      	cmp	r1, r3
 800b6c0:	d001      	beq.n	800b6c6 <__ssrefill_r+0x14>
 800b6c2:	f7fd fe5b 	bl	800937c <_free_r>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6ca:	6360      	str	r0, [r4, #52]	; 0x34
 800b6cc:	6063      	str	r3, [r4, #4]
 800b6ce:	b113      	cbz	r3, 800b6d6 <__ssrefill_r+0x24>
 800b6d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b6d2:	6023      	str	r3, [r4, #0]
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	6923      	ldr	r3, [r4, #16]
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6063      	str	r3, [r4, #4]
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	f043 0320 	orr.w	r3, r3, #32
 800b6e8:	81a3      	strh	r3, [r4, #12]
 800b6ea:	e7f3      	b.n	800b6d4 <__ssrefill_r+0x22>

0800b6ec <__ssvfiscanf_r>:
 800b6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4606      	mov	r6, r0
 800b6f6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b6fa:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b6fe:	49a7      	ldr	r1, [pc, #668]	; (800b99c <__ssvfiscanf_r+0x2b0>)
 800b700:	f10d 0804 	add.w	r8, sp, #4
 800b704:	91a0      	str	r1, [sp, #640]	; 0x280
 800b706:	49a6      	ldr	r1, [pc, #664]	; (800b9a0 <__ssvfiscanf_r+0x2b4>)
 800b708:	4fa6      	ldr	r7, [pc, #664]	; (800b9a4 <__ssvfiscanf_r+0x2b8>)
 800b70a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b9a8 <__ssvfiscanf_r+0x2bc>
 800b70e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b712:	91a1      	str	r1, [sp, #644]	; 0x284
 800b714:	9300      	str	r3, [sp, #0]
 800b716:	7813      	ldrb	r3, [r2, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f000 815c 	beq.w	800b9d6 <__ssvfiscanf_r+0x2ea>
 800b71e:	5dd9      	ldrb	r1, [r3, r7]
 800b720:	1c55      	adds	r5, r2, #1
 800b722:	f011 0108 	ands.w	r1, r1, #8
 800b726:	d019      	beq.n	800b75c <__ssvfiscanf_r+0x70>
 800b728:	6863      	ldr	r3, [r4, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	dd0f      	ble.n	800b74e <__ssvfiscanf_r+0x62>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	5cba      	ldrb	r2, [r7, r2]
 800b734:	0712      	lsls	r2, r2, #28
 800b736:	d401      	bmi.n	800b73c <__ssvfiscanf_r+0x50>
 800b738:	462a      	mov	r2, r5
 800b73a:	e7ec      	b.n	800b716 <__ssvfiscanf_r+0x2a>
 800b73c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b73e:	3301      	adds	r3, #1
 800b740:	3201      	adds	r2, #1
 800b742:	9245      	str	r2, [sp, #276]	; 0x114
 800b744:	6862      	ldr	r2, [r4, #4]
 800b746:	6023      	str	r3, [r4, #0]
 800b748:	3a01      	subs	r2, #1
 800b74a:	6062      	str	r2, [r4, #4]
 800b74c:	e7ec      	b.n	800b728 <__ssvfiscanf_r+0x3c>
 800b74e:	4621      	mov	r1, r4
 800b750:	4630      	mov	r0, r6
 800b752:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b754:	4798      	blx	r3
 800b756:	2800      	cmp	r0, #0
 800b758:	d0e9      	beq.n	800b72e <__ssvfiscanf_r+0x42>
 800b75a:	e7ed      	b.n	800b738 <__ssvfiscanf_r+0x4c>
 800b75c:	2b25      	cmp	r3, #37	; 0x25
 800b75e:	d012      	beq.n	800b786 <__ssvfiscanf_r+0x9a>
 800b760:	469a      	mov	sl, r3
 800b762:	6863      	ldr	r3, [r4, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	f340 8094 	ble.w	800b892 <__ssvfiscanf_r+0x1a6>
 800b76a:	6822      	ldr	r2, [r4, #0]
 800b76c:	7813      	ldrb	r3, [r2, #0]
 800b76e:	4553      	cmp	r3, sl
 800b770:	f040 8131 	bne.w	800b9d6 <__ssvfiscanf_r+0x2ea>
 800b774:	6863      	ldr	r3, [r4, #4]
 800b776:	3201      	adds	r2, #1
 800b778:	3b01      	subs	r3, #1
 800b77a:	6063      	str	r3, [r4, #4]
 800b77c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b77e:	6022      	str	r2, [r4, #0]
 800b780:	3301      	adds	r3, #1
 800b782:	9345      	str	r3, [sp, #276]	; 0x114
 800b784:	e7d8      	b.n	800b738 <__ssvfiscanf_r+0x4c>
 800b786:	9141      	str	r1, [sp, #260]	; 0x104
 800b788:	9143      	str	r1, [sp, #268]	; 0x10c
 800b78a:	7853      	ldrb	r3, [r2, #1]
 800b78c:	2b2a      	cmp	r3, #42	; 0x2a
 800b78e:	bf04      	itt	eq
 800b790:	2310      	moveq	r3, #16
 800b792:	1c95      	addeq	r5, r2, #2
 800b794:	f04f 020a 	mov.w	r2, #10
 800b798:	bf08      	it	eq
 800b79a:	9341      	streq	r3, [sp, #260]	; 0x104
 800b79c:	46aa      	mov	sl, r5
 800b79e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b7a2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b7a6:	2b09      	cmp	r3, #9
 800b7a8:	d91d      	bls.n	800b7e6 <__ssvfiscanf_r+0xfa>
 800b7aa:	2203      	movs	r2, #3
 800b7ac:	487e      	ldr	r0, [pc, #504]	; (800b9a8 <__ssvfiscanf_r+0x2bc>)
 800b7ae:	f000 ff81 	bl	800c6b4 <memchr>
 800b7b2:	b140      	cbz	r0, 800b7c6 <__ssvfiscanf_r+0xda>
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	4655      	mov	r5, sl
 800b7b8:	eba0 0009 	sub.w	r0, r0, r9
 800b7bc:	fa03 f000 	lsl.w	r0, r3, r0
 800b7c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7c2:	4318      	orrs	r0, r3
 800b7c4:	9041      	str	r0, [sp, #260]	; 0x104
 800b7c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7ca:	2b78      	cmp	r3, #120	; 0x78
 800b7cc:	d806      	bhi.n	800b7dc <__ssvfiscanf_r+0xf0>
 800b7ce:	2b57      	cmp	r3, #87	; 0x57
 800b7d0:	d810      	bhi.n	800b7f4 <__ssvfiscanf_r+0x108>
 800b7d2:	2b25      	cmp	r3, #37	; 0x25
 800b7d4:	d0c4      	beq.n	800b760 <__ssvfiscanf_r+0x74>
 800b7d6:	d857      	bhi.n	800b888 <__ssvfiscanf_r+0x19c>
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d065      	beq.n	800b8a8 <__ssvfiscanf_r+0x1bc>
 800b7dc:	2303      	movs	r3, #3
 800b7de:	9347      	str	r3, [sp, #284]	; 0x11c
 800b7e0:	230a      	movs	r3, #10
 800b7e2:	9342      	str	r3, [sp, #264]	; 0x108
 800b7e4:	e072      	b.n	800b8cc <__ssvfiscanf_r+0x1e0>
 800b7e6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b7e8:	4655      	mov	r5, sl
 800b7ea:	fb02 1103 	mla	r1, r2, r3, r1
 800b7ee:	3930      	subs	r1, #48	; 0x30
 800b7f0:	9143      	str	r1, [sp, #268]	; 0x10c
 800b7f2:	e7d3      	b.n	800b79c <__ssvfiscanf_r+0xb0>
 800b7f4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b7f8:	2a20      	cmp	r2, #32
 800b7fa:	d8ef      	bhi.n	800b7dc <__ssvfiscanf_r+0xf0>
 800b7fc:	a101      	add	r1, pc, #4	; (adr r1, 800b804 <__ssvfiscanf_r+0x118>)
 800b7fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b802:	bf00      	nop
 800b804:	0800b8b7 	.word	0x0800b8b7
 800b808:	0800b7dd 	.word	0x0800b7dd
 800b80c:	0800b7dd 	.word	0x0800b7dd
 800b810:	0800b915 	.word	0x0800b915
 800b814:	0800b7dd 	.word	0x0800b7dd
 800b818:	0800b7dd 	.word	0x0800b7dd
 800b81c:	0800b7dd 	.word	0x0800b7dd
 800b820:	0800b7dd 	.word	0x0800b7dd
 800b824:	0800b7dd 	.word	0x0800b7dd
 800b828:	0800b7dd 	.word	0x0800b7dd
 800b82c:	0800b7dd 	.word	0x0800b7dd
 800b830:	0800b92b 	.word	0x0800b92b
 800b834:	0800b901 	.word	0x0800b901
 800b838:	0800b88f 	.word	0x0800b88f
 800b83c:	0800b88f 	.word	0x0800b88f
 800b840:	0800b88f 	.word	0x0800b88f
 800b844:	0800b7dd 	.word	0x0800b7dd
 800b848:	0800b905 	.word	0x0800b905
 800b84c:	0800b7dd 	.word	0x0800b7dd
 800b850:	0800b7dd 	.word	0x0800b7dd
 800b854:	0800b7dd 	.word	0x0800b7dd
 800b858:	0800b7dd 	.word	0x0800b7dd
 800b85c:	0800b93b 	.word	0x0800b93b
 800b860:	0800b90d 	.word	0x0800b90d
 800b864:	0800b8af 	.word	0x0800b8af
 800b868:	0800b7dd 	.word	0x0800b7dd
 800b86c:	0800b7dd 	.word	0x0800b7dd
 800b870:	0800b937 	.word	0x0800b937
 800b874:	0800b7dd 	.word	0x0800b7dd
 800b878:	0800b901 	.word	0x0800b901
 800b87c:	0800b7dd 	.word	0x0800b7dd
 800b880:	0800b7dd 	.word	0x0800b7dd
 800b884:	0800b8b7 	.word	0x0800b8b7
 800b888:	3b45      	subs	r3, #69	; 0x45
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d8a6      	bhi.n	800b7dc <__ssvfiscanf_r+0xf0>
 800b88e:	2305      	movs	r3, #5
 800b890:	e01b      	b.n	800b8ca <__ssvfiscanf_r+0x1de>
 800b892:	4621      	mov	r1, r4
 800b894:	4630      	mov	r0, r6
 800b896:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b898:	4798      	blx	r3
 800b89a:	2800      	cmp	r0, #0
 800b89c:	f43f af65 	beq.w	800b76a <__ssvfiscanf_r+0x7e>
 800b8a0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	f040 808d 	bne.w	800b9c2 <__ssvfiscanf_r+0x2d6>
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	e08f      	b.n	800b9ce <__ssvfiscanf_r+0x2e2>
 800b8ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8b0:	f042 0220 	orr.w	r2, r2, #32
 800b8b4:	9241      	str	r2, [sp, #260]	; 0x104
 800b8b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b8b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8bc:	9241      	str	r2, [sp, #260]	; 0x104
 800b8be:	2210      	movs	r2, #16
 800b8c0:	2b6f      	cmp	r3, #111	; 0x6f
 800b8c2:	bf34      	ite	cc
 800b8c4:	2303      	movcc	r3, #3
 800b8c6:	2304      	movcs	r3, #4
 800b8c8:	9242      	str	r2, [sp, #264]	; 0x108
 800b8ca:	9347      	str	r3, [sp, #284]	; 0x11c
 800b8cc:	6863      	ldr	r3, [r4, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd42      	ble.n	800b958 <__ssvfiscanf_r+0x26c>
 800b8d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b8d4:	0659      	lsls	r1, r3, #25
 800b8d6:	d404      	bmi.n	800b8e2 <__ssvfiscanf_r+0x1f6>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	781a      	ldrb	r2, [r3, #0]
 800b8dc:	5cba      	ldrb	r2, [r7, r2]
 800b8de:	0712      	lsls	r2, r2, #28
 800b8e0:	d441      	bmi.n	800b966 <__ssvfiscanf_r+0x27a>
 800b8e2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b8e4:	2b02      	cmp	r3, #2
 800b8e6:	dc50      	bgt.n	800b98a <__ssvfiscanf_r+0x29e>
 800b8e8:	466b      	mov	r3, sp
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	4630      	mov	r0, r6
 800b8ee:	a941      	add	r1, sp, #260	; 0x104
 800b8f0:	f000 fa0c 	bl	800bd0c <_scanf_chars>
 800b8f4:	2801      	cmp	r0, #1
 800b8f6:	d06e      	beq.n	800b9d6 <__ssvfiscanf_r+0x2ea>
 800b8f8:	2802      	cmp	r0, #2
 800b8fa:	f47f af1d 	bne.w	800b738 <__ssvfiscanf_r+0x4c>
 800b8fe:	e7cf      	b.n	800b8a0 <__ssvfiscanf_r+0x1b4>
 800b900:	220a      	movs	r2, #10
 800b902:	e7dd      	b.n	800b8c0 <__ssvfiscanf_r+0x1d4>
 800b904:	2300      	movs	r3, #0
 800b906:	9342      	str	r3, [sp, #264]	; 0x108
 800b908:	2303      	movs	r3, #3
 800b90a:	e7de      	b.n	800b8ca <__ssvfiscanf_r+0x1de>
 800b90c:	2308      	movs	r3, #8
 800b90e:	9342      	str	r3, [sp, #264]	; 0x108
 800b910:	2304      	movs	r3, #4
 800b912:	e7da      	b.n	800b8ca <__ssvfiscanf_r+0x1de>
 800b914:	4629      	mov	r1, r5
 800b916:	4640      	mov	r0, r8
 800b918:	f000 fb62 	bl	800bfe0 <__sccl>
 800b91c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b91e:	4605      	mov	r5, r0
 800b920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b924:	9341      	str	r3, [sp, #260]	; 0x104
 800b926:	2301      	movs	r3, #1
 800b928:	e7cf      	b.n	800b8ca <__ssvfiscanf_r+0x1de>
 800b92a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b930:	9341      	str	r3, [sp, #260]	; 0x104
 800b932:	2300      	movs	r3, #0
 800b934:	e7c9      	b.n	800b8ca <__ssvfiscanf_r+0x1de>
 800b936:	2302      	movs	r3, #2
 800b938:	e7c7      	b.n	800b8ca <__ssvfiscanf_r+0x1de>
 800b93a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b93c:	06c3      	lsls	r3, r0, #27
 800b93e:	f53f aefb 	bmi.w	800b738 <__ssvfiscanf_r+0x4c>
 800b942:	9b00      	ldr	r3, [sp, #0]
 800b944:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b946:	1d19      	adds	r1, r3, #4
 800b948:	9100      	str	r1, [sp, #0]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f010 0f01 	tst.w	r0, #1
 800b950:	bf14      	ite	ne
 800b952:	801a      	strhne	r2, [r3, #0]
 800b954:	601a      	streq	r2, [r3, #0]
 800b956:	e6ef      	b.n	800b738 <__ssvfiscanf_r+0x4c>
 800b958:	4621      	mov	r1, r4
 800b95a:	4630      	mov	r0, r6
 800b95c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b95e:	4798      	blx	r3
 800b960:	2800      	cmp	r0, #0
 800b962:	d0b6      	beq.n	800b8d2 <__ssvfiscanf_r+0x1e6>
 800b964:	e79c      	b.n	800b8a0 <__ssvfiscanf_r+0x1b4>
 800b966:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b968:	3201      	adds	r2, #1
 800b96a:	9245      	str	r2, [sp, #276]	; 0x114
 800b96c:	6862      	ldr	r2, [r4, #4]
 800b96e:	3a01      	subs	r2, #1
 800b970:	2a00      	cmp	r2, #0
 800b972:	6062      	str	r2, [r4, #4]
 800b974:	dd02      	ble.n	800b97c <__ssvfiscanf_r+0x290>
 800b976:	3301      	adds	r3, #1
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	e7ad      	b.n	800b8d8 <__ssvfiscanf_r+0x1ec>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4630      	mov	r0, r6
 800b980:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b982:	4798      	blx	r3
 800b984:	2800      	cmp	r0, #0
 800b986:	d0a7      	beq.n	800b8d8 <__ssvfiscanf_r+0x1ec>
 800b988:	e78a      	b.n	800b8a0 <__ssvfiscanf_r+0x1b4>
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	dc0e      	bgt.n	800b9ac <__ssvfiscanf_r+0x2c0>
 800b98e:	466b      	mov	r3, sp
 800b990:	4622      	mov	r2, r4
 800b992:	4630      	mov	r0, r6
 800b994:	a941      	add	r1, sp, #260	; 0x104
 800b996:	f000 fa13 	bl	800bdc0 <_scanf_i>
 800b99a:	e7ab      	b.n	800b8f4 <__ssvfiscanf_r+0x208>
 800b99c:	0800b639 	.word	0x0800b639
 800b9a0:	0800b6b3 	.word	0x0800b6b3
 800b9a4:	0800def7 	.word	0x0800def7
 800b9a8:	0800de72 	.word	0x0800de72
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	; (800b9dc <__ssvfiscanf_r+0x2f0>)
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f43f aec2 	beq.w	800b738 <__ssvfiscanf_r+0x4c>
 800b9b4:	466b      	mov	r3, sp
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	a941      	add	r1, sp, #260	; 0x104
 800b9bc:	f3af 8000 	nop.w
 800b9c0:	e798      	b.n	800b8f4 <__ssvfiscanf_r+0x208>
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b9c8:	bf18      	it	ne
 800b9ca:	f04f 30ff 	movne.w	r0, #4294967295
 800b9ce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b9d8:	e7f9      	b.n	800b9ce <__ssvfiscanf_r+0x2e2>
 800b9da:	bf00      	nop
 800b9dc:	00000000 	.word	0x00000000

0800b9e0 <_printf_common>:
 800b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e4:	4616      	mov	r6, r2
 800b9e6:	4699      	mov	r9, r3
 800b9e8:	688a      	ldr	r2, [r1, #8]
 800b9ea:	690b      	ldr	r3, [r1, #16]
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	bfb8      	it	lt
 800b9f2:	4613      	movlt	r3, r2
 800b9f4:	6033      	str	r3, [r6, #0]
 800b9f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b9fa:	460c      	mov	r4, r1
 800b9fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba00:	b10a      	cbz	r2, 800ba06 <_printf_common+0x26>
 800ba02:	3301      	adds	r3, #1
 800ba04:	6033      	str	r3, [r6, #0]
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	0699      	lsls	r1, r3, #26
 800ba0a:	bf42      	ittt	mi
 800ba0c:	6833      	ldrmi	r3, [r6, #0]
 800ba0e:	3302      	addmi	r3, #2
 800ba10:	6033      	strmi	r3, [r6, #0]
 800ba12:	6825      	ldr	r5, [r4, #0]
 800ba14:	f015 0506 	ands.w	r5, r5, #6
 800ba18:	d106      	bne.n	800ba28 <_printf_common+0x48>
 800ba1a:	f104 0a19 	add.w	sl, r4, #25
 800ba1e:	68e3      	ldr	r3, [r4, #12]
 800ba20:	6832      	ldr	r2, [r6, #0]
 800ba22:	1a9b      	subs	r3, r3, r2
 800ba24:	42ab      	cmp	r3, r5
 800ba26:	dc28      	bgt.n	800ba7a <_printf_common+0x9a>
 800ba28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba2c:	1e13      	subs	r3, r2, #0
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	bf18      	it	ne
 800ba32:	2301      	movne	r3, #1
 800ba34:	0692      	lsls	r2, r2, #26
 800ba36:	d42d      	bmi.n	800ba94 <_printf_common+0xb4>
 800ba38:	4649      	mov	r1, r9
 800ba3a:	4638      	mov	r0, r7
 800ba3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba40:	47c0      	blx	r8
 800ba42:	3001      	adds	r0, #1
 800ba44:	d020      	beq.n	800ba88 <_printf_common+0xa8>
 800ba46:	6823      	ldr	r3, [r4, #0]
 800ba48:	68e5      	ldr	r5, [r4, #12]
 800ba4a:	f003 0306 	and.w	r3, r3, #6
 800ba4e:	2b04      	cmp	r3, #4
 800ba50:	bf18      	it	ne
 800ba52:	2500      	movne	r5, #0
 800ba54:	6832      	ldr	r2, [r6, #0]
 800ba56:	f04f 0600 	mov.w	r6, #0
 800ba5a:	68a3      	ldr	r3, [r4, #8]
 800ba5c:	bf08      	it	eq
 800ba5e:	1aad      	subeq	r5, r5, r2
 800ba60:	6922      	ldr	r2, [r4, #16]
 800ba62:	bf08      	it	eq
 800ba64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	bfc4      	itt	gt
 800ba6c:	1a9b      	subgt	r3, r3, r2
 800ba6e:	18ed      	addgt	r5, r5, r3
 800ba70:	341a      	adds	r4, #26
 800ba72:	42b5      	cmp	r5, r6
 800ba74:	d11a      	bne.n	800baac <_printf_common+0xcc>
 800ba76:	2000      	movs	r0, #0
 800ba78:	e008      	b.n	800ba8c <_printf_common+0xac>
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	4652      	mov	r2, sl
 800ba7e:	4649      	mov	r1, r9
 800ba80:	4638      	mov	r0, r7
 800ba82:	47c0      	blx	r8
 800ba84:	3001      	adds	r0, #1
 800ba86:	d103      	bne.n	800ba90 <_printf_common+0xb0>
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba90:	3501      	adds	r5, #1
 800ba92:	e7c4      	b.n	800ba1e <_printf_common+0x3e>
 800ba94:	2030      	movs	r0, #48	; 0x30
 800ba96:	18e1      	adds	r1, r4, r3
 800ba98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800baa2:	4422      	add	r2, r4
 800baa4:	3302      	adds	r3, #2
 800baa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800baaa:	e7c5      	b.n	800ba38 <_printf_common+0x58>
 800baac:	2301      	movs	r3, #1
 800baae:	4622      	mov	r2, r4
 800bab0:	4649      	mov	r1, r9
 800bab2:	4638      	mov	r0, r7
 800bab4:	47c0      	blx	r8
 800bab6:	3001      	adds	r0, #1
 800bab8:	d0e6      	beq.n	800ba88 <_printf_common+0xa8>
 800baba:	3601      	adds	r6, #1
 800babc:	e7d9      	b.n	800ba72 <_printf_common+0x92>
	...

0800bac0 <_printf_i>:
 800bac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bac4:	7e0f      	ldrb	r7, [r1, #24]
 800bac6:	4691      	mov	r9, r2
 800bac8:	2f78      	cmp	r7, #120	; 0x78
 800baca:	4680      	mov	r8, r0
 800bacc:	460c      	mov	r4, r1
 800bace:	469a      	mov	sl, r3
 800bad0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bad6:	d807      	bhi.n	800bae8 <_printf_i+0x28>
 800bad8:	2f62      	cmp	r7, #98	; 0x62
 800bada:	d80a      	bhi.n	800baf2 <_printf_i+0x32>
 800badc:	2f00      	cmp	r7, #0
 800bade:	f000 80d9 	beq.w	800bc94 <_printf_i+0x1d4>
 800bae2:	2f58      	cmp	r7, #88	; 0x58
 800bae4:	f000 80a4 	beq.w	800bc30 <_printf_i+0x170>
 800bae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800baf0:	e03a      	b.n	800bb68 <_printf_i+0xa8>
 800baf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800baf6:	2b15      	cmp	r3, #21
 800baf8:	d8f6      	bhi.n	800bae8 <_printf_i+0x28>
 800bafa:	a101      	add	r1, pc, #4	; (adr r1, 800bb00 <_printf_i+0x40>)
 800bafc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb00:	0800bb59 	.word	0x0800bb59
 800bb04:	0800bb6d 	.word	0x0800bb6d
 800bb08:	0800bae9 	.word	0x0800bae9
 800bb0c:	0800bae9 	.word	0x0800bae9
 800bb10:	0800bae9 	.word	0x0800bae9
 800bb14:	0800bae9 	.word	0x0800bae9
 800bb18:	0800bb6d 	.word	0x0800bb6d
 800bb1c:	0800bae9 	.word	0x0800bae9
 800bb20:	0800bae9 	.word	0x0800bae9
 800bb24:	0800bae9 	.word	0x0800bae9
 800bb28:	0800bae9 	.word	0x0800bae9
 800bb2c:	0800bc7b 	.word	0x0800bc7b
 800bb30:	0800bb9d 	.word	0x0800bb9d
 800bb34:	0800bc5d 	.word	0x0800bc5d
 800bb38:	0800bae9 	.word	0x0800bae9
 800bb3c:	0800bae9 	.word	0x0800bae9
 800bb40:	0800bc9d 	.word	0x0800bc9d
 800bb44:	0800bae9 	.word	0x0800bae9
 800bb48:	0800bb9d 	.word	0x0800bb9d
 800bb4c:	0800bae9 	.word	0x0800bae9
 800bb50:	0800bae9 	.word	0x0800bae9
 800bb54:	0800bc65 	.word	0x0800bc65
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	1d1a      	adds	r2, r3, #4
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	602a      	str	r2, [r5, #0]
 800bb60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e0a4      	b.n	800bcb6 <_printf_i+0x1f6>
 800bb6c:	6820      	ldr	r0, [r4, #0]
 800bb6e:	6829      	ldr	r1, [r5, #0]
 800bb70:	0606      	lsls	r6, r0, #24
 800bb72:	f101 0304 	add.w	r3, r1, #4
 800bb76:	d50a      	bpl.n	800bb8e <_printf_i+0xce>
 800bb78:	680e      	ldr	r6, [r1, #0]
 800bb7a:	602b      	str	r3, [r5, #0]
 800bb7c:	2e00      	cmp	r6, #0
 800bb7e:	da03      	bge.n	800bb88 <_printf_i+0xc8>
 800bb80:	232d      	movs	r3, #45	; 0x2d
 800bb82:	4276      	negs	r6, r6
 800bb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb88:	230a      	movs	r3, #10
 800bb8a:	485e      	ldr	r0, [pc, #376]	; (800bd04 <_printf_i+0x244>)
 800bb8c:	e019      	b.n	800bbc2 <_printf_i+0x102>
 800bb8e:	680e      	ldr	r6, [r1, #0]
 800bb90:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb94:	602b      	str	r3, [r5, #0]
 800bb96:	bf18      	it	ne
 800bb98:	b236      	sxthne	r6, r6
 800bb9a:	e7ef      	b.n	800bb7c <_printf_i+0xbc>
 800bb9c:	682b      	ldr	r3, [r5, #0]
 800bb9e:	6820      	ldr	r0, [r4, #0]
 800bba0:	1d19      	adds	r1, r3, #4
 800bba2:	6029      	str	r1, [r5, #0]
 800bba4:	0601      	lsls	r1, r0, #24
 800bba6:	d501      	bpl.n	800bbac <_printf_i+0xec>
 800bba8:	681e      	ldr	r6, [r3, #0]
 800bbaa:	e002      	b.n	800bbb2 <_printf_i+0xf2>
 800bbac:	0646      	lsls	r6, r0, #25
 800bbae:	d5fb      	bpl.n	800bba8 <_printf_i+0xe8>
 800bbb0:	881e      	ldrh	r6, [r3, #0]
 800bbb2:	2f6f      	cmp	r7, #111	; 0x6f
 800bbb4:	bf0c      	ite	eq
 800bbb6:	2308      	moveq	r3, #8
 800bbb8:	230a      	movne	r3, #10
 800bbba:	4852      	ldr	r0, [pc, #328]	; (800bd04 <_printf_i+0x244>)
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbc2:	6865      	ldr	r5, [r4, #4]
 800bbc4:	2d00      	cmp	r5, #0
 800bbc6:	bfa8      	it	ge
 800bbc8:	6821      	ldrge	r1, [r4, #0]
 800bbca:	60a5      	str	r5, [r4, #8]
 800bbcc:	bfa4      	itt	ge
 800bbce:	f021 0104 	bicge.w	r1, r1, #4
 800bbd2:	6021      	strge	r1, [r4, #0]
 800bbd4:	b90e      	cbnz	r6, 800bbda <_printf_i+0x11a>
 800bbd6:	2d00      	cmp	r5, #0
 800bbd8:	d04d      	beq.n	800bc76 <_printf_i+0x1b6>
 800bbda:	4615      	mov	r5, r2
 800bbdc:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbe0:	fb03 6711 	mls	r7, r3, r1, r6
 800bbe4:	5dc7      	ldrb	r7, [r0, r7]
 800bbe6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbea:	4637      	mov	r7, r6
 800bbec:	42bb      	cmp	r3, r7
 800bbee:	460e      	mov	r6, r1
 800bbf0:	d9f4      	bls.n	800bbdc <_printf_i+0x11c>
 800bbf2:	2b08      	cmp	r3, #8
 800bbf4:	d10b      	bne.n	800bc0e <_printf_i+0x14e>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	07de      	lsls	r6, r3, #31
 800bbfa:	d508      	bpl.n	800bc0e <_printf_i+0x14e>
 800bbfc:	6923      	ldr	r3, [r4, #16]
 800bbfe:	6861      	ldr	r1, [r4, #4]
 800bc00:	4299      	cmp	r1, r3
 800bc02:	bfde      	ittt	le
 800bc04:	2330      	movle	r3, #48	; 0x30
 800bc06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc0e:	1b52      	subs	r2, r2, r5
 800bc10:	6122      	str	r2, [r4, #16]
 800bc12:	464b      	mov	r3, r9
 800bc14:	4621      	mov	r1, r4
 800bc16:	4640      	mov	r0, r8
 800bc18:	f8cd a000 	str.w	sl, [sp]
 800bc1c:	aa03      	add	r2, sp, #12
 800bc1e:	f7ff fedf 	bl	800b9e0 <_printf_common>
 800bc22:	3001      	adds	r0, #1
 800bc24:	d14c      	bne.n	800bcc0 <_printf_i+0x200>
 800bc26:	f04f 30ff 	mov.w	r0, #4294967295
 800bc2a:	b004      	add	sp, #16
 800bc2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc30:	4834      	ldr	r0, [pc, #208]	; (800bd04 <_printf_i+0x244>)
 800bc32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc36:	6829      	ldr	r1, [r5, #0]
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc3e:	6029      	str	r1, [r5, #0]
 800bc40:	061d      	lsls	r5, r3, #24
 800bc42:	d514      	bpl.n	800bc6e <_printf_i+0x1ae>
 800bc44:	07df      	lsls	r7, r3, #31
 800bc46:	bf44      	itt	mi
 800bc48:	f043 0320 	orrmi.w	r3, r3, #32
 800bc4c:	6023      	strmi	r3, [r4, #0]
 800bc4e:	b91e      	cbnz	r6, 800bc58 <_printf_i+0x198>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	f023 0320 	bic.w	r3, r3, #32
 800bc56:	6023      	str	r3, [r4, #0]
 800bc58:	2310      	movs	r3, #16
 800bc5a:	e7af      	b.n	800bbbc <_printf_i+0xfc>
 800bc5c:	6823      	ldr	r3, [r4, #0]
 800bc5e:	f043 0320 	orr.w	r3, r3, #32
 800bc62:	6023      	str	r3, [r4, #0]
 800bc64:	2378      	movs	r3, #120	; 0x78
 800bc66:	4828      	ldr	r0, [pc, #160]	; (800bd08 <_printf_i+0x248>)
 800bc68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc6c:	e7e3      	b.n	800bc36 <_printf_i+0x176>
 800bc6e:	0659      	lsls	r1, r3, #25
 800bc70:	bf48      	it	mi
 800bc72:	b2b6      	uxthmi	r6, r6
 800bc74:	e7e6      	b.n	800bc44 <_printf_i+0x184>
 800bc76:	4615      	mov	r5, r2
 800bc78:	e7bb      	b.n	800bbf2 <_printf_i+0x132>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	6826      	ldr	r6, [r4, #0]
 800bc7e:	1d18      	adds	r0, r3, #4
 800bc80:	6961      	ldr	r1, [r4, #20]
 800bc82:	6028      	str	r0, [r5, #0]
 800bc84:	0635      	lsls	r5, r6, #24
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	d501      	bpl.n	800bc8e <_printf_i+0x1ce>
 800bc8a:	6019      	str	r1, [r3, #0]
 800bc8c:	e002      	b.n	800bc94 <_printf_i+0x1d4>
 800bc8e:	0670      	lsls	r0, r6, #25
 800bc90:	d5fb      	bpl.n	800bc8a <_printf_i+0x1ca>
 800bc92:	8019      	strh	r1, [r3, #0]
 800bc94:	2300      	movs	r3, #0
 800bc96:	4615      	mov	r5, r2
 800bc98:	6123      	str	r3, [r4, #16]
 800bc9a:	e7ba      	b.n	800bc12 <_printf_i+0x152>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	2100      	movs	r1, #0
 800bca0:	1d1a      	adds	r2, r3, #4
 800bca2:	602a      	str	r2, [r5, #0]
 800bca4:	681d      	ldr	r5, [r3, #0]
 800bca6:	6862      	ldr	r2, [r4, #4]
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 fd03 	bl	800c6b4 <memchr>
 800bcae:	b108      	cbz	r0, 800bcb4 <_printf_i+0x1f4>
 800bcb0:	1b40      	subs	r0, r0, r5
 800bcb2:	6060      	str	r0, [r4, #4]
 800bcb4:	6863      	ldr	r3, [r4, #4]
 800bcb6:	6123      	str	r3, [r4, #16]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcbe:	e7a8      	b.n	800bc12 <_printf_i+0x152>
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	4640      	mov	r0, r8
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	47d0      	blx	sl
 800bcca:	3001      	adds	r0, #1
 800bccc:	d0ab      	beq.n	800bc26 <_printf_i+0x166>
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	079b      	lsls	r3, r3, #30
 800bcd2:	d413      	bmi.n	800bcfc <_printf_i+0x23c>
 800bcd4:	68e0      	ldr	r0, [r4, #12]
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	4298      	cmp	r0, r3
 800bcda:	bfb8      	it	lt
 800bcdc:	4618      	movlt	r0, r3
 800bcde:	e7a4      	b.n	800bc2a <_printf_i+0x16a>
 800bce0:	2301      	movs	r3, #1
 800bce2:	4632      	mov	r2, r6
 800bce4:	4649      	mov	r1, r9
 800bce6:	4640      	mov	r0, r8
 800bce8:	47d0      	blx	sl
 800bcea:	3001      	adds	r0, #1
 800bcec:	d09b      	beq.n	800bc26 <_printf_i+0x166>
 800bcee:	3501      	adds	r5, #1
 800bcf0:	68e3      	ldr	r3, [r4, #12]
 800bcf2:	9903      	ldr	r1, [sp, #12]
 800bcf4:	1a5b      	subs	r3, r3, r1
 800bcf6:	42ab      	cmp	r3, r5
 800bcf8:	dcf2      	bgt.n	800bce0 <_printf_i+0x220>
 800bcfa:	e7eb      	b.n	800bcd4 <_printf_i+0x214>
 800bcfc:	2500      	movs	r5, #0
 800bcfe:	f104 0619 	add.w	r6, r4, #25
 800bd02:	e7f5      	b.n	800bcf0 <_printf_i+0x230>
 800bd04:	0800de7d 	.word	0x0800de7d
 800bd08:	0800de8e 	.word	0x0800de8e

0800bd0c <_scanf_chars>:
 800bd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd10:	4615      	mov	r5, r2
 800bd12:	688a      	ldr	r2, [r1, #8]
 800bd14:	4680      	mov	r8, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	b932      	cbnz	r2, 800bd28 <_scanf_chars+0x1c>
 800bd1a:	698a      	ldr	r2, [r1, #24]
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	bf0c      	ite	eq
 800bd20:	2201      	moveq	r2, #1
 800bd22:	f04f 32ff 	movne.w	r2, #4294967295
 800bd26:	608a      	str	r2, [r1, #8]
 800bd28:	2700      	movs	r7, #0
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bdbc <_scanf_chars+0xb0>
 800bd30:	06d1      	lsls	r1, r2, #27
 800bd32:	bf5f      	itttt	pl
 800bd34:	681a      	ldrpl	r2, [r3, #0]
 800bd36:	1d11      	addpl	r1, r2, #4
 800bd38:	6019      	strpl	r1, [r3, #0]
 800bd3a:	6816      	ldrpl	r6, [r2, #0]
 800bd3c:	69a0      	ldr	r0, [r4, #24]
 800bd3e:	b188      	cbz	r0, 800bd64 <_scanf_chars+0x58>
 800bd40:	2801      	cmp	r0, #1
 800bd42:	d107      	bne.n	800bd54 <_scanf_chars+0x48>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	6963      	ldr	r3, [r4, #20]
 800bd4a:	5c9b      	ldrb	r3, [r3, r2]
 800bd4c:	b953      	cbnz	r3, 800bd64 <_scanf_chars+0x58>
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	d031      	beq.n	800bdb6 <_scanf_chars+0xaa>
 800bd52:	e022      	b.n	800bd9a <_scanf_chars+0x8e>
 800bd54:	2802      	cmp	r0, #2
 800bd56:	d120      	bne.n	800bd9a <_scanf_chars+0x8e>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bd60:	071b      	lsls	r3, r3, #28
 800bd62:	d41a      	bmi.n	800bd9a <_scanf_chars+0x8e>
 800bd64:	6823      	ldr	r3, [r4, #0]
 800bd66:	3701      	adds	r7, #1
 800bd68:	06da      	lsls	r2, r3, #27
 800bd6a:	bf5e      	ittt	pl
 800bd6c:	682b      	ldrpl	r3, [r5, #0]
 800bd6e:	781b      	ldrbpl	r3, [r3, #0]
 800bd70:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bd74:	682a      	ldr	r2, [r5, #0]
 800bd76:	686b      	ldr	r3, [r5, #4]
 800bd78:	3201      	adds	r2, #1
 800bd7a:	602a      	str	r2, [r5, #0]
 800bd7c:	68a2      	ldr	r2, [r4, #8]
 800bd7e:	3b01      	subs	r3, #1
 800bd80:	3a01      	subs	r2, #1
 800bd82:	606b      	str	r3, [r5, #4]
 800bd84:	60a2      	str	r2, [r4, #8]
 800bd86:	b142      	cbz	r2, 800bd9a <_scanf_chars+0x8e>
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	dcd7      	bgt.n	800bd3c <_scanf_chars+0x30>
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4640      	mov	r0, r8
 800bd90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bd94:	4798      	blx	r3
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d0d0      	beq.n	800bd3c <_scanf_chars+0x30>
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	f013 0310 	ands.w	r3, r3, #16
 800bda0:	d105      	bne.n	800bdae <_scanf_chars+0xa2>
 800bda2:	68e2      	ldr	r2, [r4, #12]
 800bda4:	3201      	adds	r2, #1
 800bda6:	60e2      	str	r2, [r4, #12]
 800bda8:	69a2      	ldr	r2, [r4, #24]
 800bdaa:	b102      	cbz	r2, 800bdae <_scanf_chars+0xa2>
 800bdac:	7033      	strb	r3, [r6, #0]
 800bdae:	2000      	movs	r0, #0
 800bdb0:	6923      	ldr	r3, [r4, #16]
 800bdb2:	443b      	add	r3, r7
 800bdb4:	6123      	str	r3, [r4, #16]
 800bdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdba:	bf00      	nop
 800bdbc:	0800def7 	.word	0x0800def7

0800bdc0 <_scanf_i>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	4698      	mov	r8, r3
 800bdc8:	4b75      	ldr	r3, [pc, #468]	; (800bfa0 <_scanf_i+0x1e0>)
 800bdca:	b087      	sub	sp, #28
 800bdcc:	4682      	mov	sl, r0
 800bdce:	4616      	mov	r6, r2
 800bdd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bdd4:	ab03      	add	r3, sp, #12
 800bdd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bdda:	4b72      	ldr	r3, [pc, #456]	; (800bfa4 <_scanf_i+0x1e4>)
 800bddc:	69a1      	ldr	r1, [r4, #24]
 800bdde:	4a72      	ldr	r2, [pc, #456]	; (800bfa8 <_scanf_i+0x1e8>)
 800bde0:	4627      	mov	r7, r4
 800bde2:	2903      	cmp	r1, #3
 800bde4:	bf18      	it	ne
 800bde6:	461a      	movne	r2, r3
 800bde8:	68a3      	ldr	r3, [r4, #8]
 800bdea:	9201      	str	r2, [sp, #4]
 800bdec:	1e5a      	subs	r2, r3, #1
 800bdee:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bdf2:	bf81      	itttt	hi
 800bdf4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bdf8:	eb03 0905 	addhi.w	r9, r3, r5
 800bdfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be00:	60a3      	strhi	r3, [r4, #8]
 800be02:	f857 3b1c 	ldr.w	r3, [r7], #28
 800be06:	bf98      	it	ls
 800be08:	f04f 0900 	movls.w	r9, #0
 800be0c:	463d      	mov	r5, r7
 800be0e:	f04f 0b00 	mov.w	fp, #0
 800be12:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	6831      	ldr	r1, [r6, #0]
 800be1a:	ab03      	add	r3, sp, #12
 800be1c:	2202      	movs	r2, #2
 800be1e:	7809      	ldrb	r1, [r1, #0]
 800be20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800be24:	f000 fc46 	bl	800c6b4 <memchr>
 800be28:	b328      	cbz	r0, 800be76 <_scanf_i+0xb6>
 800be2a:	f1bb 0f01 	cmp.w	fp, #1
 800be2e:	d159      	bne.n	800bee4 <_scanf_i+0x124>
 800be30:	6862      	ldr	r2, [r4, #4]
 800be32:	b92a      	cbnz	r2, 800be40 <_scanf_i+0x80>
 800be34:	2308      	movs	r3, #8
 800be36:	6822      	ldr	r2, [r4, #0]
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be3e:	6022      	str	r2, [r4, #0]
 800be40:	6822      	ldr	r2, [r4, #0]
 800be42:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800be46:	6022      	str	r2, [r4, #0]
 800be48:	68a2      	ldr	r2, [r4, #8]
 800be4a:	1e51      	subs	r1, r2, #1
 800be4c:	60a1      	str	r1, [r4, #8]
 800be4e:	b192      	cbz	r2, 800be76 <_scanf_i+0xb6>
 800be50:	6832      	ldr	r2, [r6, #0]
 800be52:	1c51      	adds	r1, r2, #1
 800be54:	6031      	str	r1, [r6, #0]
 800be56:	7812      	ldrb	r2, [r2, #0]
 800be58:	f805 2b01 	strb.w	r2, [r5], #1
 800be5c:	6872      	ldr	r2, [r6, #4]
 800be5e:	3a01      	subs	r2, #1
 800be60:	2a00      	cmp	r2, #0
 800be62:	6072      	str	r2, [r6, #4]
 800be64:	dc07      	bgt.n	800be76 <_scanf_i+0xb6>
 800be66:	4631      	mov	r1, r6
 800be68:	4650      	mov	r0, sl
 800be6a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800be6e:	4790      	blx	r2
 800be70:	2800      	cmp	r0, #0
 800be72:	f040 8085 	bne.w	800bf80 <_scanf_i+0x1c0>
 800be76:	f10b 0b01 	add.w	fp, fp, #1
 800be7a:	f1bb 0f03 	cmp.w	fp, #3
 800be7e:	d1cb      	bne.n	800be18 <_scanf_i+0x58>
 800be80:	6863      	ldr	r3, [r4, #4]
 800be82:	b90b      	cbnz	r3, 800be88 <_scanf_i+0xc8>
 800be84:	230a      	movs	r3, #10
 800be86:	6063      	str	r3, [r4, #4]
 800be88:	6863      	ldr	r3, [r4, #4]
 800be8a:	4948      	ldr	r1, [pc, #288]	; (800bfac <_scanf_i+0x1ec>)
 800be8c:	6960      	ldr	r0, [r4, #20]
 800be8e:	1ac9      	subs	r1, r1, r3
 800be90:	f000 f8a6 	bl	800bfe0 <__sccl>
 800be94:	f04f 0b00 	mov.w	fp, #0
 800be98:	68a3      	ldr	r3, [r4, #8]
 800be9a:	6822      	ldr	r2, [r4, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d03d      	beq.n	800bf1c <_scanf_i+0x15c>
 800bea0:	6831      	ldr	r1, [r6, #0]
 800bea2:	6960      	ldr	r0, [r4, #20]
 800bea4:	f891 c000 	ldrb.w	ip, [r1]
 800bea8:	f810 000c 	ldrb.w	r0, [r0, ip]
 800beac:	2800      	cmp	r0, #0
 800beae:	d035      	beq.n	800bf1c <_scanf_i+0x15c>
 800beb0:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800beb4:	d124      	bne.n	800bf00 <_scanf_i+0x140>
 800beb6:	0510      	lsls	r0, r2, #20
 800beb8:	d522      	bpl.n	800bf00 <_scanf_i+0x140>
 800beba:	f10b 0b01 	add.w	fp, fp, #1
 800bebe:	f1b9 0f00 	cmp.w	r9, #0
 800bec2:	d003      	beq.n	800becc <_scanf_i+0x10c>
 800bec4:	3301      	adds	r3, #1
 800bec6:	f109 39ff 	add.w	r9, r9, #4294967295
 800beca:	60a3      	str	r3, [r4, #8]
 800becc:	6873      	ldr	r3, [r6, #4]
 800bece:	3b01      	subs	r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	6073      	str	r3, [r6, #4]
 800bed4:	dd1b      	ble.n	800bf0e <_scanf_i+0x14e>
 800bed6:	6833      	ldr	r3, [r6, #0]
 800bed8:	3301      	adds	r3, #1
 800beda:	6033      	str	r3, [r6, #0]
 800bedc:	68a3      	ldr	r3, [r4, #8]
 800bede:	3b01      	subs	r3, #1
 800bee0:	60a3      	str	r3, [r4, #8]
 800bee2:	e7d9      	b.n	800be98 <_scanf_i+0xd8>
 800bee4:	f1bb 0f02 	cmp.w	fp, #2
 800bee8:	d1ae      	bne.n	800be48 <_scanf_i+0x88>
 800beea:	6822      	ldr	r2, [r4, #0]
 800beec:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bef0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bef4:	d1bf      	bne.n	800be76 <_scanf_i+0xb6>
 800bef6:	2310      	movs	r3, #16
 800bef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800befc:	6063      	str	r3, [r4, #4]
 800befe:	e7a2      	b.n	800be46 <_scanf_i+0x86>
 800bf00:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bf04:	6022      	str	r2, [r4, #0]
 800bf06:	780b      	ldrb	r3, [r1, #0]
 800bf08:	f805 3b01 	strb.w	r3, [r5], #1
 800bf0c:	e7de      	b.n	800becc <_scanf_i+0x10c>
 800bf0e:	4631      	mov	r1, r6
 800bf10:	4650      	mov	r0, sl
 800bf12:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bf16:	4798      	blx	r3
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d0df      	beq.n	800bedc <_scanf_i+0x11c>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	05db      	lsls	r3, r3, #23
 800bf20:	d50d      	bpl.n	800bf3e <_scanf_i+0x17e>
 800bf22:	42bd      	cmp	r5, r7
 800bf24:	d909      	bls.n	800bf3a <_scanf_i+0x17a>
 800bf26:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bf2a:	4632      	mov	r2, r6
 800bf2c:	4650      	mov	r0, sl
 800bf2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bf32:	f105 39ff 	add.w	r9, r5, #4294967295
 800bf36:	4798      	blx	r3
 800bf38:	464d      	mov	r5, r9
 800bf3a:	42bd      	cmp	r5, r7
 800bf3c:	d02d      	beq.n	800bf9a <_scanf_i+0x1da>
 800bf3e:	6822      	ldr	r2, [r4, #0]
 800bf40:	f012 0210 	ands.w	r2, r2, #16
 800bf44:	d113      	bne.n	800bf6e <_scanf_i+0x1ae>
 800bf46:	702a      	strb	r2, [r5, #0]
 800bf48:	4639      	mov	r1, r7
 800bf4a:	6863      	ldr	r3, [r4, #4]
 800bf4c:	4650      	mov	r0, sl
 800bf4e:	9e01      	ldr	r6, [sp, #4]
 800bf50:	47b0      	blx	r6
 800bf52:	6821      	ldr	r1, [r4, #0]
 800bf54:	f8d8 3000 	ldr.w	r3, [r8]
 800bf58:	f011 0f20 	tst.w	r1, #32
 800bf5c:	d013      	beq.n	800bf86 <_scanf_i+0x1c6>
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	f8c8 2000 	str.w	r2, [r8]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6018      	str	r0, [r3, #0]
 800bf68:	68e3      	ldr	r3, [r4, #12]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	60e3      	str	r3, [r4, #12]
 800bf6e:	2000      	movs	r0, #0
 800bf70:	1bed      	subs	r5, r5, r7
 800bf72:	44ab      	add	fp, r5
 800bf74:	6925      	ldr	r5, [r4, #16]
 800bf76:	445d      	add	r5, fp
 800bf78:	6125      	str	r5, [r4, #16]
 800bf7a:	b007      	add	sp, #28
 800bf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf80:	f04f 0b00 	mov.w	fp, #0
 800bf84:	e7ca      	b.n	800bf1c <_scanf_i+0x15c>
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	f8c8 2000 	str.w	r2, [r8]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f011 0f01 	tst.w	r1, #1
 800bf92:	bf14      	ite	ne
 800bf94:	8018      	strhne	r0, [r3, #0]
 800bf96:	6018      	streq	r0, [r3, #0]
 800bf98:	e7e6      	b.n	800bf68 <_scanf_i+0x1a8>
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	e7ed      	b.n	800bf7a <_scanf_i+0x1ba>
 800bf9e:	bf00      	nop
 800bfa0:	0800dbc8 	.word	0x0800dbc8
 800bfa4:	0800c259 	.word	0x0800c259
 800bfa8:	0800c171 	.word	0x0800c171
 800bfac:	0800deb8 	.word	0x0800deb8

0800bfb0 <_read_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4d05      	ldr	r5, [pc, #20]	; (800bfd0 <_read_r+0x20>)
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f7f6 f903 	bl	80021ca <_read>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_read_r+0x1e>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_read_r+0x1e>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20002908 	.word	0x20002908

0800bfd4 <nan>:
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	4901      	ldr	r1, [pc, #4]	; (800bfdc <nan+0x8>)
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	7ff80000 	.word	0x7ff80000

0800bfe0 <__sccl>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	780b      	ldrb	r3, [r1, #0]
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	2b5e      	cmp	r3, #94	; 0x5e
 800bfe8:	bf13      	iteet	ne
 800bfea:	2200      	movne	r2, #0
 800bfec:	2201      	moveq	r2, #1
 800bfee:	784b      	ldrbeq	r3, [r1, #1]
 800bff0:	1c48      	addne	r0, r1, #1
 800bff2:	bf08      	it	eq
 800bff4:	1c88      	addeq	r0, r1, #2
 800bff6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bffa:	1e61      	subs	r1, r4, #1
 800bffc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c000:	42a9      	cmp	r1, r5
 800c002:	d1fb      	bne.n	800bffc <__sccl+0x1c>
 800c004:	b90b      	cbnz	r3, 800c00a <__sccl+0x2a>
 800c006:	3801      	subs	r0, #1
 800c008:	bd70      	pop	{r4, r5, r6, pc}
 800c00a:	f082 0201 	eor.w	r2, r2, #1
 800c00e:	4605      	mov	r5, r0
 800c010:	54e2      	strb	r2, [r4, r3]
 800c012:	4628      	mov	r0, r5
 800c014:	f810 1b01 	ldrb.w	r1, [r0], #1
 800c018:	292d      	cmp	r1, #45	; 0x2d
 800c01a:	d006      	beq.n	800c02a <__sccl+0x4a>
 800c01c:	295d      	cmp	r1, #93	; 0x5d
 800c01e:	d0f3      	beq.n	800c008 <__sccl+0x28>
 800c020:	b909      	cbnz	r1, 800c026 <__sccl+0x46>
 800c022:	4628      	mov	r0, r5
 800c024:	e7f0      	b.n	800c008 <__sccl+0x28>
 800c026:	460b      	mov	r3, r1
 800c028:	e7f1      	b.n	800c00e <__sccl+0x2e>
 800c02a:	786e      	ldrb	r6, [r5, #1]
 800c02c:	2e5d      	cmp	r6, #93	; 0x5d
 800c02e:	d0fa      	beq.n	800c026 <__sccl+0x46>
 800c030:	42b3      	cmp	r3, r6
 800c032:	dcf8      	bgt.n	800c026 <__sccl+0x46>
 800c034:	4619      	mov	r1, r3
 800c036:	3502      	adds	r5, #2
 800c038:	3101      	adds	r1, #1
 800c03a:	428e      	cmp	r6, r1
 800c03c:	5462      	strb	r2, [r4, r1]
 800c03e:	dcfb      	bgt.n	800c038 <__sccl+0x58>
 800c040:	1af1      	subs	r1, r6, r3
 800c042:	3901      	subs	r1, #1
 800c044:	42b3      	cmp	r3, r6
 800c046:	bfa8      	it	ge
 800c048:	2100      	movge	r1, #0
 800c04a:	1c58      	adds	r0, r3, #1
 800c04c:	1843      	adds	r3, r0, r1
 800c04e:	e7e0      	b.n	800c012 <__sccl+0x32>

0800c050 <strncmp>:
 800c050:	4603      	mov	r3, r0
 800c052:	b510      	push	{r4, lr}
 800c054:	b172      	cbz	r2, 800c074 <strncmp+0x24>
 800c056:	3901      	subs	r1, #1
 800c058:	1884      	adds	r4, r0, r2
 800c05a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c05e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c062:	4290      	cmp	r0, r2
 800c064:	d101      	bne.n	800c06a <strncmp+0x1a>
 800c066:	42a3      	cmp	r3, r4
 800c068:	d101      	bne.n	800c06e <strncmp+0x1e>
 800c06a:	1a80      	subs	r0, r0, r2
 800c06c:	bd10      	pop	{r4, pc}
 800c06e:	2800      	cmp	r0, #0
 800c070:	d1f3      	bne.n	800c05a <strncmp+0xa>
 800c072:	e7fa      	b.n	800c06a <strncmp+0x1a>
 800c074:	4610      	mov	r0, r2
 800c076:	e7f9      	b.n	800c06c <strncmp+0x1c>

0800c078 <_strtol_l.constprop.0>:
 800c078:	2b01      	cmp	r3, #1
 800c07a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c07e:	4680      	mov	r8, r0
 800c080:	d001      	beq.n	800c086 <_strtol_l.constprop.0+0xe>
 800c082:	2b24      	cmp	r3, #36	; 0x24
 800c084:	d906      	bls.n	800c094 <_strtol_l.constprop.0+0x1c>
 800c086:	f7fd f915 	bl	80092b4 <__errno>
 800c08a:	2316      	movs	r3, #22
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	2000      	movs	r0, #0
 800c090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c094:	460d      	mov	r5, r1
 800c096:	4f35      	ldr	r7, [pc, #212]	; (800c16c <_strtol_l.constprop.0+0xf4>)
 800c098:	4628      	mov	r0, r5
 800c09a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c09e:	5de6      	ldrb	r6, [r4, r7]
 800c0a0:	f016 0608 	ands.w	r6, r6, #8
 800c0a4:	d1f8      	bne.n	800c098 <_strtol_l.constprop.0+0x20>
 800c0a6:	2c2d      	cmp	r4, #45	; 0x2d
 800c0a8:	d12f      	bne.n	800c10a <_strtol_l.constprop.0+0x92>
 800c0aa:	2601      	movs	r6, #1
 800c0ac:	782c      	ldrb	r4, [r5, #0]
 800c0ae:	1c85      	adds	r5, r0, #2
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d057      	beq.n	800c164 <_strtol_l.constprop.0+0xec>
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	d109      	bne.n	800c0cc <_strtol_l.constprop.0+0x54>
 800c0b8:	2c30      	cmp	r4, #48	; 0x30
 800c0ba:	d107      	bne.n	800c0cc <_strtol_l.constprop.0+0x54>
 800c0bc:	7828      	ldrb	r0, [r5, #0]
 800c0be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c0c2:	2858      	cmp	r0, #88	; 0x58
 800c0c4:	d149      	bne.n	800c15a <_strtol_l.constprop.0+0xe2>
 800c0c6:	2310      	movs	r3, #16
 800c0c8:	786c      	ldrb	r4, [r5, #1]
 800c0ca:	3502      	adds	r5, #2
 800c0cc:	2700      	movs	r7, #0
 800c0ce:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800c0d2:	f10e 3eff 	add.w	lr, lr, #4294967295
 800c0d6:	fbbe f9f3 	udiv	r9, lr, r3
 800c0da:	4638      	mov	r0, r7
 800c0dc:	fb03 ea19 	mls	sl, r3, r9, lr
 800c0e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c0e4:	f1bc 0f09 	cmp.w	ip, #9
 800c0e8:	d814      	bhi.n	800c114 <_strtol_l.constprop.0+0x9c>
 800c0ea:	4664      	mov	r4, ip
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	dd22      	ble.n	800c136 <_strtol_l.constprop.0+0xbe>
 800c0f0:	2f00      	cmp	r7, #0
 800c0f2:	db1d      	blt.n	800c130 <_strtol_l.constprop.0+0xb8>
 800c0f4:	4581      	cmp	r9, r0
 800c0f6:	d31b      	bcc.n	800c130 <_strtol_l.constprop.0+0xb8>
 800c0f8:	d101      	bne.n	800c0fe <_strtol_l.constprop.0+0x86>
 800c0fa:	45a2      	cmp	sl, r4
 800c0fc:	db18      	blt.n	800c130 <_strtol_l.constprop.0+0xb8>
 800c0fe:	2701      	movs	r7, #1
 800c100:	fb00 4003 	mla	r0, r0, r3, r4
 800c104:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c108:	e7ea      	b.n	800c0e0 <_strtol_l.constprop.0+0x68>
 800c10a:	2c2b      	cmp	r4, #43	; 0x2b
 800c10c:	bf04      	itt	eq
 800c10e:	782c      	ldrbeq	r4, [r5, #0]
 800c110:	1c85      	addeq	r5, r0, #2
 800c112:	e7cd      	b.n	800c0b0 <_strtol_l.constprop.0+0x38>
 800c114:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c118:	f1bc 0f19 	cmp.w	ip, #25
 800c11c:	d801      	bhi.n	800c122 <_strtol_l.constprop.0+0xaa>
 800c11e:	3c37      	subs	r4, #55	; 0x37
 800c120:	e7e4      	b.n	800c0ec <_strtol_l.constprop.0+0x74>
 800c122:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c126:	f1bc 0f19 	cmp.w	ip, #25
 800c12a:	d804      	bhi.n	800c136 <_strtol_l.constprop.0+0xbe>
 800c12c:	3c57      	subs	r4, #87	; 0x57
 800c12e:	e7dd      	b.n	800c0ec <_strtol_l.constprop.0+0x74>
 800c130:	f04f 37ff 	mov.w	r7, #4294967295
 800c134:	e7e6      	b.n	800c104 <_strtol_l.constprop.0+0x8c>
 800c136:	2f00      	cmp	r7, #0
 800c138:	da07      	bge.n	800c14a <_strtol_l.constprop.0+0xd2>
 800c13a:	2322      	movs	r3, #34	; 0x22
 800c13c:	4670      	mov	r0, lr
 800c13e:	f8c8 3000 	str.w	r3, [r8]
 800c142:	2a00      	cmp	r2, #0
 800c144:	d0a4      	beq.n	800c090 <_strtol_l.constprop.0+0x18>
 800c146:	1e69      	subs	r1, r5, #1
 800c148:	e005      	b.n	800c156 <_strtol_l.constprop.0+0xde>
 800c14a:	b106      	cbz	r6, 800c14e <_strtol_l.constprop.0+0xd6>
 800c14c:	4240      	negs	r0, r0
 800c14e:	2a00      	cmp	r2, #0
 800c150:	d09e      	beq.n	800c090 <_strtol_l.constprop.0+0x18>
 800c152:	2f00      	cmp	r7, #0
 800c154:	d1f7      	bne.n	800c146 <_strtol_l.constprop.0+0xce>
 800c156:	6011      	str	r1, [r2, #0]
 800c158:	e79a      	b.n	800c090 <_strtol_l.constprop.0+0x18>
 800c15a:	2430      	movs	r4, #48	; 0x30
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1b5      	bne.n	800c0cc <_strtol_l.constprop.0+0x54>
 800c160:	2308      	movs	r3, #8
 800c162:	e7b3      	b.n	800c0cc <_strtol_l.constprop.0+0x54>
 800c164:	2c30      	cmp	r4, #48	; 0x30
 800c166:	d0a9      	beq.n	800c0bc <_strtol_l.constprop.0+0x44>
 800c168:	230a      	movs	r3, #10
 800c16a:	e7af      	b.n	800c0cc <_strtol_l.constprop.0+0x54>
 800c16c:	0800def7 	.word	0x0800def7

0800c170 <_strtol_r>:
 800c170:	f7ff bf82 	b.w	800c078 <_strtol_l.constprop.0>

0800c174 <_strtoul_l.constprop.0>:
 800c174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c178:	4686      	mov	lr, r0
 800c17a:	460d      	mov	r5, r1
 800c17c:	4f35      	ldr	r7, [pc, #212]	; (800c254 <_strtoul_l.constprop.0+0xe0>)
 800c17e:	4628      	mov	r0, r5
 800c180:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c184:	5de6      	ldrb	r6, [r4, r7]
 800c186:	f016 0608 	ands.w	r6, r6, #8
 800c18a:	d1f8      	bne.n	800c17e <_strtoul_l.constprop.0+0xa>
 800c18c:	2c2d      	cmp	r4, #45	; 0x2d
 800c18e:	d12f      	bne.n	800c1f0 <_strtoul_l.constprop.0+0x7c>
 800c190:	2601      	movs	r6, #1
 800c192:	782c      	ldrb	r4, [r5, #0]
 800c194:	1c85      	adds	r5, r0, #2
 800c196:	2b00      	cmp	r3, #0
 800c198:	d057      	beq.n	800c24a <_strtoul_l.constprop.0+0xd6>
 800c19a:	2b10      	cmp	r3, #16
 800c19c:	d109      	bne.n	800c1b2 <_strtoul_l.constprop.0+0x3e>
 800c19e:	2c30      	cmp	r4, #48	; 0x30
 800c1a0:	d107      	bne.n	800c1b2 <_strtoul_l.constprop.0+0x3e>
 800c1a2:	7828      	ldrb	r0, [r5, #0]
 800c1a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c1a8:	2858      	cmp	r0, #88	; 0x58
 800c1aa:	d149      	bne.n	800c240 <_strtoul_l.constprop.0+0xcc>
 800c1ac:	2310      	movs	r3, #16
 800c1ae:	786c      	ldrb	r4, [r5, #1]
 800c1b0:	3502      	adds	r5, #2
 800c1b2:	f04f 38ff 	mov.w	r8, #4294967295
 800c1b6:	fbb8 f8f3 	udiv	r8, r8, r3
 800c1ba:	2700      	movs	r7, #0
 800c1bc:	fb03 f908 	mul.w	r9, r3, r8
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	ea6f 0909 	mvn.w	r9, r9
 800c1c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c1ca:	f1bc 0f09 	cmp.w	ip, #9
 800c1ce:	d814      	bhi.n	800c1fa <_strtoul_l.constprop.0+0x86>
 800c1d0:	4664      	mov	r4, ip
 800c1d2:	42a3      	cmp	r3, r4
 800c1d4:	dd22      	ble.n	800c21c <_strtoul_l.constprop.0+0xa8>
 800c1d6:	2f00      	cmp	r7, #0
 800c1d8:	db1d      	blt.n	800c216 <_strtoul_l.constprop.0+0xa2>
 800c1da:	4580      	cmp	r8, r0
 800c1dc:	d31b      	bcc.n	800c216 <_strtoul_l.constprop.0+0xa2>
 800c1de:	d101      	bne.n	800c1e4 <_strtoul_l.constprop.0+0x70>
 800c1e0:	45a1      	cmp	r9, r4
 800c1e2:	db18      	blt.n	800c216 <_strtoul_l.constprop.0+0xa2>
 800c1e4:	2701      	movs	r7, #1
 800c1e6:	fb00 4003 	mla	r0, r0, r3, r4
 800c1ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c1ee:	e7ea      	b.n	800c1c6 <_strtoul_l.constprop.0+0x52>
 800c1f0:	2c2b      	cmp	r4, #43	; 0x2b
 800c1f2:	bf04      	itt	eq
 800c1f4:	782c      	ldrbeq	r4, [r5, #0]
 800c1f6:	1c85      	addeq	r5, r0, #2
 800c1f8:	e7cd      	b.n	800c196 <_strtoul_l.constprop.0+0x22>
 800c1fa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c1fe:	f1bc 0f19 	cmp.w	ip, #25
 800c202:	d801      	bhi.n	800c208 <_strtoul_l.constprop.0+0x94>
 800c204:	3c37      	subs	r4, #55	; 0x37
 800c206:	e7e4      	b.n	800c1d2 <_strtoul_l.constprop.0+0x5e>
 800c208:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c20c:	f1bc 0f19 	cmp.w	ip, #25
 800c210:	d804      	bhi.n	800c21c <_strtoul_l.constprop.0+0xa8>
 800c212:	3c57      	subs	r4, #87	; 0x57
 800c214:	e7dd      	b.n	800c1d2 <_strtoul_l.constprop.0+0x5e>
 800c216:	f04f 37ff 	mov.w	r7, #4294967295
 800c21a:	e7e6      	b.n	800c1ea <_strtoul_l.constprop.0+0x76>
 800c21c:	2f00      	cmp	r7, #0
 800c21e:	da07      	bge.n	800c230 <_strtoul_l.constprop.0+0xbc>
 800c220:	2322      	movs	r3, #34	; 0x22
 800c222:	f04f 30ff 	mov.w	r0, #4294967295
 800c226:	f8ce 3000 	str.w	r3, [lr]
 800c22a:	b932      	cbnz	r2, 800c23a <_strtoul_l.constprop.0+0xc6>
 800c22c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c230:	b106      	cbz	r6, 800c234 <_strtoul_l.constprop.0+0xc0>
 800c232:	4240      	negs	r0, r0
 800c234:	2a00      	cmp	r2, #0
 800c236:	d0f9      	beq.n	800c22c <_strtoul_l.constprop.0+0xb8>
 800c238:	b107      	cbz	r7, 800c23c <_strtoul_l.constprop.0+0xc8>
 800c23a:	1e69      	subs	r1, r5, #1
 800c23c:	6011      	str	r1, [r2, #0]
 800c23e:	e7f5      	b.n	800c22c <_strtoul_l.constprop.0+0xb8>
 800c240:	2430      	movs	r4, #48	; 0x30
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1b5      	bne.n	800c1b2 <_strtoul_l.constprop.0+0x3e>
 800c246:	2308      	movs	r3, #8
 800c248:	e7b3      	b.n	800c1b2 <_strtoul_l.constprop.0+0x3e>
 800c24a:	2c30      	cmp	r4, #48	; 0x30
 800c24c:	d0a9      	beq.n	800c1a2 <_strtoul_l.constprop.0+0x2e>
 800c24e:	230a      	movs	r3, #10
 800c250:	e7af      	b.n	800c1b2 <_strtoul_l.constprop.0+0x3e>
 800c252:	bf00      	nop
 800c254:	0800def7 	.word	0x0800def7

0800c258 <_strtoul_r>:
 800c258:	f7ff bf8c 	b.w	800c174 <_strtoul_l.constprop.0>

0800c25c <__submore>:
 800c25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c260:	460c      	mov	r4, r1
 800c262:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c268:	4299      	cmp	r1, r3
 800c26a:	d11b      	bne.n	800c2a4 <__submore+0x48>
 800c26c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c270:	f7fd f8ec 	bl	800944c <_malloc_r>
 800c274:	b918      	cbnz	r0, 800c27e <__submore+0x22>
 800c276:	f04f 30ff 	mov.w	r0, #4294967295
 800c27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c282:	63a3      	str	r3, [r4, #56]	; 0x38
 800c284:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c288:	6360      	str	r0, [r4, #52]	; 0x34
 800c28a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c28e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c292:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c296:	7043      	strb	r3, [r0, #1]
 800c298:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c29c:	7003      	strb	r3, [r0, #0]
 800c29e:	6020      	str	r0, [r4, #0]
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	e7ea      	b.n	800c27a <__submore+0x1e>
 800c2a4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c2a6:	0077      	lsls	r7, r6, #1
 800c2a8:	463a      	mov	r2, r7
 800c2aa:	f000 fa2b 	bl	800c704 <_realloc_r>
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d0e0      	beq.n	800c276 <__submore+0x1a>
 800c2b4:	eb00 0806 	add.w	r8, r0, r6
 800c2b8:	4601      	mov	r1, r0
 800c2ba:	4632      	mov	r2, r6
 800c2bc:	4640      	mov	r0, r8
 800c2be:	f7fd f833 	bl	8009328 <memcpy>
 800c2c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c2c6:	f8c4 8000 	str.w	r8, [r4]
 800c2ca:	e7e9      	b.n	800c2a0 <__submore+0x44>

0800c2cc <__ascii_wctomb>:
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	b141      	cbz	r1, 800c2e4 <__ascii_wctomb+0x18>
 800c2d2:	2aff      	cmp	r2, #255	; 0xff
 800c2d4:	d904      	bls.n	800c2e0 <__ascii_wctomb+0x14>
 800c2d6:	228a      	movs	r2, #138	; 0x8a
 800c2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	4770      	bx	lr
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	700a      	strb	r2, [r1, #0]
 800c2e4:	4770      	bx	lr
	...

0800c2e8 <__assert_func>:
 800c2e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ea:	4614      	mov	r4, r2
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4b09      	ldr	r3, [pc, #36]	; (800c314 <__assert_func+0x2c>)
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	68d8      	ldr	r0, [r3, #12]
 800c2f6:	b14c      	cbz	r4, 800c30c <__assert_func+0x24>
 800c2f8:	4b07      	ldr	r3, [pc, #28]	; (800c318 <__assert_func+0x30>)
 800c2fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2fe:	9100      	str	r1, [sp, #0]
 800c300:	462b      	mov	r3, r5
 800c302:	4906      	ldr	r1, [pc, #24]	; (800c31c <__assert_func+0x34>)
 800c304:	f000 f9a2 	bl	800c64c <fiprintf>
 800c308:	f000 fc42 	bl	800cb90 <abort>
 800c30c:	4b04      	ldr	r3, [pc, #16]	; (800c320 <__assert_func+0x38>)
 800c30e:	461c      	mov	r4, r3
 800c310:	e7f3      	b.n	800c2fa <__assert_func+0x12>
 800c312:	bf00      	nop
 800c314:	2000007c 	.word	0x2000007c
 800c318:	0800deba 	.word	0x0800deba
 800c31c:	0800dec7 	.word	0x0800dec7
 800c320:	0800def5 	.word	0x0800def5

0800c324 <__sflush_r>:
 800c324:	898a      	ldrh	r2, [r1, #12]
 800c326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c328:	4605      	mov	r5, r0
 800c32a:	0710      	lsls	r0, r2, #28
 800c32c:	460c      	mov	r4, r1
 800c32e:	d457      	bmi.n	800c3e0 <__sflush_r+0xbc>
 800c330:	684b      	ldr	r3, [r1, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	dc04      	bgt.n	800c340 <__sflush_r+0x1c>
 800c336:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c338:	2b00      	cmp	r3, #0
 800c33a:	dc01      	bgt.n	800c340 <__sflush_r+0x1c>
 800c33c:	2000      	movs	r0, #0
 800c33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c342:	2e00      	cmp	r6, #0
 800c344:	d0fa      	beq.n	800c33c <__sflush_r+0x18>
 800c346:	2300      	movs	r3, #0
 800c348:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c34c:	682f      	ldr	r7, [r5, #0]
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	d032      	beq.n	800c3b8 <__sflush_r+0x94>
 800c352:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	075a      	lsls	r2, r3, #29
 800c358:	d505      	bpl.n	800c366 <__sflush_r+0x42>
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	1ac0      	subs	r0, r0, r3
 800c35e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c360:	b10b      	cbz	r3, 800c366 <__sflush_r+0x42>
 800c362:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c364:	1ac0      	subs	r0, r0, r3
 800c366:	2300      	movs	r3, #0
 800c368:	4602      	mov	r2, r0
 800c36a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c36c:	4628      	mov	r0, r5
 800c36e:	6a21      	ldr	r1, [r4, #32]
 800c370:	47b0      	blx	r6
 800c372:	1c43      	adds	r3, r0, #1
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	d106      	bne.n	800c386 <__sflush_r+0x62>
 800c378:	6829      	ldr	r1, [r5, #0]
 800c37a:	291d      	cmp	r1, #29
 800c37c:	d82c      	bhi.n	800c3d8 <__sflush_r+0xb4>
 800c37e:	4a29      	ldr	r2, [pc, #164]	; (800c424 <__sflush_r+0x100>)
 800c380:	40ca      	lsrs	r2, r1
 800c382:	07d6      	lsls	r6, r2, #31
 800c384:	d528      	bpl.n	800c3d8 <__sflush_r+0xb4>
 800c386:	2200      	movs	r2, #0
 800c388:	6062      	str	r2, [r4, #4]
 800c38a:	6922      	ldr	r2, [r4, #16]
 800c38c:	04d9      	lsls	r1, r3, #19
 800c38e:	6022      	str	r2, [r4, #0]
 800c390:	d504      	bpl.n	800c39c <__sflush_r+0x78>
 800c392:	1c42      	adds	r2, r0, #1
 800c394:	d101      	bne.n	800c39a <__sflush_r+0x76>
 800c396:	682b      	ldr	r3, [r5, #0]
 800c398:	b903      	cbnz	r3, 800c39c <__sflush_r+0x78>
 800c39a:	6560      	str	r0, [r4, #84]	; 0x54
 800c39c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c39e:	602f      	str	r7, [r5, #0]
 800c3a0:	2900      	cmp	r1, #0
 800c3a2:	d0cb      	beq.n	800c33c <__sflush_r+0x18>
 800c3a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3a8:	4299      	cmp	r1, r3
 800c3aa:	d002      	beq.n	800c3b2 <__sflush_r+0x8e>
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	f7fc ffe5 	bl	800937c <_free_r>
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c3b6:	e7c2      	b.n	800c33e <__sflush_r+0x1a>
 800c3b8:	6a21      	ldr	r1, [r4, #32]
 800c3ba:	2301      	movs	r3, #1
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b0      	blx	r6
 800c3c0:	1c41      	adds	r1, r0, #1
 800c3c2:	d1c7      	bne.n	800c354 <__sflush_r+0x30>
 800c3c4:	682b      	ldr	r3, [r5, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0c4      	beq.n	800c354 <__sflush_r+0x30>
 800c3ca:	2b1d      	cmp	r3, #29
 800c3cc:	d001      	beq.n	800c3d2 <__sflush_r+0xae>
 800c3ce:	2b16      	cmp	r3, #22
 800c3d0:	d101      	bne.n	800c3d6 <__sflush_r+0xb2>
 800c3d2:	602f      	str	r7, [r5, #0]
 800c3d4:	e7b2      	b.n	800c33c <__sflush_r+0x18>
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	e7ae      	b.n	800c33e <__sflush_r+0x1a>
 800c3e0:	690f      	ldr	r7, [r1, #16]
 800c3e2:	2f00      	cmp	r7, #0
 800c3e4:	d0aa      	beq.n	800c33c <__sflush_r+0x18>
 800c3e6:	0793      	lsls	r3, r2, #30
 800c3e8:	bf18      	it	ne
 800c3ea:	2300      	movne	r3, #0
 800c3ec:	680e      	ldr	r6, [r1, #0]
 800c3ee:	bf08      	it	eq
 800c3f0:	694b      	ldreq	r3, [r1, #20]
 800c3f2:	1bf6      	subs	r6, r6, r7
 800c3f4:	600f      	str	r7, [r1, #0]
 800c3f6:	608b      	str	r3, [r1, #8]
 800c3f8:	2e00      	cmp	r6, #0
 800c3fa:	dd9f      	ble.n	800c33c <__sflush_r+0x18>
 800c3fc:	4633      	mov	r3, r6
 800c3fe:	463a      	mov	r2, r7
 800c400:	4628      	mov	r0, r5
 800c402:	6a21      	ldr	r1, [r4, #32]
 800c404:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c408:	47e0      	blx	ip
 800c40a:	2800      	cmp	r0, #0
 800c40c:	dc06      	bgt.n	800c41c <__sflush_r+0xf8>
 800c40e:	89a3      	ldrh	r3, [r4, #12]
 800c410:	f04f 30ff 	mov.w	r0, #4294967295
 800c414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c418:	81a3      	strh	r3, [r4, #12]
 800c41a:	e790      	b.n	800c33e <__sflush_r+0x1a>
 800c41c:	4407      	add	r7, r0
 800c41e:	1a36      	subs	r6, r6, r0
 800c420:	e7ea      	b.n	800c3f8 <__sflush_r+0xd4>
 800c422:	bf00      	nop
 800c424:	20400001 	.word	0x20400001

0800c428 <_fflush_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	690b      	ldr	r3, [r1, #16]
 800c42c:	4605      	mov	r5, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	b913      	cbnz	r3, 800c438 <_fflush_r+0x10>
 800c432:	2500      	movs	r5, #0
 800c434:	4628      	mov	r0, r5
 800c436:	bd38      	pop	{r3, r4, r5, pc}
 800c438:	b118      	cbz	r0, 800c442 <_fflush_r+0x1a>
 800c43a:	6983      	ldr	r3, [r0, #24]
 800c43c:	b90b      	cbnz	r3, 800c442 <_fflush_r+0x1a>
 800c43e:	f000 f887 	bl	800c550 <__sinit>
 800c442:	4b14      	ldr	r3, [pc, #80]	; (800c494 <_fflush_r+0x6c>)
 800c444:	429c      	cmp	r4, r3
 800c446:	d11b      	bne.n	800c480 <_fflush_r+0x58>
 800c448:	686c      	ldr	r4, [r5, #4]
 800c44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d0ef      	beq.n	800c432 <_fflush_r+0xa>
 800c452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c454:	07d0      	lsls	r0, r2, #31
 800c456:	d404      	bmi.n	800c462 <_fflush_r+0x3a>
 800c458:	0599      	lsls	r1, r3, #22
 800c45a:	d402      	bmi.n	800c462 <_fflush_r+0x3a>
 800c45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c45e:	f000 f927 	bl	800c6b0 <__retarget_lock_acquire_recursive>
 800c462:	4628      	mov	r0, r5
 800c464:	4621      	mov	r1, r4
 800c466:	f7ff ff5d 	bl	800c324 <__sflush_r>
 800c46a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c46c:	4605      	mov	r5, r0
 800c46e:	07da      	lsls	r2, r3, #31
 800c470:	d4e0      	bmi.n	800c434 <_fflush_r+0xc>
 800c472:	89a3      	ldrh	r3, [r4, #12]
 800c474:	059b      	lsls	r3, r3, #22
 800c476:	d4dd      	bmi.n	800c434 <_fflush_r+0xc>
 800c478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c47a:	f000 f91a 	bl	800c6b2 <__retarget_lock_release_recursive>
 800c47e:	e7d9      	b.n	800c434 <_fflush_r+0xc>
 800c480:	4b05      	ldr	r3, [pc, #20]	; (800c498 <_fflush_r+0x70>)
 800c482:	429c      	cmp	r4, r3
 800c484:	d101      	bne.n	800c48a <_fflush_r+0x62>
 800c486:	68ac      	ldr	r4, [r5, #8]
 800c488:	e7df      	b.n	800c44a <_fflush_r+0x22>
 800c48a:	4b04      	ldr	r3, [pc, #16]	; (800c49c <_fflush_r+0x74>)
 800c48c:	429c      	cmp	r4, r3
 800c48e:	bf08      	it	eq
 800c490:	68ec      	ldreq	r4, [r5, #12]
 800c492:	e7da      	b.n	800c44a <_fflush_r+0x22>
 800c494:	0800e018 	.word	0x0800e018
 800c498:	0800e038 	.word	0x0800e038
 800c49c:	0800dff8 	.word	0x0800dff8

0800c4a0 <std>:
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	b510      	push	{r4, lr}
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c4aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4ae:	6083      	str	r3, [r0, #8]
 800c4b0:	8181      	strh	r1, [r0, #12]
 800c4b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c4b4:	81c2      	strh	r2, [r0, #14]
 800c4b6:	6183      	str	r3, [r0, #24]
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	2208      	movs	r2, #8
 800c4bc:	305c      	adds	r0, #92	; 0x5c
 800c4be:	f7fc ff41 	bl	8009344 <memset>
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <std+0x38>)
 800c4c4:	6224      	str	r4, [r4, #32]
 800c4c6:	6263      	str	r3, [r4, #36]	; 0x24
 800c4c8:	4b04      	ldr	r3, [pc, #16]	; (800c4dc <std+0x3c>)
 800c4ca:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4cc:	4b04      	ldr	r3, [pc, #16]	; (800c4e0 <std+0x40>)
 800c4ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4d0:	4b04      	ldr	r3, [pc, #16]	; (800c4e4 <std+0x44>)
 800c4d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c4d4:	bd10      	pop	{r4, pc}
 800c4d6:	bf00      	nop
 800c4d8:	080095e9 	.word	0x080095e9
 800c4dc:	0800960f 	.word	0x0800960f
 800c4e0:	08009647 	.word	0x08009647
 800c4e4:	0800966b 	.word	0x0800966b

0800c4e8 <_cleanup_r>:
 800c4e8:	4901      	ldr	r1, [pc, #4]	; (800c4f0 <_cleanup_r+0x8>)
 800c4ea:	f000 b8c1 	b.w	800c670 <_fwalk_reent>
 800c4ee:	bf00      	nop
 800c4f0:	0800c429 	.word	0x0800c429

0800c4f4 <__sfmoreglue>:
 800c4f4:	2268      	movs	r2, #104	; 0x68
 800c4f6:	b570      	push	{r4, r5, r6, lr}
 800c4f8:	1e4d      	subs	r5, r1, #1
 800c4fa:	4355      	muls	r5, r2
 800c4fc:	460e      	mov	r6, r1
 800c4fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c502:	f7fc ffa3 	bl	800944c <_malloc_r>
 800c506:	4604      	mov	r4, r0
 800c508:	b140      	cbz	r0, 800c51c <__sfmoreglue+0x28>
 800c50a:	2100      	movs	r1, #0
 800c50c:	e9c0 1600 	strd	r1, r6, [r0]
 800c510:	300c      	adds	r0, #12
 800c512:	60a0      	str	r0, [r4, #8]
 800c514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c518:	f7fc ff14 	bl	8009344 <memset>
 800c51c:	4620      	mov	r0, r4
 800c51e:	bd70      	pop	{r4, r5, r6, pc}

0800c520 <__sfp_lock_acquire>:
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <__sfp_lock_acquire+0x8>)
 800c522:	f000 b8c5 	b.w	800c6b0 <__retarget_lock_acquire_recursive>
 800c526:	bf00      	nop
 800c528:	2000290d 	.word	0x2000290d

0800c52c <__sfp_lock_release>:
 800c52c:	4801      	ldr	r0, [pc, #4]	; (800c534 <__sfp_lock_release+0x8>)
 800c52e:	f000 b8c0 	b.w	800c6b2 <__retarget_lock_release_recursive>
 800c532:	bf00      	nop
 800c534:	2000290d 	.word	0x2000290d

0800c538 <__sinit_lock_acquire>:
 800c538:	4801      	ldr	r0, [pc, #4]	; (800c540 <__sinit_lock_acquire+0x8>)
 800c53a:	f000 b8b9 	b.w	800c6b0 <__retarget_lock_acquire_recursive>
 800c53e:	bf00      	nop
 800c540:	2000290e 	.word	0x2000290e

0800c544 <__sinit_lock_release>:
 800c544:	4801      	ldr	r0, [pc, #4]	; (800c54c <__sinit_lock_release+0x8>)
 800c546:	f000 b8b4 	b.w	800c6b2 <__retarget_lock_release_recursive>
 800c54a:	bf00      	nop
 800c54c:	2000290e 	.word	0x2000290e

0800c550 <__sinit>:
 800c550:	b510      	push	{r4, lr}
 800c552:	4604      	mov	r4, r0
 800c554:	f7ff fff0 	bl	800c538 <__sinit_lock_acquire>
 800c558:	69a3      	ldr	r3, [r4, #24]
 800c55a:	b11b      	cbz	r3, 800c564 <__sinit+0x14>
 800c55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c560:	f7ff bff0 	b.w	800c544 <__sinit_lock_release>
 800c564:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c568:	6523      	str	r3, [r4, #80]	; 0x50
 800c56a:	4b13      	ldr	r3, [pc, #76]	; (800c5b8 <__sinit+0x68>)
 800c56c:	4a13      	ldr	r2, [pc, #76]	; (800c5bc <__sinit+0x6c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	62a2      	str	r2, [r4, #40]	; 0x28
 800c572:	42a3      	cmp	r3, r4
 800c574:	bf08      	it	eq
 800c576:	2301      	moveq	r3, #1
 800c578:	4620      	mov	r0, r4
 800c57a:	bf08      	it	eq
 800c57c:	61a3      	streq	r3, [r4, #24]
 800c57e:	f000 f81f 	bl	800c5c0 <__sfp>
 800c582:	6060      	str	r0, [r4, #4]
 800c584:	4620      	mov	r0, r4
 800c586:	f000 f81b 	bl	800c5c0 <__sfp>
 800c58a:	60a0      	str	r0, [r4, #8]
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 f817 	bl	800c5c0 <__sfp>
 800c592:	2200      	movs	r2, #0
 800c594:	2104      	movs	r1, #4
 800c596:	60e0      	str	r0, [r4, #12]
 800c598:	6860      	ldr	r0, [r4, #4]
 800c59a:	f7ff ff81 	bl	800c4a0 <std>
 800c59e:	2201      	movs	r2, #1
 800c5a0:	2109      	movs	r1, #9
 800c5a2:	68a0      	ldr	r0, [r4, #8]
 800c5a4:	f7ff ff7c 	bl	800c4a0 <std>
 800c5a8:	2202      	movs	r2, #2
 800c5aa:	2112      	movs	r1, #18
 800c5ac:	68e0      	ldr	r0, [r4, #12]
 800c5ae:	f7ff ff77 	bl	800c4a0 <std>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	61a3      	str	r3, [r4, #24]
 800c5b6:	e7d1      	b.n	800c55c <__sinit+0xc>
 800c5b8:	0800dc10 	.word	0x0800dc10
 800c5bc:	0800c4e9 	.word	0x0800c4e9

0800c5c0 <__sfp>:
 800c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c2:	4607      	mov	r7, r0
 800c5c4:	f7ff ffac 	bl	800c520 <__sfp_lock_acquire>
 800c5c8:	4b1e      	ldr	r3, [pc, #120]	; (800c644 <__sfp+0x84>)
 800c5ca:	681e      	ldr	r6, [r3, #0]
 800c5cc:	69b3      	ldr	r3, [r6, #24]
 800c5ce:	b913      	cbnz	r3, 800c5d6 <__sfp+0x16>
 800c5d0:	4630      	mov	r0, r6
 800c5d2:	f7ff ffbd 	bl	800c550 <__sinit>
 800c5d6:	3648      	adds	r6, #72	; 0x48
 800c5d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	d503      	bpl.n	800c5e8 <__sfp+0x28>
 800c5e0:	6833      	ldr	r3, [r6, #0]
 800c5e2:	b30b      	cbz	r3, 800c628 <__sfp+0x68>
 800c5e4:	6836      	ldr	r6, [r6, #0]
 800c5e6:	e7f7      	b.n	800c5d8 <__sfp+0x18>
 800c5e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5ec:	b9d5      	cbnz	r5, 800c624 <__sfp+0x64>
 800c5ee:	4b16      	ldr	r3, [pc, #88]	; (800c648 <__sfp+0x88>)
 800c5f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5f4:	60e3      	str	r3, [r4, #12]
 800c5f6:	6665      	str	r5, [r4, #100]	; 0x64
 800c5f8:	f000 f859 	bl	800c6ae <__retarget_lock_init_recursive>
 800c5fc:	f7ff ff96 	bl	800c52c <__sfp_lock_release>
 800c600:	2208      	movs	r2, #8
 800c602:	4629      	mov	r1, r5
 800c604:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c608:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c60c:	6025      	str	r5, [r4, #0]
 800c60e:	61a5      	str	r5, [r4, #24]
 800c610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c614:	f7fc fe96 	bl	8009344 <memset>
 800c618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c61c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c620:	4620      	mov	r0, r4
 800c622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c624:	3468      	adds	r4, #104	; 0x68
 800c626:	e7d9      	b.n	800c5dc <__sfp+0x1c>
 800c628:	2104      	movs	r1, #4
 800c62a:	4638      	mov	r0, r7
 800c62c:	f7ff ff62 	bl	800c4f4 <__sfmoreglue>
 800c630:	4604      	mov	r4, r0
 800c632:	6030      	str	r0, [r6, #0]
 800c634:	2800      	cmp	r0, #0
 800c636:	d1d5      	bne.n	800c5e4 <__sfp+0x24>
 800c638:	f7ff ff78 	bl	800c52c <__sfp_lock_release>
 800c63c:	230c      	movs	r3, #12
 800c63e:	603b      	str	r3, [r7, #0]
 800c640:	e7ee      	b.n	800c620 <__sfp+0x60>
 800c642:	bf00      	nop
 800c644:	0800dc10 	.word	0x0800dc10
 800c648:	ffff0001 	.word	0xffff0001

0800c64c <fiprintf>:
 800c64c:	b40e      	push	{r1, r2, r3}
 800c64e:	b503      	push	{r0, r1, lr}
 800c650:	4601      	mov	r1, r0
 800c652:	ab03      	add	r3, sp, #12
 800c654:	4805      	ldr	r0, [pc, #20]	; (800c66c <fiprintf+0x20>)
 800c656:	f853 2b04 	ldr.w	r2, [r3], #4
 800c65a:	6800      	ldr	r0, [r0, #0]
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	f000 f8a7 	bl	800c7b0 <_vfiprintf_r>
 800c662:	b002      	add	sp, #8
 800c664:	f85d eb04 	ldr.w	lr, [sp], #4
 800c668:	b003      	add	sp, #12
 800c66a:	4770      	bx	lr
 800c66c:	2000007c 	.word	0x2000007c

0800c670 <_fwalk_reent>:
 800c670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c674:	4606      	mov	r6, r0
 800c676:	4688      	mov	r8, r1
 800c678:	2700      	movs	r7, #0
 800c67a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c67e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c682:	f1b9 0901 	subs.w	r9, r9, #1
 800c686:	d505      	bpl.n	800c694 <_fwalk_reent+0x24>
 800c688:	6824      	ldr	r4, [r4, #0]
 800c68a:	2c00      	cmp	r4, #0
 800c68c:	d1f7      	bne.n	800c67e <_fwalk_reent+0xe>
 800c68e:	4638      	mov	r0, r7
 800c690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c694:	89ab      	ldrh	r3, [r5, #12]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d907      	bls.n	800c6aa <_fwalk_reent+0x3a>
 800c69a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	d003      	beq.n	800c6aa <_fwalk_reent+0x3a>
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	47c0      	blx	r8
 800c6a8:	4307      	orrs	r7, r0
 800c6aa:	3568      	adds	r5, #104	; 0x68
 800c6ac:	e7e9      	b.n	800c682 <_fwalk_reent+0x12>

0800c6ae <__retarget_lock_init_recursive>:
 800c6ae:	4770      	bx	lr

0800c6b0 <__retarget_lock_acquire_recursive>:
 800c6b0:	4770      	bx	lr

0800c6b2 <__retarget_lock_release_recursive>:
 800c6b2:	4770      	bx	lr

0800c6b4 <memchr>:
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	b510      	push	{r4, lr}
 800c6b8:	b2c9      	uxtb	r1, r1
 800c6ba:	4402      	add	r2, r0
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	d101      	bne.n	800c6c6 <memchr+0x12>
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	e003      	b.n	800c6ce <memchr+0x1a>
 800c6c6:	7804      	ldrb	r4, [r0, #0]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	428c      	cmp	r4, r1
 800c6cc:	d1f6      	bne.n	800c6bc <memchr+0x8>
 800c6ce:	bd10      	pop	{r4, pc}

0800c6d0 <memmove>:
 800c6d0:	4288      	cmp	r0, r1
 800c6d2:	b510      	push	{r4, lr}
 800c6d4:	eb01 0402 	add.w	r4, r1, r2
 800c6d8:	d902      	bls.n	800c6e0 <memmove+0x10>
 800c6da:	4284      	cmp	r4, r0
 800c6dc:	4623      	mov	r3, r4
 800c6de:	d807      	bhi.n	800c6f0 <memmove+0x20>
 800c6e0:	1e43      	subs	r3, r0, #1
 800c6e2:	42a1      	cmp	r1, r4
 800c6e4:	d008      	beq.n	800c6f8 <memmove+0x28>
 800c6e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ee:	e7f8      	b.n	800c6e2 <memmove+0x12>
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	4402      	add	r2, r0
 800c6f4:	428a      	cmp	r2, r1
 800c6f6:	d100      	bne.n	800c6fa <memmove+0x2a>
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c702:	e7f7      	b.n	800c6f4 <memmove+0x24>

0800c704 <_realloc_r>:
 800c704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c708:	4680      	mov	r8, r0
 800c70a:	4614      	mov	r4, r2
 800c70c:	460e      	mov	r6, r1
 800c70e:	b921      	cbnz	r1, 800c71a <_realloc_r+0x16>
 800c710:	4611      	mov	r1, r2
 800c712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c716:	f7fc be99 	b.w	800944c <_malloc_r>
 800c71a:	b92a      	cbnz	r2, 800c728 <_realloc_r+0x24>
 800c71c:	f7fc fe2e 	bl	800937c <_free_r>
 800c720:	4625      	mov	r5, r4
 800c722:	4628      	mov	r0, r5
 800c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c728:	f000 fa9e 	bl	800cc68 <_malloc_usable_size_r>
 800c72c:	4284      	cmp	r4, r0
 800c72e:	4607      	mov	r7, r0
 800c730:	d802      	bhi.n	800c738 <_realloc_r+0x34>
 800c732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c736:	d812      	bhi.n	800c75e <_realloc_r+0x5a>
 800c738:	4621      	mov	r1, r4
 800c73a:	4640      	mov	r0, r8
 800c73c:	f7fc fe86 	bl	800944c <_malloc_r>
 800c740:	4605      	mov	r5, r0
 800c742:	2800      	cmp	r0, #0
 800c744:	d0ed      	beq.n	800c722 <_realloc_r+0x1e>
 800c746:	42bc      	cmp	r4, r7
 800c748:	4622      	mov	r2, r4
 800c74a:	4631      	mov	r1, r6
 800c74c:	bf28      	it	cs
 800c74e:	463a      	movcs	r2, r7
 800c750:	f7fc fdea 	bl	8009328 <memcpy>
 800c754:	4631      	mov	r1, r6
 800c756:	4640      	mov	r0, r8
 800c758:	f7fc fe10 	bl	800937c <_free_r>
 800c75c:	e7e1      	b.n	800c722 <_realloc_r+0x1e>
 800c75e:	4635      	mov	r5, r6
 800c760:	e7df      	b.n	800c722 <_realloc_r+0x1e>

0800c762 <__sfputc_r>:
 800c762:	6893      	ldr	r3, [r2, #8]
 800c764:	b410      	push	{r4}
 800c766:	3b01      	subs	r3, #1
 800c768:	2b00      	cmp	r3, #0
 800c76a:	6093      	str	r3, [r2, #8]
 800c76c:	da07      	bge.n	800c77e <__sfputc_r+0x1c>
 800c76e:	6994      	ldr	r4, [r2, #24]
 800c770:	42a3      	cmp	r3, r4
 800c772:	db01      	blt.n	800c778 <__sfputc_r+0x16>
 800c774:	290a      	cmp	r1, #10
 800c776:	d102      	bne.n	800c77e <__sfputc_r+0x1c>
 800c778:	bc10      	pop	{r4}
 800c77a:	f000 b949 	b.w	800ca10 <__swbuf_r>
 800c77e:	6813      	ldr	r3, [r2, #0]
 800c780:	1c58      	adds	r0, r3, #1
 800c782:	6010      	str	r0, [r2, #0]
 800c784:	7019      	strb	r1, [r3, #0]
 800c786:	4608      	mov	r0, r1
 800c788:	bc10      	pop	{r4}
 800c78a:	4770      	bx	lr

0800c78c <__sfputs_r>:
 800c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78e:	4606      	mov	r6, r0
 800c790:	460f      	mov	r7, r1
 800c792:	4614      	mov	r4, r2
 800c794:	18d5      	adds	r5, r2, r3
 800c796:	42ac      	cmp	r4, r5
 800c798:	d101      	bne.n	800c79e <__sfputs_r+0x12>
 800c79a:	2000      	movs	r0, #0
 800c79c:	e007      	b.n	800c7ae <__sfputs_r+0x22>
 800c79e:	463a      	mov	r2, r7
 800c7a0:	4630      	mov	r0, r6
 800c7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a6:	f7ff ffdc 	bl	800c762 <__sfputc_r>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	d1f3      	bne.n	800c796 <__sfputs_r+0xa>
 800c7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c7b0 <_vfiprintf_r>:
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	460d      	mov	r5, r1
 800c7b6:	4614      	mov	r4, r2
 800c7b8:	4698      	mov	r8, r3
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	b09d      	sub	sp, #116	; 0x74
 800c7be:	b118      	cbz	r0, 800c7c8 <_vfiprintf_r+0x18>
 800c7c0:	6983      	ldr	r3, [r0, #24]
 800c7c2:	b90b      	cbnz	r3, 800c7c8 <_vfiprintf_r+0x18>
 800c7c4:	f7ff fec4 	bl	800c550 <__sinit>
 800c7c8:	4b89      	ldr	r3, [pc, #548]	; (800c9f0 <_vfiprintf_r+0x240>)
 800c7ca:	429d      	cmp	r5, r3
 800c7cc:	d11b      	bne.n	800c806 <_vfiprintf_r+0x56>
 800c7ce:	6875      	ldr	r5, [r6, #4]
 800c7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d2:	07d9      	lsls	r1, r3, #31
 800c7d4:	d405      	bmi.n	800c7e2 <_vfiprintf_r+0x32>
 800c7d6:	89ab      	ldrh	r3, [r5, #12]
 800c7d8:	059a      	lsls	r2, r3, #22
 800c7da:	d402      	bmi.n	800c7e2 <_vfiprintf_r+0x32>
 800c7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7de:	f7ff ff67 	bl	800c6b0 <__retarget_lock_acquire_recursive>
 800c7e2:	89ab      	ldrh	r3, [r5, #12]
 800c7e4:	071b      	lsls	r3, r3, #28
 800c7e6:	d501      	bpl.n	800c7ec <_vfiprintf_r+0x3c>
 800c7e8:	692b      	ldr	r3, [r5, #16]
 800c7ea:	b9eb      	cbnz	r3, 800c828 <_vfiprintf_r+0x78>
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f000 f960 	bl	800cab4 <__swsetup_r>
 800c7f4:	b1c0      	cbz	r0, 800c828 <_vfiprintf_r+0x78>
 800c7f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7f8:	07dc      	lsls	r4, r3, #31
 800c7fa:	d50e      	bpl.n	800c81a <_vfiprintf_r+0x6a>
 800c7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c800:	b01d      	add	sp, #116	; 0x74
 800c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c806:	4b7b      	ldr	r3, [pc, #492]	; (800c9f4 <_vfiprintf_r+0x244>)
 800c808:	429d      	cmp	r5, r3
 800c80a:	d101      	bne.n	800c810 <_vfiprintf_r+0x60>
 800c80c:	68b5      	ldr	r5, [r6, #8]
 800c80e:	e7df      	b.n	800c7d0 <_vfiprintf_r+0x20>
 800c810:	4b79      	ldr	r3, [pc, #484]	; (800c9f8 <_vfiprintf_r+0x248>)
 800c812:	429d      	cmp	r5, r3
 800c814:	bf08      	it	eq
 800c816:	68f5      	ldreq	r5, [r6, #12]
 800c818:	e7da      	b.n	800c7d0 <_vfiprintf_r+0x20>
 800c81a:	89ab      	ldrh	r3, [r5, #12]
 800c81c:	0598      	lsls	r0, r3, #22
 800c81e:	d4ed      	bmi.n	800c7fc <_vfiprintf_r+0x4c>
 800c820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c822:	f7ff ff46 	bl	800c6b2 <__retarget_lock_release_recursive>
 800c826:	e7e9      	b.n	800c7fc <_vfiprintf_r+0x4c>
 800c828:	2300      	movs	r3, #0
 800c82a:	9309      	str	r3, [sp, #36]	; 0x24
 800c82c:	2320      	movs	r3, #32
 800c82e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c832:	2330      	movs	r3, #48	; 0x30
 800c834:	f04f 0901 	mov.w	r9, #1
 800c838:	f8cd 800c 	str.w	r8, [sp, #12]
 800c83c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c9fc <_vfiprintf_r+0x24c>
 800c840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c844:	4623      	mov	r3, r4
 800c846:	469a      	mov	sl, r3
 800c848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c84c:	b10a      	cbz	r2, 800c852 <_vfiprintf_r+0xa2>
 800c84e:	2a25      	cmp	r2, #37	; 0x25
 800c850:	d1f9      	bne.n	800c846 <_vfiprintf_r+0x96>
 800c852:	ebba 0b04 	subs.w	fp, sl, r4
 800c856:	d00b      	beq.n	800c870 <_vfiprintf_r+0xc0>
 800c858:	465b      	mov	r3, fp
 800c85a:	4622      	mov	r2, r4
 800c85c:	4629      	mov	r1, r5
 800c85e:	4630      	mov	r0, r6
 800c860:	f7ff ff94 	bl	800c78c <__sfputs_r>
 800c864:	3001      	adds	r0, #1
 800c866:	f000 80aa 	beq.w	800c9be <_vfiprintf_r+0x20e>
 800c86a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c86c:	445a      	add	r2, fp
 800c86e:	9209      	str	r2, [sp, #36]	; 0x24
 800c870:	f89a 3000 	ldrb.w	r3, [sl]
 800c874:	2b00      	cmp	r3, #0
 800c876:	f000 80a2 	beq.w	800c9be <_vfiprintf_r+0x20e>
 800c87a:	2300      	movs	r3, #0
 800c87c:	f04f 32ff 	mov.w	r2, #4294967295
 800c880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c884:	f10a 0a01 	add.w	sl, sl, #1
 800c888:	9304      	str	r3, [sp, #16]
 800c88a:	9307      	str	r3, [sp, #28]
 800c88c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c890:	931a      	str	r3, [sp, #104]	; 0x68
 800c892:	4654      	mov	r4, sl
 800c894:	2205      	movs	r2, #5
 800c896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89a:	4858      	ldr	r0, [pc, #352]	; (800c9fc <_vfiprintf_r+0x24c>)
 800c89c:	f7ff ff0a 	bl	800c6b4 <memchr>
 800c8a0:	9a04      	ldr	r2, [sp, #16]
 800c8a2:	b9d8      	cbnz	r0, 800c8dc <_vfiprintf_r+0x12c>
 800c8a4:	06d1      	lsls	r1, r2, #27
 800c8a6:	bf44      	itt	mi
 800c8a8:	2320      	movmi	r3, #32
 800c8aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ae:	0713      	lsls	r3, r2, #28
 800c8b0:	bf44      	itt	mi
 800c8b2:	232b      	movmi	r3, #43	; 0x2b
 800c8b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8be:	d015      	beq.n	800c8ec <_vfiprintf_r+0x13c>
 800c8c0:	4654      	mov	r4, sl
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	f04f 0c0a 	mov.w	ip, #10
 800c8c8:	9a07      	ldr	r2, [sp, #28]
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8d0:	3b30      	subs	r3, #48	; 0x30
 800c8d2:	2b09      	cmp	r3, #9
 800c8d4:	d94e      	bls.n	800c974 <_vfiprintf_r+0x1c4>
 800c8d6:	b1b0      	cbz	r0, 800c906 <_vfiprintf_r+0x156>
 800c8d8:	9207      	str	r2, [sp, #28]
 800c8da:	e014      	b.n	800c906 <_vfiprintf_r+0x156>
 800c8dc:	eba0 0308 	sub.w	r3, r0, r8
 800c8e0:	fa09 f303 	lsl.w	r3, r9, r3
 800c8e4:	4313      	orrs	r3, r2
 800c8e6:	46a2      	mov	sl, r4
 800c8e8:	9304      	str	r3, [sp, #16]
 800c8ea:	e7d2      	b.n	800c892 <_vfiprintf_r+0xe2>
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	1d19      	adds	r1, r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	9103      	str	r1, [sp, #12]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	bfbb      	ittet	lt
 800c8f8:	425b      	neglt	r3, r3
 800c8fa:	f042 0202 	orrlt.w	r2, r2, #2
 800c8fe:	9307      	strge	r3, [sp, #28]
 800c900:	9307      	strlt	r3, [sp, #28]
 800c902:	bfb8      	it	lt
 800c904:	9204      	strlt	r2, [sp, #16]
 800c906:	7823      	ldrb	r3, [r4, #0]
 800c908:	2b2e      	cmp	r3, #46	; 0x2e
 800c90a:	d10c      	bne.n	800c926 <_vfiprintf_r+0x176>
 800c90c:	7863      	ldrb	r3, [r4, #1]
 800c90e:	2b2a      	cmp	r3, #42	; 0x2a
 800c910:	d135      	bne.n	800c97e <_vfiprintf_r+0x1ce>
 800c912:	9b03      	ldr	r3, [sp, #12]
 800c914:	3402      	adds	r4, #2
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	9203      	str	r2, [sp, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bfb8      	it	lt
 800c920:	f04f 33ff 	movlt.w	r3, #4294967295
 800c924:	9305      	str	r3, [sp, #20]
 800c926:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800ca00 <_vfiprintf_r+0x250>
 800c92a:	2203      	movs	r2, #3
 800c92c:	4650      	mov	r0, sl
 800c92e:	7821      	ldrb	r1, [r4, #0]
 800c930:	f7ff fec0 	bl	800c6b4 <memchr>
 800c934:	b140      	cbz	r0, 800c948 <_vfiprintf_r+0x198>
 800c936:	2340      	movs	r3, #64	; 0x40
 800c938:	eba0 000a 	sub.w	r0, r0, sl
 800c93c:	fa03 f000 	lsl.w	r0, r3, r0
 800c940:	9b04      	ldr	r3, [sp, #16]
 800c942:	3401      	adds	r4, #1
 800c944:	4303      	orrs	r3, r0
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94c:	2206      	movs	r2, #6
 800c94e:	482d      	ldr	r0, [pc, #180]	; (800ca04 <_vfiprintf_r+0x254>)
 800c950:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c954:	f7ff feae 	bl	800c6b4 <memchr>
 800c958:	2800      	cmp	r0, #0
 800c95a:	d03f      	beq.n	800c9dc <_vfiprintf_r+0x22c>
 800c95c:	4b2a      	ldr	r3, [pc, #168]	; (800ca08 <_vfiprintf_r+0x258>)
 800c95e:	bb1b      	cbnz	r3, 800c9a8 <_vfiprintf_r+0x1f8>
 800c960:	9b03      	ldr	r3, [sp, #12]
 800c962:	3307      	adds	r3, #7
 800c964:	f023 0307 	bic.w	r3, r3, #7
 800c968:	3308      	adds	r3, #8
 800c96a:	9303      	str	r3, [sp, #12]
 800c96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96e:	443b      	add	r3, r7
 800c970:	9309      	str	r3, [sp, #36]	; 0x24
 800c972:	e767      	b.n	800c844 <_vfiprintf_r+0x94>
 800c974:	460c      	mov	r4, r1
 800c976:	2001      	movs	r0, #1
 800c978:	fb0c 3202 	mla	r2, ip, r2, r3
 800c97c:	e7a5      	b.n	800c8ca <_vfiprintf_r+0x11a>
 800c97e:	2300      	movs	r3, #0
 800c980:	f04f 0c0a 	mov.w	ip, #10
 800c984:	4619      	mov	r1, r3
 800c986:	3401      	adds	r4, #1
 800c988:	9305      	str	r3, [sp, #20]
 800c98a:	4620      	mov	r0, r4
 800c98c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c990:	3a30      	subs	r2, #48	; 0x30
 800c992:	2a09      	cmp	r2, #9
 800c994:	d903      	bls.n	800c99e <_vfiprintf_r+0x1ee>
 800c996:	2b00      	cmp	r3, #0
 800c998:	d0c5      	beq.n	800c926 <_vfiprintf_r+0x176>
 800c99a:	9105      	str	r1, [sp, #20]
 800c99c:	e7c3      	b.n	800c926 <_vfiprintf_r+0x176>
 800c99e:	4604      	mov	r4, r0
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9a6:	e7f0      	b.n	800c98a <_vfiprintf_r+0x1da>
 800c9a8:	ab03      	add	r3, sp, #12
 800c9aa:	9300      	str	r3, [sp, #0]
 800c9ac:	462a      	mov	r2, r5
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	4b16      	ldr	r3, [pc, #88]	; (800ca0c <_vfiprintf_r+0x25c>)
 800c9b2:	a904      	add	r1, sp, #16
 800c9b4:	f3af 8000 	nop.w
 800c9b8:	4607      	mov	r7, r0
 800c9ba:	1c78      	adds	r0, r7, #1
 800c9bc:	d1d6      	bne.n	800c96c <_vfiprintf_r+0x1bc>
 800c9be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9c0:	07d9      	lsls	r1, r3, #31
 800c9c2:	d405      	bmi.n	800c9d0 <_vfiprintf_r+0x220>
 800c9c4:	89ab      	ldrh	r3, [r5, #12]
 800c9c6:	059a      	lsls	r2, r3, #22
 800c9c8:	d402      	bmi.n	800c9d0 <_vfiprintf_r+0x220>
 800c9ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9cc:	f7ff fe71 	bl	800c6b2 <__retarget_lock_release_recursive>
 800c9d0:	89ab      	ldrh	r3, [r5, #12]
 800c9d2:	065b      	lsls	r3, r3, #25
 800c9d4:	f53f af12 	bmi.w	800c7fc <_vfiprintf_r+0x4c>
 800c9d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c9da:	e711      	b.n	800c800 <_vfiprintf_r+0x50>
 800c9dc:	ab03      	add	r3, sp, #12
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	4b09      	ldr	r3, [pc, #36]	; (800ca0c <_vfiprintf_r+0x25c>)
 800c9e6:	a904      	add	r1, sp, #16
 800c9e8:	f7ff f86a 	bl	800bac0 <_printf_i>
 800c9ec:	e7e4      	b.n	800c9b8 <_vfiprintf_r+0x208>
 800c9ee:	bf00      	nop
 800c9f0:	0800e018 	.word	0x0800e018
 800c9f4:	0800e038 	.word	0x0800e038
 800c9f8:	0800dff8 	.word	0x0800dff8
 800c9fc:	0800de6c 	.word	0x0800de6c
 800ca00:	0800de72 	.word	0x0800de72
 800ca04:	0800de76 	.word	0x0800de76
 800ca08:	00000000 	.word	0x00000000
 800ca0c:	0800c78d 	.word	0x0800c78d

0800ca10 <__swbuf_r>:
 800ca10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca12:	460e      	mov	r6, r1
 800ca14:	4614      	mov	r4, r2
 800ca16:	4605      	mov	r5, r0
 800ca18:	b118      	cbz	r0, 800ca22 <__swbuf_r+0x12>
 800ca1a:	6983      	ldr	r3, [r0, #24]
 800ca1c:	b90b      	cbnz	r3, 800ca22 <__swbuf_r+0x12>
 800ca1e:	f7ff fd97 	bl	800c550 <__sinit>
 800ca22:	4b21      	ldr	r3, [pc, #132]	; (800caa8 <__swbuf_r+0x98>)
 800ca24:	429c      	cmp	r4, r3
 800ca26:	d12b      	bne.n	800ca80 <__swbuf_r+0x70>
 800ca28:	686c      	ldr	r4, [r5, #4]
 800ca2a:	69a3      	ldr	r3, [r4, #24]
 800ca2c:	60a3      	str	r3, [r4, #8]
 800ca2e:	89a3      	ldrh	r3, [r4, #12]
 800ca30:	071a      	lsls	r2, r3, #28
 800ca32:	d52f      	bpl.n	800ca94 <__swbuf_r+0x84>
 800ca34:	6923      	ldr	r3, [r4, #16]
 800ca36:	b36b      	cbz	r3, 800ca94 <__swbuf_r+0x84>
 800ca38:	6923      	ldr	r3, [r4, #16]
 800ca3a:	6820      	ldr	r0, [r4, #0]
 800ca3c:	b2f6      	uxtb	r6, r6
 800ca3e:	1ac0      	subs	r0, r0, r3
 800ca40:	6963      	ldr	r3, [r4, #20]
 800ca42:	4637      	mov	r7, r6
 800ca44:	4283      	cmp	r3, r0
 800ca46:	dc04      	bgt.n	800ca52 <__swbuf_r+0x42>
 800ca48:	4621      	mov	r1, r4
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	f7ff fcec 	bl	800c428 <_fflush_r>
 800ca50:	bb30      	cbnz	r0, 800caa0 <__swbuf_r+0x90>
 800ca52:	68a3      	ldr	r3, [r4, #8]
 800ca54:	3001      	adds	r0, #1
 800ca56:	3b01      	subs	r3, #1
 800ca58:	60a3      	str	r3, [r4, #8]
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	1c5a      	adds	r2, r3, #1
 800ca5e:	6022      	str	r2, [r4, #0]
 800ca60:	701e      	strb	r6, [r3, #0]
 800ca62:	6963      	ldr	r3, [r4, #20]
 800ca64:	4283      	cmp	r3, r0
 800ca66:	d004      	beq.n	800ca72 <__swbuf_r+0x62>
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	07db      	lsls	r3, r3, #31
 800ca6c:	d506      	bpl.n	800ca7c <__swbuf_r+0x6c>
 800ca6e:	2e0a      	cmp	r6, #10
 800ca70:	d104      	bne.n	800ca7c <__swbuf_r+0x6c>
 800ca72:	4621      	mov	r1, r4
 800ca74:	4628      	mov	r0, r5
 800ca76:	f7ff fcd7 	bl	800c428 <_fflush_r>
 800ca7a:	b988      	cbnz	r0, 800caa0 <__swbuf_r+0x90>
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <__swbuf_r+0x9c>)
 800ca82:	429c      	cmp	r4, r3
 800ca84:	d101      	bne.n	800ca8a <__swbuf_r+0x7a>
 800ca86:	68ac      	ldr	r4, [r5, #8]
 800ca88:	e7cf      	b.n	800ca2a <__swbuf_r+0x1a>
 800ca8a:	4b09      	ldr	r3, [pc, #36]	; (800cab0 <__swbuf_r+0xa0>)
 800ca8c:	429c      	cmp	r4, r3
 800ca8e:	bf08      	it	eq
 800ca90:	68ec      	ldreq	r4, [r5, #12]
 800ca92:	e7ca      	b.n	800ca2a <__swbuf_r+0x1a>
 800ca94:	4621      	mov	r1, r4
 800ca96:	4628      	mov	r0, r5
 800ca98:	f000 f80c 	bl	800cab4 <__swsetup_r>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d0cb      	beq.n	800ca38 <__swbuf_r+0x28>
 800caa0:	f04f 37ff 	mov.w	r7, #4294967295
 800caa4:	e7ea      	b.n	800ca7c <__swbuf_r+0x6c>
 800caa6:	bf00      	nop
 800caa8:	0800e018 	.word	0x0800e018
 800caac:	0800e038 	.word	0x0800e038
 800cab0:	0800dff8 	.word	0x0800dff8

0800cab4 <__swsetup_r>:
 800cab4:	4b32      	ldr	r3, [pc, #200]	; (800cb80 <__swsetup_r+0xcc>)
 800cab6:	b570      	push	{r4, r5, r6, lr}
 800cab8:	681d      	ldr	r5, [r3, #0]
 800caba:	4606      	mov	r6, r0
 800cabc:	460c      	mov	r4, r1
 800cabe:	b125      	cbz	r5, 800caca <__swsetup_r+0x16>
 800cac0:	69ab      	ldr	r3, [r5, #24]
 800cac2:	b913      	cbnz	r3, 800caca <__swsetup_r+0x16>
 800cac4:	4628      	mov	r0, r5
 800cac6:	f7ff fd43 	bl	800c550 <__sinit>
 800caca:	4b2e      	ldr	r3, [pc, #184]	; (800cb84 <__swsetup_r+0xd0>)
 800cacc:	429c      	cmp	r4, r3
 800cace:	d10f      	bne.n	800caf0 <__swsetup_r+0x3c>
 800cad0:	686c      	ldr	r4, [r5, #4]
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cad8:	0719      	lsls	r1, r3, #28
 800cada:	d42c      	bmi.n	800cb36 <__swsetup_r+0x82>
 800cadc:	06dd      	lsls	r5, r3, #27
 800cade:	d411      	bmi.n	800cb04 <__swsetup_r+0x50>
 800cae0:	2309      	movs	r3, #9
 800cae2:	6033      	str	r3, [r6, #0]
 800cae4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295
 800caec:	81a3      	strh	r3, [r4, #12]
 800caee:	e03e      	b.n	800cb6e <__swsetup_r+0xba>
 800caf0:	4b25      	ldr	r3, [pc, #148]	; (800cb88 <__swsetup_r+0xd4>)
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d101      	bne.n	800cafa <__swsetup_r+0x46>
 800caf6:	68ac      	ldr	r4, [r5, #8]
 800caf8:	e7eb      	b.n	800cad2 <__swsetup_r+0x1e>
 800cafa:	4b24      	ldr	r3, [pc, #144]	; (800cb8c <__swsetup_r+0xd8>)
 800cafc:	429c      	cmp	r4, r3
 800cafe:	bf08      	it	eq
 800cb00:	68ec      	ldreq	r4, [r5, #12]
 800cb02:	e7e6      	b.n	800cad2 <__swsetup_r+0x1e>
 800cb04:	0758      	lsls	r0, r3, #29
 800cb06:	d512      	bpl.n	800cb2e <__swsetup_r+0x7a>
 800cb08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb0a:	b141      	cbz	r1, 800cb1e <__swsetup_r+0x6a>
 800cb0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb10:	4299      	cmp	r1, r3
 800cb12:	d002      	beq.n	800cb1a <__swsetup_r+0x66>
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7fc fc31 	bl	800937c <_free_r>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb1e:	89a3      	ldrh	r3, [r4, #12]
 800cb20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb24:	81a3      	strh	r3, [r4, #12]
 800cb26:	2300      	movs	r3, #0
 800cb28:	6063      	str	r3, [r4, #4]
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	6023      	str	r3, [r4, #0]
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f043 0308 	orr.w	r3, r3, #8
 800cb34:	81a3      	strh	r3, [r4, #12]
 800cb36:	6923      	ldr	r3, [r4, #16]
 800cb38:	b94b      	cbnz	r3, 800cb4e <__swsetup_r+0x9a>
 800cb3a:	89a3      	ldrh	r3, [r4, #12]
 800cb3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb44:	d003      	beq.n	800cb4e <__swsetup_r+0x9a>
 800cb46:	4621      	mov	r1, r4
 800cb48:	4630      	mov	r0, r6
 800cb4a:	f000 f84d 	bl	800cbe8 <__smakebuf_r>
 800cb4e:	89a0      	ldrh	r0, [r4, #12]
 800cb50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb54:	f010 0301 	ands.w	r3, r0, #1
 800cb58:	d00a      	beq.n	800cb70 <__swsetup_r+0xbc>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60a3      	str	r3, [r4, #8]
 800cb5e:	6963      	ldr	r3, [r4, #20]
 800cb60:	425b      	negs	r3, r3
 800cb62:	61a3      	str	r3, [r4, #24]
 800cb64:	6923      	ldr	r3, [r4, #16]
 800cb66:	b943      	cbnz	r3, 800cb7a <__swsetup_r+0xc6>
 800cb68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb6c:	d1ba      	bne.n	800cae4 <__swsetup_r+0x30>
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}
 800cb70:	0781      	lsls	r1, r0, #30
 800cb72:	bf58      	it	pl
 800cb74:	6963      	ldrpl	r3, [r4, #20]
 800cb76:	60a3      	str	r3, [r4, #8]
 800cb78:	e7f4      	b.n	800cb64 <__swsetup_r+0xb0>
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	e7f7      	b.n	800cb6e <__swsetup_r+0xba>
 800cb7e:	bf00      	nop
 800cb80:	2000007c 	.word	0x2000007c
 800cb84:	0800e018 	.word	0x0800e018
 800cb88:	0800e038 	.word	0x0800e038
 800cb8c:	0800dff8 	.word	0x0800dff8

0800cb90 <abort>:
 800cb90:	2006      	movs	r0, #6
 800cb92:	b508      	push	{r3, lr}
 800cb94:	f000 f898 	bl	800ccc8 <raise>
 800cb98:	2001      	movs	r0, #1
 800cb9a:	f7f5 fb0c 	bl	80021b6 <_exit>

0800cb9e <__swhatbuf_r>:
 800cb9e:	b570      	push	{r4, r5, r6, lr}
 800cba0:	460e      	mov	r6, r1
 800cba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cba6:	4614      	mov	r4, r2
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	461d      	mov	r5, r3
 800cbac:	b096      	sub	sp, #88	; 0x58
 800cbae:	da08      	bge.n	800cbc2 <__swhatbuf_r+0x24>
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cbb6:	602a      	str	r2, [r5, #0]
 800cbb8:	061a      	lsls	r2, r3, #24
 800cbba:	d410      	bmi.n	800cbde <__swhatbuf_r+0x40>
 800cbbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbc0:	e00e      	b.n	800cbe0 <__swhatbuf_r+0x42>
 800cbc2:	466a      	mov	r2, sp
 800cbc4:	f000 f89c 	bl	800cd00 <_fstat_r>
 800cbc8:	2800      	cmp	r0, #0
 800cbca:	dbf1      	blt.n	800cbb0 <__swhatbuf_r+0x12>
 800cbcc:	9a01      	ldr	r2, [sp, #4]
 800cbce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cbd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cbd6:	425a      	negs	r2, r3
 800cbd8:	415a      	adcs	r2, r3
 800cbda:	602a      	str	r2, [r5, #0]
 800cbdc:	e7ee      	b.n	800cbbc <__swhatbuf_r+0x1e>
 800cbde:	2340      	movs	r3, #64	; 0x40
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	6023      	str	r3, [r4, #0]
 800cbe4:	b016      	add	sp, #88	; 0x58
 800cbe6:	bd70      	pop	{r4, r5, r6, pc}

0800cbe8 <__smakebuf_r>:
 800cbe8:	898b      	ldrh	r3, [r1, #12]
 800cbea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbec:	079d      	lsls	r5, r3, #30
 800cbee:	4606      	mov	r6, r0
 800cbf0:	460c      	mov	r4, r1
 800cbf2:	d507      	bpl.n	800cc04 <__smakebuf_r+0x1c>
 800cbf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbf8:	6023      	str	r3, [r4, #0]
 800cbfa:	6123      	str	r3, [r4, #16]
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	6163      	str	r3, [r4, #20]
 800cc00:	b002      	add	sp, #8
 800cc02:	bd70      	pop	{r4, r5, r6, pc}
 800cc04:	466a      	mov	r2, sp
 800cc06:	ab01      	add	r3, sp, #4
 800cc08:	f7ff ffc9 	bl	800cb9e <__swhatbuf_r>
 800cc0c:	9900      	ldr	r1, [sp, #0]
 800cc0e:	4605      	mov	r5, r0
 800cc10:	4630      	mov	r0, r6
 800cc12:	f7fc fc1b 	bl	800944c <_malloc_r>
 800cc16:	b948      	cbnz	r0, 800cc2c <__smakebuf_r+0x44>
 800cc18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc1c:	059a      	lsls	r2, r3, #22
 800cc1e:	d4ef      	bmi.n	800cc00 <__smakebuf_r+0x18>
 800cc20:	f023 0303 	bic.w	r3, r3, #3
 800cc24:	f043 0302 	orr.w	r3, r3, #2
 800cc28:	81a3      	strh	r3, [r4, #12]
 800cc2a:	e7e3      	b.n	800cbf4 <__smakebuf_r+0xc>
 800cc2c:	4b0d      	ldr	r3, [pc, #52]	; (800cc64 <__smakebuf_r+0x7c>)
 800cc2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	6020      	str	r0, [r4, #0]
 800cc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc38:	81a3      	strh	r3, [r4, #12]
 800cc3a:	9b00      	ldr	r3, [sp, #0]
 800cc3c:	6120      	str	r0, [r4, #16]
 800cc3e:	6163      	str	r3, [r4, #20]
 800cc40:	9b01      	ldr	r3, [sp, #4]
 800cc42:	b15b      	cbz	r3, 800cc5c <__smakebuf_r+0x74>
 800cc44:	4630      	mov	r0, r6
 800cc46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc4a:	f000 f86b 	bl	800cd24 <_isatty_r>
 800cc4e:	b128      	cbz	r0, 800cc5c <__smakebuf_r+0x74>
 800cc50:	89a3      	ldrh	r3, [r4, #12]
 800cc52:	f023 0303 	bic.w	r3, r3, #3
 800cc56:	f043 0301 	orr.w	r3, r3, #1
 800cc5a:	81a3      	strh	r3, [r4, #12]
 800cc5c:	89a0      	ldrh	r0, [r4, #12]
 800cc5e:	4305      	orrs	r5, r0
 800cc60:	81a5      	strh	r5, [r4, #12]
 800cc62:	e7cd      	b.n	800cc00 <__smakebuf_r+0x18>
 800cc64:	0800c4e9 	.word	0x0800c4e9

0800cc68 <_malloc_usable_size_r>:
 800cc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc6c:	1f18      	subs	r0, r3, #4
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	bfbc      	itt	lt
 800cc72:	580b      	ldrlt	r3, [r1, r0]
 800cc74:	18c0      	addlt	r0, r0, r3
 800cc76:	4770      	bx	lr

0800cc78 <_raise_r>:
 800cc78:	291f      	cmp	r1, #31
 800cc7a:	b538      	push	{r3, r4, r5, lr}
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	460d      	mov	r5, r1
 800cc80:	d904      	bls.n	800cc8c <_raise_r+0x14>
 800cc82:	2316      	movs	r3, #22
 800cc84:	6003      	str	r3, [r0, #0]
 800cc86:	f04f 30ff 	mov.w	r0, #4294967295
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc8e:	b112      	cbz	r2, 800cc96 <_raise_r+0x1e>
 800cc90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc94:	b94b      	cbnz	r3, 800ccaa <_raise_r+0x32>
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 f830 	bl	800ccfc <_getpid_r>
 800cc9c:	462a      	mov	r2, r5
 800cc9e:	4601      	mov	r1, r0
 800cca0:	4620      	mov	r0, r4
 800cca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cca6:	f000 b817 	b.w	800ccd8 <_kill_r>
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d00a      	beq.n	800ccc4 <_raise_r+0x4c>
 800ccae:	1c59      	adds	r1, r3, #1
 800ccb0:	d103      	bne.n	800ccba <_raise_r+0x42>
 800ccb2:	2316      	movs	r3, #22
 800ccb4:	6003      	str	r3, [r0, #0]
 800ccb6:	2001      	movs	r0, #1
 800ccb8:	e7e7      	b.n	800cc8a <_raise_r+0x12>
 800ccba:	2400      	movs	r4, #0
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ccc2:	4798      	blx	r3
 800ccc4:	2000      	movs	r0, #0
 800ccc6:	e7e0      	b.n	800cc8a <_raise_r+0x12>

0800ccc8 <raise>:
 800ccc8:	4b02      	ldr	r3, [pc, #8]	; (800ccd4 <raise+0xc>)
 800ccca:	4601      	mov	r1, r0
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	f7ff bfd3 	b.w	800cc78 <_raise_r>
 800ccd2:	bf00      	nop
 800ccd4:	2000007c 	.word	0x2000007c

0800ccd8 <_kill_r>:
 800ccd8:	b538      	push	{r3, r4, r5, lr}
 800ccda:	2300      	movs	r3, #0
 800ccdc:	4d06      	ldr	r5, [pc, #24]	; (800ccf8 <_kill_r+0x20>)
 800ccde:	4604      	mov	r4, r0
 800cce0:	4608      	mov	r0, r1
 800cce2:	4611      	mov	r1, r2
 800cce4:	602b      	str	r3, [r5, #0]
 800cce6:	f7f5 fa56 	bl	8002196 <_kill>
 800ccea:	1c43      	adds	r3, r0, #1
 800ccec:	d102      	bne.n	800ccf4 <_kill_r+0x1c>
 800ccee:	682b      	ldr	r3, [r5, #0]
 800ccf0:	b103      	cbz	r3, 800ccf4 <_kill_r+0x1c>
 800ccf2:	6023      	str	r3, [r4, #0]
 800ccf4:	bd38      	pop	{r3, r4, r5, pc}
 800ccf6:	bf00      	nop
 800ccf8:	20002908 	.word	0x20002908

0800ccfc <_getpid_r>:
 800ccfc:	f7f5 ba44 	b.w	8002188 <_getpid>

0800cd00 <_fstat_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	2300      	movs	r3, #0
 800cd04:	4d06      	ldr	r5, [pc, #24]	; (800cd20 <_fstat_r+0x20>)
 800cd06:	4604      	mov	r4, r0
 800cd08:	4608      	mov	r0, r1
 800cd0a:	4611      	mov	r1, r2
 800cd0c:	602b      	str	r3, [r5, #0]
 800cd0e:	f7f5 faa0 	bl	8002252 <_fstat>
 800cd12:	1c43      	adds	r3, r0, #1
 800cd14:	d102      	bne.n	800cd1c <_fstat_r+0x1c>
 800cd16:	682b      	ldr	r3, [r5, #0]
 800cd18:	b103      	cbz	r3, 800cd1c <_fstat_r+0x1c>
 800cd1a:	6023      	str	r3, [r4, #0]
 800cd1c:	bd38      	pop	{r3, r4, r5, pc}
 800cd1e:	bf00      	nop
 800cd20:	20002908 	.word	0x20002908

0800cd24 <_isatty_r>:
 800cd24:	b538      	push	{r3, r4, r5, lr}
 800cd26:	2300      	movs	r3, #0
 800cd28:	4d05      	ldr	r5, [pc, #20]	; (800cd40 <_isatty_r+0x1c>)
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	4608      	mov	r0, r1
 800cd2e:	602b      	str	r3, [r5, #0]
 800cd30:	f7f5 fa9e 	bl	8002270 <_isatty>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <_isatty_r+0x1a>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	b103      	cbz	r3, 800cd3e <_isatty_r+0x1a>
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	20002908 	.word	0x20002908

0800cd44 <pow>:
 800cd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd48:	4614      	mov	r4, r2
 800cd4a:	461d      	mov	r5, r3
 800cd4c:	4680      	mov	r8, r0
 800cd4e:	4689      	mov	r9, r1
 800cd50:	f000 f862 	bl	800ce18 <__ieee754_pow>
 800cd54:	4622      	mov	r2, r4
 800cd56:	4606      	mov	r6, r0
 800cd58:	460f      	mov	r7, r1
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	4629      	mov	r1, r5
 800cd60:	f7f3 fec4 	bl	8000aec <__aeabi_dcmpun>
 800cd64:	bbc8      	cbnz	r0, 800cdda <pow+0x96>
 800cd66:	2200      	movs	r2, #0
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	f7f3 fe8b 	bl	8000a88 <__aeabi_dcmpeq>
 800cd72:	b1b8      	cbz	r0, 800cda4 <pow+0x60>
 800cd74:	2200      	movs	r2, #0
 800cd76:	2300      	movs	r3, #0
 800cd78:	4620      	mov	r0, r4
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	f7f3 fe84 	bl	8000a88 <__aeabi_dcmpeq>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d141      	bne.n	800ce08 <pow+0xc4>
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	f000 fe3b 	bl	800da02 <finite>
 800cd8c:	b328      	cbz	r0, 800cdda <pow+0x96>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	2300      	movs	r3, #0
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	f7f3 fe81 	bl	8000a9c <__aeabi_dcmplt>
 800cd9a:	b1f0      	cbz	r0, 800cdda <pow+0x96>
 800cd9c:	f7fc fa8a 	bl	80092b4 <__errno>
 800cda0:	2322      	movs	r3, #34	; 0x22
 800cda2:	e019      	b.n	800cdd8 <pow+0x94>
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f000 fe2b 	bl	800da02 <finite>
 800cdac:	b9c8      	cbnz	r0, 800cde2 <pow+0x9e>
 800cdae:	4640      	mov	r0, r8
 800cdb0:	4649      	mov	r1, r9
 800cdb2:	f000 fe26 	bl	800da02 <finite>
 800cdb6:	b1a0      	cbz	r0, 800cde2 <pow+0x9e>
 800cdb8:	4620      	mov	r0, r4
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f000 fe21 	bl	800da02 <finite>
 800cdc0:	b178      	cbz	r0, 800cde2 <pow+0x9e>
 800cdc2:	4632      	mov	r2, r6
 800cdc4:	463b      	mov	r3, r7
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	4639      	mov	r1, r7
 800cdca:	f7f3 fe8f 	bl	8000aec <__aeabi_dcmpun>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	d0e4      	beq.n	800cd9c <pow+0x58>
 800cdd2:	f7fc fa6f 	bl	80092b4 <__errno>
 800cdd6:	2321      	movs	r3, #33	; 0x21
 800cdd8:	6003      	str	r3, [r0, #0]
 800cdda:	4630      	mov	r0, r6
 800cddc:	4639      	mov	r1, r7
 800cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cde2:	2200      	movs	r2, #0
 800cde4:	2300      	movs	r3, #0
 800cde6:	4630      	mov	r0, r6
 800cde8:	4639      	mov	r1, r7
 800cdea:	f7f3 fe4d 	bl	8000a88 <__aeabi_dcmpeq>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	d0f3      	beq.n	800cdda <pow+0x96>
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	4649      	mov	r1, r9
 800cdf6:	f000 fe04 	bl	800da02 <finite>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d0ed      	beq.n	800cdda <pow+0x96>
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4629      	mov	r1, r5
 800ce02:	f000 fdfe 	bl	800da02 <finite>
 800ce06:	e7c8      	b.n	800cd9a <pow+0x56>
 800ce08:	2600      	movs	r6, #0
 800ce0a:	4f01      	ldr	r7, [pc, #4]	; (800ce10 <pow+0xcc>)
 800ce0c:	e7e5      	b.n	800cdda <pow+0x96>
 800ce0e:	bf00      	nop
 800ce10:	3ff00000 	.word	0x3ff00000
 800ce14:	00000000 	.word	0x00000000

0800ce18 <__ieee754_pow>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	b093      	sub	sp, #76	; 0x4c
 800ce1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce22:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800ce26:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ce2a:	4689      	mov	r9, r1
 800ce2c:	ea56 0102 	orrs.w	r1, r6, r2
 800ce30:	4680      	mov	r8, r0
 800ce32:	d111      	bne.n	800ce58 <__ieee754_pow+0x40>
 800ce34:	1803      	adds	r3, r0, r0
 800ce36:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800ce3a:	4152      	adcs	r2, r2
 800ce3c:	4299      	cmp	r1, r3
 800ce3e:	4b82      	ldr	r3, [pc, #520]	; (800d048 <__ieee754_pow+0x230>)
 800ce40:	4193      	sbcs	r3, r2
 800ce42:	f080 84b9 	bcs.w	800d7b8 <__ieee754_pow+0x9a0>
 800ce46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	f7f3 f9fd 	bl	800024c <__adddf3>
 800ce52:	4683      	mov	fp, r0
 800ce54:	468c      	mov	ip, r1
 800ce56:	e06f      	b.n	800cf38 <__ieee754_pow+0x120>
 800ce58:	4b7c      	ldr	r3, [pc, #496]	; (800d04c <__ieee754_pow+0x234>)
 800ce5a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800ce5e:	429c      	cmp	r4, r3
 800ce60:	464d      	mov	r5, r9
 800ce62:	4682      	mov	sl, r0
 800ce64:	dc06      	bgt.n	800ce74 <__ieee754_pow+0x5c>
 800ce66:	d101      	bne.n	800ce6c <__ieee754_pow+0x54>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	d1ec      	bne.n	800ce46 <__ieee754_pow+0x2e>
 800ce6c:	429e      	cmp	r6, r3
 800ce6e:	dc01      	bgt.n	800ce74 <__ieee754_pow+0x5c>
 800ce70:	d10f      	bne.n	800ce92 <__ieee754_pow+0x7a>
 800ce72:	b172      	cbz	r2, 800ce92 <__ieee754_pow+0x7a>
 800ce74:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ce78:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ce7c:	ea55 050a 	orrs.w	r5, r5, sl
 800ce80:	d1e1      	bne.n	800ce46 <__ieee754_pow+0x2e>
 800ce82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ce86:	18db      	adds	r3, r3, r3
 800ce88:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ce8c:	4152      	adcs	r2, r2
 800ce8e:	429d      	cmp	r5, r3
 800ce90:	e7d5      	b.n	800ce3e <__ieee754_pow+0x26>
 800ce92:	2d00      	cmp	r5, #0
 800ce94:	da39      	bge.n	800cf0a <__ieee754_pow+0xf2>
 800ce96:	4b6e      	ldr	r3, [pc, #440]	; (800d050 <__ieee754_pow+0x238>)
 800ce98:	429e      	cmp	r6, r3
 800ce9a:	dc52      	bgt.n	800cf42 <__ieee754_pow+0x12a>
 800ce9c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cea0:	429e      	cmp	r6, r3
 800cea2:	f340 849c 	ble.w	800d7de <__ieee754_pow+0x9c6>
 800cea6:	1533      	asrs	r3, r6, #20
 800cea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ceac:	2b14      	cmp	r3, #20
 800ceae:	dd0f      	ble.n	800ced0 <__ieee754_pow+0xb8>
 800ceb0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ceb4:	fa22 f103 	lsr.w	r1, r2, r3
 800ceb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cebc:	4293      	cmp	r3, r2
 800cebe:	f040 848e 	bne.w	800d7de <__ieee754_pow+0x9c6>
 800cec2:	f001 0101 	and.w	r1, r1, #1
 800cec6:	f1c1 0302 	rsb	r3, r1, #2
 800ceca:	9300      	str	r3, [sp, #0]
 800cecc:	b182      	cbz	r2, 800cef0 <__ieee754_pow+0xd8>
 800cece:	e05d      	b.n	800cf8c <__ieee754_pow+0x174>
 800ced0:	2a00      	cmp	r2, #0
 800ced2:	d159      	bne.n	800cf88 <__ieee754_pow+0x170>
 800ced4:	f1c3 0314 	rsb	r3, r3, #20
 800ced8:	fa46 f103 	asr.w	r1, r6, r3
 800cedc:	fa01 f303 	lsl.w	r3, r1, r3
 800cee0:	42b3      	cmp	r3, r6
 800cee2:	f040 8479 	bne.w	800d7d8 <__ieee754_pow+0x9c0>
 800cee6:	f001 0101 	and.w	r1, r1, #1
 800ceea:	f1c1 0302 	rsb	r3, r1, #2
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4b58      	ldr	r3, [pc, #352]	; (800d054 <__ieee754_pow+0x23c>)
 800cef2:	429e      	cmp	r6, r3
 800cef4:	d132      	bne.n	800cf5c <__ieee754_pow+0x144>
 800cef6:	2f00      	cmp	r7, #0
 800cef8:	f280 846a 	bge.w	800d7d0 <__ieee754_pow+0x9b8>
 800cefc:	4642      	mov	r2, r8
 800cefe:	464b      	mov	r3, r9
 800cf00:	2000      	movs	r0, #0
 800cf02:	4954      	ldr	r1, [pc, #336]	; (800d054 <__ieee754_pow+0x23c>)
 800cf04:	f7f3 fc82 	bl	800080c <__aeabi_ddiv>
 800cf08:	e7a3      	b.n	800ce52 <__ieee754_pow+0x3a>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	d13c      	bne.n	800cf8c <__ieee754_pow+0x174>
 800cf12:	4b4e      	ldr	r3, [pc, #312]	; (800d04c <__ieee754_pow+0x234>)
 800cf14:	429e      	cmp	r6, r3
 800cf16:	d1eb      	bne.n	800cef0 <__ieee754_pow+0xd8>
 800cf18:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cf1c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cf20:	ea53 030a 	orrs.w	r3, r3, sl
 800cf24:	f000 8448 	beq.w	800d7b8 <__ieee754_pow+0x9a0>
 800cf28:	4b4b      	ldr	r3, [pc, #300]	; (800d058 <__ieee754_pow+0x240>)
 800cf2a:	429c      	cmp	r4, r3
 800cf2c:	dd0b      	ble.n	800cf46 <__ieee754_pow+0x12e>
 800cf2e:	2f00      	cmp	r7, #0
 800cf30:	f2c0 8448 	blt.w	800d7c4 <__ieee754_pow+0x9ac>
 800cf34:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cf38:	4658      	mov	r0, fp
 800cf3a:	4661      	mov	r1, ip
 800cf3c:	b013      	add	sp, #76	; 0x4c
 800cf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf42:	2302      	movs	r3, #2
 800cf44:	e7e2      	b.n	800cf0c <__ieee754_pow+0xf4>
 800cf46:	2f00      	cmp	r7, #0
 800cf48:	f04f 0b00 	mov.w	fp, #0
 800cf4c:	f04f 0c00 	mov.w	ip, #0
 800cf50:	daf2      	bge.n	800cf38 <__ieee754_pow+0x120>
 800cf52:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800cf56:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800cf5a:	e7ed      	b.n	800cf38 <__ieee754_pow+0x120>
 800cf5c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800cf60:	d106      	bne.n	800cf70 <__ieee754_pow+0x158>
 800cf62:	4642      	mov	r2, r8
 800cf64:	464b      	mov	r3, r9
 800cf66:	4640      	mov	r0, r8
 800cf68:	4649      	mov	r1, r9
 800cf6a:	f7f3 fb25 	bl	80005b8 <__aeabi_dmul>
 800cf6e:	e770      	b.n	800ce52 <__ieee754_pow+0x3a>
 800cf70:	4b3a      	ldr	r3, [pc, #232]	; (800d05c <__ieee754_pow+0x244>)
 800cf72:	429f      	cmp	r7, r3
 800cf74:	d10a      	bne.n	800cf8c <__ieee754_pow+0x174>
 800cf76:	2d00      	cmp	r5, #0
 800cf78:	db08      	blt.n	800cf8c <__ieee754_pow+0x174>
 800cf7a:	4640      	mov	r0, r8
 800cf7c:	4649      	mov	r1, r9
 800cf7e:	b013      	add	sp, #76	; 0x4c
 800cf80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf84:	f000 bc5e 	b.w	800d844 <__ieee754_sqrt>
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9300      	str	r3, [sp, #0]
 800cf8c:	4640      	mov	r0, r8
 800cf8e:	4649      	mov	r1, r9
 800cf90:	f000 fd34 	bl	800d9fc <fabs>
 800cf94:	4683      	mov	fp, r0
 800cf96:	468c      	mov	ip, r1
 800cf98:	f1ba 0f00 	cmp.w	sl, #0
 800cf9c:	d128      	bne.n	800cff0 <__ieee754_pow+0x1d8>
 800cf9e:	b124      	cbz	r4, 800cfaa <__ieee754_pow+0x192>
 800cfa0:	4b2c      	ldr	r3, [pc, #176]	; (800d054 <__ieee754_pow+0x23c>)
 800cfa2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d122      	bne.n	800cff0 <__ieee754_pow+0x1d8>
 800cfaa:	2f00      	cmp	r7, #0
 800cfac:	da07      	bge.n	800cfbe <__ieee754_pow+0x1a6>
 800cfae:	465a      	mov	r2, fp
 800cfb0:	4663      	mov	r3, ip
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	4927      	ldr	r1, [pc, #156]	; (800d054 <__ieee754_pow+0x23c>)
 800cfb6:	f7f3 fc29 	bl	800080c <__aeabi_ddiv>
 800cfba:	4683      	mov	fp, r0
 800cfbc:	468c      	mov	ip, r1
 800cfbe:	2d00      	cmp	r5, #0
 800cfc0:	daba      	bge.n	800cf38 <__ieee754_pow+0x120>
 800cfc2:	9b00      	ldr	r3, [sp, #0]
 800cfc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800cfc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800cfcc:	4323      	orrs	r3, r4
 800cfce:	d108      	bne.n	800cfe2 <__ieee754_pow+0x1ca>
 800cfd0:	465a      	mov	r2, fp
 800cfd2:	4663      	mov	r3, ip
 800cfd4:	4658      	mov	r0, fp
 800cfd6:	4661      	mov	r1, ip
 800cfd8:	f7f3 f936 	bl	8000248 <__aeabi_dsub>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	460b      	mov	r3, r1
 800cfe0:	e790      	b.n	800cf04 <__ieee754_pow+0xec>
 800cfe2:	9b00      	ldr	r3, [sp, #0]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d1a7      	bne.n	800cf38 <__ieee754_pow+0x120>
 800cfe8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800cfec:	469c      	mov	ip, r3
 800cfee:	e7a3      	b.n	800cf38 <__ieee754_pow+0x120>
 800cff0:	0feb      	lsrs	r3, r5, #31
 800cff2:	3b01      	subs	r3, #1
 800cff4:	930c      	str	r3, [sp, #48]	; 0x30
 800cff6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cff8:	9b00      	ldr	r3, [sp, #0]
 800cffa:	4313      	orrs	r3, r2
 800cffc:	d104      	bne.n	800d008 <__ieee754_pow+0x1f0>
 800cffe:	4642      	mov	r2, r8
 800d000:	464b      	mov	r3, r9
 800d002:	4640      	mov	r0, r8
 800d004:	4649      	mov	r1, r9
 800d006:	e7e7      	b.n	800cfd8 <__ieee754_pow+0x1c0>
 800d008:	4b15      	ldr	r3, [pc, #84]	; (800d060 <__ieee754_pow+0x248>)
 800d00a:	429e      	cmp	r6, r3
 800d00c:	f340 80f6 	ble.w	800d1fc <__ieee754_pow+0x3e4>
 800d010:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d014:	429e      	cmp	r6, r3
 800d016:	4b10      	ldr	r3, [pc, #64]	; (800d058 <__ieee754_pow+0x240>)
 800d018:	dd09      	ble.n	800d02e <__ieee754_pow+0x216>
 800d01a:	429c      	cmp	r4, r3
 800d01c:	dc0c      	bgt.n	800d038 <__ieee754_pow+0x220>
 800d01e:	2f00      	cmp	r7, #0
 800d020:	da0c      	bge.n	800d03c <__ieee754_pow+0x224>
 800d022:	2000      	movs	r0, #0
 800d024:	b013      	add	sp, #76	; 0x4c
 800d026:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d02a:	f000 bce2 	b.w	800d9f2 <__math_oflow>
 800d02e:	429c      	cmp	r4, r3
 800d030:	dbf5      	blt.n	800d01e <__ieee754_pow+0x206>
 800d032:	4b08      	ldr	r3, [pc, #32]	; (800d054 <__ieee754_pow+0x23c>)
 800d034:	429c      	cmp	r4, r3
 800d036:	dd15      	ble.n	800d064 <__ieee754_pow+0x24c>
 800d038:	2f00      	cmp	r7, #0
 800d03a:	dcf2      	bgt.n	800d022 <__ieee754_pow+0x20a>
 800d03c:	2000      	movs	r0, #0
 800d03e:	b013      	add	sp, #76	; 0x4c
 800d040:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d044:	f000 bcd0 	b.w	800d9e8 <__math_uflow>
 800d048:	fff00000 	.word	0xfff00000
 800d04c:	7ff00000 	.word	0x7ff00000
 800d050:	433fffff 	.word	0x433fffff
 800d054:	3ff00000 	.word	0x3ff00000
 800d058:	3fefffff 	.word	0x3fefffff
 800d05c:	3fe00000 	.word	0x3fe00000
 800d060:	41e00000 	.word	0x41e00000
 800d064:	4661      	mov	r1, ip
 800d066:	2200      	movs	r2, #0
 800d068:	4658      	mov	r0, fp
 800d06a:	4b5f      	ldr	r3, [pc, #380]	; (800d1e8 <__ieee754_pow+0x3d0>)
 800d06c:	f7f3 f8ec 	bl	8000248 <__aeabi_dsub>
 800d070:	a355      	add	r3, pc, #340	; (adr r3, 800d1c8 <__ieee754_pow+0x3b0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	4604      	mov	r4, r0
 800d078:	460d      	mov	r5, r1
 800d07a:	f7f3 fa9d 	bl	80005b8 <__aeabi_dmul>
 800d07e:	a354      	add	r3, pc, #336	; (adr r3, 800d1d0 <__ieee754_pow+0x3b8>)
 800d080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d084:	4606      	mov	r6, r0
 800d086:	460f      	mov	r7, r1
 800d088:	4620      	mov	r0, r4
 800d08a:	4629      	mov	r1, r5
 800d08c:	f7f3 fa94 	bl	80005b8 <__aeabi_dmul>
 800d090:	2200      	movs	r2, #0
 800d092:	4682      	mov	sl, r0
 800d094:	468b      	mov	fp, r1
 800d096:	4620      	mov	r0, r4
 800d098:	4629      	mov	r1, r5
 800d09a:	4b54      	ldr	r3, [pc, #336]	; (800d1ec <__ieee754_pow+0x3d4>)
 800d09c:	f7f3 fa8c 	bl	80005b8 <__aeabi_dmul>
 800d0a0:	4602      	mov	r2, r0
 800d0a2:	460b      	mov	r3, r1
 800d0a4:	a14c      	add	r1, pc, #304	; (adr r1, 800d1d8 <__ieee754_pow+0x3c0>)
 800d0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0aa:	f7f3 f8cd 	bl	8000248 <__aeabi_dsub>
 800d0ae:	4622      	mov	r2, r4
 800d0b0:	462b      	mov	r3, r5
 800d0b2:	f7f3 fa81 	bl	80005b8 <__aeabi_dmul>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	494c      	ldr	r1, [pc, #304]	; (800d1f0 <__ieee754_pow+0x3d8>)
 800d0be:	f7f3 f8c3 	bl	8000248 <__aeabi_dsub>
 800d0c2:	4622      	mov	r2, r4
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	4680      	mov	r8, r0
 800d0c8:	4689      	mov	r9, r1
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	4629      	mov	r1, r5
 800d0ce:	f7f3 fa73 	bl	80005b8 <__aeabi_dmul>
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	4640      	mov	r0, r8
 800d0d8:	4649      	mov	r1, r9
 800d0da:	f7f3 fa6d 	bl	80005b8 <__aeabi_dmul>
 800d0de:	a340      	add	r3, pc, #256	; (adr r3, 800d1e0 <__ieee754_pow+0x3c8>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 fa68 	bl	80005b8 <__aeabi_dmul>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4650      	mov	r0, sl
 800d0ee:	4659      	mov	r1, fp
 800d0f0:	f7f3 f8aa 	bl	8000248 <__aeabi_dsub>
 800d0f4:	f04f 0a00 	mov.w	sl, #0
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	460d      	mov	r5, r1
 800d100:	4630      	mov	r0, r6
 800d102:	4639      	mov	r1, r7
 800d104:	f7f3 f8a2 	bl	800024c <__adddf3>
 800d108:	4632      	mov	r2, r6
 800d10a:	463b      	mov	r3, r7
 800d10c:	4650      	mov	r0, sl
 800d10e:	468b      	mov	fp, r1
 800d110:	f7f3 f89a 	bl	8000248 <__aeabi_dsub>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	4620      	mov	r0, r4
 800d11a:	4629      	mov	r1, r5
 800d11c:	f7f3 f894 	bl	8000248 <__aeabi_dsub>
 800d120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d124:	9b00      	ldr	r3, [sp, #0]
 800d126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d128:	3b01      	subs	r3, #1
 800d12a:	4313      	orrs	r3, r2
 800d12c:	f04f 0600 	mov.w	r6, #0
 800d130:	f04f 0200 	mov.w	r2, #0
 800d134:	bf0c      	ite	eq
 800d136:	4b2f      	ldreq	r3, [pc, #188]	; (800d1f4 <__ieee754_pow+0x3dc>)
 800d138:	4b2b      	ldrne	r3, [pc, #172]	; (800d1e8 <__ieee754_pow+0x3d0>)
 800d13a:	4604      	mov	r4, r0
 800d13c:	460d      	mov	r5, r1
 800d13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d142:	e9cd 2300 	strd	r2, r3, [sp]
 800d146:	4632      	mov	r2, r6
 800d148:	463b      	mov	r3, r7
 800d14a:	f7f3 f87d 	bl	8000248 <__aeabi_dsub>
 800d14e:	4652      	mov	r2, sl
 800d150:	465b      	mov	r3, fp
 800d152:	f7f3 fa31 	bl	80005b8 <__aeabi_dmul>
 800d156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d15a:	4680      	mov	r8, r0
 800d15c:	4689      	mov	r9, r1
 800d15e:	4620      	mov	r0, r4
 800d160:	4629      	mov	r1, r5
 800d162:	f7f3 fa29 	bl	80005b8 <__aeabi_dmul>
 800d166:	4602      	mov	r2, r0
 800d168:	460b      	mov	r3, r1
 800d16a:	4640      	mov	r0, r8
 800d16c:	4649      	mov	r1, r9
 800d16e:	f7f3 f86d 	bl	800024c <__adddf3>
 800d172:	4632      	mov	r2, r6
 800d174:	463b      	mov	r3, r7
 800d176:	4680      	mov	r8, r0
 800d178:	4689      	mov	r9, r1
 800d17a:	4650      	mov	r0, sl
 800d17c:	4659      	mov	r1, fp
 800d17e:	f7f3 fa1b 	bl	80005b8 <__aeabi_dmul>
 800d182:	4604      	mov	r4, r0
 800d184:	460d      	mov	r5, r1
 800d186:	460b      	mov	r3, r1
 800d188:	4602      	mov	r2, r0
 800d18a:	4649      	mov	r1, r9
 800d18c:	4640      	mov	r0, r8
 800d18e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d192:	f7f3 f85b 	bl	800024c <__adddf3>
 800d196:	4b18      	ldr	r3, [pc, #96]	; (800d1f8 <__ieee754_pow+0x3e0>)
 800d198:	4682      	mov	sl, r0
 800d19a:	4299      	cmp	r1, r3
 800d19c:	460f      	mov	r7, r1
 800d19e:	460e      	mov	r6, r1
 800d1a0:	f340 82e5 	ble.w	800d76e <__ieee754_pow+0x956>
 800d1a4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d1a8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d1ac:	4303      	orrs	r3, r0
 800d1ae:	f000 81df 	beq.w	800d570 <__ieee754_pow+0x758>
 800d1b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	f7f3 fc6f 	bl	8000a9c <__aeabi_dcmplt>
 800d1be:	3800      	subs	r0, #0
 800d1c0:	bf18      	it	ne
 800d1c2:	2001      	movne	r0, #1
 800d1c4:	e72e      	b.n	800d024 <__ieee754_pow+0x20c>
 800d1c6:	bf00      	nop
 800d1c8:	60000000 	.word	0x60000000
 800d1cc:	3ff71547 	.word	0x3ff71547
 800d1d0:	f85ddf44 	.word	0xf85ddf44
 800d1d4:	3e54ae0b 	.word	0x3e54ae0b
 800d1d8:	55555555 	.word	0x55555555
 800d1dc:	3fd55555 	.word	0x3fd55555
 800d1e0:	652b82fe 	.word	0x652b82fe
 800d1e4:	3ff71547 	.word	0x3ff71547
 800d1e8:	3ff00000 	.word	0x3ff00000
 800d1ec:	3fd00000 	.word	0x3fd00000
 800d1f0:	3fe00000 	.word	0x3fe00000
 800d1f4:	bff00000 	.word	0xbff00000
 800d1f8:	408fffff 	.word	0x408fffff
 800d1fc:	4bd2      	ldr	r3, [pc, #840]	; (800d548 <__ieee754_pow+0x730>)
 800d1fe:	2200      	movs	r2, #0
 800d200:	402b      	ands	r3, r5
 800d202:	b943      	cbnz	r3, 800d216 <__ieee754_pow+0x3fe>
 800d204:	4658      	mov	r0, fp
 800d206:	4661      	mov	r1, ip
 800d208:	4bd0      	ldr	r3, [pc, #832]	; (800d54c <__ieee754_pow+0x734>)
 800d20a:	f7f3 f9d5 	bl	80005b8 <__aeabi_dmul>
 800d20e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d212:	4683      	mov	fp, r0
 800d214:	460c      	mov	r4, r1
 800d216:	1523      	asrs	r3, r4, #20
 800d218:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d21c:	4413      	add	r3, r2
 800d21e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d220:	4bcb      	ldr	r3, [pc, #812]	; (800d550 <__ieee754_pow+0x738>)
 800d222:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d226:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d22a:	429c      	cmp	r4, r3
 800d22c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d230:	dd08      	ble.n	800d244 <__ieee754_pow+0x42c>
 800d232:	4bc8      	ldr	r3, [pc, #800]	; (800d554 <__ieee754_pow+0x73c>)
 800d234:	429c      	cmp	r4, r3
 800d236:	f340 8199 	ble.w	800d56c <__ieee754_pow+0x754>
 800d23a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d23c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d240:	3301      	adds	r3, #1
 800d242:	930b      	str	r3, [sp, #44]	; 0x2c
 800d244:	2600      	movs	r6, #0
 800d246:	00f3      	lsls	r3, r6, #3
 800d248:	930d      	str	r3, [sp, #52]	; 0x34
 800d24a:	4bc3      	ldr	r3, [pc, #780]	; (800d558 <__ieee754_pow+0x740>)
 800d24c:	4658      	mov	r0, fp
 800d24e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d252:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d256:	4629      	mov	r1, r5
 800d258:	461a      	mov	r2, r3
 800d25a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d25e:	4623      	mov	r3, r4
 800d260:	f7f2 fff2 	bl	8000248 <__aeabi_dsub>
 800d264:	46da      	mov	sl, fp
 800d266:	462b      	mov	r3, r5
 800d268:	4652      	mov	r2, sl
 800d26a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d26e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d272:	f7f2 ffeb 	bl	800024c <__adddf3>
 800d276:	4602      	mov	r2, r0
 800d278:	460b      	mov	r3, r1
 800d27a:	2000      	movs	r0, #0
 800d27c:	49b7      	ldr	r1, [pc, #732]	; (800d55c <__ieee754_pow+0x744>)
 800d27e:	f7f3 fac5 	bl	800080c <__aeabi_ddiv>
 800d282:	4602      	mov	r2, r0
 800d284:	460b      	mov	r3, r1
 800d286:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d28a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d28e:	f7f3 f993 	bl	80005b8 <__aeabi_dmul>
 800d292:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d296:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d29a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d29e:	2300      	movs	r3, #0
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	46ab      	mov	fp, r5
 800d2a4:	106d      	asrs	r5, r5, #1
 800d2a6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d2aa:	9304      	str	r3, [sp, #16]
 800d2ac:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d2b0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d2b4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	4649      	mov	r1, r9
 800d2bc:	4614      	mov	r4, r2
 800d2be:	461d      	mov	r5, r3
 800d2c0:	f7f3 f97a 	bl	80005b8 <__aeabi_dmul>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d2cc:	f7f2 ffbc 	bl	8000248 <__aeabi_dsub>
 800d2d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d2d4:	4606      	mov	r6, r0
 800d2d6:	460f      	mov	r7, r1
 800d2d8:	4620      	mov	r0, r4
 800d2da:	4629      	mov	r1, r5
 800d2dc:	f7f2 ffb4 	bl	8000248 <__aeabi_dsub>
 800d2e0:	4602      	mov	r2, r0
 800d2e2:	460b      	mov	r3, r1
 800d2e4:	4650      	mov	r0, sl
 800d2e6:	4659      	mov	r1, fp
 800d2e8:	f7f2 ffae 	bl	8000248 <__aeabi_dsub>
 800d2ec:	4642      	mov	r2, r8
 800d2ee:	464b      	mov	r3, r9
 800d2f0:	f7f3 f962 	bl	80005b8 <__aeabi_dmul>
 800d2f4:	4602      	mov	r2, r0
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f2 ffa4 	bl	8000248 <__aeabi_dsub>
 800d300:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d304:	f7f3 f958 	bl	80005b8 <__aeabi_dmul>
 800d308:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d30c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d310:	4610      	mov	r0, r2
 800d312:	4619      	mov	r1, r3
 800d314:	f7f3 f950 	bl	80005b8 <__aeabi_dmul>
 800d318:	a379      	add	r3, pc, #484	; (adr r3, 800d500 <__ieee754_pow+0x6e8>)
 800d31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31e:	4604      	mov	r4, r0
 800d320:	460d      	mov	r5, r1
 800d322:	f7f3 f949 	bl	80005b8 <__aeabi_dmul>
 800d326:	a378      	add	r3, pc, #480	; (adr r3, 800d508 <__ieee754_pow+0x6f0>)
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	f7f2 ff8e 	bl	800024c <__adddf3>
 800d330:	4622      	mov	r2, r4
 800d332:	462b      	mov	r3, r5
 800d334:	f7f3 f940 	bl	80005b8 <__aeabi_dmul>
 800d338:	a375      	add	r3, pc, #468	; (adr r3, 800d510 <__ieee754_pow+0x6f8>)
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f7f2 ff85 	bl	800024c <__adddf3>
 800d342:	4622      	mov	r2, r4
 800d344:	462b      	mov	r3, r5
 800d346:	f7f3 f937 	bl	80005b8 <__aeabi_dmul>
 800d34a:	a373      	add	r3, pc, #460	; (adr r3, 800d518 <__ieee754_pow+0x700>)
 800d34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d350:	f7f2 ff7c 	bl	800024c <__adddf3>
 800d354:	4622      	mov	r2, r4
 800d356:	462b      	mov	r3, r5
 800d358:	f7f3 f92e 	bl	80005b8 <__aeabi_dmul>
 800d35c:	a370      	add	r3, pc, #448	; (adr r3, 800d520 <__ieee754_pow+0x708>)
 800d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d362:	f7f2 ff73 	bl	800024c <__adddf3>
 800d366:	4622      	mov	r2, r4
 800d368:	462b      	mov	r3, r5
 800d36a:	f7f3 f925 	bl	80005b8 <__aeabi_dmul>
 800d36e:	a36e      	add	r3, pc, #440	; (adr r3, 800d528 <__ieee754_pow+0x710>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f7f2 ff6a 	bl	800024c <__adddf3>
 800d378:	4622      	mov	r2, r4
 800d37a:	4606      	mov	r6, r0
 800d37c:	460f      	mov	r7, r1
 800d37e:	462b      	mov	r3, r5
 800d380:	4620      	mov	r0, r4
 800d382:	4629      	mov	r1, r5
 800d384:	f7f3 f918 	bl	80005b8 <__aeabi_dmul>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4630      	mov	r0, r6
 800d38e:	4639      	mov	r1, r7
 800d390:	f7f3 f912 	bl	80005b8 <__aeabi_dmul>
 800d394:	4604      	mov	r4, r0
 800d396:	460d      	mov	r5, r1
 800d398:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d39c:	4642      	mov	r2, r8
 800d39e:	464b      	mov	r3, r9
 800d3a0:	f7f2 ff54 	bl	800024c <__adddf3>
 800d3a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d3a8:	f7f3 f906 	bl	80005b8 <__aeabi_dmul>
 800d3ac:	4622      	mov	r2, r4
 800d3ae:	462b      	mov	r3, r5
 800d3b0:	f7f2 ff4c 	bl	800024c <__adddf3>
 800d3b4:	4642      	mov	r2, r8
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460f      	mov	r7, r1
 800d3ba:	464b      	mov	r3, r9
 800d3bc:	4640      	mov	r0, r8
 800d3be:	4649      	mov	r1, r9
 800d3c0:	f7f3 f8fa 	bl	80005b8 <__aeabi_dmul>
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4b66      	ldr	r3, [pc, #408]	; (800d560 <__ieee754_pow+0x748>)
 800d3c8:	4682      	mov	sl, r0
 800d3ca:	468b      	mov	fp, r1
 800d3cc:	f7f2 ff3e 	bl	800024c <__adddf3>
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	463b      	mov	r3, r7
 800d3d4:	f7f2 ff3a 	bl	800024c <__adddf3>
 800d3d8:	2400      	movs	r4, #0
 800d3da:	460d      	mov	r5, r1
 800d3dc:	4622      	mov	r2, r4
 800d3de:	460b      	mov	r3, r1
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	f7f3 f8e8 	bl	80005b8 <__aeabi_dmul>
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	4680      	mov	r8, r0
 800d3ec:	4689      	mov	r9, r1
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	4b5b      	ldr	r3, [pc, #364]	; (800d560 <__ieee754_pow+0x748>)
 800d3f4:	f7f2 ff28 	bl	8000248 <__aeabi_dsub>
 800d3f8:	4652      	mov	r2, sl
 800d3fa:	465b      	mov	r3, fp
 800d3fc:	f7f2 ff24 	bl	8000248 <__aeabi_dsub>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	4630      	mov	r0, r6
 800d406:	4639      	mov	r1, r7
 800d408:	f7f2 ff1e 	bl	8000248 <__aeabi_dsub>
 800d40c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d410:	f7f3 f8d2 	bl	80005b8 <__aeabi_dmul>
 800d414:	4622      	mov	r2, r4
 800d416:	4606      	mov	r6, r0
 800d418:	460f      	mov	r7, r1
 800d41a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d41e:	462b      	mov	r3, r5
 800d420:	f7f3 f8ca 	bl	80005b8 <__aeabi_dmul>
 800d424:	4602      	mov	r2, r0
 800d426:	460b      	mov	r3, r1
 800d428:	4630      	mov	r0, r6
 800d42a:	4639      	mov	r1, r7
 800d42c:	f7f2 ff0e 	bl	800024c <__adddf3>
 800d430:	2400      	movs	r4, #0
 800d432:	4606      	mov	r6, r0
 800d434:	460f      	mov	r7, r1
 800d436:	4602      	mov	r2, r0
 800d438:	460b      	mov	r3, r1
 800d43a:	4640      	mov	r0, r8
 800d43c:	4649      	mov	r1, r9
 800d43e:	f7f2 ff05 	bl	800024c <__adddf3>
 800d442:	a33b      	add	r3, pc, #236	; (adr r3, 800d530 <__ieee754_pow+0x718>)
 800d444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d448:	4620      	mov	r0, r4
 800d44a:	460d      	mov	r5, r1
 800d44c:	f7f3 f8b4 	bl	80005b8 <__aeabi_dmul>
 800d450:	4642      	mov	r2, r8
 800d452:	464b      	mov	r3, r9
 800d454:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d458:	4620      	mov	r0, r4
 800d45a:	4629      	mov	r1, r5
 800d45c:	f7f2 fef4 	bl	8000248 <__aeabi_dsub>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4630      	mov	r0, r6
 800d466:	4639      	mov	r1, r7
 800d468:	f7f2 feee 	bl	8000248 <__aeabi_dsub>
 800d46c:	a332      	add	r3, pc, #200	; (adr r3, 800d538 <__ieee754_pow+0x720>)
 800d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d472:	f7f3 f8a1 	bl	80005b8 <__aeabi_dmul>
 800d476:	a332      	add	r3, pc, #200	; (adr r3, 800d540 <__ieee754_pow+0x728>)
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	4606      	mov	r6, r0
 800d47e:	460f      	mov	r7, r1
 800d480:	4620      	mov	r0, r4
 800d482:	4629      	mov	r1, r5
 800d484:	f7f3 f898 	bl	80005b8 <__aeabi_dmul>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	f7f2 fedc 	bl	800024c <__adddf3>
 800d494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d496:	4b33      	ldr	r3, [pc, #204]	; (800d564 <__ieee754_pow+0x74c>)
 800d498:	f04f 0a00 	mov.w	sl, #0
 800d49c:	4413      	add	r3, r2
 800d49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a2:	f7f2 fed3 	bl	800024c <__adddf3>
 800d4a6:	4680      	mov	r8, r0
 800d4a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d4aa:	4689      	mov	r9, r1
 800d4ac:	f7f3 f81a 	bl	80004e4 <__aeabi_i2d>
 800d4b0:	4604      	mov	r4, r0
 800d4b2:	460d      	mov	r5, r1
 800d4b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d4b6:	4b2c      	ldr	r3, [pc, #176]	; (800d568 <__ieee754_pow+0x750>)
 800d4b8:	4413      	add	r3, r2
 800d4ba:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d4be:	4642      	mov	r2, r8
 800d4c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4c4:	464b      	mov	r3, r9
 800d4c6:	f7f2 fec1 	bl	800024c <__adddf3>
 800d4ca:	4632      	mov	r2, r6
 800d4cc:	463b      	mov	r3, r7
 800d4ce:	f7f2 febd 	bl	800024c <__adddf3>
 800d4d2:	4622      	mov	r2, r4
 800d4d4:	462b      	mov	r3, r5
 800d4d6:	f7f2 feb9 	bl	800024c <__adddf3>
 800d4da:	4622      	mov	r2, r4
 800d4dc:	462b      	mov	r3, r5
 800d4de:	4650      	mov	r0, sl
 800d4e0:	468b      	mov	fp, r1
 800d4e2:	f7f2 feb1 	bl	8000248 <__aeabi_dsub>
 800d4e6:	4632      	mov	r2, r6
 800d4e8:	463b      	mov	r3, r7
 800d4ea:	f7f2 fead 	bl	8000248 <__aeabi_dsub>
 800d4ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4f2:	f7f2 fea9 	bl	8000248 <__aeabi_dsub>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	460b      	mov	r3, r1
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	4649      	mov	r1, r9
 800d4fe:	e60d      	b.n	800d11c <__ieee754_pow+0x304>
 800d500:	4a454eef 	.word	0x4a454eef
 800d504:	3fca7e28 	.word	0x3fca7e28
 800d508:	93c9db65 	.word	0x93c9db65
 800d50c:	3fcd864a 	.word	0x3fcd864a
 800d510:	a91d4101 	.word	0xa91d4101
 800d514:	3fd17460 	.word	0x3fd17460
 800d518:	518f264d 	.word	0x518f264d
 800d51c:	3fd55555 	.word	0x3fd55555
 800d520:	db6fabff 	.word	0xdb6fabff
 800d524:	3fdb6db6 	.word	0x3fdb6db6
 800d528:	33333303 	.word	0x33333303
 800d52c:	3fe33333 	.word	0x3fe33333
 800d530:	e0000000 	.word	0xe0000000
 800d534:	3feec709 	.word	0x3feec709
 800d538:	dc3a03fd 	.word	0xdc3a03fd
 800d53c:	3feec709 	.word	0x3feec709
 800d540:	145b01f5 	.word	0x145b01f5
 800d544:	be3e2fe0 	.word	0xbe3e2fe0
 800d548:	7ff00000 	.word	0x7ff00000
 800d54c:	43400000 	.word	0x43400000
 800d550:	0003988e 	.word	0x0003988e
 800d554:	000bb679 	.word	0x000bb679
 800d558:	0800e058 	.word	0x0800e058
 800d55c:	3ff00000 	.word	0x3ff00000
 800d560:	40080000 	.word	0x40080000
 800d564:	0800e078 	.word	0x0800e078
 800d568:	0800e068 	.word	0x0800e068
 800d56c:	2601      	movs	r6, #1
 800d56e:	e66a      	b.n	800d246 <__ieee754_pow+0x42e>
 800d570:	a39d      	add	r3, pc, #628	; (adr r3, 800d7e8 <__ieee754_pow+0x9d0>)
 800d572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d576:	4640      	mov	r0, r8
 800d578:	4649      	mov	r1, r9
 800d57a:	f7f2 fe67 	bl	800024c <__adddf3>
 800d57e:	4622      	mov	r2, r4
 800d580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d584:	462b      	mov	r3, r5
 800d586:	4650      	mov	r0, sl
 800d588:	4639      	mov	r1, r7
 800d58a:	f7f2 fe5d 	bl	8000248 <__aeabi_dsub>
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d596:	f7f3 fa9f 	bl	8000ad8 <__aeabi_dcmpgt>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	f47f ae09 	bne.w	800d1b2 <__ieee754_pow+0x39a>
 800d5a0:	4aa3      	ldr	r2, [pc, #652]	; (800d830 <__ieee754_pow+0xa18>)
 800d5a2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	f340 8101 	ble.w	800d7ae <__ieee754_pow+0x996>
 800d5ac:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d5b0:	2000      	movs	r0, #0
 800d5b2:	151b      	asrs	r3, r3, #20
 800d5b4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d5b8:	fa4a f303 	asr.w	r3, sl, r3
 800d5bc:	4433      	add	r3, r6
 800d5be:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d5c2:	4f9c      	ldr	r7, [pc, #624]	; (800d834 <__ieee754_pow+0xa1c>)
 800d5c4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d5c8:	4117      	asrs	r7, r2
 800d5ca:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d5ce:	ea23 0107 	bic.w	r1, r3, r7
 800d5d2:	f1c2 0214 	rsb	r2, r2, #20
 800d5d6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d5da:	460b      	mov	r3, r1
 800d5dc:	fa4a fa02 	asr.w	sl, sl, r2
 800d5e0:	2e00      	cmp	r6, #0
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	bfb8      	it	lt
 800d5ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800d5ee:	f7f2 fe2b 	bl	8000248 <__aeabi_dsub>
 800d5f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5fa:	2400      	movs	r4, #0
 800d5fc:	4642      	mov	r2, r8
 800d5fe:	464b      	mov	r3, r9
 800d600:	f7f2 fe24 	bl	800024c <__adddf3>
 800d604:	a37a      	add	r3, pc, #488	; (adr r3, 800d7f0 <__ieee754_pow+0x9d8>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	4620      	mov	r0, r4
 800d60c:	460d      	mov	r5, r1
 800d60e:	f7f2 ffd3 	bl	80005b8 <__aeabi_dmul>
 800d612:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d616:	4606      	mov	r6, r0
 800d618:	460f      	mov	r7, r1
 800d61a:	4620      	mov	r0, r4
 800d61c:	4629      	mov	r1, r5
 800d61e:	f7f2 fe13 	bl	8000248 <__aeabi_dsub>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	4640      	mov	r0, r8
 800d628:	4649      	mov	r1, r9
 800d62a:	f7f2 fe0d 	bl	8000248 <__aeabi_dsub>
 800d62e:	a372      	add	r3, pc, #456	; (adr r3, 800d7f8 <__ieee754_pow+0x9e0>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f7f2 ffc0 	bl	80005b8 <__aeabi_dmul>
 800d638:	a371      	add	r3, pc, #452	; (adr r3, 800d800 <__ieee754_pow+0x9e8>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	4680      	mov	r8, r0
 800d640:	4689      	mov	r9, r1
 800d642:	4620      	mov	r0, r4
 800d644:	4629      	mov	r1, r5
 800d646:	f7f2 ffb7 	bl	80005b8 <__aeabi_dmul>
 800d64a:	4602      	mov	r2, r0
 800d64c:	460b      	mov	r3, r1
 800d64e:	4640      	mov	r0, r8
 800d650:	4649      	mov	r1, r9
 800d652:	f7f2 fdfb 	bl	800024c <__adddf3>
 800d656:	4604      	mov	r4, r0
 800d658:	460d      	mov	r5, r1
 800d65a:	4602      	mov	r2, r0
 800d65c:	460b      	mov	r3, r1
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	f7f2 fdf3 	bl	800024c <__adddf3>
 800d666:	4632      	mov	r2, r6
 800d668:	463b      	mov	r3, r7
 800d66a:	4680      	mov	r8, r0
 800d66c:	4689      	mov	r9, r1
 800d66e:	f7f2 fdeb 	bl	8000248 <__aeabi_dsub>
 800d672:	4602      	mov	r2, r0
 800d674:	460b      	mov	r3, r1
 800d676:	4620      	mov	r0, r4
 800d678:	4629      	mov	r1, r5
 800d67a:	f7f2 fde5 	bl	8000248 <__aeabi_dsub>
 800d67e:	4642      	mov	r2, r8
 800d680:	4606      	mov	r6, r0
 800d682:	460f      	mov	r7, r1
 800d684:	464b      	mov	r3, r9
 800d686:	4640      	mov	r0, r8
 800d688:	4649      	mov	r1, r9
 800d68a:	f7f2 ff95 	bl	80005b8 <__aeabi_dmul>
 800d68e:	a35e      	add	r3, pc, #376	; (adr r3, 800d808 <__ieee754_pow+0x9f0>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	4604      	mov	r4, r0
 800d696:	460d      	mov	r5, r1
 800d698:	f7f2 ff8e 	bl	80005b8 <__aeabi_dmul>
 800d69c:	a35c      	add	r3, pc, #368	; (adr r3, 800d810 <__ieee754_pow+0x9f8>)
 800d69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a2:	f7f2 fdd1 	bl	8000248 <__aeabi_dsub>
 800d6a6:	4622      	mov	r2, r4
 800d6a8:	462b      	mov	r3, r5
 800d6aa:	f7f2 ff85 	bl	80005b8 <__aeabi_dmul>
 800d6ae:	a35a      	add	r3, pc, #360	; (adr r3, 800d818 <__ieee754_pow+0xa00>)
 800d6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b4:	f7f2 fdca 	bl	800024c <__adddf3>
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	462b      	mov	r3, r5
 800d6bc:	f7f2 ff7c 	bl	80005b8 <__aeabi_dmul>
 800d6c0:	a357      	add	r3, pc, #348	; (adr r3, 800d820 <__ieee754_pow+0xa08>)
 800d6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c6:	f7f2 fdbf 	bl	8000248 <__aeabi_dsub>
 800d6ca:	4622      	mov	r2, r4
 800d6cc:	462b      	mov	r3, r5
 800d6ce:	f7f2 ff73 	bl	80005b8 <__aeabi_dmul>
 800d6d2:	a355      	add	r3, pc, #340	; (adr r3, 800d828 <__ieee754_pow+0xa10>)
 800d6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d8:	f7f2 fdb8 	bl	800024c <__adddf3>
 800d6dc:	4622      	mov	r2, r4
 800d6de:	462b      	mov	r3, r5
 800d6e0:	f7f2 ff6a 	bl	80005b8 <__aeabi_dmul>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	4640      	mov	r0, r8
 800d6ea:	4649      	mov	r1, r9
 800d6ec:	f7f2 fdac 	bl	8000248 <__aeabi_dsub>
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	460d      	mov	r5, r1
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	4640      	mov	r0, r8
 800d6fa:	4649      	mov	r1, r9
 800d6fc:	f7f2 ff5c 	bl	80005b8 <__aeabi_dmul>
 800d700:	2200      	movs	r2, #0
 800d702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d70a:	4620      	mov	r0, r4
 800d70c:	4629      	mov	r1, r5
 800d70e:	f7f2 fd9b 	bl	8000248 <__aeabi_dsub>
 800d712:	4602      	mov	r2, r0
 800d714:	460b      	mov	r3, r1
 800d716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d71a:	f7f3 f877 	bl	800080c <__aeabi_ddiv>
 800d71e:	4632      	mov	r2, r6
 800d720:	4604      	mov	r4, r0
 800d722:	460d      	mov	r5, r1
 800d724:	463b      	mov	r3, r7
 800d726:	4640      	mov	r0, r8
 800d728:	4649      	mov	r1, r9
 800d72a:	f7f2 ff45 	bl	80005b8 <__aeabi_dmul>
 800d72e:	4632      	mov	r2, r6
 800d730:	463b      	mov	r3, r7
 800d732:	f7f2 fd8b 	bl	800024c <__adddf3>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4620      	mov	r0, r4
 800d73c:	4629      	mov	r1, r5
 800d73e:	f7f2 fd83 	bl	8000248 <__aeabi_dsub>
 800d742:	4642      	mov	r2, r8
 800d744:	464b      	mov	r3, r9
 800d746:	f7f2 fd7f 	bl	8000248 <__aeabi_dsub>
 800d74a:	4602      	mov	r2, r0
 800d74c:	460b      	mov	r3, r1
 800d74e:	2000      	movs	r0, #0
 800d750:	4939      	ldr	r1, [pc, #228]	; (800d838 <__ieee754_pow+0xa20>)
 800d752:	f7f2 fd79 	bl	8000248 <__aeabi_dsub>
 800d756:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d75a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d75e:	da29      	bge.n	800d7b4 <__ieee754_pow+0x99c>
 800d760:	4652      	mov	r2, sl
 800d762:	f000 f955 	bl	800da10 <scalbn>
 800d766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d76a:	f7ff bbfe 	b.w	800cf6a <__ieee754_pow+0x152>
 800d76e:	4b33      	ldr	r3, [pc, #204]	; (800d83c <__ieee754_pow+0xa24>)
 800d770:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d774:	429f      	cmp	r7, r3
 800d776:	f77f af13 	ble.w	800d5a0 <__ieee754_pow+0x788>
 800d77a:	4b31      	ldr	r3, [pc, #196]	; (800d840 <__ieee754_pow+0xa28>)
 800d77c:	440b      	add	r3, r1
 800d77e:	4303      	orrs	r3, r0
 800d780:	d009      	beq.n	800d796 <__ieee754_pow+0x97e>
 800d782:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d786:	2200      	movs	r2, #0
 800d788:	2300      	movs	r3, #0
 800d78a:	f7f3 f987 	bl	8000a9c <__aeabi_dcmplt>
 800d78e:	3800      	subs	r0, #0
 800d790:	bf18      	it	ne
 800d792:	2001      	movne	r0, #1
 800d794:	e453      	b.n	800d03e <__ieee754_pow+0x226>
 800d796:	4622      	mov	r2, r4
 800d798:	462b      	mov	r3, r5
 800d79a:	f7f2 fd55 	bl	8000248 <__aeabi_dsub>
 800d79e:	4642      	mov	r2, r8
 800d7a0:	464b      	mov	r3, r9
 800d7a2:	f7f3 f98f 	bl	8000ac4 <__aeabi_dcmpge>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	f43f aefa 	beq.w	800d5a0 <__ieee754_pow+0x788>
 800d7ac:	e7e9      	b.n	800d782 <__ieee754_pow+0x96a>
 800d7ae:	f04f 0a00 	mov.w	sl, #0
 800d7b2:	e720      	b.n	800d5f6 <__ieee754_pow+0x7de>
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	e7d6      	b.n	800d766 <__ieee754_pow+0x94e>
 800d7b8:	f04f 0b00 	mov.w	fp, #0
 800d7bc:	f8df c078 	ldr.w	ip, [pc, #120]	; 800d838 <__ieee754_pow+0xa20>
 800d7c0:	f7ff bbba 	b.w	800cf38 <__ieee754_pow+0x120>
 800d7c4:	f04f 0b00 	mov.w	fp, #0
 800d7c8:	f04f 0c00 	mov.w	ip, #0
 800d7cc:	f7ff bbb4 	b.w	800cf38 <__ieee754_pow+0x120>
 800d7d0:	4640      	mov	r0, r8
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	f7ff bb3d 	b.w	800ce52 <__ieee754_pow+0x3a>
 800d7d8:	9200      	str	r2, [sp, #0]
 800d7da:	f7ff bb89 	b.w	800cef0 <__ieee754_pow+0xd8>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	f7ff bb73 	b.w	800ceca <__ieee754_pow+0xb2>
 800d7e4:	f3af 8000 	nop.w
 800d7e8:	652b82fe 	.word	0x652b82fe
 800d7ec:	3c971547 	.word	0x3c971547
 800d7f0:	00000000 	.word	0x00000000
 800d7f4:	3fe62e43 	.word	0x3fe62e43
 800d7f8:	fefa39ef 	.word	0xfefa39ef
 800d7fc:	3fe62e42 	.word	0x3fe62e42
 800d800:	0ca86c39 	.word	0x0ca86c39
 800d804:	be205c61 	.word	0xbe205c61
 800d808:	72bea4d0 	.word	0x72bea4d0
 800d80c:	3e663769 	.word	0x3e663769
 800d810:	c5d26bf1 	.word	0xc5d26bf1
 800d814:	3ebbbd41 	.word	0x3ebbbd41
 800d818:	af25de2c 	.word	0xaf25de2c
 800d81c:	3f11566a 	.word	0x3f11566a
 800d820:	16bebd93 	.word	0x16bebd93
 800d824:	3f66c16c 	.word	0x3f66c16c
 800d828:	5555553e 	.word	0x5555553e
 800d82c:	3fc55555 	.word	0x3fc55555
 800d830:	3fe00000 	.word	0x3fe00000
 800d834:	000fffff 	.word	0x000fffff
 800d838:	3ff00000 	.word	0x3ff00000
 800d83c:	4090cbff 	.word	0x4090cbff
 800d840:	3f6f3400 	.word	0x3f6f3400

0800d844 <__ieee754_sqrt>:
 800d844:	f8df c158 	ldr.w	ip, [pc, #344]	; 800d9a0 <__ieee754_sqrt+0x15c>
 800d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84c:	ea3c 0c01 	bics.w	ip, ip, r1
 800d850:	4606      	mov	r6, r0
 800d852:	460d      	mov	r5, r1
 800d854:	460c      	mov	r4, r1
 800d856:	460a      	mov	r2, r1
 800d858:	4607      	mov	r7, r0
 800d85a:	4603      	mov	r3, r0
 800d85c:	d10f      	bne.n	800d87e <__ieee754_sqrt+0x3a>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	f7f2 fea9 	bl	80005b8 <__aeabi_dmul>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	4630      	mov	r0, r6
 800d86c:	4629      	mov	r1, r5
 800d86e:	f7f2 fced 	bl	800024c <__adddf3>
 800d872:	4606      	mov	r6, r0
 800d874:	460d      	mov	r5, r1
 800d876:	4630      	mov	r0, r6
 800d878:	4629      	mov	r1, r5
 800d87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87e:	2900      	cmp	r1, #0
 800d880:	dc0e      	bgt.n	800d8a0 <__ieee754_sqrt+0x5c>
 800d882:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d886:	ea5c 0707 	orrs.w	r7, ip, r7
 800d88a:	d0f4      	beq.n	800d876 <__ieee754_sqrt+0x32>
 800d88c:	b141      	cbz	r1, 800d8a0 <__ieee754_sqrt+0x5c>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	f7f2 fcd9 	bl	8000248 <__aeabi_dsub>
 800d896:	4602      	mov	r2, r0
 800d898:	460b      	mov	r3, r1
 800d89a:	f7f2 ffb7 	bl	800080c <__aeabi_ddiv>
 800d89e:	e7e8      	b.n	800d872 <__ieee754_sqrt+0x2e>
 800d8a0:	1521      	asrs	r1, r4, #20
 800d8a2:	d075      	beq.n	800d990 <__ieee754_sqrt+0x14c>
 800d8a4:	07cc      	lsls	r4, r1, #31
 800d8a6:	f04f 0400 	mov.w	r4, #0
 800d8aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d8ae:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800d8b2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d8b6:	bf5e      	ittt	pl
 800d8b8:	0fd9      	lsrpl	r1, r3, #31
 800d8ba:	005b      	lslpl	r3, r3, #1
 800d8bc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800d8c0:	0fd9      	lsrs	r1, r3, #31
 800d8c2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d8c6:	2516      	movs	r5, #22
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d8ce:	107f      	asrs	r7, r7, #1
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	1846      	adds	r6, r0, r1
 800d8d4:	4296      	cmp	r6, r2
 800d8d6:	bfde      	ittt	le
 800d8d8:	1b92      	suble	r2, r2, r6
 800d8da:	1870      	addle	r0, r6, r1
 800d8dc:	1864      	addle	r4, r4, r1
 800d8de:	0052      	lsls	r2, r2, #1
 800d8e0:	3d01      	subs	r5, #1
 800d8e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d8e6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d8ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d8ee:	d1f0      	bne.n	800d8d2 <__ieee754_sqrt+0x8e>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	f04f 0e20 	mov.w	lr, #32
 800d8f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d8fa:	4282      	cmp	r2, r0
 800d8fc:	eb06 0c05 	add.w	ip, r6, r5
 800d900:	dc02      	bgt.n	800d908 <__ieee754_sqrt+0xc4>
 800d902:	d113      	bne.n	800d92c <__ieee754_sqrt+0xe8>
 800d904:	459c      	cmp	ip, r3
 800d906:	d811      	bhi.n	800d92c <__ieee754_sqrt+0xe8>
 800d908:	f1bc 0f00 	cmp.w	ip, #0
 800d90c:	eb0c 0506 	add.w	r5, ip, r6
 800d910:	da43      	bge.n	800d99a <__ieee754_sqrt+0x156>
 800d912:	2d00      	cmp	r5, #0
 800d914:	db41      	blt.n	800d99a <__ieee754_sqrt+0x156>
 800d916:	f100 0801 	add.w	r8, r0, #1
 800d91a:	1a12      	subs	r2, r2, r0
 800d91c:	4640      	mov	r0, r8
 800d91e:	459c      	cmp	ip, r3
 800d920:	bf88      	it	hi
 800d922:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d926:	eba3 030c 	sub.w	r3, r3, ip
 800d92a:	4431      	add	r1, r6
 800d92c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d930:	f1be 0e01 	subs.w	lr, lr, #1
 800d934:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800d938:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d93c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d940:	d1db      	bne.n	800d8fa <__ieee754_sqrt+0xb6>
 800d942:	4313      	orrs	r3, r2
 800d944:	d006      	beq.n	800d954 <__ieee754_sqrt+0x110>
 800d946:	1c48      	adds	r0, r1, #1
 800d948:	bf0b      	itete	eq
 800d94a:	4671      	moveq	r1, lr
 800d94c:	3101      	addne	r1, #1
 800d94e:	3401      	addeq	r4, #1
 800d950:	f021 0101 	bicne.w	r1, r1, #1
 800d954:	1063      	asrs	r3, r4, #1
 800d956:	0849      	lsrs	r1, r1, #1
 800d958:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d95c:	07e2      	lsls	r2, r4, #31
 800d95e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d962:	bf48      	it	mi
 800d964:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d968:	460e      	mov	r6, r1
 800d96a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d96e:	e782      	b.n	800d876 <__ieee754_sqrt+0x32>
 800d970:	0ada      	lsrs	r2, r3, #11
 800d972:	3815      	subs	r0, #21
 800d974:	055b      	lsls	r3, r3, #21
 800d976:	2a00      	cmp	r2, #0
 800d978:	d0fa      	beq.n	800d970 <__ieee754_sqrt+0x12c>
 800d97a:	02d5      	lsls	r5, r2, #11
 800d97c:	d50a      	bpl.n	800d994 <__ieee754_sqrt+0x150>
 800d97e:	f1c1 0420 	rsb	r4, r1, #32
 800d982:	fa23 f404 	lsr.w	r4, r3, r4
 800d986:	1e4d      	subs	r5, r1, #1
 800d988:	408b      	lsls	r3, r1
 800d98a:	4322      	orrs	r2, r4
 800d98c:	1b41      	subs	r1, r0, r5
 800d98e:	e789      	b.n	800d8a4 <__ieee754_sqrt+0x60>
 800d990:	4608      	mov	r0, r1
 800d992:	e7f0      	b.n	800d976 <__ieee754_sqrt+0x132>
 800d994:	0052      	lsls	r2, r2, #1
 800d996:	3101      	adds	r1, #1
 800d998:	e7ef      	b.n	800d97a <__ieee754_sqrt+0x136>
 800d99a:	4680      	mov	r8, r0
 800d99c:	e7bd      	b.n	800d91a <__ieee754_sqrt+0xd6>
 800d99e:	bf00      	nop
 800d9a0:	7ff00000 	.word	0x7ff00000

0800d9a4 <with_errno>:
 800d9a4:	b570      	push	{r4, r5, r6, lr}
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	460d      	mov	r5, r1
 800d9aa:	4616      	mov	r6, r2
 800d9ac:	f7fb fc82 	bl	80092b4 <__errno>
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	6006      	str	r6, [r0, #0]
 800d9b4:	4620      	mov	r0, r4
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}

0800d9b8 <xflow>:
 800d9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ba:	4615      	mov	r5, r2
 800d9bc:	461c      	mov	r4, r3
 800d9be:	b180      	cbz	r0, 800d9e2 <xflow+0x2a>
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d9c6:	e9cd 0100 	strd	r0, r1, [sp]
 800d9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	4621      	mov	r1, r4
 800d9d2:	f7f2 fdf1 	bl	80005b8 <__aeabi_dmul>
 800d9d6:	2222      	movs	r2, #34	; 0x22
 800d9d8:	b003      	add	sp, #12
 800d9da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9de:	f7ff bfe1 	b.w	800d9a4 <with_errno>
 800d9e2:	4610      	mov	r0, r2
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	e7ee      	b.n	800d9c6 <xflow+0xe>

0800d9e8 <__math_uflow>:
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d9ee:	f7ff bfe3 	b.w	800d9b8 <xflow>

0800d9f2 <__math_oflow>:
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d9f8:	f7ff bfde 	b.w	800d9b8 <xflow>

0800d9fc <fabs>:
 800d9fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800da00:	4770      	bx	lr

0800da02 <finite>:
 800da02:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800da06:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800da0a:	0fc0      	lsrs	r0, r0, #31
 800da0c:	4770      	bx	lr
	...

0800da10 <scalbn>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	4617      	mov	r7, r2
 800da1c:	460b      	mov	r3, r1
 800da1e:	b996      	cbnz	r6, 800da46 <scalbn+0x36>
 800da20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da24:	4303      	orrs	r3, r0
 800da26:	d039      	beq.n	800da9c <scalbn+0x8c>
 800da28:	4b33      	ldr	r3, [pc, #204]	; (800daf8 <scalbn+0xe8>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	f7f2 fdc4 	bl	80005b8 <__aeabi_dmul>
 800da30:	4b32      	ldr	r3, [pc, #200]	; (800dafc <scalbn+0xec>)
 800da32:	4604      	mov	r4, r0
 800da34:	429f      	cmp	r7, r3
 800da36:	460d      	mov	r5, r1
 800da38:	da0f      	bge.n	800da5a <scalbn+0x4a>
 800da3a:	a32b      	add	r3, pc, #172	; (adr r3, 800dae8 <scalbn+0xd8>)
 800da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da40:	f7f2 fdba 	bl	80005b8 <__aeabi_dmul>
 800da44:	e006      	b.n	800da54 <scalbn+0x44>
 800da46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800da4a:	4296      	cmp	r6, r2
 800da4c:	d10a      	bne.n	800da64 <scalbn+0x54>
 800da4e:	4602      	mov	r2, r0
 800da50:	f7f2 fbfc 	bl	800024c <__adddf3>
 800da54:	4604      	mov	r4, r0
 800da56:	460d      	mov	r5, r1
 800da58:	e020      	b.n	800da9c <scalbn+0x8c>
 800da5a:	460b      	mov	r3, r1
 800da5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800da60:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800da64:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800da68:	19b9      	adds	r1, r7, r6
 800da6a:	4291      	cmp	r1, r2
 800da6c:	dd0e      	ble.n	800da8c <scalbn+0x7c>
 800da6e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800da72:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800da76:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800da7a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800da7e:	4820      	ldr	r0, [pc, #128]	; (800db00 <scalbn+0xf0>)
 800da80:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800da84:	a31a      	add	r3, pc, #104	; (adr r3, 800daf0 <scalbn+0xe0>)
 800da86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8a:	e7d9      	b.n	800da40 <scalbn+0x30>
 800da8c:	2900      	cmp	r1, #0
 800da8e:	dd08      	ble.n	800daa2 <scalbn+0x92>
 800da90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800da94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800da98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800da9c:	4620      	mov	r0, r4
 800da9e:	4629      	mov	r1, r5
 800daa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daa2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800daa6:	da12      	bge.n	800dace <scalbn+0xbe>
 800daa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800daac:	429f      	cmp	r7, r3
 800daae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800dab2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800dab6:	dcdc      	bgt.n	800da72 <scalbn+0x62>
 800dab8:	a30b      	add	r3, pc, #44	; (adr r3, 800dae8 <scalbn+0xd8>)
 800daba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabe:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800dac2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800dac6:	480f      	ldr	r0, [pc, #60]	; (800db04 <scalbn+0xf4>)
 800dac8:	f041 011f 	orr.w	r1, r1, #31
 800dacc:	e7b8      	b.n	800da40 <scalbn+0x30>
 800dace:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dad2:	3136      	adds	r1, #54	; 0x36
 800dad4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dad8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800dadc:	4620      	mov	r0, r4
 800dade:	4629      	mov	r1, r5
 800dae0:	2200      	movs	r2, #0
 800dae2:	4b09      	ldr	r3, [pc, #36]	; (800db08 <scalbn+0xf8>)
 800dae4:	e7ac      	b.n	800da40 <scalbn+0x30>
 800dae6:	bf00      	nop
 800dae8:	c2f8f359 	.word	0xc2f8f359
 800daec:	01a56e1f 	.word	0x01a56e1f
 800daf0:	8800759c 	.word	0x8800759c
 800daf4:	7e37e43c 	.word	0x7e37e43c
 800daf8:	43500000 	.word	0x43500000
 800dafc:	ffff3cb0 	.word	0xffff3cb0
 800db00:	8800759c 	.word	0x8800759c
 800db04:	c2f8f359 	.word	0xc2f8f359
 800db08:	3c900000 	.word	0x3c900000

0800db0c <_init>:
 800db0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0e:	bf00      	nop
 800db10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db12:	bc08      	pop	{r3}
 800db14:	469e      	mov	lr, r3
 800db16:	4770      	bx	lr

0800db18 <_fini>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	bf00      	nop
 800db1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1e:	bc08      	pop	{r3}
 800db20:	469e      	mov	lr, r3
 800db22:	4770      	bx	lr
