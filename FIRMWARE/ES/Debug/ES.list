
ES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7f4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000550  0800d9e8  0800d9e8  0001d9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df38  0800df38  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800df38  0800df38  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800df38  0800df38  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df38  0800df38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800df40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c8  200001ec  0800e12c  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200028b4  0800e12c  000228b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dabe  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049d4  00000000  00000000  0003dcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a58  00000000  00000000  000426a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00044100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ef65  00000000  00000000  00045988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000200f2  00000000  00000000  000648ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aca1a  00000000  00000000  000849df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001313f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008554  00000000  00000000  0013144c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001ec 	.word	0x200001ec
 800020c:	00000000 	.word	0x00000000
 8000210:	0800d9cc 	.word	0x0800d9cc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001f0 	.word	0x200001f0
 800022c:	0800d9cc 	.word	0x0800d9cc

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	; 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2lz>:
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4605      	mov	r5, r0
 8000bac:	460c      	mov	r4, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4628      	mov	r0, r5
 8000bb4:	4621      	mov	r1, r4
 8000bb6:	f7ff ff71 	bl	8000a9c <__aeabi_dcmplt>
 8000bba:	b928      	cbnz	r0, 8000bc8 <__aeabi_d2lz+0x20>
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	4621      	mov	r1, r4
 8000bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc4:	f000 b80a 	b.w	8000bdc <__aeabi_d2ulz>
 8000bc8:	4628      	mov	r0, r5
 8000bca:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bce:	f000 f805 	bl	8000bdc <__aeabi_d2ulz>
 8000bd2:	4240      	negs	r0, r0
 8000bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd8:	bd38      	pop	{r3, r4, r5, pc}
 8000bda:	bf00      	nop

08000bdc <__aeabi_d2ulz>:
 8000bdc:	b5d0      	push	{r4, r6, r7, lr}
 8000bde:	2200      	movs	r2, #0
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <__aeabi_d2ulz+0x34>)
 8000be2:	4606      	mov	r6, r0
 8000be4:	460f      	mov	r7, r1
 8000be6:	f7ff fce7 	bl	80005b8 <__aeabi_dmul>
 8000bea:	f7ff ffbd 	bl	8000b68 <__aeabi_d2uiz>
 8000bee:	4604      	mov	r4, r0
 8000bf0:	f7ff fc68 	bl	80004c4 <__aeabi_ui2d>
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <__aeabi_d2ulz+0x38>)
 8000bf8:	f7ff fcde 	bl	80005b8 <__aeabi_dmul>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	460b      	mov	r3, r1
 8000c00:	4630      	mov	r0, r6
 8000c02:	4639      	mov	r1, r7
 8000c04:	f7ff fb20 	bl	8000248 <__aeabi_dsub>
 8000c08:	f7ff ffae 	bl	8000b68 <__aeabi_d2uiz>
 8000c0c:	4621      	mov	r1, r4
 8000c0e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c10:	3df00000 	.word	0x3df00000
 8000c14:	41f00000 	.word	0x41f00000

08000c18 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <MX_ADC1_Init+0x78>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c56:	f001 fc6b 	bl	8002530 <HAL_ADC_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c60:	f001 f9f0 	bl	8002044 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c64:	2301      	movs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c6c:	2307      	movs	r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC1_Init+0x74>)
 8000c76:	f001 fed3 	bl	8002a20 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c80:	f001 f9e0 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000208 	.word	0x20000208
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_ADC_MspInit+0x7c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d129      	bne.n	8000d08 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a10      	ldr	r2, [pc, #64]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <HAL_ADC_MspInit+0x80>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4809      	ldr	r0, [pc, #36]	; (8000d18 <HAL_ADC_MspInit+0x84>)
 8000cf4:	f002 fa52 	bl	800319c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	2012      	movs	r0, #18
 8000cfe:	f002 f8e0 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d02:	2012      	movs	r0, #18
 8000d04:	f002 f8f9 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40012400 	.word	0x40012400
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800

08000d1c <ads_write>:

extern I2C_HandleTypeDef hi2c2;
extern SemaphoreHandle_t i2cSemphrHandle;

void ads_write(uint8_t reg_addr, uint8_t *data_send, int len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af02      	add	r7, sp, #8
 8000d22:	4603      	mov	r3, r0
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	73fb      	strb	r3, [r7, #15]
	uint8_t *data = (uint8_t *)calloc(len + 2, sizeof(uint8_t));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f008 fa17 	bl	8009164 <calloc>
 8000d36:	4603      	mov	r3, r0
 8000d38:	617b      	str	r3, [r7, #20]
	data[0] = reg_addr;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	701a      	strb	r2, [r3, #0]
	memcpy((char *)&data[1], (char *)data_send, len);
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	68b9      	ldr	r1, [r7, #8]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f008 fa4d 	bl	80091e8 <memcpy>
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <ads_write+0x78>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 31ff 	mov.w	r1, #4294967295
 8000d56:	4618      	mov	r0, r3
 8000d58:	f005 ff40 	bl	8006bdc <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_ADS1115, data, strlen((char *)data), 1000);
 8000d5c:	6978      	ldr	r0, [r7, #20]
 8000d5e:	f7ff fa67 	bl	8000230 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d6a:	9200      	str	r2, [sp, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	2190      	movs	r1, #144	; 0x90
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <ads_write+0x7c>)
 8000d72:	f002 fd1b 	bl	80037ac <HAL_I2C_Master_Transmit>
	xSemaphoreGive(i2cSemphrHandle);
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <ads_write+0x78>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f005 fcb6 	bl	80066f0 <xQueueGenericSend>
	free(data);
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	f008 fa27 	bl	80091d8 <free>
}
 8000d8a:	bf00      	nop
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000254 	.word	0x20000254
 8000d98:	20000274 	.word	0x20000274

08000d9c <ads_read>:

void ads_read(uint8_t reg_addr, uint8_t *data_read)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <ads_read+0x54>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	4618      	mov	r0, r3
 8000db2:	f005 ff13 	bl	8006bdc <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_ADS1115, &reg_addr, 1, 1000);
 8000db6:	1dfa      	adds	r2, r7, #7
 8000db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	2190      	movs	r1, #144	; 0x90
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <ads_read+0x58>)
 8000dc4:	f002 fcf2 	bl	80037ac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, SLAVE_ADDRESS_ADS1115, data_read, 2, 1000);
 8000dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2302      	movs	r3, #2
 8000dd0:	683a      	ldr	r2, [r7, #0]
 8000dd2:	2190      	movs	r1, #144	; 0x90
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <ads_read+0x58>)
 8000dd6:	f002 fde7 	bl	80039a8 <HAL_I2C_Master_Receive>
	xSemaphoreGive(i2cSemphrHandle);
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <ads_read+0x54>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	2200      	movs	r2, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	f005 fc84 	bl	80066f0 <xQueueGenericSend>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000254 	.word	0x20000254
 8000df4:	20000274 	.word	0x20000274

08000df8 <ads_init>:

void ads_init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t data_init[3] = {0x46, 0x20, 0x00};
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <ads_init+0x2c>)
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	4611      	mov	r1, r2
 8000e06:	8019      	strh	r1, [r3, #0]
 8000e08:	3302      	adds	r3, #2
 8000e0a:	0c12      	lsrs	r2, r2, #16
 8000e0c:	701a      	strb	r2, [r3, #0]
	ads_write(ADS1115_CONFIG_REG, data_init, 2);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2202      	movs	r2, #2
 8000e12:	4619      	mov	r1, r3
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff ff81 	bl	8000d1c <ads_write>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	0800d9e8 	.word	0x0800d9e8

08000e28 <reverse>:
void lcd_task(void *param);
void sensor_task(void *param);
void general_task(void *param);

void reverse(char *str, int len)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b087      	sub	sp, #28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000e3c:	e018      	b.n	8000e70 <reverse+0x48>
    {
        temp = str[i];
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	441a      	add	r2, r3
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	440b      	add	r3, r1
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	701a      	strb	r2, [r3, #0]
        i++;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
        j--;
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
    while (i < j)
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbe2      	blt.n	8000e3e <reverse+0x16>
    }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d126      	bne.n	8000ee8 <intToStr+0x64>
        str[i++] = '0';
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	617a      	str	r2, [r7, #20]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2230      	movs	r2, #48	; 0x30
 8000ea8:	701a      	strb	r2, [r3, #0]

    while (x)
 8000eaa:	e01d      	b.n	8000ee8 <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <intToStr+0xa0>)
 8000eb0:	fb83 1302 	smull	r1, r3, r3, r2
 8000eb4:	1099      	asrs	r1, r3, #2
 8000eb6:	17d3      	asrs	r3, r2, #31
 8000eb8:	1ac9      	subs	r1, r1, r3
 8000eba:	460b      	mov	r3, r1
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	1ad1      	subs	r1, r2, r3
 8000ec4:	b2ca      	uxtb	r2, r1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	1c59      	adds	r1, r3, #1
 8000eca:	6179      	str	r1, [r7, #20]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3230      	adds	r2, #48	; 0x30
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <intToStr+0xa0>)
 8000edc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee0:	1092      	asrs	r2, r2, #2
 8000ee2:	17db      	asrs	r3, r3, #31
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	60fb      	str	r3, [r7, #12]
    while (x)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1de      	bne.n	8000eac <intToStr+0x28>
    }

    while (i < d)
 8000eee:	e007      	b.n	8000f00 <intToStr+0x7c>
        str[i++] = '0';
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	617a      	str	r2, [r7, #20]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4413      	add	r3, r2
 8000efc:	2230      	movs	r2, #48	; 0x30
 8000efe:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf3      	blt.n	8000ef0 <intToStr+0x6c>

    reverse(str, i);
 8000f08:	6979      	ldr	r1, [r7, #20]
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f7ff ff8c 	bl	8000e28 <reverse>
    str[i] = '\0';
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
    return i;
 8000f1a:	697b      	ldr	r3, [r7, #20]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	66666667 	.word	0x66666667

08000f28 <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 8000f36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f3a:	f7ff fded 	bl	8000b18 <__aeabi_d2iz>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 8000f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f44:	f7ff face 	bl	80004e4 <__aeabi_i2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f50:	f7ff f97a 	bl	8000248 <__aeabi_dsub>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000f62:	f7ff ff8f 	bl	8000e84 <intToStr>
 8000f66:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d024      	beq.n	8000fb8 <ftoa+0x90>
    {
        res[i] = '.';
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	222e      	movs	r2, #46	; 0x2e
 8000f76:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8000f78:	6838      	ldr	r0, [r7, #0]
 8000f7a:	f7ff fab3 	bl	80004e4 <__aeabi_i2d>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <ftoa+0x98>)
 8000f88:	f00b fe3c 	bl	800cc04 <pow>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f94:	f7ff fb10 	bl	80005b8 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 8000fa0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000fa4:	f7ff fdb8 	bl	8000b18 <__aeabi_d2iz>
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3301      	adds	r3, #1
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f7ff ff66 	bl	8000e84 <intToStr>
    }
}
 8000fb8:	bf00      	nop
 8000fba:	3728      	adds	r7, #40	; 0x28
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40240000 	.word	0x40240000

08000fc4 <LOG>:

void LOG(const char *TAG, char *data)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b09c      	sub	sp, #112	; 0x70
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	2260      	movs	r2, #96	; 0x60
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f008 f912 	bl	8009204 <memset>
	sprintf(data_log, "\r\n%s: %s\r\n", TAG, data);
 8000fe0:	f107 000c 	add.w	r0, r7, #12
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	490a      	ldr	r1, [pc, #40]	; (8001014 <LOG+0x50>)
 8000fea:	f008 fa13 	bl	8009414 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data_log, strlen(data_log), 1000);
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f91c 	bl	8000230 <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 010c 	add.w	r1, r7, #12
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	4804      	ldr	r0, [pc, #16]	; (8001018 <LOG+0x54>)
 8001006:	f004 fa18 	bl	800543a <HAL_UART_Transmit>
}
 800100a:	bf00      	nop
 800100c:	3770      	adds	r7, #112	; 0x70
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	0800da08 	.word	0x0800da08
 8001018:	20000314 	.word	0x20000314

0800101c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af02      	add	r7, sp, #8
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	i2cSemphrHandle = xSemaphoreCreateMutex();
 8001022:	2001      	movs	r0, #1
 8001024:	f005 fb4c 	bl	80066c0 <xQueueCreateMutex>
 8001028:	4603      	mov	r3, r0
 800102a:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <MX_FREERTOS_Init+0x94>)
 800102c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	genlcdQueueHandle = xQueueCreate(5, sizeof(generalTestHandle_t));
 800102e:	2200      	movs	r2, #0
 8001030:	2130      	movs	r1, #48	; 0x30
 8001032:	2005      	movs	r0, #5
 8001034:	f005 fac9 	bl	80065ca <xQueueGenericCreate>
 8001038:	4603      	mov	r3, r0
 800103a:	4a1e      	ldr	r2, [pc, #120]	; (80010b4 <MX_FREERTOS_Init+0x98>)
 800103c:	6013      	str	r3, [r2, #0]
	sensorQueueHandle = xQueueCreate(5, sizeof(sensorTestHandle_t));
 800103e:	2200      	movs	r2, #0
 8001040:	2114      	movs	r1, #20
 8001042:	2005      	movs	r0, #5
 8001044:	f005 fac1 	bl	80065ca <xQueueGenericCreate>
 8001048:	4603      	mov	r3, r0
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_FREERTOS_Init+0x9c>)
 800104c:	6013      	str	r3, [r2, #0]
	gensenQueueHandle = xQueueCreate(1, sizeof(generalTestHandle_t));
 800104e:	2200      	movs	r2, #0
 8001050:	2130      	movs	r1, #48	; 0x30
 8001052:	2001      	movs	r0, #1
 8001054:	f005 fab9 	bl	80065ca <xQueueGenericCreate>
 8001058:	4603      	mov	r3, r0
 800105a:	4a18      	ldr	r2, [pc, #96]	; (80010bc <MX_FREERTOS_Init+0xa0>)
 800105c:	6013      	str	r3, [r2, #0]
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	xTaskCreate(&general_task, "GEN", 256, NULL, 4, &generalTaskHandle);
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_FREERTOS_Init+0xa4>)
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	2304      	movs	r3, #4
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106c:	4915      	ldr	r1, [pc, #84]	; (80010c4 <MX_FREERTOS_Init+0xa8>)
 800106e:	4816      	ldr	r0, [pc, #88]	; (80010c8 <MX_FREERTOS_Init+0xac>)
 8001070:	f006 f8a0 	bl	80071b4 <xTaskCreate>
	xTaskCreate(&lcd_task, "LCD", 256, NULL, 3, &lcdTaskHandle);
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_FREERTOS_Init+0xb0>)
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	2303      	movs	r3, #3
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2300      	movs	r3, #0
 800107e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001082:	4913      	ldr	r1, [pc, #76]	; (80010d0 <MX_FREERTOS_Init+0xb4>)
 8001084:	4813      	ldr	r0, [pc, #76]	; (80010d4 <MX_FREERTOS_Init+0xb8>)
 8001086:	f006 f895 	bl	80071b4 <xTaskCreate>
	xTaskCreate(&sensor_task, "SENSOR", 256, NULL, 2, &sensorTaskHandle);
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_FREERTOS_Init+0xbc>)
 800108c:	9301      	str	r3, [sp, #4]
 800108e:	2302      	movs	r3, #2
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2300      	movs	r3, #0
 8001094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001098:	4910      	ldr	r1, [pc, #64]	; (80010dc <MX_FREERTOS_Init+0xc0>)
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <MX_FREERTOS_Init+0xc4>)
 800109c:	f006 f88a 	bl	80071b4 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
	evGroupHandle = xEventGroupCreate();
 80010a0:	f004 ff4e 	bl	8005f40 <xEventGroupCreate>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <MX_FREERTOS_Init+0xc8>)
 80010a8:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000254 	.word	0x20000254
 80010b4:	20000248 	.word	0x20000248
 80010b8:	20000244 	.word	0x20000244
 80010bc:	2000024c 	.word	0x2000024c
 80010c0:	20000240 	.word	0x20000240
 80010c4:	0800da14 	.word	0x0800da14
 80010c8:	080014c1 	.word	0x080014c1
 80010cc:	20000238 	.word	0x20000238
 80010d0:	0800da18 	.word	0x0800da18
 80010d4:	080019f1 	.word	0x080019f1
 80010d8:	2000023c 	.word	0x2000023c
 80010dc:	0800da1c 	.word	0x0800da1c
 80010e0:	08001271 	.word	0x08001271
 80010e4:	20000250 	.word	0x20000250

080010e8 <HAL_ADC_ConvCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
	if (hadc->Instance == ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <HAL_ADC_ConvCpltCallback+0x30>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d107      	bne.n	800110e <HAL_ADC_ConvCpltCallback+0x26>
	{
		xEventGroupSetBitsFromISR(evGroupHandle, ADC_BIT, &xHigherPriorityTaskWoken);
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <HAL_ADC_ConvCpltCallback+0x34>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f107 020c 	add.w	r2, r7, #12
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f005 f8bb 	bl	8006284 <xEventGroupSetBitsFromISR>
	}
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012400 	.word	0x40012400
 800111c:	20000250 	.word	0x20000250

08001120 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
	if (GPIO_Pin == GPIO_PIN_12)
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001134:	d108      	bne.n	8001148 <HAL_GPIO_EXTI_Callback+0x28>
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT0_BIT, &xHigherPriorityTaskWoken);
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f107 020c 	add.w	r2, r7, #12
 800113e:	2102      	movs	r1, #2
 8001140:	4618      	mov	r0, r3
 8001142:	f005 f89f 	bl	8006284 <xEventGroupSetBitsFromISR>
	}
	else if (GPIO_Pin == GPIO_PIN_15)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT3_BIT, &xHigherPriorityTaskWoken);
	}
}
 8001146:	e025      	b.n	8001194 <HAL_GPIO_EXTI_Callback+0x74>
	else if (GPIO_Pin == GPIO_PIN_13)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800114e:	d108      	bne.n	8001162 <HAL_GPIO_EXTI_Callback+0x42>
		xEventGroupSetBitsFromISR(evGroupHandle, BUT1_BIT, &xHigherPriorityTaskWoken);
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	2104      	movs	r1, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f005 f892 	bl	8006284 <xEventGroupSetBitsFromISR>
}
 8001160:	e018      	b.n	8001194 <HAL_GPIO_EXTI_Callback+0x74>
	else if (GPIO_Pin == GPIO_PIN_14)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001168:	d108      	bne.n	800117c <HAL_GPIO_EXTI_Callback+0x5c>
		xEventGroupSetBitsFromISR(evGroupHandle, BUT2_BIT, &xHigherPriorityTaskWoken);
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_GPIO_EXTI_Callback+0x7c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f107 020c 	add.w	r2, r7, #12
 8001172:	2108      	movs	r1, #8
 8001174:	4618      	mov	r0, r3
 8001176:	f005 f885 	bl	8006284 <xEventGroupSetBitsFromISR>
}
 800117a:	e00b      	b.n	8001194 <HAL_GPIO_EXTI_Callback+0x74>
	else if (GPIO_Pin == GPIO_PIN_15)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001182:	d107      	bne.n	8001194 <HAL_GPIO_EXTI_Callback+0x74>
		xEventGroupSetBitsFromISR(evGroupHandle, BUT3_BIT, &xHigherPriorityTaskWoken);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_GPIO_EXTI_Callback+0x7c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f107 020c 	add.w	r2, r7, #12
 800118c:	2110      	movs	r1, #16
 800118e:	4618      	mov	r0, r3
 8001190:	f005 f878 	bl	8006284 <xEventGroupSetBitsFromISR>
}
 8001194:	bf00      	nop
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000250 	.word	0x20000250

080011a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	if(ucRxData == '$')
 80011a8:	4b2c      	ldr	r3, [pc, #176]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b24      	cmp	r3, #36	; 0x24
 80011ae:	d115      	bne.n	80011dc <HAL_UART_RxCpltCallback+0x3c>
	{
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
 80011b0:	482b      	ldr	r0, [pc, #172]	; (8001260 <HAL_UART_RxCpltCallback+0xc0>)
 80011b2:	f7ff f83d 	bl	8000230 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	461a      	mov	r2, r3
 80011ba:	2100      	movs	r1, #0
 80011bc:	4828      	ldr	r0, [pc, #160]	; (8001260 <HAL_UART_RxCpltCallback+0xc0>)
 80011be:	f008 f821 	bl	8009204 <memset>
		ucRxBuffer[0] = ucRxData;
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_UART_RxCpltCallback+0xc0>)
 80011c8:	701a      	strb	r2, [r3, #0]
		ucRxFlag = START_BYTE;
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_UART_RxCpltCallback+0xc4>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 80011d0:	2201      	movs	r2, #1
 80011d2:	4922      	ldr	r1, [pc, #136]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 80011d4:	4824      	ldr	r0, [pc, #144]	; (8001268 <HAL_UART_RxCpltCallback+0xc8>)
 80011d6:	f004 f9c2 	bl	800555e <HAL_UART_Receive_IT>
		ucRxFlag = ERROR_FRAME;
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
		ucRxCnt = 0;
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
	}
}
 80011da:	e03b      	b.n	8001254 <HAL_UART_RxCpltCallback+0xb4>
	else if (ucRxFlag == START_BYTE && ucRxCnt < 20)
 80011dc:	4b21      	ldr	r3, [pc, #132]	; (8001264 <HAL_UART_RxCpltCallback+0xc4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d11e      	bne.n	8001222 <HAL_UART_RxCpltCallback+0x82>
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <HAL_UART_RxCpltCallback+0xcc>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b13      	cmp	r3, #19
 80011ea:	d81a      	bhi.n	8001222 <HAL_UART_RxCpltCallback+0x82>
		ucRxBuffer[++ucRxCnt] = ucRxData;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <HAL_UART_RxCpltCallback+0xcc>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_UART_RxCpltCallback+0xcc>)
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_UART_RxCpltCallback+0xcc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 8001200:	7819      	ldrb	r1, [r3, #0]
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_UART_RxCpltCallback+0xc0>)
 8001204:	5499      	strb	r1, [r3, r2]
		if (ucRxData == '*')
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2a      	cmp	r3, #42	; 0x2a
 800120c:	d103      	bne.n	8001216 <HAL_UART_RxCpltCallback+0x76>
			ucRxFlag = END_BYTE;
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_RxCpltCallback+0xc4>)
 8001210:	2202      	movs	r2, #2
 8001212:	701a      	strb	r2, [r3, #0]
		if (ucRxData == '*')
 8001214:	e01e      	b.n	8001254 <HAL_UART_RxCpltCallback+0xb4>
			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001216:	2201      	movs	r2, #1
 8001218:	4910      	ldr	r1, [pc, #64]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <HAL_UART_RxCpltCallback+0xc8>)
 800121c:	f004 f99f 	bl	800555e <HAL_UART_Receive_IT>
		if (ucRxData == '*')
 8001220:	e018      	b.n	8001254 <HAL_UART_RxCpltCallback+0xb4>
	else if (ucRxCnt == UART_BUFFER_LEN)
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_UART_RxCpltCallback+0xcc>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b14      	cmp	r3, #20
 8001228:	d114      	bne.n	8001254 <HAL_UART_RxCpltCallback+0xb4>
		ucRxFlag = ERROR_FRAME;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_RxCpltCallback+0xc4>)
 800122c:	2203      	movs	r2, #3
 800122e:	701a      	strb	r2, [r3, #0]
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <HAL_UART_RxCpltCallback+0xc0>)
 8001232:	f7fe fffd 	bl	8000230 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	4808      	ldr	r0, [pc, #32]	; (8001260 <HAL_UART_RxCpltCallback+0xc0>)
 800123e:	f007 ffe1 	bl	8009204 <memset>
		ucRxCnt = 0;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_UART_RxCpltCallback+0xcc>)
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	4904      	ldr	r1, [pc, #16]	; (800125c <HAL_UART_RxCpltCallback+0xbc>)
 800124c:	4806      	ldr	r0, [pc, #24]	; (8001268 <HAL_UART_RxCpltCallback+0xc8>)
 800124e:	f004 f986 	bl	800555e <HAL_UART_Receive_IT>
}
 8001252:	e7ff      	b.n	8001254 <HAL_UART_RxCpltCallback+0xb4>
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000258 	.word	0x20000258
 8001260:	2000025c 	.word	0x2000025c
 8001264:	20000004 	.word	0x20000004
 8001268:	20000314 	.word	0x20000314
 800126c:	20000270 	.word	0x20000270

08001270 <sensor_task>:

void sensor_task(void *param)
{
 8001270:	b590      	push	{r4, r7, lr}
 8001272:	b0a3      	sub	sp, #140	; 0x8c
 8001274:	af02      	add	r7, sp, #8
 8001276:	6078      	str	r0, [r7, #4]
	TickType_t xWakeTick = xTaskGetTickCount();
 8001278:	f006 fa9c 	bl	80077b4 <xTaskGetTickCount>
 800127c:	4603      	mov	r3, r0
 800127e:	667b      	str	r3, [r7, #100]	; 0x64
	EventBits_t xEvBit;
	uint8_t ucDataAds[3] = {0};
 8001280:	4b87      	ldr	r3, [pc, #540]	; (80014a0 <sensor_task+0x230>)
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	generalTestHandle_t generalTest;
	sensorTestHandle_t sensorTest;
	BaseType_t xGenRet;
	double dbSensorStm;
	double dbSensorAds;
	double dbVal[2] = {1000.0, 25.0};
 800128e:	4b85      	ldr	r3, [pc, #532]	; (80014a4 <sensor_task+0x234>)
 8001290:	f107 0408 	add.w	r4, r7, #8
 8001294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ads_init();
 800129a:	f7ff fdad 	bl	8000df8 <ads_init>
	while (1)
	{
		xGenRet = xQueueReceive(gensenQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
 800129e:	4b82      	ldr	r3, [pc, #520]	; (80014a8 <sensor_task+0x238>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80012a6:	2200      	movs	r2, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f005 fbb7 	bl	8006a1c <xQueueReceive>
 80012ae:	6778      	str	r0, [r7, #116]	; 0x74
		if (xGenRet == pdTRUE)
 80012b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d107      	bne.n	80012c6 <sensor_task+0x56>
		{
			dbVal[0] = generalTest.dbVal[0];
 80012b6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80012ba:	e9c7 2302 	strd	r2, r3, [r7, #8]
			dbVal[1] = generalTest.dbVal[1];
 80012be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		}
		HAL_ADC_Start_IT(&hadc1);
 80012c6:	4879      	ldr	r0, [pc, #484]	; (80014ac <sensor_task+0x23c>)
 80012c8:	f001 fa1c 	bl	8002704 <HAL_ADC_Start_IT>
		xEvBit = xEventGroupWaitBits(evGroupHandle, ADC_BIT , pdTRUE, pdFALSE, 200 / portTICK_RATE_MS);
 80012cc:	4b78      	ldr	r3, [pc, #480]	; (80014b0 <sensor_task+0x240>)
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	2201      	movs	r2, #1
 80012d8:	2101      	movs	r1, #1
 80012da:	f004 fe4b 	bl	8005f74 <xEventGroupWaitBits>
 80012de:	6738      	str	r0, [r7, #112]	; 0x70
		if (xEvBit & ADC_BIT)
 80012e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d022      	beq.n	8001330 <sensor_task+0xc0>
			dbSensorStm = (double)HAL_ADC_GetValue(&hadc1) * 100 * 3.3 / 4095 ;
 80012ea:	4870      	ldr	r0, [pc, #448]	; (80014ac <sensor_task+0x23c>)
 80012ec:	f001 fac0 	bl	8002870 <HAL_ADC_GetValue>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f8e6 	bl	80004c4 <__aeabi_ui2d>
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <sensor_task+0x244>)
 80012fe:	f7ff f95b 	bl	80005b8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4610      	mov	r0, r2
 8001308:	4619      	mov	r1, r3
 800130a:	a35d      	add	r3, pc, #372	; (adr r3, 8001480 <sensor_task+0x210>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f952 	bl	80005b8 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	a35a      	add	r3, pc, #360	; (adr r3, 8001488 <sensor_task+0x218>)
 800131e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001322:	f7ff fa73 	bl	800080c <__aeabi_ddiv>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
 800132e:	e005      	b.n	800133c <sensor_task+0xcc>
		else
			dbSensorStm = 0;
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
		ftoa(dbSensorStm, (char *)sensorTest.ucSensorStm, 2);
 800133c:	f107 021c 	add.w	r2, r7, #28
 8001340:	2302      	movs	r3, #2
 8001342:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001346:	f7ff fdef 	bl	8000f28 <ftoa>
		memset((char *)ucDataAds, '\0', strlen((char *)ucDataAds));
 800134a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800134e:	4618      	mov	r0, r3
 8001350:	f7fe ff6e 	bl	8000230 <strlen>
 8001354:	4602      	mov	r2, r0
 8001356:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f007 ff51 	bl	8009204 <memset>
		ads_read(ADS1115_CONVERSION_REG, ucDataAds);
 8001362:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001366:	4619      	mov	r1, r3
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff fd17 	bl	8000d9c <ads_read>
		dbSensorAds = ((double)((((uint16_t)ucDataAds[0] << 8) & 0xFF00) | ((uint16_t)ucDataAds[1] & 0x00FF)) * 1.024 / 32767) * 100;
 800136e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800137a:	4313      	orrs	r3, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8b1 	bl	80004e4 <__aeabi_i2d>
 8001382:	a343      	add	r3, pc, #268	; (adr r3, 8001490 <sensor_task+0x220>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f916 	bl	80005b8 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	a340      	add	r3, pc, #256	; (adr r3, 8001498 <sensor_task+0x228>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	f7ff fa37 	bl	800080c <__aeabi_ddiv>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <sensor_task+0x244>)
 80013ac:	f7ff f904 	bl	80005b8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		ftoa(dbSensorAds, (char *)sensorTest.ucSensorAds, 2);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	f103 020a 	add.w	r2, r3, #10
 80013c0:	2302      	movs	r3, #2
 80013c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80013c6:	f7ff fdaf 	bl	8000f28 <ftoa>
		if (dbSensorStm > dbVal[1])
 80013ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80013d2:	f7ff fb81 	bl	8000ad8 <__aeabi_dcmpgt>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00c      	beq.n	80013f6 <sensor_task+0x186>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_ON);
 80013dc:	2200      	movs	r2, #0
 80013de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e2:	4835      	ldr	r0, [pc, #212]	; (80014b8 <sensor_task+0x248>)
 80013e4:	f002 f86e 	bl	80034c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_ON);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ee:	4832      	ldr	r0, [pc, #200]	; (80014b8 <sensor_task+0x248>)
 80013f0:	f002 f868 	bl	80034c4 <HAL_GPIO_WritePin>
 80013f4:	e00b      	b.n	800140e <sensor_task+0x19e>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_OFF);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	482e      	ldr	r0, [pc, #184]	; (80014b8 <sensor_task+0x248>)
 80013fe:	f002 f861 	bl	80034c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_OFF);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001408:	482b      	ldr	r0, [pc, #172]	; (80014b8 <sensor_task+0x248>)
 800140a:	f002 f85b 	bl	80034c4 <HAL_GPIO_WritePin>
		}
		if (dbSensorAds > dbVal[1])
 800140e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001416:	f7ff fb5f 	bl	8000ad8 <__aeabi_dcmpgt>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d00c      	beq.n	800143a <sensor_task+0x1ca>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_ON);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001426:	4824      	ldr	r0, [pc, #144]	; (80014b8 <sensor_task+0x248>)
 8001428:	f002 f84c 	bl	80034c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_ON);
 800142c:	2200      	movs	r2, #0
 800142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001432:	4821      	ldr	r0, [pc, #132]	; (80014b8 <sensor_task+0x248>)
 8001434:	f002 f846 	bl	80034c4 <HAL_GPIO_WritePin>
 8001438:	e00b      	b.n	8001452 <sensor_task+0x1e2>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_OFF);
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001440:	481d      	ldr	r0, [pc, #116]	; (80014b8 <sensor_task+0x248>)
 8001442:	f002 f83f 	bl	80034c4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_OFF);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 7100 	mov.w	r1, #512	; 0x200
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <sensor_task+0x248>)
 800144e:	f002 f839 	bl	80034c4 <HAL_GPIO_WritePin>
		}
		xQueueSend(sensorQueueHandle, &sensorTest, 0 / portTICK_RATE_MS);
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <sensor_task+0x24c>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	f107 011c 	add.w	r1, r7, #28
 800145a:	2300      	movs	r3, #0
 800145c:	2200      	movs	r2, #0
 800145e:	f005 f947 	bl	80066f0 <xQueueGenericSend>
		vTaskDelayUntil(&xWakeTick, (TickType_t)dbVal[0] / portTICK_RATE_MS);
 8001462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f7ff fb7d 	bl	8000b68 <__aeabi_d2uiz>
 800146e:	4602      	mov	r2, r0
 8001470:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f005 ffd8 	bl	800742c <vTaskDelayUntil>
		xGenRet = xQueueReceive(gensenQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
 800147c:	e70f      	b.n	800129e <sensor_task+0x2e>
 800147e:	bf00      	nop
 8001480:	66666666 	.word	0x66666666
 8001484:	400a6666 	.word	0x400a6666
 8001488:	00000000 	.word	0x00000000
 800148c:	40affe00 	.word	0x40affe00
 8001490:	d2f1a9fc 	.word	0xd2f1a9fc
 8001494:	3ff0624d 	.word	0x3ff0624d
 8001498:	00000000 	.word	0x00000000
 800149c:	40dfffc0 	.word	0x40dfffc0
 80014a0:	0800da24 	.word	0x0800da24
 80014a4:	0800da28 	.word	0x0800da28
 80014a8:	2000024c 	.word	0x2000024c
 80014ac:	20000208 	.word	0x20000208
 80014b0:	20000250 	.word	0x20000250
 80014b4:	40590000 	.word	0x40590000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	20000244 	.word	0x20000244

080014c0 <general_task>:
	}
}

void general_task(void *param)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b097      	sub	sp, #92	; 0x5c
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	6078      	str	r0, [r7, #4]
	generalTestHandle_t generalTest = {
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2230      	movs	r2, #48	; 0x30
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 fe97 	bl	8009204 <memset>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4ba9      	ldr	r3, [pc, #676]	; (8001780 <general_task+0x2c0>)
 80014dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4ba7      	ldr	r3, [pc, #668]	; (8001784 <general_task+0x2c4>)
 80014e6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			.ucPage = 0,
			.dbVal[0] = 1000,
			.dbVal[1] = 25.0,
	};
	EventBits_t xEvBit;
	TickType_t xWakeTick = xTaskGetTickCount();
 80014ea:	f006 f963 	bl	80077b4 <xTaskGetTickCount>
 80014ee:	4603      	mov	r3, r0
 80014f0:	617b      	str	r3, [r7, #20]
	uartCfgHandle_t uartCfg = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	809a      	strh	r2, [r3, #4]
	while (1)
	{
		xEvBit = xEventGroupWaitBits(evGroupHandle, BUT0_BIT | BUT1_BIT | BUT2_BIT | BUT3_BIT, pdTRUE, pdFALSE, 0 / portTICK_RATE_MS);
 80014fc:	4ba2      	ldr	r3, [pc, #648]	; (8001788 <general_task+0x2c8>)
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2201      	movs	r2, #1
 8001508:	211e      	movs	r1, #30
 800150a:	f004 fd33 	bl	8005f74 <xEventGroupWaitBits>
 800150e:	64f8      	str	r0, [r7, #76]	; 0x4c
		if (xEvBit & BUT0_BIT)
 8001510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d009      	beq.n	800152e <general_task+0x6e>
		{
				generalTest.bCfg = false;
 800151a:	2300      	movs	r3, #0
 800151c:	76bb      	strb	r3, [r7, #26]
				generalTest.ucCursor = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	767b      	strb	r3, [r7, #25]
				generalTest.ucPage = 1 - generalTest.ucPage;
 8001522:	7e3b      	ldrb	r3, [r7, #24]
 8001524:	f1c3 0301 	rsb	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	763b      	strb	r3, [r7, #24]
 800152c:	e17b      	b.n	8001826 <general_task+0x366>
		}
		else if (xEvBit & BUT1_BIT)
 800152e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a4 	beq.w	8001682 <general_task+0x1c2>
		{
			if (generalTest.ucPage == 1 && generalTest.bCfg == false)
 800153a:	7e3b      	ldrb	r3, [r7, #24]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10b      	bne.n	8001558 <general_task+0x98>
 8001540:	7ebb      	ldrb	r3, [r7, #26]
 8001542:	f083 0301 	eor.w	r3, r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <general_task+0x98>
			{
				generalTest.ucCursor = 1 - generalTest.ucCursor;
 800154c:	7e7b      	ldrb	r3, [r7, #25]
 800154e:	f1c3 0301 	rsb	r3, r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	767b      	strb	r3, [r7, #25]
 8001556:	e166      	b.n	8001826 <general_task+0x366>
			}
			else if (generalTest.ucPage == 1 && generalTest.bCfg == true)
 8001558:	7e3b      	ldrb	r3, [r7, #24]
 800155a:	2b01      	cmp	r3, #1
 800155c:	f040 8163 	bne.w	8001826 <general_task+0x366>
 8001560:	7ebb      	ldrb	r3, [r7, #26]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 815f 	beq.w	8001826 <general_task+0x366>
			{
				if (generalTest.ucCursor == 0)
 8001568:	7e7b      	ldrb	r3, [r7, #25]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d135      	bne.n	80015da <general_task+0x11a>
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 9500)
 800156e:	7e7b      	ldrb	r3, [r7, #25]
 8001570:	3301      	adds	r3, #1
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	3350      	adds	r3, #80	; 0x50
 8001576:	443b      	add	r3, r7
 8001578:	3b38      	subs	r3, #56	; 0x38
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	a37c      	add	r3, pc, #496	; (adr r3, 8001770 <general_task+0x2b0>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff fa80 	bl	8000a88 <__aeabi_dcmpeq>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00c      	beq.n	80015a8 <general_task+0xe8>
					{
						generalTest.dbVal[generalTest.ucCursor] = 500;
 800158e:	7e7b      	ldrb	r3, [r7, #25]
 8001590:	3301      	adds	r3, #1
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	3350      	adds	r3, #80	; 0x50
 8001596:	443b      	add	r3, r7
 8001598:	f1a3 0138 	sub.w	r1, r3, #56	; 0x38
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	4b7a      	ldr	r3, [pc, #488]	; (800178c <general_task+0x2cc>)
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]
 80015a6:	e050      	b.n	800164a <general_task+0x18a>
					}
					else
						generalTest.dbVal[generalTest.ucCursor] += 500;
 80015a8:	7e7b      	ldrb	r3, [r7, #25]
 80015aa:	3301      	adds	r3, #1
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	3350      	adds	r3, #80	; 0x50
 80015b0:	443b      	add	r3, r7
 80015b2:	3b38      	subs	r3, #56	; 0x38
 80015b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b8:	7e7b      	ldrb	r3, [r7, #25]
 80015ba:	461c      	mov	r4, r3
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	4b72      	ldr	r3, [pc, #456]	; (800178c <general_task+0x2cc>)
 80015c2:	f7fe fe43 	bl	800024c <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	1c61      	adds	r1, r4, #1
 80015cc:	00c9      	lsls	r1, r1, #3
 80015ce:	3150      	adds	r1, #80	; 0x50
 80015d0:	4439      	add	r1, r7
 80015d2:	3938      	subs	r1, #56	; 0x38
 80015d4:	e9c1 2300 	strd	r2, r3, [r1]
 80015d8:	e037      	b.n	800164a <general_task+0x18a>
				}
				else if(generalTest.ucCursor == 1)
 80015da:	7e7b      	ldrb	r3, [r7, #25]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d134      	bne.n	800164a <general_task+0x18a>
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 99)
 80015e0:	7e7b      	ldrb	r3, [r7, #25]
 80015e2:	3301      	adds	r3, #1
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	3350      	adds	r3, #80	; 0x50
 80015e8:	443b      	add	r3, r7
 80015ea:	3b38      	subs	r3, #56	; 0x38
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	a361      	add	r3, pc, #388	; (adr r3, 8001778 <general_task+0x2b8>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff fa47 	bl	8000a88 <__aeabi_dcmpeq>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00c      	beq.n	800161a <general_task+0x15a>
					{
						generalTest.dbVal[generalTest.ucCursor] = 1;
 8001600:	7e7b      	ldrb	r3, [r7, #25]
 8001602:	3301      	adds	r3, #1
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	3350      	adds	r3, #80	; 0x50
 8001608:	443b      	add	r3, r7
 800160a:	f1a3 0138 	sub.w	r1, r3, #56	; 0x38
 800160e:	f04f 0200 	mov.w	r2, #0
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <general_task+0x2d0>)
 8001614:	e9c1 2300 	strd	r2, r3, [r1]
 8001618:	e017      	b.n	800164a <general_task+0x18a>
					}
					else
						generalTest.dbVal[generalTest.ucCursor] += 1;
 800161a:	7e7b      	ldrb	r3, [r7, #25]
 800161c:	3301      	adds	r3, #1
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	3350      	adds	r3, #80	; 0x50
 8001622:	443b      	add	r3, r7
 8001624:	3b38      	subs	r3, #56	; 0x38
 8001626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800162a:	7e7b      	ldrb	r3, [r7, #25]
 800162c:	461c      	mov	r4, r3
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b57      	ldr	r3, [pc, #348]	; (8001790 <general_task+0x2d0>)
 8001634:	f7fe fe0a 	bl	800024c <__adddf3>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	1c61      	adds	r1, r4, #1
 800163e:	00c9      	lsls	r1, r1, #3
 8001640:	3150      	adds	r1, #80	; 0x50
 8001642:	4439      	add	r1, r7
 8001644:	3938      	subs	r1, #56	; 0x38
 8001646:	e9c1 2300 	strd	r2, r3, [r1]
				}
				ftoa(generalTest.dbVal[0] / 1000, (char *)generalTest.ucVal[0], 1);
 800164a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <general_task+0x2c0>)
 8001654:	f7ff f8da 	bl	800080c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	f103 0218 	add.w	r2, r3, #24
 8001668:	2301      	movs	r3, #1
 800166a:	f7ff fc5d 	bl	8000f28 <ftoa>
				ftoa(generalTest.dbVal[1], (char *)generalTest.ucVal[1], 1);
 800166e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001672:	f107 0318 	add.w	r3, r7, #24
 8001676:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800167a:	2301      	movs	r3, #1
 800167c:	f7ff fc54 	bl	8000f28 <ftoa>
 8001680:	e0d1      	b.n	8001826 <general_task+0x366>
			}
		}
		else if (xEvBit & BUT2_BIT)
 8001682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80b7 	beq.w	80017fc <general_task+0x33c>
		{
			if (generalTest.ucPage == 1 && generalTest.bCfg == false)
 800168e:	7e3b      	ldrb	r3, [r7, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10b      	bne.n	80016ac <general_task+0x1ec>
 8001694:	7ebb      	ldrb	r3, [r7, #26]
 8001696:	f083 0301 	eor.w	r3, r3, #1
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d005      	beq.n	80016ac <general_task+0x1ec>
			{
				generalTest.ucCursor = 1 - generalTest.ucCursor;
 80016a0:	7e7b      	ldrb	r3, [r7, #25]
 80016a2:	f1c3 0301 	rsb	r3, r3, #1
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	767b      	strb	r3, [r7, #25]
 80016aa:	e0bc      	b.n	8001826 <general_task+0x366>
			}
			else if (generalTest.ucPage == 1 && generalTest.bCfg == true)
 80016ac:	7e3b      	ldrb	r3, [r7, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f040 80b9 	bne.w	8001826 <general_task+0x366>
 80016b4:	7ebb      	ldrb	r3, [r7, #26]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80b5 	beq.w	8001826 <general_task+0x366>
			{
				if (generalTest.ucCursor == 0)
 80016bc:	7e7b      	ldrb	r3, [r7, #25]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d135      	bne.n	800172e <general_task+0x26e>
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 500)
 80016c2:	7e7b      	ldrb	r3, [r7, #25]
 80016c4:	3301      	adds	r3, #1
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	3350      	adds	r3, #80	; 0x50
 80016ca:	443b      	add	r3, r7
 80016cc:	3b38      	subs	r3, #56	; 0x38
 80016ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <general_task+0x2cc>)
 80016d8:	f7ff f9d6 	bl	8000a88 <__aeabi_dcmpeq>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <general_task+0x23c>
					{
						generalTest.dbVal[generalTest.ucCursor] = 9500;
 80016e2:	7e7b      	ldrb	r3, [r7, #25]
 80016e4:	3301      	adds	r3, #1
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	3350      	adds	r3, #80	; 0x50
 80016ea:	443b      	add	r3, r7
 80016ec:	f1a3 0138 	sub.w	r1, r3, #56	; 0x38
 80016f0:	a31f      	add	r3, pc, #124	; (adr r3, 8001770 <general_task+0x2b0>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	e9c1 2300 	strd	r2, r3, [r1]
 80016fa:	e063      	b.n	80017c4 <general_task+0x304>
					}
					else
						generalTest.dbVal[generalTest.ucCursor] -= 500;
 80016fc:	7e7b      	ldrb	r3, [r7, #25]
 80016fe:	3301      	adds	r3, #1
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	3350      	adds	r3, #80	; 0x50
 8001704:	443b      	add	r3, r7
 8001706:	3b38      	subs	r3, #56	; 0x38
 8001708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170c:	7e7b      	ldrb	r3, [r7, #25]
 800170e:	461c      	mov	r4, r3
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <general_task+0x2cc>)
 8001716:	f7fe fd97 	bl	8000248 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	1c61      	adds	r1, r4, #1
 8001720:	00c9      	lsls	r1, r1, #3
 8001722:	3150      	adds	r1, #80	; 0x50
 8001724:	4439      	add	r1, r7
 8001726:	3938      	subs	r1, #56	; 0x38
 8001728:	e9c1 2300 	strd	r2, r3, [r1]
 800172c:	e04a      	b.n	80017c4 <general_task+0x304>
				}
				else if(generalTest.ucCursor == 1)
 800172e:	7e7b      	ldrb	r3, [r7, #25]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d147      	bne.n	80017c4 <general_task+0x304>
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 1)
 8001734:	7e7b      	ldrb	r3, [r7, #25]
 8001736:	3301      	adds	r3, #1
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	3350      	adds	r3, #80	; 0x50
 800173c:	443b      	add	r3, r7
 800173e:	3b38      	subs	r3, #56	; 0x38
 8001740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <general_task+0x2d0>)
 800174a:	f7ff f99d 	bl	8000a88 <__aeabi_dcmpeq>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d01f      	beq.n	8001794 <general_task+0x2d4>
					{
						generalTest.dbVal[generalTest.ucCursor] = 99;
 8001754:	7e7b      	ldrb	r3, [r7, #25]
 8001756:	3301      	adds	r3, #1
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	3350      	adds	r3, #80	; 0x50
 800175c:	443b      	add	r3, r7
 800175e:	f1a3 0138 	sub.w	r1, r3, #56	; 0x38
 8001762:	a305      	add	r3, pc, #20	; (adr r3, 8001778 <general_task+0x2b8>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	e9c1 2300 	strd	r2, r3, [r1]
 800176c:	e02a      	b.n	80017c4 <general_task+0x304>
 800176e:	bf00      	nop
 8001770:	00000000 	.word	0x00000000
 8001774:	40c28e00 	.word	0x40c28e00
 8001778:	00000000 	.word	0x00000000
 800177c:	4058c000 	.word	0x4058c000
 8001780:	408f4000 	.word	0x408f4000
 8001784:	40390000 	.word	0x40390000
 8001788:	20000250 	.word	0x20000250
 800178c:	407f4000 	.word	0x407f4000
 8001790:	3ff00000 	.word	0x3ff00000
					}
					else
						generalTest.dbVal[generalTest.ucCursor] -= 1;
 8001794:	7e7b      	ldrb	r3, [r7, #25]
 8001796:	3301      	adds	r3, #1
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	3350      	adds	r3, #80	; 0x50
 800179c:	443b      	add	r3, r7
 800179e:	3b38      	subs	r3, #56	; 0x38
 80017a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a4:	7e7b      	ldrb	r3, [r7, #25]
 80017a6:	461c      	mov	r4, r3
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b84      	ldr	r3, [pc, #528]	; (80019c0 <general_task+0x500>)
 80017ae:	f7fe fd4b 	bl	8000248 <__aeabi_dsub>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	1c61      	adds	r1, r4, #1
 80017b8:	00c9      	lsls	r1, r1, #3
 80017ba:	3150      	adds	r1, #80	; 0x50
 80017bc:	4439      	add	r1, r7
 80017be:	3938      	subs	r1, #56	; 0x38
 80017c0:	e9c1 2300 	strd	r2, r3, [r1]
				}
				ftoa(generalTest.dbVal[0] / 1000, (char *)generalTest.ucVal[0], 1);
 80017c4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4b7d      	ldr	r3, [pc, #500]	; (80019c4 <general_task+0x504>)
 80017ce:	f7ff f81d 	bl	800080c <__aeabi_ddiv>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f107 0318 	add.w	r3, r7, #24
 80017de:	f103 0218 	add.w	r2, r3, #24
 80017e2:	2301      	movs	r3, #1
 80017e4:	f7ff fba0 	bl	8000f28 <ftoa>
				ftoa(generalTest.dbVal[1], (char *)generalTest.ucVal[1], 1);
 80017e8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80017f4:	2301      	movs	r3, #1
 80017f6:	f7ff fb97 	bl	8000f28 <ftoa>
 80017fa:	e014      	b.n	8001826 <general_task+0x366>
			}
		}
		else if (xEvBit & BUT3_BIT)
 80017fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00f      	beq.n	8001826 <general_task+0x366>
		{
			if (generalTest.ucPage == 1)
 8001806:	7e3b      	ldrb	r3, [r7, #24]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d10c      	bne.n	8001826 <general_task+0x366>
			{
				generalTest.bCfg = !generalTest.bCfg;
 800180c:	7ebb      	ldrb	r3, [r7, #26]
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f083 0301 	eor.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	76bb      	strb	r3, [r7, #26]
			}
		}
		if (xEvBit & 0x1E)
 8001826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001828:	f003 031e 	and.w	r3, r3, #30
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00f      	beq.n	8001850 <general_task+0x390>
		{
			xQueueSend(genlcdQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
 8001830:	4b65      	ldr	r3, [pc, #404]	; (80019c8 <general_task+0x508>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	f107 0118 	add.w	r1, r7, #24
 8001838:	2300      	movs	r3, #0
 800183a:	2200      	movs	r2, #0
 800183c:	f004 ff58 	bl	80066f0 <xQueueGenericSend>
			xQueueOverwrite(gensenQueueHandle, &generalTest);
 8001840:	4b62      	ldr	r3, [pc, #392]	; (80019cc <general_task+0x50c>)
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	f107 0118 	add.w	r1, r7, #24
 8001848:	2302      	movs	r3, #2
 800184a:	2200      	movs	r2, #0
 800184c:	f004 ff50 	bl	80066f0 <xQueueGenericSend>
		}

		if (ucRxFlag == END_BYTE)
 8001850:	4b5f      	ldr	r3, [pc, #380]	; (80019d0 <general_task+0x510>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b02      	cmp	r3, #2
 8001856:	f040 80a3 	bne.w	80019a0 <general_task+0x4e0>
		{
			LOG(TAG, (char *)ucRxBuffer);
 800185a:	4b5e      	ldr	r3, [pc, #376]	; (80019d4 <general_task+0x514>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	495e      	ldr	r1, [pc, #376]	; (80019d8 <general_task+0x518>)
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fbaf 	bl	8000fc4 <LOG>
			sscanf((char *)ucRxBuffer, "$,%c,%s,*", (char *)&uartCfg.ucType, (char *)uartCfg.ucVal);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	3301      	adds	r3, #1
 800186c:	f107 020c 	add.w	r2, r7, #12
 8001870:	495a      	ldr	r1, [pc, #360]	; (80019dc <general_task+0x51c>)
 8001872:	4859      	ldr	r0, [pc, #356]	; (80019d8 <general_task+0x518>)
 8001874:	f007 fdee 	bl	8009454 <siscanf>
			if (uartCfg.ucType == 'P')
 8001878:	7b3b      	ldrb	r3, [r7, #12]
 800187a:	2b50      	cmp	r3, #80	; 0x50
 800187c:	d140      	bne.n	8001900 <general_task+0x440>
			{
				generalTest.dbVal[0] = atof((char *)uartCfg.ucVal) * 1000;
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	3301      	adds	r3, #1
 8001884:	4618      	mov	r0, r3
 8001886:	f007 fc69 	bl	800915c <atof>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <general_task+0x504>)
 8001890:	f7fe fe92 	bl	80005b8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	e9c7 2308 	strd	r2, r3, [r7, #32]
				if (generalTest.dbVal[0] > 9500)
 800189c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018a0:	a343      	add	r3, pc, #268	; (adr r3, 80019b0 <general_task+0x4f0>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7ff f917 	bl	8000ad8 <__aeabi_dcmpgt>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <general_task+0x3fc>
					generalTest.dbVal[0] = 9500;
 80018b0:	a33f      	add	r3, pc, #252	; (adr r3, 80019b0 <general_task+0x4f0>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80018ba:	e00e      	b.n	80018da <general_task+0x41a>
				else if (generalTest.dbVal[0] < 500)
 80018bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b46      	ldr	r3, [pc, #280]	; (80019e0 <general_task+0x520>)
 80018c6:	f7ff f8e9 	bl	8000a9c <__aeabi_dcmplt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <general_task+0x41a>
					generalTest.dbVal[0] = 500;
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <general_task+0x520>)
 80018d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
				ftoa(generalTest.dbVal[0] / 1000, (char *)generalTest.ucVal[0], 1);
 80018da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <general_task+0x504>)
 80018e4:	f7fe ff92 	bl	800080c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	f103 0218 	add.w	r2, r3, #24
 80018f8:	2301      	movs	r3, #1
 80018fa:	f7ff fb15 	bl	8000f28 <ftoa>
 80018fe:	e034      	b.n	800196a <general_task+0x4aa>
			}
			else if (uartCfg.ucType == 'T')
 8001900:	7b3b      	ldrb	r3, [r7, #12]
 8001902:	2b54      	cmp	r3, #84	; 0x54
 8001904:	d131      	bne.n	800196a <general_task+0x4aa>
			{
				generalTest.dbVal[1] = atof((char *)uartCfg.ucVal);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	3301      	adds	r3, #1
 800190c:	4618      	mov	r0, r3
 800190e:	f007 fc25 	bl	800915c <atof>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				if (generalTest.dbVal[1] > 99)
 800191a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800191e:	a326      	add	r3, pc, #152	; (adr r3, 80019b8 <general_task+0x4f8>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7ff f8d8 	bl	8000ad8 <__aeabi_dcmpgt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d005      	beq.n	800193a <general_task+0x47a>
					generalTest.dbVal[1] = 99;
 800192e:	a322      	add	r3, pc, #136	; (adr r3, 80019b8 <general_task+0x4f8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001938:	e00e      	b.n	8001958 <general_task+0x498>
				else if (generalTest.dbVal[1] < 1)
 800193a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <general_task+0x500>)
 8001944:	f7ff f8aa 	bl	8000a9c <__aeabi_dcmplt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d004      	beq.n	8001958 <general_task+0x498>
					generalTest.dbVal[1] = 1;
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <general_task+0x500>)
 8001954:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
				ftoa(generalTest.dbVal[1], (char *)generalTest.ucVal[1], 1);
 8001958:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800195c:	f107 0318 	add.w	r3, r7, #24
 8001960:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8001964:	2301      	movs	r3, #1
 8001966:	f7ff fadf 	bl	8000f28 <ftoa>
			}
			xQueueSend(genlcdQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <general_task+0x508>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f107 0118 	add.w	r1, r7, #24
 8001972:	2300      	movs	r3, #0
 8001974:	2200      	movs	r2, #0
 8001976:	f004 febb 	bl	80066f0 <xQueueGenericSend>
			xQueueOverwrite(gensenQueueHandle, &generalTest);
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <general_task+0x50c>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f107 0118 	add.w	r1, r7, #24
 8001982:	2302      	movs	r3, #2
 8001984:	2200      	movs	r2, #0
 8001986:	f004 feb3 	bl	80066f0 <xQueueGenericSend>
			ucRxCnt = 0;
 800198a:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <general_task+0x524>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
			ucRxFlag = START_BYTE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <general_task+0x510>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	4913      	ldr	r1, [pc, #76]	; (80019e8 <general_task+0x528>)
 800199a:	4814      	ldr	r0, [pc, #80]	; (80019ec <general_task+0x52c>)
 800199c:	f003 fddf 	bl	800555e <HAL_UART_Receive_IT>
		}
		vTaskDelayUntil(&xWakeTick, 50 / portTICK_RATE_MS);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	2132      	movs	r1, #50	; 0x32
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fd40 	bl	800742c <vTaskDelayUntil>
		xEvBit = xEventGroupWaitBits(evGroupHandle, BUT0_BIT | BUT1_BIT | BUT2_BIT | BUT3_BIT, pdTRUE, pdFALSE, 0 / portTICK_RATE_MS);
 80019ac:	e5a6      	b.n	80014fc <general_task+0x3c>
 80019ae:	bf00      	nop
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40c28e00 	.word	0x40c28e00
 80019b8:	00000000 	.word	0x00000000
 80019bc:	4058c000 	.word	0x4058c000
 80019c0:	3ff00000 	.word	0x3ff00000
 80019c4:	408f4000 	.word	0x408f4000
 80019c8:	20000248 	.word	0x20000248
 80019cc:	2000024c 	.word	0x2000024c
 80019d0:	20000004 	.word	0x20000004
 80019d4:	20000000 	.word	0x20000000
 80019d8:	2000025c 	.word	0x2000025c
 80019dc:	0800da38 	.word	0x0800da38
 80019e0:	407f4000 	.word	0x407f4000
 80019e4:	20000270 	.word	0x20000270
 80019e8:	20000258 	.word	0x20000258
 80019ec:	20000314 	.word	0x20000314

080019f0 <lcd_task>:
	}
}

void lcd_task(void *param)
{
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b0a3      	sub	sp, #140	; 0x8c
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	char cVal[2][20];
	TickType_t xWakeTick = xTaskGetTickCount();
 80019f8:	f005 fedc 	bl	80077b4 <xTaskGetTickCount>
 80019fc:	4603      	mov	r3, r0
 80019fe:	653b      	str	r3, [r7, #80]	; 0x50
	generalTestHandle_t generalTest = {
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	2230      	movs	r2, #48	; 0x30
 8001a06:	2100      	movs	r1, #0
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f007 fbfb 	bl	8009204 <memset>
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b6f      	ldr	r3, [pc, #444]	; (8001bd0 <lcd_task+0x1e0>)
 8001a14:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <lcd_task+0x1e4>)
 8001a1e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			.dbVal[1] = 25.0,
	};
	sensorTestHandle_t sensorTest;
	BaseType_t xGenRet;
	BaseType_t xSenRet;
	lcd_init();
 8001a22:	f000 fa45 	bl	8001eb0 <lcd_init>
	lcd_clear();
 8001a26:	f000 fa39 	bl	8001e9c <lcd_clear>
	while(1)
	{
		xGenRet = xQueueReceive(genlcdQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
 8001a2a:	4b6b      	ldr	r3, [pc, #428]	; (8001bd8 <lcd_task+0x1e8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f107 0120 	add.w	r1, r7, #32
 8001a32:	2200      	movs	r2, #0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fff1 	bl	8006a1c <xQueueReceive>
 8001a3a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
		xSenRet = xQueueReceive(sensorQueueHandle, &sensorTest, 0 / portTICK_RATE_MS);
 8001a3e:	4b67      	ldr	r3, [pc, #412]	; (8001bdc <lcd_task+0x1ec>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f107 010c 	add.w	r1, r7, #12
 8001a46:	2200      	movs	r2, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f004 ffe7 	bl	8006a1c <xQueueReceive>
 8001a4e:	67f8      	str	r0, [r7, #124]	; 0x7c
		if(xGenRet || xSenRet)
 8001a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d103      	bne.n	8001a60 <lcd_task+0x70>
 8001a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80b1 	beq.w	8001bc2 <lcd_task+0x1d2>
		{
			lcd_clear();
 8001a60:	f000 fa1c 	bl	8001e9c <lcd_clear>
			if (generalTest.ucPage == 0)
 8001a64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d15d      	bne.n	8001b28 <lcd_task+0x138>
			{
				for(int i = 0; i < 2; i++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a72:	e043      	b.n	8001afc <lcd_task+0x10c>
				{
					memset(cVal[i], 0, strlen(cVal[i]));
 8001a74:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4413      	add	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	18cc      	adds	r4, r1, r3
 8001a86:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001a8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	440b      	add	r3, r1
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fbc9 	bl	8000230 <strlen>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f007 fbad 	bl	8009204 <memset>
					if (i == 0)
 8001aaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10f      	bne.n	8001ad2 <lcd_task+0xe2>
					{
						sprintf(cVal[i], "STM: %soC", (char *)sensorTest.ucSensorStm);
 8001ab2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001ab6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f107 020c 	add.w	r2, r7, #12
 8001ac8:	4945      	ldr	r1, [pc, #276]	; (8001be0 <lcd_task+0x1f0>)
 8001aca:	4618      	mov	r0, r3
 8001acc:	f007 fca2 	bl	8009414 <siprintf>
 8001ad0:	e00f      	b.n	8001af2 <lcd_task+0x102>
					}
					else
						sprintf(cVal[i], "ADS: %soC", (char *)sensorTest.ucSensorAds);
 8001ad2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001ad6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001ada:	4613      	mov	r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	4413      	add	r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	18c8      	adds	r0, r1, r3
 8001ae4:	f107 030c 	add.w	r3, r7, #12
 8001ae8:	330a      	adds	r3, #10
 8001aea:	461a      	mov	r2, r3
 8001aec:	493d      	ldr	r1, [pc, #244]	; (8001be4 <lcd_task+0x1f4>)
 8001aee:	f007 fc91 	bl	8009414 <siprintf>
				for(int i = 0; i < 2; i++)
 8001af2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001af6:	3301      	adds	r3, #1
 8001af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	ddb7      	ble.n	8001a74 <lcd_task+0x84>
				}
				lcd_send_cmd(0x80 | 0x00);
 8001b04:	2080      	movs	r0, #128	; 0x80
 8001b06:	f000 f949 	bl	8001d9c <lcd_send_cmd>
				lcd_send_string(cVal[0]);
 8001b0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 f9ff 	bl	8001f12 <lcd_send_string>
				lcd_send_cmd(0x80 | 0x40);
 8001b14:	20c0      	movs	r0, #192	; 0xc0
 8001b16:	f000 f941 	bl	8001d9c <lcd_send_cmd>
				lcd_send_string(cVal[1]);
 8001b1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b1e:	3314      	adds	r3, #20
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f9f6 	bl	8001f12 <lcd_send_string>
 8001b26:	e04c      	b.n	8001bc2 <lcd_task+0x1d2>
			}
			else if (generalTest.ucPage == 1)
 8001b28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d148      	bne.n	8001bc2 <lcd_task+0x1d2>
			{
				lcd_send_cmd(0x80 | 0x00);
 8001b30:	2080      	movs	r0, #128	; 0x80
 8001b32:	f000 f933 	bl	8001d9c <lcd_send_cmd>
				lcd_send_string((char *)"Chu ky:");
 8001b36:	482c      	ldr	r0, [pc, #176]	; (8001be8 <lcd_task+0x1f8>)
 8001b38:	f000 f9eb 	bl	8001f12 <lcd_send_string>
				lcd_send_cmd(0x80 | 0x08);
 8001b3c:	2088      	movs	r0, #136	; 0x88
 8001b3e:	f000 f92d 	bl	8001d9c <lcd_send_cmd>
				lcd_send_string((char *)generalTest.ucVal[0]);
 8001b42:	f107 0320 	add.w	r3, r7, #32
 8001b46:	3318      	adds	r3, #24
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f9e2 	bl	8001f12 <lcd_send_string>
				lcd_send_cmd(0x80 | 0x40);
 8001b4e:	20c0      	movs	r0, #192	; 0xc0
 8001b50:	f000 f924 	bl	8001d9c <lcd_send_cmd>
				lcd_send_string((char *)"Nguong:");
 8001b54:	4825      	ldr	r0, [pc, #148]	; (8001bec <lcd_task+0x1fc>)
 8001b56:	f000 f9dc 	bl	8001f12 <lcd_send_string>
				lcd_send_cmd(0x80 | 0x48);
 8001b5a:	20c8      	movs	r0, #200	; 0xc8
 8001b5c:	f000 f91e 	bl	8001d9c <lcd_send_cmd>
				lcd_send_string((char *)generalTest.ucVal[1]);
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	3322      	adds	r3, #34	; 0x22
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f9d3 	bl	8001f12 <lcd_send_string>
				if (generalTest.ucCursor == 0)
 8001b6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d111      	bne.n	8001b98 <lcd_task+0x1a8>
				{
					if (generalTest.bCfg == true)
 8001b74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d006      	beq.n	8001b8a <lcd_task+0x19a>
					{
						lcd_send_cmd(0x80 | 0x0F);
 8001b7c:	208f      	movs	r0, #143	; 0x8f
 8001b7e:	f000 f90d 	bl	8001d9c <lcd_send_cmd>
						lcd_send_string((char *)"<");
 8001b82:	481b      	ldr	r0, [pc, #108]	; (8001bf0 <lcd_task+0x200>)
 8001b84:	f000 f9c5 	bl	8001f12 <lcd_send_string>
 8001b88:	e01b      	b.n	8001bc2 <lcd_task+0x1d2>
					}
					else
					{
						lcd_send_cmd(0x80 | 0x0E);
 8001b8a:	208e      	movs	r0, #142	; 0x8e
 8001b8c:	f000 f906 	bl	8001d9c <lcd_send_cmd>
						lcd_send_string((char *)"<-");
 8001b90:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <lcd_task+0x204>)
 8001b92:	f000 f9be 	bl	8001f12 <lcd_send_string>
 8001b96:	e014      	b.n	8001bc2 <lcd_task+0x1d2>
					}
				}
				else if (generalTest.ucCursor == 1)
 8001b98:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d110      	bne.n	8001bc2 <lcd_task+0x1d2>
				{
					if (generalTest.bCfg == true)
 8001ba0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <lcd_task+0x1c6>
					{
						lcd_send_cmd(0x80 | 0x4F);
 8001ba8:	20cf      	movs	r0, #207	; 0xcf
 8001baa:	f000 f8f7 	bl	8001d9c <lcd_send_cmd>
						lcd_send_string((char *)"<");
 8001bae:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <lcd_task+0x200>)
 8001bb0:	f000 f9af 	bl	8001f12 <lcd_send_string>
 8001bb4:	e005      	b.n	8001bc2 <lcd_task+0x1d2>
					}
					else
					{
						lcd_send_cmd(0x80 | 0x4E);
 8001bb6:	20ce      	movs	r0, #206	; 0xce
 8001bb8:	f000 f8f0 	bl	8001d9c <lcd_send_cmd>
						lcd_send_string((char *)"<-");
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <lcd_task+0x204>)
 8001bbe:	f000 f9a8 	bl	8001f12 <lcd_send_string>
					}
				}
			}
		}
		vTaskDelayUntil(&xWakeTick, 50 / portTICK_RATE_MS);
 8001bc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bc6:	2132      	movs	r1, #50	; 0x32
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fc2f 	bl	800742c <vTaskDelayUntil>
		xGenRet = xQueueReceive(genlcdQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
 8001bce:	e72c      	b.n	8001a2a <lcd_task+0x3a>
 8001bd0:	408f4000 	.word	0x408f4000
 8001bd4:	40390000 	.word	0x40390000
 8001bd8:	20000248 	.word	0x20000248
 8001bdc:	20000244 	.word	0x20000244
 8001be0:	0800da44 	.word	0x0800da44
 8001be4:	0800da50 	.word	0x0800da50
 8001be8:	0800da5c 	.word	0x0800da5c
 8001bec:	0800da64 	.word	0x0800da64
 8001bf0:	0800da6c 	.word	0x0800da6c
 8001bf4:	0800da70 	.word	0x0800da70

08001bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfe:	f107 0310 	add.w	r3, r7, #16
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c2a:	f043 0304 	orr.w	r3, r3, #4
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <MX_GPIO_Init+0xb8>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8001c5a:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <MX_GPIO_Init+0xbc>)
 8001c5c:	f001 fc32 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c60:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_GPIO_Init+0xc0>)
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0310 	add.w	r3, r7, #16
 8001c72:	4619      	mov	r1, r3
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <MX_GPIO_Init+0xc4>)
 8001c76:	f001 fa91 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001c7a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4619      	mov	r1, r3
 8001c92:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <MX_GPIO_Init+0xbc>)
 8001c94:	f001 fa82 	bl	800319c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2105      	movs	r1, #5
 8001c9c:	2028      	movs	r0, #40	; 0x28
 8001c9e:	f001 f910 	bl	8002ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ca2:	2028      	movs	r0, #40	; 0x28
 8001ca4:	f001 f929 	bl	8002efa <HAL_NVIC_EnableIRQ>

}
 8001ca8:	bf00      	nop
 8001caa:	3720      	adds	r7, #32
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40010800 	.word	0x40010800
 8001cb8:	10210000 	.word	0x10210000
 8001cbc:	40010c00 	.word	0x40010c00

08001cc0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <MX_I2C2_Init+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_I2C2_Init+0x58>)
 8001cce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cfe:	f001 fc11 	bl	8003524 <HAL_I2C_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d08:	f000 f99c 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000274 	.word	0x20000274
 8001d14:	40005800 	.word	0x40005800
 8001d18:	000186a0 	.word	0x000186a0

08001d1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a16      	ldr	r2, [pc, #88]	; (8001d90 <HAL_I2C_MspInit+0x74>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d124      	bne.n	8001d86 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3c:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <HAL_I2C_MspInit+0x78>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <HAL_I2C_MspInit+0x78>)
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	6193      	str	r3, [r2, #24]
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_I2C_MspInit+0x78>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0308 	and.w	r3, r3, #8
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d54:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5a:	2312      	movs	r3, #18
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4619      	mov	r1, r3
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <HAL_I2C_MspInit+0x7c>)
 8001d6a:	f001 fa17 	bl	800319c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_I2C_MspInit+0x78>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_I2C_MspInit+0x78>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_I2C_MspInit+0x78>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d86:	bf00      	nop
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005800 	.word	0x40005800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010c00 	.word	0x40010c00

08001d9c <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c2;
extern SemaphoreHandle_t i2cSemphrHandle;

void lcd_send_cmd (char cmd)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	f023 030f 	bic.w	r3, r3, #15
 8001dac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	f043 030c 	orr.w	r3, r3, #12
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	f043 030c 	orr.w	r3, r3, #12
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	f043 0308 	orr.w	r3, r3, #8
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	72fb      	strb	r3, [r7, #11]
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <lcd_send_cmd+0x78>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fef9 	bl	8006bdc <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8001dea:	f107 0208 	add.w	r2, r7, #8
 8001dee:	2364      	movs	r3, #100	; 0x64
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2304      	movs	r3, #4
 8001df4:	214e      	movs	r1, #78	; 0x4e
 8001df6:	4808      	ldr	r0, [pc, #32]	; (8001e18 <lcd_send_cmd+0x7c>)
 8001df8:	f001 fcd8 	bl	80037ac <HAL_I2C_Master_Transmit>
	xSemaphoreGive(i2cSemphrHandle);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <lcd_send_cmd+0x78>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	2300      	movs	r3, #0
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	f004 fc73 	bl	80066f0 <xQueueGenericSend>
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000254 	.word	0x20000254
 8001e18:	20000274 	.word	0x20000274

08001e1c <lcd_send_data>:

void lcd_send_data (char data)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f023 030f 	bic.w	r3, r3, #15
 8001e2c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	f043 030d 	orr.w	r3, r3, #13
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	f043 0309 	orr.w	r3, r3, #9
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	f043 030d 	orr.w	r3, r3, #13
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	f043 0309 	orr.w	r3, r3, #9
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	72fb      	strb	r3, [r7, #11]
	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
 8001e5c:	4b0d      	ldr	r3, [pc, #52]	; (8001e94 <lcd_send_data+0x78>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295
 8001e64:	4618      	mov	r0, r3
 8001e66:	f004 feb9 	bl	8006bdc <xQueueSemaphoreTake>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8001e6a:	f107 0208 	add.w	r2, r7, #8
 8001e6e:	2364      	movs	r3, #100	; 0x64
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2304      	movs	r3, #4
 8001e74:	214e      	movs	r1, #78	; 0x4e
 8001e76:	4808      	ldr	r0, [pc, #32]	; (8001e98 <lcd_send_data+0x7c>)
 8001e78:	f001 fc98 	bl	80037ac <HAL_I2C_Master_Transmit>
	xSemaphoreGive(i2cSemphrHandle);
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <lcd_send_data+0x78>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	f004 fc33 	bl	80066f0 <xQueueGenericSend>
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000254 	.word	0x20000254
 8001e98:	20000274 	.word	0x20000274

08001e9c <lcd_clear>:

void lcd_clear(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ff7b 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(3 / portTICK_PERIOD_MS);
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f005 fb3e 	bl	8007528 <vTaskDelay>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <lcd_init>:

void lcd_init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x33);
 8001eb4:	2033      	movs	r0, #51	; 0x33
 8001eb6:	f7ff ff71 	bl	8001d9c <lcd_send_cmd>
	lcd_send_cmd(0x32);
 8001eba:	2032      	movs	r0, #50	; 0x32
 8001ebc:	f7ff ff6e 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001ec0:	2032      	movs	r0, #50	; 0x32
 8001ec2:	f005 fb31 	bl	8007528 <vTaskDelay>
	lcd_send_cmd(0x28);
 8001ec6:	2028      	movs	r0, #40	; 0x28
 8001ec8:	f7ff ff68 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001ecc:	2032      	movs	r0, #50	; 0x32
 8001ece:	f005 fb2b 	bl	8007528 <vTaskDelay>
	lcd_send_cmd(0x01);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff ff62 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001ed8:	2032      	movs	r0, #50	; 0x32
 8001eda:	f005 fb25 	bl	8007528 <vTaskDelay>
	lcd_send_cmd(0x06);
 8001ede:	2006      	movs	r0, #6
 8001ee0:	f7ff ff5c 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001ee4:	2032      	movs	r0, #50	; 0x32
 8001ee6:	f005 fb1f 	bl	8007528 <vTaskDelay>
	lcd_send_cmd(0x0C);
 8001eea:	200c      	movs	r0, #12
 8001eec:	f7ff ff56 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001ef0:	2032      	movs	r0, #50	; 0x32
 8001ef2:	f005 fb19 	bl	8007528 <vTaskDelay>
	lcd_send_cmd(0x02);
 8001ef6:	2002      	movs	r0, #2
 8001ef8:	f7ff ff50 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001efc:	2032      	movs	r0, #50	; 0x32
 8001efe:	f005 fb13 	bl	8007528 <vTaskDelay>
	lcd_send_cmd(0x80);
 8001f02:	2080      	movs	r0, #128	; 0x80
 8001f04:	f7ff ff4a 	bl	8001d9c <lcd_send_cmd>
	vTaskDelay(50 / portTICK_PERIOD_MS);
 8001f08:	2032      	movs	r0, #50	; 0x32
 8001f0a:	f005 fb0d 	bl	8007528 <vTaskDelay>
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
	while(*str)
 8001f1a:	e006      	b.n	8001f2a <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	607a      	str	r2, [r7, #4]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff79 	bl	8001e1c <lcd_send_data>
	while(*str)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f4      	bne.n	8001f1c <lcd_send_string+0xa>
    }
}
 8001f32:	bf00      	nop
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f40:	f000 fac4 	bl	80024cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f44:	f000 f80f 	bl	8001f66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f48:	f7ff fe56 	bl	8001bf8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f4c:	f7fe fe64 	bl	8000c18 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001f50:	f7ff feb6 	bl	8001cc0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001f54:	f000 fa18 	bl	8002388 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f58:	f003 ff5a 	bl	8005e10 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f5c:	f7ff f85e 	bl	800101c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f60:	f003 ff88 	bl	8005e74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <main+0x28>

08001f66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b096      	sub	sp, #88	; 0x58
 8001f6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f70:	2228      	movs	r2, #40	; 0x28
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f007 f945 	bl	8009204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
 8001f98:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fa2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fac:	2302      	movs	r3, #2
 8001fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001fb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001fba:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f002 fa7d 	bl	80044c0 <HAL_RCC_OscConfig>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001fcc:	f000 f83a 	bl	8002044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	2102      	movs	r1, #2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f002 fce9 	bl	80049c4 <HAL_RCC_ClockConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001ff8:	f000 f824 	bl	8002044 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002004:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002006:	1d3b      	adds	r3, r7, #4
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fea3 	bl	8004d54 <HAL_RCCEx_PeriphCLKConfig>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002014:	f000 f816 	bl	8002044 <Error_Handler>
  }
}
 8002018:	bf00      	nop
 800201a:	3758      	adds	r7, #88	; 0x58
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a04      	ldr	r2, [pc, #16]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d101      	bne.n	8002036 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002032:	f000 fa61 	bl	80024f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40012c00 	.word	0x40012c00

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002048:	b672      	cpsid	i
}
 800204a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800204c:	e7fe      	b.n	800204c <Error_Handler+0x8>
	...

08002050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_MspInit+0x68>)
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_MspInit+0x68>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6193      	str	r3, [r2, #24]
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_MspInit+0x68>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_MspInit+0x68>)
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_MspInit+0x68>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	61d3      	str	r3, [r2, #28]
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <HAL_MspInit+0x68>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	210f      	movs	r1, #15
 800208a:	f06f 0001 	mvn.w	r0, #1
 800208e:	f000 ff18 	bl	8002ec2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_MspInit+0x6c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <HAL_MspInit+0x6c>)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000

080020c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08c      	sub	sp, #48	; 0x30
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	2019      	movs	r0, #25
 80020d6:	f000 fef4 	bl	8002ec2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80020da:	2019      	movs	r0, #25
 80020dc:	f000 ff0d 	bl	8002efa <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_InitTick+0x9c>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	4a1d      	ldr	r2, [pc, #116]	; (800215c <HAL_InitTick+0x9c>)
 80020e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ea:	6193      	str	r3, [r2, #24]
 80020ec:	4b1b      	ldr	r3, [pc, #108]	; (800215c <HAL_InitTick+0x9c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020f8:	f107 0210 	add.w	r2, r7, #16
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4611      	mov	r1, r2
 8002102:	4618      	mov	r0, r3
 8002104:	f002 fdd8 	bl	8004cb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002108:	f002 fdc2 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 800210c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_InitTick+0xa0>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	3b01      	subs	r3, #1
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_InitTick+0xa4>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_InitTick+0xa8>)
 8002120:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <HAL_InitTick+0xa4>)
 8002124:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002128:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800212a:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <HAL_InitTick+0xa4>)
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_InitTick+0xa4>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_InitTick+0xa4>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800213c:	4809      	ldr	r0, [pc, #36]	; (8002164 <HAL_InitTick+0xa4>)
 800213e:	f002 febf 	bl	8004ec0 <HAL_TIM_Base_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d104      	bne.n	8002152 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002148:	4806      	ldr	r0, [pc, #24]	; (8002164 <HAL_InitTick+0xa4>)
 800214a:	f002 ff11 	bl	8004f70 <HAL_TIM_Base_Start_IT>
 800214e:	4603      	mov	r3, r0
 8002150:	e000      	b.n	8002154 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
}
 8002154:	4618      	mov	r0, r3
 8002156:	3730      	adds	r7, #48	; 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	431bde83 	.word	0x431bde83
 8002164:	200002c8 	.word	0x200002c8
 8002168:	40012c00 	.word	0x40012c00

0800216c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <NMI_Handler+0x4>

08002172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002176:	e7fe      	b.n	8002176 <HardFault_Handler+0x4>

08002178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800217c:	e7fe      	b.n	800217c <MemManage_Handler+0x4>

0800217e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002182:	e7fe      	b.n	8002182 <BusFault_Handler+0x4>

08002184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler+0x4>

0800218a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	bc80      	pop	{r7}
 8002194:	4770      	bx	lr
	...

08002198 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <ADC1_2_IRQHandler+0x10>)
 800219e:	f000 fb73 	bl	8002888 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000208 	.word	0x20000208

080021ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <TIM1_UP_IRQHandler+0x10>)
 80021b2:	f002 ff3d 	bl	8005030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200002c8 	.word	0x200002c8

080021c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <USART2_IRQHandler+0x10>)
 80021c6:	f003 f9fb 	bl	80055c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000314 	.word	0x20000314

080021d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021dc:	f001 f98a 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80021e4:	f001 f986 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021ec:	f001 f982 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80021f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021f4:	f001 f97e 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}

080021fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
	return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <_kill>:

int _kill(int pid, int sig)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b082      	sub	sp, #8
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002214:	f006 ffae 	bl	8009174 <__errno>
 8002218:	4603      	mov	r3, r0
 800221a:	2216      	movs	r2, #22
 800221c:	601a      	str	r2, [r3, #0]
	return -1;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <_exit>:

void _exit (int status)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002232:	f04f 31ff 	mov.w	r1, #4294967295
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ffe7 	bl	800220a <_kill>
	while (1) {}		/* Make sure we hang here */
 800223c:	e7fe      	b.n	800223c <_exit+0x12>

0800223e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	60f8      	str	r0, [r7, #12]
 8002246:	60b9      	str	r1, [r7, #8]
 8002248:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	e00a      	b.n	8002266 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002250:	f3af 8000 	nop.w
 8002254:	4601      	mov	r1, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	60ba      	str	r2, [r7, #8]
 800225c:	b2ca      	uxtb	r2, r1
 800225e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	3301      	adds	r3, #1
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	429a      	cmp	r2, r3
 800226c:	dbf0      	blt.n	8002250 <_read+0x12>
	}

return len;
 800226e:	687b      	ldr	r3, [r7, #4]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e009      	b.n	800229e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	60ba      	str	r2, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbf1      	blt.n	800228a <_write+0x12>
	}
	return len;
 80022a6:	687b      	ldr	r3, [r7, #4]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_close>:

int _close(int file)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	return -1;
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d6:	605a      	str	r2, [r3, #4]
	return 0;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <_isatty>:

int _isatty(int file)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
	return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f006 ff18 	bl	8009174 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000c000 	.word	0x2000c000
 8002370:	00000400 	.word	0x00000400
 8002374:	20000310 	.word	0x20000310
 8002378:	200028b8 	.word	0x200028b8

0800237c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <MX_USART2_UART_Init+0x50>)
 8002390:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002392:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 8002394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002398:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023a6:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023ac:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023ae:	220c      	movs	r2, #12
 80023b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b8:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023be:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_USART2_UART_Init+0x4c>)
 80023c0:	f002 ffee 	bl	80053a0 <HAL_UART_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023ca:	f7ff fe3b 	bl	8002044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000314 	.word	0x20000314
 80023d8:	40004400 	.word	0x40004400

080023dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0310 	add.w	r3, r7, #16
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_UART_MspInit+0x98>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d137      	bne.n	800246c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <HAL_UART_MspInit+0x9c>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <HAL_UART_MspInit+0x9c>)
 8002402:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002406:	61d3      	str	r3, [r2, #28]
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x9c>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_UART_MspInit+0x9c>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a17      	ldr	r2, [pc, #92]	; (8002478 <HAL_UART_MspInit+0x9c>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x9c>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800242c:	2304      	movs	r3, #4
 800242e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 0310 	add.w	r3, r7, #16
 800243c:	4619      	mov	r1, r3
 800243e:	480f      	ldr	r0, [pc, #60]	; (800247c <HAL_UART_MspInit+0xa0>)
 8002440:	f000 feac 	bl	800319c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002444:	2308      	movs	r3, #8
 8002446:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4619      	mov	r1, r3
 8002456:	4809      	ldr	r0, [pc, #36]	; (800247c <HAL_UART_MspInit+0xa0>)
 8002458:	f000 fea0 	bl	800319c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2105      	movs	r1, #5
 8002460:	2026      	movs	r0, #38	; 0x26
 8002462:	f000 fd2e 	bl	8002ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002466:	2026      	movs	r0, #38	; 0x26
 8002468:	f000 fd47 	bl	8002efa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800246c:	bf00      	nop
 800246e:	3720      	adds	r7, #32
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40004400 	.word	0x40004400
 8002478:	40021000 	.word	0x40021000
 800247c:	40010800 	.word	0x40010800

08002480 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024a6:	f7ff ff69 	bl	800237c <SystemInit>
/* Call static constructors */    bl __libc_init_array
 80024aa:	f006 fe69 	bl	8009180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ae:	f7ff fd45 	bl	8001f3c <main>
  bx lr
 80024b2:	4770      	bx	lr
  ldr r0, =_sdata
 80024b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80024bc:	0800df40 	.word	0x0800df40
  ldr r2, =_sbss
 80024c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80024c4:	200028b4 	.word	0x200028b4

080024c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC3_IRQHandler>
	...

080024cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_Init+0x28>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <HAL_Init+0x28>)
 80024d6:	f043 0310 	orr.w	r3, r3, #16
 80024da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 fce5 	bl	8002eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e2:	200f      	movs	r0, #15
 80024e4:	f7ff fdec 	bl	80020c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e8:	f7ff fdb2 	bl	8002050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40022000 	.word	0x40022000

080024f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_IncTick+0x1c>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_IncTick+0x20>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4413      	add	r3, r2
 8002508:	4a03      	ldr	r2, [pc, #12]	; (8002518 <HAL_IncTick+0x20>)
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr
 8002514:	20000010 	.word	0x20000010
 8002518:	20000358 	.word	0x20000358

0800251c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  return uwTick;
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <HAL_GetTick+0x10>)
 8002522:	681b      	ldr	r3, [r3, #0]
}
 8002524:	4618      	mov	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000358 	.word	0x20000358

08002530 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0ce      	b.n	80026f0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7fe fb90 	bl	8000c94 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fba5 	bl	8002cc4 <ADC_ConversionStop_Disable>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	f040 80a9 	bne.w	80026de <HAL_ADC_Init+0x1ae>
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f040 80a5 	bne.w	80026de <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002598:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800259c:	f023 0302 	bic.w	r3, r3, #2
 80025a0:	f043 0202 	orr.w	r2, r3, #2
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4951      	ldr	r1, [pc, #324]	; (80026f8 <HAL_ADC_Init+0x1c8>)
 80025b2:	428b      	cmp	r3, r1
 80025b4:	d10a      	bne.n	80025cc <HAL_ADC_Init+0x9c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025be:	d002      	beq.n	80025c6 <HAL_ADC_Init+0x96>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	e004      	b.n	80025d0 <HAL_ADC_Init+0xa0>
 80025c6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80025ca:	e001      	b.n	80025d0 <HAL_ADC_Init+0xa0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7b1b      	ldrb	r3, [r3, #12]
 80025d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	4313      	orrs	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e8:	d003      	beq.n	80025f2 <HAL_ADC_Init+0xc2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d102      	bne.n	80025f8 <HAL_ADC_Init+0xc8>
 80025f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f6:	e000      	b.n	80025fa <HAL_ADC_Init+0xca>
 80025f8:	2300      	movs	r3, #0
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7d1b      	ldrb	r3, [r3, #20]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d119      	bne.n	800263c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7b1b      	ldrb	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	3b01      	subs	r3, #1
 8002616:	035a      	lsls	r2, r3, #13
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	e00b      	b.n	800263c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f043 0220 	orr.w	r2, r3, #32
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	4b29      	ldr	r3, [pc, #164]	; (80026fc <HAL_ADC_Init+0x1cc>)
 8002658:	4013      	ands	r3, r2
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	68b9      	ldr	r1, [r7, #8]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800266c:	d003      	beq.n	8002676 <HAL_ADC_Init+0x146>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d104      	bne.n	8002680 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	3b01      	subs	r3, #1
 800267c:	051b      	lsls	r3, r3, #20
 800267e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	430a      	orrs	r2, r1
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <HAL_ADC_Init+0x1d0>)
 800269c:	4013      	ands	r3, r2
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d10b      	bne.n	80026bc <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	f023 0303 	bic.w	r3, r3, #3
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026ba:	e018      	b.n	80026ee <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	f023 0312 	bic.w	r3, r3, #18
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026dc:	e007      	b.n	80026ee <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40013c00 	.word	0x40013c00
 80026fc:	ffe1f7fd 	.word	0xffe1f7fd
 8002700:	ff1f0efe 	.word	0xff1f0efe

08002704 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	2300      	movs	r3, #0
 800270e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_ADC_Start_IT+0x1a>
 800271a:	2302      	movs	r3, #2
 800271c:	e0a0      	b.n	8002860 <HAL_ADC_Start_IT+0x15c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa72 	bl	8002c10 <ADC_Enable>
 800272c:	4603      	mov	r3, r0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 808f 	bne.w	8002856 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a45      	ldr	r2, [pc, #276]	; (8002868 <HAL_ADC_Start_IT+0x164>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d105      	bne.n	8002762 <HAL_ADC_Start_IT+0x5e>
 8002756:	4b45      	ldr	r3, [pc, #276]	; (800286c <HAL_ADC_Start_IT+0x168>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d115      	bne.n	800278e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d026      	beq.n	80027ca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002784:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278c:	e01d      	b.n	80027ca <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a33      	ldr	r2, [pc, #204]	; (800286c <HAL_ADC_Start_IT+0x168>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_Start_IT+0xaa>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2f      	ldr	r2, [pc, #188]	; (8002868 <HAL_ADC_Start_IT+0x164>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d10d      	bne.n	80027ca <HAL_ADC_Start_IT+0xc6>
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <HAL_ADC_Start_IT+0x168>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d007      	beq.n	80027ca <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	f023 0206 	bic.w	r2, r3, #6
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027e2:	e002      	b.n	80027ea <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0202 	mvn.w	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0220 	orr.w	r2, r2, #32
 800280a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002816:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800281a:	d113      	bne.n	8002844 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002820:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_ADC_Start_IT+0x164>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d105      	bne.n	8002832 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_ADC_Start_IT+0x168>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	e00c      	b.n	800285e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	e003      	b.n	800285e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40012800 	.word	0x40012800
 800286c:	40012400 	.word	0x40012400

08002870 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b20      	cmp	r3, #32
 800289c:	d140      	bne.n	8002920 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d139      	bne.n	8002920 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028d2:	d11d      	bne.n	8002910 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d119      	bne.n	8002910 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0220 	bic.w	r2, r2, #32
 80028ea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fe fbe9 	bl	80010e8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f06f 0212 	mvn.w	r2, #18
 800291e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292a:	2b80      	cmp	r3, #128	; 0x80
 800292c:	d14f      	bne.n	80029ce <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d148      	bne.n	80029ce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	2b00      	cmp	r3, #0
 8002946:	d105      	bne.n	8002954 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800295e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002962:	d012      	beq.n	800298a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800296e:	2b00      	cmp	r3, #0
 8002970:	d125      	bne.n	80029be <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800297c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002980:	d11d      	bne.n	80029be <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002986:	2b00      	cmp	r3, #0
 8002988:	d119      	bne.n	80029be <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002998:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9c1 	bl	8002d46 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 020c 	mvn.w	r2, #12
 80029cc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	d114      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10d      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f809 	bl	8002a0e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0201 	mvn.w	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x20>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0dc      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x1da>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d81c      	bhi.n	8002a8a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b05      	subs	r3, #5
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	4019      	ands	r1, r3
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	3b05      	subs	r3, #5
 8002a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	430a      	orrs	r2, r1
 8002a86:	635a      	str	r2, [r3, #52]	; 0x34
 8002a88:	e03c      	b.n	8002b04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d81c      	bhi.n	8002acc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b23      	subs	r3, #35	; 0x23
 8002aa4:	221f      	movs	r2, #31
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	4019      	ands	r1, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6818      	ldr	r0, [r3, #0]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	3b23      	subs	r3, #35	; 0x23
 8002abe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aca:	e01b      	b.n	8002b04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b41      	subs	r3, #65	; 0x41
 8002ade:	221f      	movs	r2, #31
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	4019      	ands	r1, r3
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	3b41      	subs	r3, #65	; 0x41
 8002af8:	fa00 f203 	lsl.w	r2, r0, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b09      	cmp	r3, #9
 8002b0a:	d91c      	bls.n	8002b46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68d9      	ldr	r1, [r3, #12]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b1e      	subs	r3, #30
 8002b1e:	2207      	movs	r2, #7
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	4019      	ands	r1, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6898      	ldr	r0, [r3, #8]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	3b1e      	subs	r3, #30
 8002b38:	fa00 f203 	lsl.w	r2, r0, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	e019      	b.n	8002b7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6919      	ldr	r1, [r3, #16]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4413      	add	r3, r2
 8002b56:	2207      	movs	r2, #7
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	4019      	ands	r1, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	6898      	ldr	r0, [r3, #8]
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d003      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b86:	2b11      	cmp	r3, #17
 8002b88:	d132      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d125      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d126      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002bb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b10      	cmp	r3, #16
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_ADC_ConfigChannel+0x1e8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <HAL_ADC_ConfigChannel+0x1ec>)
 8002bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc4:	0c9a      	lsrs	r2, r3, #18
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f9      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1b2>
 8002bde:	e007      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	40012400 	.word	0x40012400
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	431bde83 	.word	0x431bde83

08002c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d040      	beq.n	8002cb0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <ADC_Enable+0xac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <ADC_Enable+0xb0>)
 8002c44:	fba2 2303 	umull	r2, r3, r2, r3
 8002c48:	0c9b      	lsrs	r3, r3, #18
 8002c4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c4c:	e002      	b.n	8002c54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f9      	bne.n	8002c4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c5a:	f7ff fc5f 	bl	800251c <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c60:	e01f      	b.n	8002ca2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c62:	f7ff fc5b 	bl	800251c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d918      	bls.n	8002ca2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d011      	beq.n	8002ca2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	f043 0210 	orr.w	r2, r3, #16
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d1d8      	bne.n	8002c62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	431bde83 	.word	0x431bde83

08002cc4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d12e      	bne.n	8002d3c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cee:	f7ff fc15 	bl	800251c <HAL_GetTick>
 8002cf2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cf4:	e01b      	b.n	8002d2e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cf6:	f7ff fc11 	bl	800251c <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d914      	bls.n	8002d2e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10d      	bne.n	8002d2e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	f043 0210 	orr.w	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	f043 0201 	orr.w	r2, r3, #1
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e007      	b.n	8002d3e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d0dc      	beq.n	8002cf6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4906      	ldr	r1, [pc, #24]	; (8002df0 <__NVIC_EnableIRQ+0x34>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100

08002df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db0a      	blt.n	8002e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	490c      	ldr	r1, [pc, #48]	; (8002e40 <__NVIC_SetPriority+0x4c>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	0112      	lsls	r2, r2, #4
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e1c:	e00a      	b.n	8002e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4908      	ldr	r1, [pc, #32]	; (8002e44 <__NVIC_SetPriority+0x50>)
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	0112      	lsls	r2, r2, #4
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	440b      	add	r3, r1
 8002e32:	761a      	strb	r2, [r3, #24]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f1c3 0307 	rsb	r3, r3, #7
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	bf28      	it	cs
 8002e66:	2304      	movcs	r3, #4
 8002e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	2b06      	cmp	r3, #6
 8002e70:	d902      	bls.n	8002e78 <NVIC_EncodePriority+0x30>
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	3b03      	subs	r3, #3
 8002e76:	e000      	b.n	8002e7a <NVIC_EncodePriority+0x32>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	401a      	ands	r2, r3
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e90:	f04f 31ff 	mov.w	r1, #4294967295
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9a:	43d9      	mvns	r1, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea0:	4313      	orrs	r3, r2
         );
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ff4f 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed4:	f7ff ff64 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	6978      	ldr	r0, [r7, #20]
 8002ee0:	f7ff ffb2 	bl	8002e48 <NVIC_EncodePriority>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff81 	bl	8002df4 <__NVIC_SetPriority>
}
 8002ef2:	bf00      	nop
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff57 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e020      	b.n	8002f80 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 020e 	bic.w	r2, r2, #14
 8002f4c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d005      	beq.n	8002fae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e0d6      	b.n	800315c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 020e 	bic.w	r2, r2, #14
 8002fbc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0201 	bic.w	r2, r2, #1
 8002fcc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b64      	ldr	r3, [pc, #400]	; (8003168 <HAL_DMA_Abort_IT+0x1dc>)
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d958      	bls.n	800308c <HAL_DMA_Abort_IT+0x100>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a63      	ldr	r2, [pc, #396]	; (800316c <HAL_DMA_Abort_IT+0x1e0>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d04f      	beq.n	8003084 <HAL_DMA_Abort_IT+0xf8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a61      	ldr	r2, [pc, #388]	; (8003170 <HAL_DMA_Abort_IT+0x1e4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d048      	beq.n	8003080 <HAL_DMA_Abort_IT+0xf4>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a60      	ldr	r2, [pc, #384]	; (8003174 <HAL_DMA_Abort_IT+0x1e8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d040      	beq.n	800307a <HAL_DMA_Abort_IT+0xee>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a5e      	ldr	r2, [pc, #376]	; (8003178 <HAL_DMA_Abort_IT+0x1ec>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d038      	beq.n	8003074 <HAL_DMA_Abort_IT+0xe8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a5d      	ldr	r2, [pc, #372]	; (800317c <HAL_DMA_Abort_IT+0x1f0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d030      	beq.n	800306e <HAL_DMA_Abort_IT+0xe2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_DMA_Abort_IT+0x1f4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d028      	beq.n	8003068 <HAL_DMA_Abort_IT+0xdc>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a53      	ldr	r2, [pc, #332]	; (8003168 <HAL_DMA_Abort_IT+0x1dc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d020      	beq.n	8003062 <HAL_DMA_Abort_IT+0xd6>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <HAL_DMA_Abort_IT+0x1f8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d019      	beq.n	800305e <HAL_DMA_Abort_IT+0xd2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a56      	ldr	r2, [pc, #344]	; (8003188 <HAL_DMA_Abort_IT+0x1fc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d012      	beq.n	800305a <HAL_DMA_Abort_IT+0xce>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a54      	ldr	r2, [pc, #336]	; (800318c <HAL_DMA_Abort_IT+0x200>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d00a      	beq.n	8003054 <HAL_DMA_Abort_IT+0xc8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a53      	ldr	r2, [pc, #332]	; (8003190 <HAL_DMA_Abort_IT+0x204>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_DMA_Abort_IT+0xc2>
 8003048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304c:	e01b      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 800304e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003052:	e018      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 8003054:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003058:	e015      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 800305a:	2310      	movs	r3, #16
 800305c:	e013      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 800305e:	2301      	movs	r3, #1
 8003060:	e011      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 8003062:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003066:	e00e      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 8003068:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800306c:	e00b      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 800306e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003072:	e008      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 8003074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003078:	e005      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 800307a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307e:	e002      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 8003080:	2310      	movs	r3, #16
 8003082:	e000      	b.n	8003086 <HAL_DMA_Abort_IT+0xfa>
 8003084:	2301      	movs	r3, #1
 8003086:	4a43      	ldr	r2, [pc, #268]	; (8003194 <HAL_DMA_Abort_IT+0x208>)
 8003088:	6053      	str	r3, [r2, #4]
 800308a:	e057      	b.n	800313c <HAL_DMA_Abort_IT+0x1b0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a36      	ldr	r2, [pc, #216]	; (800316c <HAL_DMA_Abort_IT+0x1e0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d04f      	beq.n	8003136 <HAL_DMA_Abort_IT+0x1aa>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a35      	ldr	r2, [pc, #212]	; (8003170 <HAL_DMA_Abort_IT+0x1e4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d048      	beq.n	8003132 <HAL_DMA_Abort_IT+0x1a6>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a33      	ldr	r2, [pc, #204]	; (8003174 <HAL_DMA_Abort_IT+0x1e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d040      	beq.n	800312c <HAL_DMA_Abort_IT+0x1a0>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a32      	ldr	r2, [pc, #200]	; (8003178 <HAL_DMA_Abort_IT+0x1ec>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d038      	beq.n	8003126 <HAL_DMA_Abort_IT+0x19a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a30      	ldr	r2, [pc, #192]	; (800317c <HAL_DMA_Abort_IT+0x1f0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d030      	beq.n	8003120 <HAL_DMA_Abort_IT+0x194>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <HAL_DMA_Abort_IT+0x1f4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d028      	beq.n	800311a <HAL_DMA_Abort_IT+0x18e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a26      	ldr	r2, [pc, #152]	; (8003168 <HAL_DMA_Abort_IT+0x1dc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d020      	beq.n	8003114 <HAL_DMA_Abort_IT+0x188>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2b      	ldr	r2, [pc, #172]	; (8003184 <HAL_DMA_Abort_IT+0x1f8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d019      	beq.n	8003110 <HAL_DMA_Abort_IT+0x184>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a29      	ldr	r2, [pc, #164]	; (8003188 <HAL_DMA_Abort_IT+0x1fc>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d012      	beq.n	800310c <HAL_DMA_Abort_IT+0x180>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a28      	ldr	r2, [pc, #160]	; (800318c <HAL_DMA_Abort_IT+0x200>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d00a      	beq.n	8003106 <HAL_DMA_Abort_IT+0x17a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a26      	ldr	r2, [pc, #152]	; (8003190 <HAL_DMA_Abort_IT+0x204>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d102      	bne.n	8003100 <HAL_DMA_Abort_IT+0x174>
 80030fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030fe:	e01b      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003100:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003104:	e018      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310a:	e015      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 800310c:	2310      	movs	r3, #16
 800310e:	e013      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003110:	2301      	movs	r3, #1
 8003112:	e011      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003118:	e00e      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 800311a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800311e:	e00b      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003124:	e008      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800312a:	e005      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 800312c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003130:	e002      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003132:	2310      	movs	r3, #16
 8003134:	e000      	b.n	8003138 <HAL_DMA_Abort_IT+0x1ac>
 8003136:	2301      	movs	r3, #1
 8003138:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_DMA_Abort_IT+0x20c>)
 800313a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
    } 
  }
  return status;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40020080 	.word	0x40020080
 800316c:	40020008 	.word	0x40020008
 8003170:	4002001c 	.word	0x4002001c
 8003174:	40020030 	.word	0x40020030
 8003178:	40020044 	.word	0x40020044
 800317c:	40020058 	.word	0x40020058
 8003180:	4002006c 	.word	0x4002006c
 8003184:	40020408 	.word	0x40020408
 8003188:	4002041c 	.word	0x4002041c
 800318c:	40020430 	.word	0x40020430
 8003190:	40020444 	.word	0x40020444
 8003194:	40020400 	.word	0x40020400
 8003198:	40020000 	.word	0x40020000

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b08b      	sub	sp, #44	; 0x2c
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031aa:	2300      	movs	r3, #0
 80031ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ae:	e179      	b.n	80034a4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031b0:	2201      	movs	r2, #1
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f040 8168 	bne.w	800349e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a96      	ldr	r2, [pc, #600]	; (800342c <HAL_GPIO_Init+0x290>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d05e      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031d8:	4a94      	ldr	r2, [pc, #592]	; (800342c <HAL_GPIO_Init+0x290>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d875      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031de:	4a94      	ldr	r2, [pc, #592]	; (8003430 <HAL_GPIO_Init+0x294>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d058      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031e4:	4a92      	ldr	r2, [pc, #584]	; (8003430 <HAL_GPIO_Init+0x294>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d86f      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031ea:	4a92      	ldr	r2, [pc, #584]	; (8003434 <HAL_GPIO_Init+0x298>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d052      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031f0:	4a90      	ldr	r2, [pc, #576]	; (8003434 <HAL_GPIO_Init+0x298>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d869      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031f6:	4a90      	ldr	r2, [pc, #576]	; (8003438 <HAL_GPIO_Init+0x29c>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04c      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031fc:	4a8e      	ldr	r2, [pc, #568]	; (8003438 <HAL_GPIO_Init+0x29c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d863      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 8003202:	4a8e      	ldr	r2, [pc, #568]	; (800343c <HAL_GPIO_Init+0x2a0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d046      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 8003208:	4a8c      	ldr	r2, [pc, #560]	; (800343c <HAL_GPIO_Init+0x2a0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d85d      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 800320e:	2b12      	cmp	r3, #18
 8003210:	d82a      	bhi.n	8003268 <HAL_GPIO_Init+0xcc>
 8003212:	2b12      	cmp	r3, #18
 8003214:	d859      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_GPIO_Init+0x80>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003297 	.word	0x08003297
 8003220:	08003271 	.word	0x08003271
 8003224:	08003283 	.word	0x08003283
 8003228:	080032c5 	.word	0x080032c5
 800322c:	080032cb 	.word	0x080032cb
 8003230:	080032cb 	.word	0x080032cb
 8003234:	080032cb 	.word	0x080032cb
 8003238:	080032cb 	.word	0x080032cb
 800323c:	080032cb 	.word	0x080032cb
 8003240:	080032cb 	.word	0x080032cb
 8003244:	080032cb 	.word	0x080032cb
 8003248:	080032cb 	.word	0x080032cb
 800324c:	080032cb 	.word	0x080032cb
 8003250:	080032cb 	.word	0x080032cb
 8003254:	080032cb 	.word	0x080032cb
 8003258:	080032cb 	.word	0x080032cb
 800325c:	080032cb 	.word	0x080032cb
 8003260:	08003279 	.word	0x08003279
 8003264:	0800328d 	.word	0x0800328d
 8003268:	4a75      	ldr	r2, [pc, #468]	; (8003440 <HAL_GPIO_Init+0x2a4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800326e:	e02c      	b.n	80032ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	623b      	str	r3, [r7, #32]
          break;
 8003276:	e029      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	623b      	str	r3, [r7, #32]
          break;
 8003280:	e024      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	3308      	adds	r3, #8
 8003288:	623b      	str	r3, [r7, #32]
          break;
 800328a:	e01f      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	330c      	adds	r3, #12
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e01a      	b.n	80032cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800329e:	2304      	movs	r3, #4
 80032a0:	623b      	str	r3, [r7, #32]
          break;
 80032a2:	e013      	b.n	80032cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	611a      	str	r2, [r3, #16]
          break;
 80032b6:	e009      	b.n	80032cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b8:	2308      	movs	r3, #8
 80032ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	615a      	str	r2, [r3, #20]
          break;
 80032c2:	e003      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
          break;
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x130>
          break;
 80032ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d801      	bhi.n	80032d6 <HAL_GPIO_Init+0x13a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_Init+0x13e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2bff      	cmp	r3, #255	; 0xff
 80032e0:	d802      	bhi.n	80032e8 <HAL_GPIO_Init+0x14c>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	e002      	b.n	80032ee <HAL_GPIO_Init+0x152>
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	3b08      	subs	r3, #8
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	210f      	movs	r1, #15
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	431a      	orrs	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80c1 	beq.w	800349e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800331c:	4b49      	ldr	r3, [pc, #292]	; (8003444 <HAL_GPIO_Init+0x2a8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a48      	ldr	r2, [pc, #288]	; (8003444 <HAL_GPIO_Init+0x2a8>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_GPIO_Init+0x2a8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003334:	4a44      	ldr	r2, [pc, #272]	; (8003448 <HAL_GPIO_Init+0x2ac>)
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3c      	ldr	r2, [pc, #240]	; (800344c <HAL_GPIO_Init+0x2b0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d01f      	beq.n	80033a0 <HAL_GPIO_Init+0x204>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <HAL_GPIO_Init+0x2b4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d019      	beq.n	800339c <HAL_GPIO_Init+0x200>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <HAL_GPIO_Init+0x2b8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <HAL_GPIO_Init+0x1fc>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a39      	ldr	r2, [pc, #228]	; (8003458 <HAL_GPIO_Init+0x2bc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00d      	beq.n	8003394 <HAL_GPIO_Init+0x1f8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_GPIO_Init+0x2c0>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <HAL_GPIO_Init+0x1f4>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a37      	ldr	r2, [pc, #220]	; (8003460 <HAL_GPIO_Init+0x2c4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_GPIO_Init+0x1f0>
 8003388:	2305      	movs	r3, #5
 800338a:	e00a      	b.n	80033a2 <HAL_GPIO_Init+0x206>
 800338c:	2306      	movs	r3, #6
 800338e:	e008      	b.n	80033a2 <HAL_GPIO_Init+0x206>
 8003390:	2304      	movs	r3, #4
 8003392:	e006      	b.n	80033a2 <HAL_GPIO_Init+0x206>
 8003394:	2303      	movs	r3, #3
 8003396:	e004      	b.n	80033a2 <HAL_GPIO_Init+0x206>
 8003398:	2302      	movs	r3, #2
 800339a:	e002      	b.n	80033a2 <HAL_GPIO_Init+0x206>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <HAL_GPIO_Init+0x206>
 80033a0:	2300      	movs	r3, #0
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	f002 0203 	and.w	r2, r2, #3
 80033a8:	0092      	lsls	r2, r2, #2
 80033aa:	4093      	lsls	r3, r2
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033b2:	4925      	ldr	r1, [pc, #148]	; (8003448 <HAL_GPIO_Init+0x2ac>)
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	089b      	lsrs	r3, r3, #2
 80033b8:	3302      	adds	r3, #2
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4924      	ldr	r1, [pc, #144]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	4920      	ldr	r1, [pc, #128]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d006      	beq.n	8003402 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033f4:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	491a      	ldr	r1, [pc, #104]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	604b      	str	r3, [r1, #4]
 8003400:	e006      	b.n	8003410 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	43db      	mvns	r3, r3
 800340a:	4916      	ldr	r1, [pc, #88]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 800340c:	4013      	ands	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d025      	beq.n	8003468 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	4910      	ldr	r1, [pc, #64]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
 8003428:	e025      	b.n	8003476 <HAL_GPIO_Init+0x2da>
 800342a:	bf00      	nop
 800342c:	10320000 	.word	0x10320000
 8003430:	10310000 	.word	0x10310000
 8003434:	10220000 	.word	0x10220000
 8003438:	10210000 	.word	0x10210000
 800343c:	10120000 	.word	0x10120000
 8003440:	10110000 	.word	0x10110000
 8003444:	40021000 	.word	0x40021000
 8003448:	40010000 	.word	0x40010000
 800344c:	40010800 	.word	0x40010800
 8003450:	40010c00 	.word	0x40010c00
 8003454:	40011000 	.word	0x40011000
 8003458:	40011400 	.word	0x40011400
 800345c:	40011800 	.word	0x40011800
 8003460:	40011c00 	.word	0x40011c00
 8003464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003468:	4b15      	ldr	r3, [pc, #84]	; (80034c0 <HAL_GPIO_Init+0x324>)
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	43db      	mvns	r3, r3
 8003470:	4913      	ldr	r1, [pc, #76]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003472:	4013      	ands	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d006      	beq.n	8003490 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	490e      	ldr	r1, [pc, #56]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	60cb      	str	r3, [r1, #12]
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	43db      	mvns	r3, r3
 8003498:	4909      	ldr	r1, [pc, #36]	; (80034c0 <HAL_GPIO_Init+0x324>)
 800349a:	4013      	ands	r3, r2
 800349c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	3301      	adds	r3, #1
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f47f ae7e 	bne.w	80031b0 <HAL_GPIO_Init+0x14>
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	372c      	adds	r7, #44	; 0x2c
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	40010400 	.word	0x40010400

080034c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034e0:	e003      	b.n	80034ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	041a      	lsls	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	611a      	str	r2, [r3, #16]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800350a:	4a05      	ldr	r2, [pc, #20]	; (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fe04 	bl	8001120 <HAL_GPIO_EXTI_Callback>
  }
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40010400 	.word	0x40010400

08003524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e12b      	b.n	800378e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe fbe6 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003588:	f001 fb6e 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 800358c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a81      	ldr	r2, [pc, #516]	; (8003798 <HAL_I2C_Init+0x274>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d807      	bhi.n	80035a8 <HAL_I2C_Init+0x84>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4a80      	ldr	r2, [pc, #512]	; (800379c <HAL_I2C_Init+0x278>)
 800359c:	4293      	cmp	r3, r2
 800359e:	bf94      	ite	ls
 80035a0:	2301      	movls	r3, #1
 80035a2:	2300      	movhi	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e006      	b.n	80035b6 <HAL_I2C_Init+0x92>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a7d      	ldr	r2, [pc, #500]	; (80037a0 <HAL_I2C_Init+0x27c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bf94      	ite	ls
 80035b0:	2301      	movls	r3, #1
 80035b2:	2300      	movhi	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e0e7      	b.n	800378e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4a78      	ldr	r2, [pc, #480]	; (80037a4 <HAL_I2C_Init+0x280>)
 80035c2:	fba2 2303 	umull	r2, r3, r2, r3
 80035c6:	0c9b      	lsrs	r3, r3, #18
 80035c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	430a      	orrs	r2, r1
 80035dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a6a      	ldr	r2, [pc, #424]	; (8003798 <HAL_I2C_Init+0x274>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d802      	bhi.n	80035f8 <HAL_I2C_Init+0xd4>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	e009      	b.n	800360c <HAL_I2C_Init+0xe8>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80035fe:	fb02 f303 	mul.w	r3, r2, r3
 8003602:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_I2C_Init+0x284>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	099b      	lsrs	r3, r3, #6
 800360a:	3301      	adds	r3, #1
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	430b      	orrs	r3, r1
 8003612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800361e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	495c      	ldr	r1, [pc, #368]	; (8003798 <HAL_I2C_Init+0x274>)
 8003628:	428b      	cmp	r3, r1
 800362a:	d819      	bhi.n	8003660 <HAL_I2C_Init+0x13c>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1e59      	subs	r1, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	fbb1 f3f3 	udiv	r3, r1, r3
 800363a:	1c59      	adds	r1, r3, #1
 800363c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003640:	400b      	ands	r3, r1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <HAL_I2C_Init+0x138>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1e59      	subs	r1, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fbb1 f3f3 	udiv	r3, r1, r3
 8003654:	3301      	adds	r3, #1
 8003656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365a:	e051      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 800365c:	2304      	movs	r3, #4
 800365e:	e04f      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d111      	bne.n	800368c <HAL_I2C_Init+0x168>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1e58      	subs	r0, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	440b      	add	r3, r1
 8003676:	fbb0 f3f3 	udiv	r3, r0, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	e012      	b.n	80036b2 <HAL_I2C_Init+0x18e>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1e58      	subs	r0, r3, #1
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6859      	ldr	r1, [r3, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	0099      	lsls	r1, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	fbb0 f3f3 	udiv	r3, r0, r3
 80036a2:	3301      	adds	r3, #1
 80036a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf0c      	ite	eq
 80036ac:	2301      	moveq	r3, #1
 80036ae:	2300      	movne	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Init+0x196>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e022      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10e      	bne.n	80036e0 <HAL_I2C_Init+0x1bc>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e58      	subs	r0, r3, #1
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	440b      	add	r3, r1
 80036d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d4:	3301      	adds	r3, #1
 80036d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036de:	e00f      	b.n	8003700 <HAL_I2C_Init+0x1dc>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1e58      	subs	r0, r3, #1
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	0099      	lsls	r1, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036f6:	3301      	adds	r3, #1
 80036f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	6809      	ldr	r1, [r1, #0]
 8003704:	4313      	orrs	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800372e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6911      	ldr	r1, [r2, #16]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68d2      	ldr	r2, [r2, #12]
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	430b      	orrs	r3, r1
 8003742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2220      	movs	r2, #32
 800377a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	000186a0 	.word	0x000186a0
 800379c:	001e847f 	.word	0x001e847f
 80037a0:	003d08ff 	.word	0x003d08ff
 80037a4:	431bde83 	.word	0x431bde83
 80037a8:	10624dd3 	.word	0x10624dd3

080037ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	461a      	mov	r2, r3
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
 80037bc:	4613      	mov	r3, r2
 80037be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7fe feac 	bl	800251c <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	f040 80e0 	bne.w	8003994 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2319      	movs	r3, #25
 80037da:	2201      	movs	r2, #1
 80037dc:	4970      	ldr	r1, [pc, #448]	; (80039a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 fc92 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0d3      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_I2C_Master_Transmit+0x50>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e0cc      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d007      	beq.n	8003822 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003830:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2221      	movs	r2, #33	; 0x21
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2210      	movs	r2, #16
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	893a      	ldrh	r2, [r7, #8]
 8003852:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a50      	ldr	r2, [pc, #320]	; (80039a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003862:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003864:	8979      	ldrh	r1, [r7, #10]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fafc 	bl	8003e68 <I2C_MasterRequestWrite>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d001      	beq.n	800387a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e08d      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003890:	e066      	b.n	8003960 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	6a39      	ldr	r1, [r7, #32]
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 fd0c 	bl	80042b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00d      	beq.n	80038be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d107      	bne.n	80038ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e06b      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	781a      	ldrb	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d11b      	bne.n	8003934 <HAL_I2C_Master_Transmit+0x188>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	d017      	beq.n	8003934 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	6a39      	ldr	r1, [r7, #32]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fcfc 	bl	8004336 <I2C_WaitOnBTFFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	2b04      	cmp	r3, #4
 800394a:	d107      	bne.n	800395c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e01a      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	d194      	bne.n	8003892 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3718      	adds	r7, #24
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	00100002 	.word	0x00100002
 80039a4:	ffff0000 	.word	0xffff0000

080039a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	; 0x30
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	461a      	mov	r2, r3
 80039b4:	460b      	mov	r3, r1
 80039b6:	817b      	strh	r3, [r7, #10]
 80039b8:	4613      	mov	r3, r2
 80039ba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7fe fdac 	bl	800251c <HAL_GetTick>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b20      	cmp	r3, #32
 80039d0:	f040 823f 	bne.w	8003e52 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2319      	movs	r3, #25
 80039da:	2201      	movs	r2, #1
 80039dc:	497f      	ldr	r1, [pc, #508]	; (8003bdc <HAL_I2C_Master_Receive+0x234>)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fb92 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
 80039ec:	e232      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_I2C_Master_Receive+0x54>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e22b      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d007      	beq.n	8003a22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f042 0201 	orr.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2222      	movs	r2, #34	; 0x22
 8003a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	893a      	ldrh	r2, [r7, #8]
 8003a52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4a5f      	ldr	r2, [pc, #380]	; (8003be0 <HAL_I2C_Master_Receive+0x238>)
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a64:	8979      	ldrh	r1, [r7, #10]
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 fa7e 	bl	8003f6c <I2C_MasterRequestRead>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1ec      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d113      	bne.n	8003aaa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	61fb      	str	r3, [r7, #28]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	61fb      	str	r3, [r7, #28]
 8003a96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e1c0      	b.n	8003e2c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d11e      	bne.n	8003af0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac2:	b672      	cpsid	i
}
 8003ac4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003aec:	b662      	cpsie	i
}
 8003aee:	e035      	b.n	8003b5c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d11e      	bne.n	8003b36 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b08:	b672      	cpsid	i
}
 8003b0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b32:	b662      	cpsie	i
}
 8003b34:	e012      	b.n	8003b5c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b46:	2300      	movs	r3, #0
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	613b      	str	r3, [r7, #16]
 8003b5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003b5c:	e166      	b.n	8003e2c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	f200 811f 	bhi.w	8003da6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d123      	bne.n	8003bb8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fc1f 	bl	80043b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e167      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb6:	e139      	b.n	8003e2c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d152      	bne.n	8003c66 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	4906      	ldr	r1, [pc, #24]	; (8003be4 <HAL_I2C_Master_Receive+0x23c>)
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fa9c 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e13c      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
 8003bda:	bf00      	nop
 8003bdc:	00100002 	.word	0x00100002
 8003be0:	ffff0000 	.word	0xffff0000
 8003be4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
}
 8003bea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c2e:	b662      	cpsie	i
}
 8003c30:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c64:	e0e2      	b.n	8003e2c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	497b      	ldr	r1, [pc, #492]	; (8003e5c <HAL_I2C_Master_Receive+0x4b4>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa49 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0e9      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c90:	b672      	cpsid	i
}
 8003c92:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003cc6:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <HAL_I2C_Master_Receive+0x4b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	08db      	lsrs	r3, r3, #3
 8003ccc:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <HAL_I2C_Master_Receive+0x4bc>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0a1a      	lsrs	r2, r3, #8
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	00da      	lsls	r2, r3, #3
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d118      	bne.n	8003d1e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003d0e:	b662      	cpsie	i
}
 8003d10:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e09a      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d1d9      	bne.n	8003ce0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d6e:	b662      	cpsie	i
}
 8003d70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	691a      	ldr	r2, [r3, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	b2d2      	uxtb	r2, r2
 8003d7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003da4:	e042      	b.n	8003e2c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fb04 	bl	80043b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e04c      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	1c5a      	adds	r2, r3, #1
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d118      	bne.n	8003e2c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f47f ae94 	bne.w	8003b5e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3728      	adds	r7, #40	; 0x28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	00010004 	.word	0x00010004
 8003e60:	20000008 	.word	0x20000008
 8003e64:	14f8b589 	.word	0x14f8b589

08003e68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	460b      	mov	r3, r1
 8003e76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b08      	cmp	r3, #8
 8003e82:	d006      	beq.n	8003e92 <I2C_MasterRequestWrite+0x2a>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d003      	beq.n	8003e92 <I2C_MasterRequestWrite+0x2a>
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e90:	d108      	bne.n	8003ea4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e00b      	b.n	8003ebc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	2b12      	cmp	r3, #18
 8003eaa:	d107      	bne.n	8003ebc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	9300      	str	r3, [sp, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f91d 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee2:	d103      	bne.n	8003eec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e035      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef8:	d108      	bne.n	8003f0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003efa:	897b      	ldrh	r3, [r7, #10]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f08:	611a      	str	r2, [r3, #16]
 8003f0a:	e01b      	b.n	8003f44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f0c:	897b      	ldrh	r3, [r7, #10]
 8003f0e:	11db      	asrs	r3, r3, #7
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0306 	and.w	r3, r3, #6
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	f063 030f 	orn	r3, r3, #15
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	490e      	ldr	r1, [pc, #56]	; (8003f64 <I2C_MasterRequestWrite+0xfc>)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f943 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e010      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f3a:	897b      	ldrh	r3, [r7, #10]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4907      	ldr	r1, [pc, #28]	; (8003f68 <I2C_MasterRequestWrite+0x100>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f000 f933 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	00010008 	.word	0x00010008
 8003f68:	00010002 	.word	0x00010002

08003f6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b088      	sub	sp, #32
 8003f70:	af02      	add	r7, sp, #8
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d006      	beq.n	8003fa6 <I2C_MasterRequestRead+0x3a>
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d003      	beq.n	8003fa6 <I2C_MasterRequestRead+0x3a>
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fa4:	d108      	bne.n	8003fb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	e00b      	b.n	8003fd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	2b11      	cmp	r3, #17
 8003fbe:	d107      	bne.n	8003fd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f893 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d103      	bne.n	8004000 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e079      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800400e:	897b      	ldrh	r3, [r7, #10]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	e05f      	b.n	80040e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004020:	897b      	ldrh	r3, [r7, #10]
 8004022:	11db      	asrs	r3, r3, #7
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f003 0306 	and.w	r3, r3, #6
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f063 030f 	orn	r3, r3, #15
 8004030:	b2da      	uxtb	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4930      	ldr	r1, [pc, #192]	; (8004100 <I2C_MasterRequestRead+0x194>)
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f8b9 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e054      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	4929      	ldr	r1, [pc, #164]	; (8004104 <I2C_MasterRequestRead+0x198>)
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8a9 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e044      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004092:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f831 	bl	8004108 <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ba:	d103      	bne.n	80040c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e017      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	11db      	asrs	r3, r3, #7
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f063 030e 	orn	r3, r3, #14
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4907      	ldr	r1, [pc, #28]	; (8004104 <I2C_MasterRequestRead+0x198>)
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f865 	bl	80041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00010008 	.word	0x00010008
 8004104:	00010002 	.word	0x00010002

08004108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004118:	e025      	b.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004120:	d021      	beq.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004122:	f7fe f9fb 	bl	800251c <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0220 	orr.w	r2, r3, #32
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e023      	b.n	80041ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	0c1b      	lsrs	r3, r3, #16
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	d10d      	bne.n	800418c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	43da      	mvns	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4013      	ands	r3, r2
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	bf0c      	ite	eq
 8004182:	2301      	moveq	r3, #1
 8004184:	2300      	movne	r3, #0
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	e00c      	b.n	80041a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d0b6      	beq.n	800411a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041c4:	e051      	b.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d4:	d123      	bne.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2200      	movs	r2, #0
 80041f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f043 0204 	orr.w	r2, r3, #4
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e046      	b.n	80042ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004224:	d021      	beq.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004226:	f7fe f979 	bl	800251c <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d302      	bcc.n	800423c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d116      	bne.n	800426a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2220      	movs	r2, #32
 8004246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e020      	b.n	80042ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10c      	bne.n	800428e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	e00b      	b.n	80042a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	43da      	mvns	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d18d      	bne.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c0:	e02d      	b.n	800431e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f8ce 	bl	8004464 <I2C_IsAcknowledgeFailed>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e02d      	b.n	800432e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d8:	d021      	beq.n	800431e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042da:	f7fe f91f 	bl	800251c <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d302      	bcc.n	80042f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d116      	bne.n	800431e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f043 0220 	orr.w	r2, r3, #32
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e007      	b.n	800432e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d1ca      	bne.n	80042c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b084      	sub	sp, #16
 800433a:	af00      	add	r7, sp, #0
 800433c:	60f8      	str	r0, [r7, #12]
 800433e:	60b9      	str	r1, [r7, #8]
 8004340:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004342:	e02d      	b.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f88d 	bl	8004464 <I2C_IsAcknowledgeFailed>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e02d      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d021      	beq.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800435c:	f7fe f8de 	bl	800251c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d302      	bcc.n	8004372 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e007      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d1ca      	bne.n	8004344 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c4:	e042      	b.n	800444c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b10      	cmp	r3, #16
 80043d2:	d119      	bne.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0210 	mvn.w	r2, #16
 80043dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e029      	b.n	800445c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004408:	f7fe f888 	bl	800251c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d116      	bne.n	800444c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e007      	b.n	800445c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	d1b5      	bne.n	80043c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800447a:	d11b      	bne.n	80044b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004484:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	f043 0204 	orr.w	r2, r3, #4
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e272      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8087 	beq.w	80045ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e0:	4b92      	ldr	r3, [pc, #584]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00c      	beq.n	8004506 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044ec:	4b8f      	ldr	r3, [pc, #572]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d112      	bne.n	800451e <HAL_RCC_OscConfig+0x5e>
 80044f8:	4b8c      	ldr	r3, [pc, #560]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004504:	d10b      	bne.n	800451e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004506:	4b89      	ldr	r3, [pc, #548]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d06c      	beq.n	80045ec <HAL_RCC_OscConfig+0x12c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d168      	bne.n	80045ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e24c      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004526:	d106      	bne.n	8004536 <HAL_RCC_OscConfig+0x76>
 8004528:	4b80      	ldr	r3, [pc, #512]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a7f      	ldr	r2, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	e02e      	b.n	8004594 <HAL_RCC_OscConfig+0xd4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10c      	bne.n	8004558 <HAL_RCC_OscConfig+0x98>
 800453e:	4b7b      	ldr	r3, [pc, #492]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a7a      	ldr	r2, [pc, #488]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b78      	ldr	r3, [pc, #480]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a77      	ldr	r2, [pc, #476]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004550:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	e01d      	b.n	8004594 <HAL_RCC_OscConfig+0xd4>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0xbc>
 8004562:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a71      	ldr	r2, [pc, #452]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6e      	ldr	r2, [pc, #440]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	e00b      	b.n	8004594 <HAL_RCC_OscConfig+0xd4>
 800457c:	4b6b      	ldr	r3, [pc, #428]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6a      	ldr	r2, [pc, #424]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a67      	ldr	r2, [pc, #412]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 800458e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004592:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d013      	beq.n	80045c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459c:	f7fd ffbe 	bl	800251c <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fd ffba 	bl	800251c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e200      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b6:	4b5d      	ldr	r3, [pc, #372]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0xe4>
 80045c2:	e014      	b.n	80045ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd ffaa 	bl	800251c <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd ffa6 	bl	800251c <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1ec      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045de:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1f0      	bne.n	80045cc <HAL_RCC_OscConfig+0x10c>
 80045ea:	e000      	b.n	80045ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d063      	beq.n	80046c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045fa:	4b4c      	ldr	r3, [pc, #304]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004606:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d11c      	bne.n	800464c <HAL_RCC_OscConfig+0x18c>
 8004612:	4b46      	ldr	r3, [pc, #280]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d116      	bne.n	800464c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_RCC_OscConfig+0x176>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e1c0      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	4b3d      	ldr	r3, [pc, #244]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	4939      	ldr	r1, [pc, #228]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004646:	4313      	orrs	r3, r2
 8004648:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464a:	e03a      	b.n	80046c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004654:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_RCC_OscConfig+0x270>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465a:	f7fd ff5f 	bl	800251c <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004662:	f7fd ff5b 	bl	800251c <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1a1      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004674:	4b2d      	ldr	r3, [pc, #180]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d0f0      	beq.n	8004662 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004680:	4b2a      	ldr	r3, [pc, #168]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	00db      	lsls	r3, r3, #3
 800468e:	4927      	ldr	r1, [pc, #156]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 8004690:	4313      	orrs	r3, r2
 8004692:	600b      	str	r3, [r1, #0]
 8004694:	e015      	b.n	80046c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004696:	4b26      	ldr	r3, [pc, #152]	; (8004730 <HAL_RCC_OscConfig+0x270>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fd ff3e 	bl	800251c <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a4:	f7fd ff3a 	bl	800251c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e180      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d03a      	beq.n	8004744 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d019      	beq.n	800470a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046d6:	4b17      	ldr	r3, [pc, #92]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046dc:	f7fd ff1e 	bl	800251c <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fd ff1a 	bl	800251c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e160      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_RCC_OscConfig+0x26c>)
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004702:	2001      	movs	r0, #1
 8004704:	f000 fb08 	bl	8004d18 <RCC_Delay>
 8004708:	e01c      	b.n	8004744 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <HAL_RCC_OscConfig+0x274>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004710:	f7fd ff04 	bl	800251c <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004716:	e00f      	b.n	8004738 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004718:	f7fd ff00 	bl	800251c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d908      	bls.n	8004738 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e146      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	42420000 	.word	0x42420000
 8004734:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	4b92      	ldr	r3, [pc, #584]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e9      	bne.n	8004718 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a6 	beq.w	800489e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004752:	2300      	movs	r3, #0
 8004754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004756:	4b8b      	ldr	r3, [pc, #556]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10d      	bne.n	800477e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	4a87      	ldr	r2, [pc, #540]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800476c:	61d3      	str	r3, [r2, #28]
 800476e:	4b85      	ldr	r3, [pc, #532]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800477a:	2301      	movs	r3, #1
 800477c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477e:	4b82      	ldr	r3, [pc, #520]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d118      	bne.n	80047bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478a:	4b7f      	ldr	r3, [pc, #508]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a7e      	ldr	r2, [pc, #504]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004796:	f7fd fec1 	bl	800251c <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479e:	f7fd febd 	bl	800251c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b64      	cmp	r3, #100	; 0x64
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e103      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b0:	4b75      	ldr	r3, [pc, #468]	; (8004988 <HAL_RCC_OscConfig+0x4c8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d106      	bne.n	80047d2 <HAL_RCC_OscConfig+0x312>
 80047c4:	4b6f      	ldr	r3, [pc, #444]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	4a6e      	ldr	r2, [pc, #440]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6213      	str	r3, [r2, #32]
 80047d0:	e02d      	b.n	800482e <HAL_RCC_OscConfig+0x36e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10c      	bne.n	80047f4 <HAL_RCC_OscConfig+0x334>
 80047da:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	4a69      	ldr	r2, [pc, #420]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 0301 	bic.w	r3, r3, #1
 80047e4:	6213      	str	r3, [r2, #32]
 80047e6:	4b67      	ldr	r3, [pc, #412]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a66      	ldr	r2, [pc, #408]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f023 0304 	bic.w	r3, r3, #4
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	e01c      	b.n	800482e <HAL_RCC_OscConfig+0x36e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	2b05      	cmp	r3, #5
 80047fa:	d10c      	bne.n	8004816 <HAL_RCC_OscConfig+0x356>
 80047fc:	4b61      	ldr	r3, [pc, #388]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	4a60      	ldr	r2, [pc, #384]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	f043 0304 	orr.w	r3, r3, #4
 8004806:	6213      	str	r3, [r2, #32]
 8004808:	4b5e      	ldr	r3, [pc, #376]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4a5d      	ldr	r2, [pc, #372]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	e00b      	b.n	800482e <HAL_RCC_OscConfig+0x36e>
 8004816:	4b5b      	ldr	r3, [pc, #364]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	6a1b      	ldr	r3, [r3, #32]
 800481a:	4a5a      	ldr	r2, [pc, #360]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	6213      	str	r3, [r2, #32]
 8004822:	4b58      	ldr	r3, [pc, #352]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4a57      	ldr	r2, [pc, #348]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f023 0304 	bic.w	r3, r3, #4
 800482c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d015      	beq.n	8004862 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004836:	f7fd fe71 	bl	800251c <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	e00a      	b.n	8004854 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800483e:	f7fd fe6d 	bl	800251c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	f241 3288 	movw	r2, #5000	; 0x1388
 800484c:	4293      	cmp	r3, r2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0b1      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004854:	4b4b      	ldr	r3, [pc, #300]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0ee      	beq.n	800483e <HAL_RCC_OscConfig+0x37e>
 8004860:	e014      	b.n	800488c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004862:	f7fd fe5b 	bl	800251c <HAL_GetTick>
 8004866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004868:	e00a      	b.n	8004880 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486a:	f7fd fe57 	bl	800251c <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	f241 3288 	movw	r2, #5000	; 0x1388
 8004878:	4293      	cmp	r3, r2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e09b      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004880:	4b40      	ldr	r3, [pc, #256]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004882:	6a1b      	ldr	r3, [r3, #32]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1ee      	bne.n	800486a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800488c:	7dfb      	ldrb	r3, [r7, #23]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d105      	bne.n	800489e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	4a3b      	ldr	r2, [pc, #236]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800489c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f000 8087 	beq.w	80049b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a8:	4b36      	ldr	r3, [pc, #216]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d061      	beq.n	8004978 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d146      	bne.n	800494a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <HAL_RCC_OscConfig+0x4cc>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fd fe2b 	bl	800251c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fd fe27 	bl	800251c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e06d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048dc:	4b29      	ldr	r3, [pc, #164]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f0      	bne.n	80048ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d108      	bne.n	8004904 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4921      	ldr	r1, [pc, #132]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a19      	ldr	r1, [r3, #32]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	430b      	orrs	r3, r1
 8004916:	491b      	ldr	r1, [pc, #108]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	4313      	orrs	r3, r2
 800491a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b1b      	ldr	r3, [pc, #108]	; (800498c <HAL_RCC_OscConfig+0x4cc>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd fdfb 	bl	800251c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492a:	f7fd fdf7 	bl	800251c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e03d      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800493c:	4b11      	ldr	r3, [pc, #68]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x46a>
 8004948:	e035      	b.n	80049b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x4cc>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fd fde4 	bl	800251c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fde0 	bl	800251c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e026      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x498>
 8004976:	e01e      	b.n	80049b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e019      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
 8004984:	40021000 	.word	0x40021000
 8004988:	40007000 	.word	0x40007000
 800498c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <HAL_RCC_OscConfig+0x500>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d106      	bne.n	80049b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40021000 	.word	0x40021000

080049c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0d0      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049d8:	4b6a      	ldr	r3, [pc, #424]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d910      	bls.n	8004a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b67      	ldr	r3, [pc, #412]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 0207 	bic.w	r2, r3, #7
 80049ee:	4965      	ldr	r1, [pc, #404]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0b8      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a20:	4b59      	ldr	r3, [pc, #356]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d005      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a38:	4b53      	ldr	r3, [pc, #332]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4a52      	ldr	r2, [pc, #328]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a44:	4b50      	ldr	r3, [pc, #320]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	494d      	ldr	r1, [pc, #308]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d040      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d107      	bne.n	8004a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	4b47      	ldr	r3, [pc, #284]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d115      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e07f      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d107      	bne.n	8004a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a82:	4b41      	ldr	r3, [pc, #260]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d109      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e073      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a92:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e06b      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa2:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f023 0203 	bic.w	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	4936      	ldr	r1, [pc, #216]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab4:	f7fd fd32 	bl	800251c <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004abc:	f7fd fd2e 	bl	800251c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e053      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f003 020c 	and.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d1eb      	bne.n	8004abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d210      	bcs.n	8004b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 0207 	bic.w	r2, r3, #7
 8004afa:	4922      	ldr	r1, [pc, #136]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b02:	4b20      	ldr	r3, [pc, #128]	; (8004b84 <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e032      	b.n	8004b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4916      	ldr	r1, [pc, #88]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b3e:	4b12      	ldr	r3, [pc, #72]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	490e      	ldr	r1, [pc, #56]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b52:	f000 f821 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004b56:	4602      	mov	r2, r0
 8004b58:	4b0b      	ldr	r3, [pc, #44]	; (8004b88 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	490a      	ldr	r1, [pc, #40]	; (8004b8c <HAL_RCC_ClockConfig+0x1c8>)
 8004b64:	5ccb      	ldrb	r3, [r1, r3]
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1cc>)
 8004b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x1d0>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fd faa4 	bl	80020c0 <HAL_InitTick>

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	0800daa8 	.word	0x0800daa8
 8004b90:	20000008 	.word	0x20000008
 8004b94:	2000000c 	.word	0x2000000c

08004b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b98:	b490      	push	{r4, r7}
 8004b9a:	b08a      	sub	sp, #40	; 0x28
 8004b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b9e:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ba0:	1d3c      	adds	r4, r7, #4
 8004ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ba8:	f240 2301 	movw	r3, #513	; 0x201
 8004bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d002      	beq.n	8004bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d003      	beq.n	8004bde <HAL_RCC_GetSysClockFreq+0x46>
 8004bd6:	e02b      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bd8:	4b1c      	ldr	r3, [pc, #112]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bda:	623b      	str	r3, [r7, #32]
      break;
 8004bdc:	e02b      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	0c9b      	lsrs	r3, r3, #18
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	3328      	adds	r3, #40	; 0x28
 8004be8:	443b      	add	r3, r7
 8004bea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d012      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	0c5b      	lsrs	r3, r3, #17
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	3328      	adds	r3, #40	; 0x28
 8004c06:	443b      	add	r3, r7
 8004c08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c12:	fb03 f202 	mul.w	r2, r3, r2
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	e004      	b.n	8004c2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c24:	fb02 f303 	mul.w	r3, r2, r3
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	623b      	str	r3, [r7, #32]
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c30:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c32:	623b      	str	r3, [r7, #32]
      break;
 8004c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c36:	6a3b      	ldr	r3, [r7, #32]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3728      	adds	r7, #40	; 0x28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc90      	pop	{r4, r7}
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	0800da74 	.word	0x0800da74
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	007a1200 	.word	0x007a1200
 8004c50:	003d0900 	.word	0x003d0900

08004c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c58:	4b02      	ldr	r3, [pc, #8]	; (8004c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	20000008 	.word	0x20000008

08004c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c6c:	f7ff fff2 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	; (8004c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	0800dab8 	.word	0x0800dab8

08004c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c94:	f7ff ffde 	bl	8004c54 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	0adb      	lsrs	r3, r3, #11
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	; (8004cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	0800dab8 	.word	0x0800dab8

08004cb8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	220f      	movs	r2, #15
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HAL_RCC_GetClockConfig+0x58>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0203 	and.w	r2, r3, #3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <HAL_RCC_GetClockConfig+0x58>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ce0:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <HAL_RCC_GetClockConfig+0x58>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <HAL_RCC_GetClockConfig+0x58>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	08db      	lsrs	r3, r3, #3
 8004cf2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004cfa:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_RCC_GetClockConfig+0x5c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0207 	and.w	r2, r3, #7
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40022000 	.word	0x40022000

08004d18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d20:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <RCC_Delay+0x34>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0a      	ldr	r2, [pc, #40]	; (8004d50 <RCC_Delay+0x38>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a5b      	lsrs	r3, r3, #9
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d34:	bf00      	nop
  }
  while (Delay --);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1e5a      	subs	r2, r3, #1
 8004d3a:	60fa      	str	r2, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f9      	bne.n	8004d34 <RCC_Delay+0x1c>
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr
 8004d4c:	20000008 	.word	0x20000008
 8004d50:	10624dd3 	.word	0x10624dd3

08004d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d07d      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d70:	2300      	movs	r3, #0
 8004d72:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d74:	4b4f      	ldr	r3, [pc, #316]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10d      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d80:	4b4c      	ldr	r3, [pc, #304]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	4a4b      	ldr	r2, [pc, #300]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	61d3      	str	r3, [r2, #28]
 8004d8c:	4b49      	ldr	r3, [pc, #292]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	60bb      	str	r3, [r7, #8]
 8004d96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b46      	ldr	r3, [pc, #280]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d118      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da8:	4b43      	ldr	r3, [pc, #268]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a42      	ldr	r2, [pc, #264]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db4:	f7fd fbb2 	bl	800251c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dba:	e008      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dbc:	f7fd fbae 	bl	800251c <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b64      	cmp	r3, #100	; 0x64
 8004dc8:	d901      	bls.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e06d      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dce:	4b3a      	ldr	r3, [pc, #232]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dda:	4b36      	ldr	r3, [pc, #216]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d02e      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d027      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004df8:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e02:	4b2e      	ldr	r3, [pc, #184]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e04:	2201      	movs	r2, #1
 8004e06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e0e:	4a29      	ldr	r2, [pc, #164]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d014      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fd fb7d 	bl	800251c <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fd fb79 	bl	800251c <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e036      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	4917      	ldr	r1, [pc, #92]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e5a:	7dfb      	ldrb	r3, [r7, #23]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d105      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e60:	4b14      	ldr	r3, [pc, #80]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d008      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	490b      	ldr	r1, [pc, #44]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d008      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4904      	ldr	r1, [pc, #16]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42420440 	.word	0x42420440

08004ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e041      	b.n	8004f56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f839 	bl	8004f5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f000 f9c2 	bl	8005288 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e044      	b.n	8005012 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a1d      	ldr	r2, [pc, #116]	; (800501c <HAL_TIM_Base_Start_IT+0xac>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	; (8005020 <HAL_TIM_Base_Start_IT+0xb0>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	; (8005024 <HAL_TIM_Base_Start_IT+0xb4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a16      	ldr	r2, [pc, #88]	; (8005028 <HAL_TIM_Base_Start_IT+0xb8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x6c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a15      	ldr	r2, [pc, #84]	; (800502c <HAL_TIM_Base_Start_IT+0xbc>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d111      	bne.n	8005000 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d010      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffe:	e007      	b.n	8005010 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40013400 	.word	0x40013400
 8005024:	40000400 	.word	0x40000400
 8005028:	40000800 	.word	0x40000800
 800502c:	40000c00 	.word	0x40000c00

08005030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d122      	bne.n	800508c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b02      	cmp	r3, #2
 8005052:	d11b      	bne.n	800508c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0202 	mvn.w	r2, #2
 800505c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8ed 	bl	8005252 <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f8e0 	bl	8005240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f8ef 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b04      	cmp	r3, #4
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0204 	mvn.w	r2, #4
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f8c3 	bl	8005252 <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f8b6 	bl	8005240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f8c5 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0308 	and.w	r3, r3, #8
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0208 	mvn.w	r2, #8
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2204      	movs	r2, #4
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f899 	bl	8005252 <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f88c 	bl	8005240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f89b 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0310 	and.w	r3, r3, #16
 800513e:	2b10      	cmp	r3, #16
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b10      	cmp	r3, #16
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0210 	mvn.w	r2, #16
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2208      	movs	r2, #8
 800515e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f86f 	bl	8005252 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f862 	bl	8005240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f871 	bl	8005264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d107      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0201 	mvn.w	r2, #1
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc ff36 	bl	8002020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b80      	cmp	r3, #128	; 0x80
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f8d7 	bl	800538e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f835 	bl	8005276 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0320 	and.w	r3, r3, #32
 8005216:	2b20      	cmp	r3, #32
 8005218:	d10e      	bne.n	8005238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0320 	and.w	r3, r3, #32
 8005224:	2b20      	cmp	r3, #32
 8005226:	d107      	bne.n	8005238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0220 	mvn.w	r2, #32
 8005230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8a2 	bl	800537c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a33      	ldr	r2, [pc, #204]	; (8005368 <TIM_Base_SetConfig+0xe0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a32      	ldr	r2, [pc, #200]	; (800536c <TIM_Base_SetConfig+0xe4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00f      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ae:	d00b      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a2f      	ldr	r2, [pc, #188]	; (8005370 <TIM_Base_SetConfig+0xe8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a2e      	ldr	r2, [pc, #184]	; (8005374 <TIM_Base_SetConfig+0xec>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0x40>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a2d      	ldr	r2, [pc, #180]	; (8005378 <TIM_Base_SetConfig+0xf0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d108      	bne.n	80052da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a22      	ldr	r2, [pc, #136]	; (8005368 <TIM_Base_SetConfig+0xe0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <TIM_Base_SetConfig+0x82>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a21      	ldr	r2, [pc, #132]	; (800536c <TIM_Base_SetConfig+0xe4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00f      	beq.n	800530a <TIM_Base_SetConfig+0x82>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f0:	d00b      	beq.n	800530a <TIM_Base_SetConfig+0x82>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1e      	ldr	r2, [pc, #120]	; (8005370 <TIM_Base_SetConfig+0xe8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <TIM_Base_SetConfig+0x82>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <TIM_Base_SetConfig+0xec>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_Base_SetConfig+0x82>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1c      	ldr	r2, [pc, #112]	; (8005378 <TIM_Base_SetConfig+0xf0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d108      	bne.n	800531c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <TIM_Base_SetConfig+0xe0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_Base_SetConfig+0xc8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a08      	ldr	r2, [pc, #32]	; (800536c <TIM_Base_SetConfig+0xe4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d103      	bne.n	8005358 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	615a      	str	r2, [r3, #20]
}
 800535e:	bf00      	nop
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr
 8005368:	40012c00 	.word	0x40012c00
 800536c:	40013400 	.word	0x40013400
 8005370:	40000400 	.word	0x40000400
 8005374:	40000800 	.word	0x40000800
 8005378:	40000c00 	.word	0x40000c00

0800537c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e03f      	b.n	8005432 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fd f808 	bl	80023dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2224      	movs	r2, #36	; 0x24
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fc85 	bl	8005cf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005408:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005418:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b08a      	sub	sp, #40	; 0x28
 800543e:	af02      	add	r7, sp, #8
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b20      	cmp	r3, #32
 8005458:	d17c      	bne.n	8005554 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_UART_Transmit+0x2c>
 8005460:	88fb      	ldrh	r3, [r7, #6]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e075      	b.n	8005556 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_UART_Transmit+0x3e>
 8005474:	2302      	movs	r3, #2
 8005476:	e06e      	b.n	8005556 <HAL_UART_Transmit+0x11c>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2221      	movs	r2, #33	; 0x21
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800548e:	f7fd f845 	bl	800251c <HAL_GetTick>
 8005492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	88fa      	ldrh	r2, [r7, #6]
 8005498:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a8:	d108      	bne.n	80054bc <HAL_UART_Transmit+0x82>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	61bb      	str	r3, [r7, #24]
 80054ba:	e003      	b.n	80054c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054cc:	e02a      	b.n	8005524 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	2180      	movs	r1, #128	; 0x80
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 fa38 	bl	800594e <UART_WaitOnFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e036      	b.n	8005556 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	461a      	mov	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	3302      	adds	r3, #2
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e007      	b.n	8005516 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	3301      	adds	r3, #1
 8005514:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800551a:	b29b      	uxth	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1cf      	bne.n	80054ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	2140      	movs	r1, #64	; 0x40
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 fa08 	bl	800594e <UART_WaitOnFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e006      	b.n	8005556 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005554:	2302      	movs	r3, #2
  }
}
 8005556:	4618      	mov	r0, r3
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	4613      	mov	r3, r2
 800556a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b20      	cmp	r3, #32
 8005576:	d11d      	bne.n	80055b4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <HAL_UART_Receive_IT+0x26>
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e016      	b.n	80055b6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_UART_Receive_IT+0x38>
 8005592:	2302      	movs	r3, #2
 8005594:	e00f      	b.n	80055b6 <HAL_UART_Receive_IT+0x58>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	461a      	mov	r2, r3
 80055a8:	68b9      	ldr	r1, [r7, #8]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa19 	bl	80059e2 <UART_Start_Receive_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	e000      	b.n	80055b6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80055b4:	2302      	movs	r3, #2
  }
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
	...

080055c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08a      	sub	sp, #40	; 0x28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_UART_IRQHandler+0x52>
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	f003 0320 	and.w	r3, r3, #32
 8005606:	2b00      	cmp	r3, #0
 8005608:	d003      	beq.n	8005612 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fac9 	bl	8005ba2 <UART_Receive_IT>
      return;
 8005610:	e17b      	b.n	800590a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80b1 	beq.w	800577c <HAL_UART_IRQHandler+0x1bc>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_UART_IRQHandler+0x70>
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 80a6 	beq.w	800577c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_UART_IRQHandler+0x90>
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	f043 0201 	orr.w	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f003 0304 	and.w	r3, r3, #4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_UART_IRQHandler+0xb0>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f043 0202 	orr.w	r2, r3, #2
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_UART_IRQHandler+0xd0>
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	f043 0204 	orr.w	r2, r3, #4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00f      	beq.n	80056ba <HAL_UART_IRQHandler+0xfa>
 800569a:	6a3b      	ldr	r3, [r7, #32]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <HAL_UART_IRQHandler+0xee>
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d005      	beq.n	80056ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	f043 0208 	orr.w	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 811e 	beq.w	8005900 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <HAL_UART_IRQHandler+0x11e>
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fa62 	bl	8005ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf14      	ite	ne
 80056ec:	2301      	movne	r3, #1
 80056ee:	2300      	moveq	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_UART_IRQHandler+0x146>
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d031      	beq.n	800576a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f9a4 	bl	8005a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d023      	beq.n	8005762 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	695a      	ldr	r2, [r3, #20]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005728:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005736:	4a76      	ldr	r2, [pc, #472]	; (8005910 <HAL_UART_IRQHandler+0x350>)
 8005738:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd fc24 	bl	8002f8c <HAL_DMA_Abort_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d016      	beq.n	8005778 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e00e      	b.n	8005778 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f8e3 	bl	8005926 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	e00a      	b.n	8005778 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f8df 	bl	8005926 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	e006      	b.n	8005778 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8db 	bl	8005926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005776:	e0c3      	b.n	8005900 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	bf00      	nop
    return;
 800577a:	e0c1      	b.n	8005900 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	2b01      	cmp	r3, #1
 8005782:	f040 80a1 	bne.w	80058c8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 809b 	beq.w	80058c8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 8095 	beq.w	80058c8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d04e      	beq.n	8005860 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80057cc:	8a3b      	ldrh	r3, [r7, #16]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8098 	beq.w	8005904 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d8:	8a3a      	ldrh	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	f080 8092 	bcs.w	8005904 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8a3a      	ldrh	r2, [r7, #16]
 80057e4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d02b      	beq.n	8005848 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057fe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695a      	ldr	r2, [r3, #20]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0210 	bic.w	r2, r2, #16
 800583c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005842:	4618      	mov	r0, r3
 8005844:	f7fd fb67 	bl	8002f16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005850:	b29b      	uxth	r3, r3
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	b29b      	uxth	r3, r3
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f86d 	bl	8005938 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800585e:	e051      	b.n	8005904 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005868:	b29b      	uxth	r3, r3
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d047      	beq.n	8005908 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005878:	8a7b      	ldrh	r3, [r7, #18]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d044      	beq.n	8005908 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800588c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 0201 	bic.w	r2, r2, #1
 800589c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0210 	bic.w	r2, r2, #16
 80058ba:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058bc:	8a7b      	ldrh	r3, [r7, #18]
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f839 	bl	8005938 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058c6:	e01f      	b.n	8005908 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d008      	beq.n	80058e4 <HAL_UART_IRQHandler+0x324>
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d003      	beq.n	80058e4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8f9 	bl	8005ad4 <UART_Transmit_IT>
    return;
 80058e2:	e012      	b.n	800590a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <HAL_UART_IRQHandler+0x34a>
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f93a 	bl	8005b72 <UART_EndTransmit_IT>
    return;
 80058fe:	e004      	b.n	800590a <HAL_UART_IRQHandler+0x34a>
    return;
 8005900:	bf00      	nop
 8005902:	e002      	b.n	800590a <HAL_UART_IRQHandler+0x34a>
      return;
 8005904:	bf00      	nop
 8005906:	e000      	b.n	800590a <HAL_UART_IRQHandler+0x34a>
      return;
 8005908:	bf00      	nop
  }
}
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	08005aad 	.word	0x08005aad

08005914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	bc80      	pop	{r7}
 800594c:	4770      	bx	lr

0800594e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	603b      	str	r3, [r7, #0]
 800595a:	4613      	mov	r3, r2
 800595c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595e:	e02c      	b.n	80059ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005966:	d028      	beq.n	80059ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0x30>
 800596e:	f7fc fdd5 	bl	800251c <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	429a      	cmp	r2, r3
 800597c:	d21d      	bcs.n	80059ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800598c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695a      	ldr	r2, [r3, #20]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e00f      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	4013      	ands	r3, r2
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d0c3      	beq.n	8005960 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	60b9      	str	r1, [r7, #8]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2222      	movs	r2, #34	; 0x22
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a26:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	68da      	ldr	r2, [r3, #12]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0220 	orr.w	r2, r2, #32
 8005a46:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a6a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695a      	ldr	r2, [r3, #20]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68da      	ldr	r2, [r3, #12]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0210 	bic.w	r2, r2, #16
 8005a92:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr

08005aac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff ff2d 	bl	8005926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b21      	cmp	r3, #33	; 0x21
 8005ae6:	d13e      	bne.n	8005b66 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d114      	bne.n	8005b1c <UART_Transmit_IT+0x48>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d110      	bne.n	8005b1c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b0e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]
 8005b1a:	e008      	b.n	8005b2e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	6211      	str	r1, [r2, #32]
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10f      	bne.n	8005b62 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b50:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b60:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e000      	b.n	8005b68 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
  }
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bc80      	pop	{r7}
 8005b70:	4770      	bx	lr

08005b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff febe 	bl	8005914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b22      	cmp	r3, #34	; 0x22
 8005bb4:	f040 8099 	bne.w	8005cea <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc0:	d117      	bne.n	8005bf2 <UART_Receive_IT+0x50>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d113      	bne.n	8005bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
 8005bf0:	e026      	b.n	8005c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d007      	beq.n	8005c16 <UART_Receive_IT+0x74>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <UART_Receive_IT+0x82>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e008      	b.n	8005c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d148      	bne.n	8005ce6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0220 	bic.w	r2, r2, #32
 8005c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d123      	bne.n	8005cdc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68da      	ldr	r2, [r3, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0210 	bic.w	r2, r2, #16
 8005ca8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d10a      	bne.n	8005cce <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fe2f 	bl	8005938 <HAL_UARTEx_RxEventCallback>
 8005cda:	e002      	b.n	8005ce2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fb fa5f 	bl	80011a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	e002      	b.n	8005cec <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e000      	b.n	8005cec <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005cea:	2302      	movs	r3, #2
  }
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68da      	ldr	r2, [r3, #12]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689a      	ldr	r2, [r3, #8]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d2e:	f023 030c 	bic.w	r3, r3, #12
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	430b      	orrs	r3, r1
 8005d3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699a      	ldr	r2, [r3, #24]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <UART_SetConfig+0x114>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d103      	bne.n	8005d64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d5c:	f7fe ff98 	bl	8004c90 <HAL_RCC_GetPCLK2Freq>
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	e002      	b.n	8005d6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d64:	f7fe ff80 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 8005d68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009a      	lsls	r2, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <UART_SetConfig+0x118>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	0119      	lsls	r1, r3, #4
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	009a      	lsls	r2, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da0:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <UART_SetConfig+0x118>)
 8005da2:	fba3 0302 	umull	r0, r3, r3, r2
 8005da6:	095b      	lsrs	r3, r3, #5
 8005da8:	2064      	movs	r0, #100	; 0x64
 8005daa:	fb00 f303 	mul.w	r3, r0, r3
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	3332      	adds	r3, #50	; 0x32
 8005db4:	4a15      	ldr	r2, [pc, #84]	; (8005e0c <UART_SetConfig+0x118>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dc0:	4419      	add	r1, r3
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009a      	lsls	r2, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dd8:	4b0c      	ldr	r3, [pc, #48]	; (8005e0c <UART_SetConfig+0x118>)
 8005dda:	fba3 0302 	umull	r0, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2064      	movs	r0, #100	; 0x64
 8005de2:	fb00 f303 	mul.w	r3, r0, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	3332      	adds	r3, #50	; 0x32
 8005dec:	4a07      	ldr	r2, [pc, #28]	; (8005e0c <UART_SetConfig+0x118>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e00:	bf00      	nop
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	40013800 	.word	0x40013800
 8005e0c:	51eb851f 	.word	0x51eb851f

08005e10 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e10:	b480      	push	{r7}
 8005e12:	b085      	sub	sp, #20
 8005e14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e16:	f3ef 8305 	mrs	r3, IPSR
 8005e1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10f      	bne.n	8005e42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e22:	f3ef 8310 	mrs	r3, PRIMASK
 8005e26:	607b      	str	r3, [r7, #4]
  return(result);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <osKernelInitialize+0x32>
 8005e2e:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <osKernelInitialize+0x60>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d109      	bne.n	8005e4a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e36:	f3ef 8311 	mrs	r3, BASEPRI
 8005e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005e42:	f06f 0305 	mvn.w	r3, #5
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e00c      	b.n	8005e64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e4a:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <osKernelInitialize+0x60>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e52:	4b07      	ldr	r3, [pc, #28]	; (8005e70 <osKernelInitialize+0x60>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e002      	b.n	8005e64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e64:	68fb      	ldr	r3, [r7, #12]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr
 8005e70:	2000035c 	.word	0x2000035c

08005e74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e7a:	f3ef 8305 	mrs	r3, IPSR
 8005e7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e80:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10f      	bne.n	8005ea6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e86:	f3ef 8310 	mrs	r3, PRIMASK
 8005e8a:	607b      	str	r3, [r7, #4]
  return(result);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d109      	bne.n	8005ea6 <osKernelStart+0x32>
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <osKernelStart+0x64>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d109      	bne.n	8005eae <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e9e:	603b      	str	r3, [r7, #0]
  return(result);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <osKernelStart+0x3a>
    stat = osErrorISR;
 8005ea6:	f06f 0305 	mvn.w	r3, #5
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	e00e      	b.n	8005ecc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005eae:	4b0a      	ldr	r3, [pc, #40]	; (8005ed8 <osKernelStart+0x64>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d107      	bne.n	8005ec6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <osKernelStart+0x64>)
 8005eb8:	2202      	movs	r2, #2
 8005eba:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ebc:	f001 fb68 	bl	8007590 <vTaskStartScheduler>
      stat = osOK;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e002      	b.n	8005ecc <osKernelStart+0x58>
    } else {
      stat = osError;
 8005ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	2000035c 	.word	0x2000035c

08005edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a06      	ldr	r2, [pc, #24]	; (8005f04 <vApplicationGetIdleTaskMemory+0x28>)
 8005eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	4a05      	ldr	r2, [pc, #20]	; (8005f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2280      	movs	r2, #128	; 0x80
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bc80      	pop	{r7}
 8005f02:	4770      	bx	lr
 8005f04:	20000360 	.word	0x20000360
 8005f08:	200003bc 	.word	0x200003bc

08005f0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4a07      	ldr	r2, [pc, #28]	; (8005f38 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	4a06      	ldr	r2, [pc, #24]	; (8005f3c <vApplicationGetTimerTaskMemory+0x30>)
 8005f22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f2a:	601a      	str	r2, [r3, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	200005bc 	.word	0x200005bc
 8005f3c:	20000618 	.word	0x20000618

08005f40 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8005f46:	2020      	movs	r0, #32
 8005f48:	f002 ff30 	bl	8008dac <pvPortMalloc>
 8005f4c:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00a      	beq.n	8005f6a <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f9a4 	bl	80062ac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8005f6a:	687b      	ldr	r3, [r7, #4]
	}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b090      	sub	sp, #64	; 0x40
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10a      	bne.n	8005faa <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <xEventGroupWaitBits+0x56>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	61fb      	str	r3, [r7, #28]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8005fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd4:	f383 8811 	msr	BASEPRI, r3
 8005fd8:	f3bf 8f6f 	isb	sy
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	61bb      	str	r3, [r7, #24]
}
 8005fe2:	bf00      	nop
 8005fe4:	e7fe      	b.n	8005fe4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005fe6:	f001 ffbd 	bl	8007f64 <xTaskGetSchedulerState>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d102      	bne.n	8005ff6 <xEventGroupWaitBits+0x82>
 8005ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <xEventGroupWaitBits+0x86>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e000      	b.n	8005ffc <xEventGroupWaitBits+0x88>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	617b      	str	r3, [r7, #20]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8006016:	f001 fb21 	bl	800765c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800601a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	68b9      	ldr	r1, [r7, #8]
 8006024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006026:	f000 f90b 	bl	8006240 <prvTestWaitCondition>
 800602a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00e      	beq.n	8006050 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8006036:	2300      	movs	r3, #0
 8006038:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d028      	beq.n	8006092 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	43db      	mvns	r3, r3
 8006048:	401a      	ands	r2, r3
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e020      	b.n	8006092 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8006050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006052:	2b00      	cmp	r3, #0
 8006054:	d104      	bne.n	8006060 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	e018      	b.n	8006092 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800607a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800607c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607e:	1d18      	adds	r0, r3, #4
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006084:	4313      	orrs	r3, r2
 8006086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006088:	4619      	mov	r1, r3
 800608a:	f001 fcdf 	bl	8007a4c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006092:	f001 faf1 	bl	8007678 <xTaskResumeAll>
 8006096:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800609a:	2b00      	cmp	r3, #0
 800609c:	d031      	beq.n	8006102 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d107      	bne.n	80060b4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80060a4:	4b19      	ldr	r3, [pc, #100]	; (800610c <xEventGroupWaitBits+0x198>)
 80060a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80060b4:	f002 f8d6 	bl	8008264 <uxTaskResetEventItemValue>
 80060b8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80060ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11a      	bne.n	80060fa <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80060c4:	f002 fd72 	bl	8008bac <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80060c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	68b9      	ldr	r1, [r7, #8]
 80060d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060d4:	f000 f8b4 	bl	8006240 <prvTestWaitCondition>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80060e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	43db      	mvns	r3, r3
 80060ec:	401a      	ands	r2, r3
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80060f2:	2301      	movs	r3, #1
 80060f4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80060f6:	f002 fd89 	bl	8008c0c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006104:	4618      	mov	r0, r3
 8006106:	3740      	adds	r7, #64	; 0x40
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	; 0x38
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800611a:	2300      	movs	r3, #0
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8006122:	2300      	movs	r3, #0
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xEventGroupSetBits+0x32>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	613b      	str	r3, [r7, #16]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <xEventGroupSetBits+0x52>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	3304      	adds	r3, #4
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	3308      	adds	r3, #8
 800616c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800616e:	f001 fa75 	bl	800765c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	431a      	orrs	r2, r3
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006184:	e03c      	b.n	8006200 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800618c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006192:	2300      	movs	r3, #0
 8006194:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800619c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d108      	bne.n	80061c2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c0:	e008      	b.n	80061d4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	4013      	ands	r3, r2
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d101      	bne.n	80061d4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d010      	beq.n	80061fc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d003      	beq.n	80061ec <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80061e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80061f4:	4619      	mov	r1, r3
 80061f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061f8:	f001 fcf4 	bl	8007be4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	429a      	cmp	r2, r3
 8006206:	d1be      	bne.n	8006186 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	43db      	mvns	r3, r3
 8006210:	401a      	ands	r2, r3
 8006212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006214:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8006216:	f001 fa2f 	bl	8007678 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800621a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621c:	681b      	ldr	r3, [r3, #0]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3738      	adds	r7, #56	; 0x38
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff ff6c 	bl	8006110 <xEventGroupSetBits>
}
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d107      	bne.n	8006266 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e007      	b.n	8006276 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4013      	ands	r3, r2
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	429a      	cmp	r2, r3
 8006270:	d101      	bne.n	8006276 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8006272:	2301      	movs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8006276:	697b      	ldr	r3, [r7, #20]
}
 8006278:	4618      	mov	r0, r3
 800627a:	371c      	adds	r7, #28
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr
	...

08006284 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	68f9      	ldr	r1, [r7, #12]
 8006296:	4804      	ldr	r0, [pc, #16]	; (80062a8 <xEventGroupSetBitsFromISR+0x24>)
 8006298:	f002 fb76 	bl	8008988 <xTimerPendFunctionCallFromISR>
 800629c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800629e:	697b      	ldr	r3, [r7, #20]
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3718      	adds	r7, #24
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	08006227 	.word	0x08006227

080062ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f103 0208 	add.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f04f 32ff 	mov.w	r2, #4294967295
 80062c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f103 0208 	add.w	r2, r3, #8
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0208 	add.w	r2, r3, #8
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	689a      	ldr	r2, [r3, #8]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	bc80      	pop	{r7}
 8006346:	4770      	bx	lr

08006348 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d103      	bne.n	8006368 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e00c      	b.n	8006382 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3308      	adds	r3, #8
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e002      	b.n	8006376 <vListInsert+0x2e>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	429a      	cmp	r2, r3
 8006380:	d2f6      	bcs.n	8006370 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	601a      	str	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6892      	ldr	r2, [r2, #8]
 80063ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6852      	ldr	r2, [r2, #4]
 80063d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d103      	bne.n	80063ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	1e5a      	subs	r2, r3, #1
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3714      	adds	r7, #20
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
	...

0800640c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <xQueueGenericReset+0x2a>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60bb      	str	r3, [r7, #8]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006436:	f002 fbb9 	bl	8008bac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006446:	fb01 f303 	mul.w	r3, r1, r3
 800644a:	441a      	add	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	3b01      	subs	r3, #1
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800646c:	fb01 f303 	mul.w	r3, r1, r3
 8006470:	441a      	add	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	22ff      	movs	r2, #255	; 0xff
 800647a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	22ff      	movs	r2, #255	; 0xff
 8006482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d114      	bne.n	80064b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d01a      	beq.n	80064ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3310      	adds	r3, #16
 8006498:	4618      	mov	r0, r3
 800649a:	f001 fb3f 	bl	8007b1c <xTaskRemoveFromEventList>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d012      	beq.n	80064ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <xQueueGenericReset+0xcc>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	e009      	b.n	80064ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3310      	adds	r3, #16
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff fef6 	bl	80062ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3324      	adds	r3, #36	; 0x24
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fef1 	bl	80062ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064ca:	f002 fb9f 	bl	8008c0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ce:	2301      	movs	r3, #1
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08e      	sub	sp, #56	; 0x38
 80064e0:	af02      	add	r7, sp, #8
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <xQueueGenericCreateStatic+0x52>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <xQueueGenericCreateStatic+0x56>
 800652e:	2301      	movs	r3, #1
 8006530:	e000      	b.n	8006534 <xQueueGenericCreateStatic+0x58>
 8006532:	2300      	movs	r3, #0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10a      	bne.n	800654e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	623b      	str	r3, [r7, #32]
}
 800654a:	bf00      	nop
 800654c:	e7fe      	b.n	800654c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <xQueueGenericCreateStatic+0x7e>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <xQueueGenericCreateStatic+0x82>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericCreateStatic+0x84>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	61fb      	str	r3, [r7, #28]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800657a:	2350      	movs	r3, #80	; 0x50
 800657c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b50      	cmp	r3, #80	; 0x50
 8006582:	d00a      	beq.n	800659a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	61bb      	str	r3, [r7, #24]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ac:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4613      	mov	r3, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f843 	bl	8006646 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3730      	adds	r7, #48	; 0x30
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b08a      	sub	sp, #40	; 0x28
 80065ce:	af02      	add	r7, sp, #8
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	4613      	mov	r3, r2
 80065d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10a      	bne.n	80065f4 <xQueueGenericCreate+0x2a>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	613b      	str	r3, [r7, #16]
}
 80065f0:	bf00      	nop
 80065f2:	e7fe      	b.n	80065f2 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d102      	bne.n	8006600 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	61fb      	str	r3, [r7, #28]
 80065fe:	e004      	b.n	800660a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	fb02 f303 	mul.w	r3, r2, r3
 8006608:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3350      	adds	r3, #80	; 0x50
 800660e:	4618      	mov	r0, r3
 8006610:	f002 fbcc 	bl	8008dac <pvPortMalloc>
 8006614:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00f      	beq.n	800663c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	3350      	adds	r3, #80	; 0x50
 8006620:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800662a:	79fa      	ldrb	r2, [r7, #7]
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	4613      	mov	r3, r2
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 f805 	bl	8006646 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800663c:	69bb      	ldr	r3, [r7, #24]
	}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
 8006652:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d103      	bne.n	8006662 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	e002      	b.n	8006668 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006674:	2101      	movs	r1, #1
 8006676:	69b8      	ldr	r0, [r7, #24]
 8006678:	f7ff fec8 	bl	800640c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	78fa      	ldrb	r2, [r7, #3]
 8006680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006684:	bf00      	nop
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00e      	beq.n	80066b8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066ac:	2300      	movs	r3, #0
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f81c 	bl	80066f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066b8:	bf00      	nop
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066ca:	2301      	movs	r3, #1
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	2300      	movs	r3, #0
 80066d0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	461a      	mov	r2, r3
 80066d6:	6939      	ldr	r1, [r7, #16]
 80066d8:	6978      	ldr	r0, [r7, #20]
 80066da:	f7ff ff76 	bl	80065ca <xQueueGenericCreate>
 80066de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff ffd3 	bl	800668c <prvInitialiseMutex>

		return pxNewQueue;
 80066e6:	68fb      	ldr	r3, [r7, #12]
	}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b08e      	sub	sp, #56	; 0x38
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066fe:	2300      	movs	r3, #0
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10a      	bne.n	8006722 <xQueueGenericSend+0x32>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d103      	bne.n	8006730 <xQueueGenericSend+0x40>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <xQueueGenericSend+0x44>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <xQueueGenericSend+0x46>
 8006734:	2300      	movs	r3, #0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10a      	bne.n	8006750 <xQueueGenericSend+0x60>
	__asm volatile
 800673a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673e:	f383 8811 	msr	BASEPRI, r3
 8006742:	f3bf 8f6f 	isb	sy
 8006746:	f3bf 8f4f 	dsb	sy
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800674c:	bf00      	nop
 800674e:	e7fe      	b.n	800674e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d103      	bne.n	800675e <xQueueGenericSend+0x6e>
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <xQueueGenericSend+0x72>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <xQueueGenericSend+0x74>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xQueueGenericSend+0x8e>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	623b      	str	r3, [r7, #32]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800677e:	f001 fbf1 	bl	8007f64 <xTaskGetSchedulerState>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <xQueueGenericSend+0x9e>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <xQueueGenericSend+0xa2>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueGenericSend+0xa4>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10a      	bne.n	80067ae <xQueueGenericSend+0xbe>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	61fb      	str	r3, [r7, #28]
}
 80067aa:	bf00      	nop
 80067ac:	e7fe      	b.n	80067ac <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ae:	f002 f9fd 	bl	8008bac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <xQueueGenericSend+0xd4>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d129      	bne.n	8006818 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067ca:	f000 fb2a 	bl	8006e22 <prvCopyDataToQueue>
 80067ce:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	3324      	adds	r3, #36	; 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 f99d 	bl	8007b1c <xTaskRemoveFromEventList>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d013      	beq.n	8006810 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067e8:	4b3f      	ldr	r3, [pc, #252]	; (80068e8 <xQueueGenericSend+0x1f8>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	e00a      	b.n	8006810 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006800:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <xQueueGenericSend+0x1f8>)
 8006802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006810:	f002 f9fc 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	e063      	b.n	80068e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800681e:	f002 f9f5 	bl	8008c0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006822:	2300      	movs	r3, #0
 8006824:	e05c      	b.n	80068e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4618      	mov	r0, r3
 8006832:	f001 fa39 	bl	8007ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800683a:	f002 f9e7 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800683e:	f000 ff0d 	bl	800765c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006842:	f002 f9b3 	bl	8008bac <vPortEnterCritical>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800684c:	b25b      	sxtb	r3, r3
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d103      	bne.n	800685c <xQueueGenericSend+0x16c>
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006862:	b25b      	sxtb	r3, r3
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d103      	bne.n	8006872 <xQueueGenericSend+0x182>
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006872:	f002 f9cb 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006876:	1d3a      	adds	r2, r7, #4
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	4611      	mov	r1, r2
 800687e:	4618      	mov	r0, r3
 8006880:	f001 fa28 	bl	8007cd4 <xTaskCheckForTimeOut>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d124      	bne.n	80068d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800688a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800688c:	f000 fbc1 	bl	8007012 <prvIsQueueFull>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d018      	beq.n	80068c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	3310      	adds	r3, #16
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 f8b0 	bl	8007a04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068a6:	f000 fb4c 	bl	8006f42 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068aa:	f000 fee5 	bl	8007678 <xTaskResumeAll>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f af7c 	bne.w	80067ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <xQueueGenericSend+0x1f8>)
 80068b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	e772      	b.n	80067ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068ca:	f000 fb3a 	bl	8006f42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068ce:	f000 fed3 	bl	8007678 <xTaskResumeAll>
 80068d2:	e76c      	b.n	80067ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068d6:	f000 fb34 	bl	8006f42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068da:	f000 fecd 	bl	8007678 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068de:	2300      	movs	r3, #0
		}
	}
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3738      	adds	r7, #56	; 0x38
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08e      	sub	sp, #56	; 0x38
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006916:	bf00      	nop
 8006918:	e7fe      	b.n	8006918 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d103      	bne.n	8006928 <xQueueGenericSendFromISR+0x3c>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSendFromISR+0x40>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <xQueueGenericSendFromISR+0x42>
 800692c:	2300      	movs	r3, #0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	623b      	str	r3, [r7, #32]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b02      	cmp	r3, #2
 800694c:	d103      	bne.n	8006956 <xQueueGenericSendFromISR+0x6a>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <xQueueGenericSendFromISR+0x6e>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <xQueueGenericSendFromISR+0x70>
 800695a:	2300      	movs	r3, #0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10a      	bne.n	8006976 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	61fb      	str	r3, [r7, #28]
}
 8006972:	bf00      	nop
 8006974:	e7fe      	b.n	8006974 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006976:	f002 f9db 	bl	8008d30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800697a:	f3ef 8211 	mrs	r2, BASEPRI
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	61ba      	str	r2, [r7, #24]
 8006990:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006992:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699e:	429a      	cmp	r2, r3
 80069a0:	d302      	bcc.n	80069a8 <xQueueGenericSendFromISR+0xbc>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d12c      	bne.n	8006a02 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	68b9      	ldr	r1, [r7, #8]
 80069b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069b8:	f000 fa33 	bl	8006e22 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d112      	bne.n	80069ec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d016      	beq.n	80069fc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	3324      	adds	r3, #36	; 0x24
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 f8a2 	bl	8007b1c <xTaskRemoveFromEventList>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	e007      	b.n	80069fc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069f0:	3301      	adds	r3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	b25a      	sxtb	r2, r3
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80069fc:	2301      	movs	r3, #1
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006a00:	e001      	b.n	8006a06 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3738      	adds	r7, #56	; 0x38
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08c      	sub	sp, #48	; 0x30
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <xQueueReceive+0x30>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	623b      	str	r3, [r7, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <xQueueReceive+0x3e>
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <xQueueReceive+0x42>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <xQueueReceive+0x44>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <xQueueReceive+0x5e>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	61fb      	str	r3, [r7, #28]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a7a:	f001 fa73 	bl	8007f64 <xTaskGetSchedulerState>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d102      	bne.n	8006a8a <xQueueReceive+0x6e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <xQueueReceive+0x72>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <xQueueReceive+0x74>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <xQueueReceive+0x8e>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	61bb      	str	r3, [r7, #24]
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006aaa:	f002 f87f 	bl	8008bac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d01f      	beq.n	8006afa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006abe:	f000 fa1a 	bl	8006ef6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	1e5a      	subs	r2, r3, #1
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00f      	beq.n	8006af2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	3310      	adds	r3, #16
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 f820 	bl	8007b1c <xTaskRemoveFromEventList>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d007      	beq.n	8006af2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ae2:	4b3d      	ldr	r3, [pc, #244]	; (8006bd8 <xQueueReceive+0x1bc>)
 8006ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006af2:	f002 f88b 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e069      	b.n	8006bce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b00:	f002 f884 	bl	8008c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b04:	2300      	movs	r3, #0
 8006b06:	e062      	b.n	8006bce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b0e:	f107 0310 	add.w	r3, r7, #16
 8006b12:	4618      	mov	r0, r3
 8006b14:	f001 f8c8 	bl	8007ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b1c:	f002 f876 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b20:	f000 fd9c 	bl	800765c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b24:	f002 f842 	bl	8008bac <vPortEnterCritical>
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b2e:	b25b      	sxtb	r3, r3
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d103      	bne.n	8006b3e <xQueueReceive+0x122>
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b44:	b25b      	sxtb	r3, r3
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d103      	bne.n	8006b54 <xQueueReceive+0x138>
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b54:	f002 f85a 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b58:	1d3a      	adds	r2, r7, #4
 8006b5a:	f107 0310 	add.w	r3, r7, #16
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4618      	mov	r0, r3
 8006b62:	f001 f8b7 	bl	8007cd4 <xTaskCheckForTimeOut>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d123      	bne.n	8006bb4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6e:	f000 fa3a 	bl	8006fe6 <prvIsQueueEmpty>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	3324      	adds	r3, #36	; 0x24
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	4611      	mov	r1, r2
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 ff3f 	bl	8007a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b88:	f000 f9db 	bl	8006f42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b8c:	f000 fd74 	bl	8007678 <xTaskResumeAll>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d189      	bne.n	8006aaa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006b96:	4b10      	ldr	r3, [pc, #64]	; (8006bd8 <xQueueReceive+0x1bc>)
 8006b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	e780      	b.n	8006aaa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006baa:	f000 f9ca 	bl	8006f42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bae:	f000 fd63 	bl	8007678 <xTaskResumeAll>
 8006bb2:	e77a      	b.n	8006aaa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb6:	f000 f9c4 	bl	8006f42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bba:	f000 fd5d 	bl	8007678 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc0:	f000 fa11 	bl	8006fe6 <prvIsQueueEmpty>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f43f af6f 	beq.w	8006aaa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3730      	adds	r7, #48	; 0x30
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b08e      	sub	sp, #56	; 0x38
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	623b      	str	r3, [r7, #32]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	61fb      	str	r3, [r7, #28]
}
 8006c28:	bf00      	nop
 8006c2a:	e7fe      	b.n	8006c2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c2c:	f001 f99a 	bl	8007f64 <xTaskGetSchedulerState>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <xQueueSemaphoreTake+0x60>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <xQueueSemaphoreTake+0x64>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <xQueueSemaphoreTake+0x66>
 8006c40:	2300      	movs	r3, #0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	61bb      	str	r3, [r7, #24]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c5c:	f001 ffa6 	bl	8008bac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d024      	beq.n	8006cb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006c7c:	f001 fb0a 	bl	8008294 <pvTaskIncrementMutexHeldCount>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00f      	beq.n	8006cae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	3310      	adds	r3, #16
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ff42 	bl	8007b1c <xTaskRemoveFromEventList>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c9e:	4b54      	ldr	r3, [pc, #336]	; (8006df0 <xQueueSemaphoreTake+0x214>)
 8006ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cae:	f001 ffad 	bl	8008c0c <vPortExitCritical>
				return pdPASS;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e097      	b.n	8006de6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d111      	bne.n	8006ce0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc6:	f383 8811 	msr	BASEPRI, r3
 8006cca:	f3bf 8f6f 	isb	sy
 8006cce:	f3bf 8f4f 	dsb	sy
 8006cd2:	617b      	str	r3, [r7, #20]
}
 8006cd4:	bf00      	nop
 8006cd6:	e7fe      	b.n	8006cd6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006cd8:	f001 ff98 	bl	8008c0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e082      	b.n	8006de6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ce6:	f107 030c 	add.w	r3, r7, #12
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 ffdc 	bl	8007ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cf4:	f001 ff8a 	bl	8008c0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cf8:	f000 fcb0 	bl	800765c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cfc:	f001 ff56 	bl	8008bac <vPortEnterCritical>
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d06:	b25b      	sxtb	r3, r3
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d103      	bne.n	8006d16 <xQueueSemaphoreTake+0x13a>
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d1c:	b25b      	sxtb	r3, r3
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d22:	d103      	bne.n	8006d2c <xQueueSemaphoreTake+0x150>
 8006d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d2c:	f001 ff6e 	bl	8008c0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d30:	463a      	mov	r2, r7
 8006d32:	f107 030c 	add.w	r3, r7, #12
 8006d36:	4611      	mov	r1, r2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 ffcb 	bl	8007cd4 <xTaskCheckForTimeOut>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d132      	bne.n	8006daa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d46:	f000 f94e 	bl	8006fe6 <prvIsQueueEmpty>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d026      	beq.n	8006d9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006d58:	f001 ff28 	bl	8008bac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f001 f91d 	bl	8007fa0 <xTaskPriorityInherit>
 8006d66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d68:	f001 ff50 	bl	8008c0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6e:	3324      	adds	r3, #36	; 0x24
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	4611      	mov	r1, r2
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fe45 	bl	8007a04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d7c:	f000 f8e1 	bl	8006f42 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d80:	f000 fc7a 	bl	8007678 <xTaskResumeAll>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f47f af68 	bne.w	8006c5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d8c:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <xQueueSemaphoreTake+0x214>)
 8006d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	e75e      	b.n	8006c5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006da0:	f000 f8cf 	bl	8006f42 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006da4:	f000 fc68 	bl	8007678 <xTaskResumeAll>
 8006da8:	e758      	b.n	8006c5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006daa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dac:	f000 f8c9 	bl	8006f42 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006db0:	f000 fc62 	bl	8007678 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db6:	f000 f916 	bl	8006fe6 <prvIsQueueEmpty>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f43f af4d 	beq.w	8006c5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006dc8:	f001 fef0 	bl	8008bac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dce:	f000 f811 	bl	8006df4 <prvGetDisinheritPriorityAfterTimeout>
 8006dd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 f9bc 	bl	8008158 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006de0:	f001 ff14 	bl	8008c0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006de4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3738      	adds	r7, #56	; 0x38
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	e000ed04 	.word	0xe000ed04

08006df4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d006      	beq.n	8006e12 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	e001      	b.n	8006e16 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e16:	68fb      	ldr	r3, [r7, #12]
	}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr

08006e22 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d10d      	bne.n	8006e5c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d14d      	bne.n	8006ee4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f001 f915 	bl	800807c <xTaskPriorityDisinherit>
 8006e52:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	e043      	b.n	8006ee4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d119      	bne.n	8006e96 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6898      	ldr	r0, [r3, #8]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	f002 f9bb 	bl	80091e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689a      	ldr	r2, [r3, #8]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7a:	441a      	add	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d32b      	bcc.n	8006ee4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	609a      	str	r2, [r3, #8]
 8006e94:	e026      	b.n	8006ee4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	68d8      	ldr	r0, [r3, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	68b9      	ldr	r1, [r7, #8]
 8006ea2:	f002 f9a1 	bl	80091e8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	425b      	negs	r3, r3
 8006eb0:	441a      	add	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68da      	ldr	r2, [r3, #12]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d207      	bcs.n	8006ed2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	425b      	negs	r3, r3
 8006ecc:	441a      	add	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d105      	bne.n	8006ee4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d002      	beq.n	8006ee4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006eec:	697b      	ldr	r3, [r7, #20]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b082      	sub	sp, #8
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d018      	beq.n	8006f3a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	441a      	add	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d303      	bcc.n	8006f2a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68d9      	ldr	r1, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	461a      	mov	r2, r3
 8006f34:	6838      	ldr	r0, [r7, #0]
 8006f36:	f002 f957 	bl	80091e8 <memcpy>
	}
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f4a:	f001 fe2f 	bl	8008bac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f54:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f56:	e011      	b.n	8006f7c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d012      	beq.n	8006f86 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fdd9 	bl	8007b1c <xTaskRemoveFromEventList>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f70:	f000 ff12 	bl	8007d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f74:	7bfb      	ldrb	r3, [r7, #15]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	dce9      	bgt.n	8006f58 <prvUnlockQueue+0x16>
 8006f84:	e000      	b.n	8006f88 <prvUnlockQueue+0x46>
					break;
 8006f86:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	22ff      	movs	r2, #255	; 0xff
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006f90:	f001 fe3c 	bl	8008c0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f94:	f001 fe0a 	bl	8008bac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f9e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fa0:	e011      	b.n	8006fc6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d012      	beq.n	8006fd0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3310      	adds	r3, #16
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fdb4 	bl	8007b1c <xTaskRemoveFromEventList>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006fba:	f000 feed 	bl	8007d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dce9      	bgt.n	8006fa2 <prvUnlockQueue+0x60>
 8006fce:	e000      	b.n	8006fd2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006fd0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	22ff      	movs	r2, #255	; 0xff
 8006fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006fda:	f001 fe17 	bl	8008c0c <vPortExitCritical>
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fee:	f001 fddd 	bl	8008bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e001      	b.n	8007004 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007004:	f001 fe02 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007008:	68fb      	ldr	r3, [r7, #12]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b084      	sub	sp, #16
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800701a:	f001 fdc7 	bl	8008bac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	429a      	cmp	r2, r3
 8007028:	d102      	bne.n	8007030 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800702a:	2301      	movs	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	e001      	b.n	8007034 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007034:	f001 fdea 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007038:	68fb      	ldr	r3, [r7, #12]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e014      	b.n	800707e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007054:	4a0e      	ldr	r2, [pc, #56]	; (8007090 <vQueueAddToRegistry+0x4c>)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007060:	490b      	ldr	r1, [pc, #44]	; (8007090 <vQueueAddToRegistry+0x4c>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800706a:	4a09      	ldr	r2, [pc, #36]	; (8007090 <vQueueAddToRegistry+0x4c>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	4413      	add	r3, r2
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007076:	e006      	b.n	8007086 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3301      	adds	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b07      	cmp	r3, #7
 8007082:	d9e7      	bls.n	8007054 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr
 8007090:	20000a18 	.word	0x20000a18

08007094 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80070a4:	f001 fd82 	bl	8008bac <vPortEnterCritical>
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070ae:	b25b      	sxtb	r3, r3
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d103      	bne.n	80070be <vQueueWaitForMessageRestricted+0x2a>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c4:	b25b      	sxtb	r3, r3
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d103      	bne.n	80070d4 <vQueueWaitForMessageRestricted+0x40>
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d4:	f001 fd9a 	bl	8008c0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3324      	adds	r3, #36	; 0x24
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	68b9      	ldr	r1, [r7, #8]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f000 fceb 	bl	8007ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ee:	6978      	ldr	r0, [r7, #20]
 80070f0:	f7ff ff27 	bl	8006f42 <prvUnlockQueue>
	}
 80070f4:	bf00      	nop
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	; 0x38
 8007100:	af04      	add	r7, sp, #16
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
 8007108:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800710a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10a      	bne.n	8007126 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	623b      	str	r3, [r7, #32]
}
 8007122:	bf00      	nop
 8007124:	e7fe      	b.n	8007124 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <xTaskCreateStatic+0x46>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	61fb      	str	r3, [r7, #28]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007142:	235c      	movs	r3, #92	; 0x5c
 8007144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b5c      	cmp	r3, #92	; 0x5c
 800714a:	d00a      	beq.n	8007162 <xTaskCreateStatic+0x66>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61bb      	str	r3, [r7, #24]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01e      	beq.n	80071a6 <xTaskCreateStatic+0xaa>
 8007168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01b      	beq.n	80071a6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007176:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007180:	2300      	movs	r3, #0
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	9302      	str	r3, [sp, #8]
 8007188:	f107 0314 	add.w	r3, r7, #20
 800718c:	9301      	str	r3, [sp, #4]
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	68b9      	ldr	r1, [r7, #8]
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f850 	bl	800723e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800719e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071a0:	f000 f8d4 	bl	800734c <prvAddNewTaskToReadyList>
 80071a4:	e001      	b.n	80071aa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80071a6:	2300      	movs	r3, #0
 80071a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071aa:	697b      	ldr	r3, [r7, #20]
	}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3728      	adds	r7, #40	; 0x28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c4:	88fb      	ldrh	r3, [r7, #6]
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fdef 	bl	8008dac <pvPortMalloc>
 80071ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00e      	beq.n	80071f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80071d6:	205c      	movs	r0, #92	; 0x5c
 80071d8:	f001 fde8 	bl	8008dac <pvPortMalloc>
 80071dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
 80071ea:	e005      	b.n	80071f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071ec:	6978      	ldr	r0, [r7, #20]
 80071ee:	f001 fea1 	bl	8008f34 <vPortFree>
 80071f2:	e001      	b.n	80071f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d017      	beq.n	800722e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007206:	88fa      	ldrh	r2, [r7, #6]
 8007208:	2300      	movs	r3, #0
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 f80e 	bl	800723e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007222:	69f8      	ldr	r0, [r7, #28]
 8007224:	f000 f892 	bl	800734c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007228:	2301      	movs	r3, #1
 800722a:	61bb      	str	r3, [r7, #24]
 800722c:	e002      	b.n	8007234 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800722e:	f04f 33ff 	mov.w	r3, #4294967295
 8007232:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007234:	69bb      	ldr	r3, [r7, #24]
	}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b088      	sub	sp, #32
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	607a      	str	r2, [r7, #4]
 800724a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	461a      	mov	r2, r3
 8007256:	21a5      	movs	r1, #165	; 0xa5
 8007258:	f001 ffd4 	bl	8009204 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007266:	3b01      	subs	r3, #1
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f023 0307 	bic.w	r3, r3, #7
 8007274:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	f003 0307 	and.w	r3, r3, #7
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	617b      	str	r3, [r7, #20]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007296:	2300      	movs	r3, #0
 8007298:	61fb      	str	r3, [r7, #28]
 800729a:	e012      	b.n	80072c2 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	7819      	ldrb	r1, [r3, #0]
 80072a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	4413      	add	r3, r2
 80072aa:	3334      	adds	r3, #52	; 0x34
 80072ac:	460a      	mov	r2, r1
 80072ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	2b0f      	cmp	r3, #15
 80072c6:	d9e9      	bls.n	800729c <prvInitialiseNewTask+0x5e>
 80072c8:	e000      	b.n	80072cc <prvInitialiseNewTask+0x8e>
		{
			break;
 80072ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	2b37      	cmp	r3, #55	; 0x37
 80072d8:	d901      	bls.n	80072de <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072da:	2337      	movs	r3, #55	; 0x37
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	2200      	movs	r2, #0
 80072ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f2:	3304      	adds	r3, #4
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7fe fff8 	bl	80062ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	3318      	adds	r3, #24
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fff3 	bl	80062ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007308:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007318:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	2200      	movs	r2, #0
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	68f9      	ldr	r1, [r7, #12]
 800732c:	69b8      	ldr	r0, [r7, #24]
 800732e:	f001 fb4b 	bl	80089c8 <pxPortInitialiseStack>
 8007332:	4602      	mov	r2, r0
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007342:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007344:	bf00      	nop
 8007346:	3720      	adds	r7, #32
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}

0800734c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007354:	f001 fc2a 	bl	8008bac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007358:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <prvAddNewTaskToReadyList+0xc4>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <prvAddNewTaskToReadyList+0xc4>)
 8007360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007362:	4b2c      	ldr	r3, [pc, #176]	; (8007414 <prvAddNewTaskToReadyList+0xc8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d109      	bne.n	800737e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800736a:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <prvAddNewTaskToReadyList+0xc8>)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007370:	4b27      	ldr	r3, [pc, #156]	; (8007410 <prvAddNewTaskToReadyList+0xc4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d110      	bne.n	800739a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007378:	f000 fd32 	bl	8007de0 <prvInitialiseTaskLists>
 800737c:	e00d      	b.n	800739a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800737e:	4b26      	ldr	r3, [pc, #152]	; (8007418 <prvAddNewTaskToReadyList+0xcc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d109      	bne.n	800739a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007386:	4b23      	ldr	r3, [pc, #140]	; (8007414 <prvAddNewTaskToReadyList+0xc8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	429a      	cmp	r2, r3
 8007392:	d802      	bhi.n	800739a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007394:	4a1f      	ldr	r2, [pc, #124]	; (8007414 <prvAddNewTaskToReadyList+0xc8>)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800739a:	4b20      	ldr	r3, [pc, #128]	; (800741c <prvAddNewTaskToReadyList+0xd0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3301      	adds	r3, #1
 80073a0:	4a1e      	ldr	r2, [pc, #120]	; (800741c <prvAddNewTaskToReadyList+0xd0>)
 80073a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073a4:	4b1d      	ldr	r3, [pc, #116]	; (800741c <prvAddNewTaskToReadyList+0xd0>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b0:	4b1b      	ldr	r3, [pc, #108]	; (8007420 <prvAddNewTaskToReadyList+0xd4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d903      	bls.n	80073c0 <prvAddNewTaskToReadyList+0x74>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	4a18      	ldr	r2, [pc, #96]	; (8007420 <prvAddNewTaskToReadyList+0xd4>)
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4a15      	ldr	r2, [pc, #84]	; (8007424 <prvAddNewTaskToReadyList+0xd8>)
 80073ce:	441a      	add	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f7fe ff93 	bl	8006302 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073dc:	f001 fc16 	bl	8008c0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073e0:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <prvAddNewTaskToReadyList+0xcc>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00e      	beq.n	8007406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <prvAddNewTaskToReadyList+0xc8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d207      	bcs.n	8007406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <prvAddNewTaskToReadyList+0xdc>)
 80073f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007406:	bf00      	nop
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000f2c 	.word	0x20000f2c
 8007414:	20000a58 	.word	0x20000a58
 8007418:	20000f38 	.word	0x20000f38
 800741c:	20000f48 	.word	0x20000f48
 8007420:	20000f34 	.word	0x20000f34
 8007424:	20000a5c 	.word	0x20000a5c
 8007428:	e000ed04 	.word	0xe000ed04

0800742c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10a      	bne.n	8007456 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	617b      	str	r3, [r7, #20]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10a      	bne.n	8007472 <vTaskDelayUntil+0x46>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	613b      	str	r3, [r7, #16]
}
 800746e:	bf00      	nop
 8007470:	e7fe      	b.n	8007470 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007472:	4b2a      	ldr	r3, [pc, #168]	; (800751c <vTaskDelayUntil+0xf0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <vTaskDelayUntil+0x64>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	60fb      	str	r3, [r7, #12]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007490:	f000 f8e4 	bl	800765c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007494:	4b22      	ldr	r3, [pc, #136]	; (8007520 <vTaskDelayUntil+0xf4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	4413      	add	r3, r2
 80074a2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6a3a      	ldr	r2, [r7, #32]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d20b      	bcs.n	80074c6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69fa      	ldr	r2, [r7, #28]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d211      	bcs.n	80074dc <vTaskDelayUntil+0xb0>
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d90d      	bls.n	80074dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
 80074c4:	e00a      	b.n	80074dc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d303      	bcc.n	80074d8 <vTaskDelayUntil+0xac>
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d901      	bls.n	80074dc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80074d8:	2301      	movs	r3, #1
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69fa      	ldr	r2, [r7, #28]
 80074e0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d006      	beq.n	80074f6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fee3 	bl	80082bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80074f6:	f000 f8bf 	bl	8007678 <xTaskResumeAll>
 80074fa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d107      	bne.n	8007512 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007502:	4b08      	ldr	r3, [pc, #32]	; (8007524 <vTaskDelayUntil+0xf8>)
 8007504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007512:	bf00      	nop
 8007514:	3728      	adds	r7, #40	; 0x28
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000f54 	.word	0x20000f54
 8007520:	20000f30 	.word	0x20000f30
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d017      	beq.n	800756a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800753a:	4b13      	ldr	r3, [pc, #76]	; (8007588 <vTaskDelay+0x60>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <vTaskDelay+0x30>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	60bb      	str	r3, [r7, #8]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007558:	f000 f880 	bl	800765c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 feac 	bl	80082bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007564:	f000 f888 	bl	8007678 <xTaskResumeAll>
 8007568:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d107      	bne.n	8007580 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <vTaskDelay+0x64>)
 8007572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007580:	bf00      	nop
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	20000f54 	.word	0x20000f54
 800758c:	e000ed04 	.word	0xe000ed04

08007590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b08a      	sub	sp, #40	; 0x28
 8007594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007596:	2300      	movs	r3, #0
 8007598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800759a:	2300      	movs	r3, #0
 800759c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800759e:	463a      	mov	r2, r7
 80075a0:	1d39      	adds	r1, r7, #4
 80075a2:	f107 0308 	add.w	r3, r7, #8
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe fc98 	bl	8005edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	9202      	str	r2, [sp, #8]
 80075b4:	9301      	str	r3, [sp, #4]
 80075b6:	2300      	movs	r3, #0
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	2300      	movs	r3, #0
 80075bc:	460a      	mov	r2, r1
 80075be:	4921      	ldr	r1, [pc, #132]	; (8007644 <vTaskStartScheduler+0xb4>)
 80075c0:	4821      	ldr	r0, [pc, #132]	; (8007648 <vTaskStartScheduler+0xb8>)
 80075c2:	f7ff fd9b 	bl	80070fc <xTaskCreateStatic>
 80075c6:	4603      	mov	r3, r0
 80075c8:	4a20      	ldr	r2, [pc, #128]	; (800764c <vTaskStartScheduler+0xbc>)
 80075ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075cc:	4b1f      	ldr	r3, [pc, #124]	; (800764c <vTaskStartScheduler+0xbc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075d4:	2301      	movs	r3, #1
 80075d6:	617b      	str	r3, [r7, #20]
 80075d8:	e001      	b.n	80075de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d102      	bne.n	80075ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075e4:	f000 febe 	bl	8008364 <xTimerCreateTimerTask>
 80075e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d116      	bne.n	800761e <vTaskStartScheduler+0x8e>
	__asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	613b      	str	r3, [r7, #16]
}
 8007602:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007604:	4b12      	ldr	r3, [pc, #72]	; (8007650 <vTaskStartScheduler+0xc0>)
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <vTaskStartScheduler+0xc4>)
 800760e:	2201      	movs	r2, #1
 8007610:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007612:	4b11      	ldr	r3, [pc, #68]	; (8007658 <vTaskStartScheduler+0xc8>)
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007618:	f001 fa56 	bl	8008ac8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800761c:	e00e      	b.n	800763c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d10a      	bne.n	800763c <vTaskStartScheduler+0xac>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	e7fe      	b.n	800763a <vTaskStartScheduler+0xaa>
}
 800763c:	bf00      	nop
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0800da84 	.word	0x0800da84
 8007648:	08007db1 	.word	0x08007db1
 800764c:	20000f50 	.word	0x20000f50
 8007650:	20000f4c 	.word	0x20000f4c
 8007654:	20000f38 	.word	0x20000f38
 8007658:	20000f30 	.word	0x20000f30

0800765c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <vTaskSuspendAll+0x18>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3301      	adds	r3, #1
 8007666:	4a03      	ldr	r2, [pc, #12]	; (8007674 <vTaskSuspendAll+0x18>)
 8007668:	6013      	str	r3, [r2, #0]
}
 800766a:	bf00      	nop
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	20000f54 	.word	0x20000f54

08007678 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007682:	2300      	movs	r3, #0
 8007684:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007686:	4b42      	ldr	r3, [pc, #264]	; (8007790 <xTaskResumeAll+0x118>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <xTaskResumeAll+0x2c>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	603b      	str	r3, [r7, #0]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076a4:	f001 fa82 	bl	8008bac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076a8:	4b39      	ldr	r3, [pc, #228]	; (8007790 <xTaskResumeAll+0x118>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	4a38      	ldr	r2, [pc, #224]	; (8007790 <xTaskResumeAll+0x118>)
 80076b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076b2:	4b37      	ldr	r3, [pc, #220]	; (8007790 <xTaskResumeAll+0x118>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d162      	bne.n	8007780 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076ba:	4b36      	ldr	r3, [pc, #216]	; (8007794 <xTaskResumeAll+0x11c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d05e      	beq.n	8007780 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076c2:	e02f      	b.n	8007724 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80076c4:	4b34      	ldr	r3, [pc, #208]	; (8007798 <xTaskResumeAll+0x120>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	3318      	adds	r3, #24
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7fe fe71 	bl	80063b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3304      	adds	r3, #4
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fe fe6c 	bl	80063b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076e4:	4b2d      	ldr	r3, [pc, #180]	; (800779c <xTaskResumeAll+0x124>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d903      	bls.n	80076f4 <xTaskResumeAll+0x7c>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	4a2a      	ldr	r2, [pc, #168]	; (800779c <xTaskResumeAll+0x124>)
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	4613      	mov	r3, r2
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	4413      	add	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4a27      	ldr	r2, [pc, #156]	; (80077a0 <xTaskResumeAll+0x128>)
 8007702:	441a      	add	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7fe fdf9 	bl	8006302 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007714:	4b23      	ldr	r3, [pc, #140]	; (80077a4 <xTaskResumeAll+0x12c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	429a      	cmp	r2, r3
 800771c:	d302      	bcc.n	8007724 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800771e:	4b22      	ldr	r3, [pc, #136]	; (80077a8 <xTaskResumeAll+0x130>)
 8007720:	2201      	movs	r2, #1
 8007722:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007724:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <xTaskResumeAll+0x120>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1cb      	bne.n	80076c4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007732:	f000 fbf3 	bl	8007f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007736:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <xTaskResumeAll+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d010      	beq.n	8007764 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007742:	f000 f845 	bl	80077d0 <xTaskIncrementTick>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800774c:	4b16      	ldr	r3, [pc, #88]	; (80077a8 <xTaskResumeAll+0x130>)
 800774e:	2201      	movs	r2, #1
 8007750:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3b01      	subs	r3, #1
 8007756:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f1      	bne.n	8007742 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800775e:	4b13      	ldr	r3, [pc, #76]	; (80077ac <xTaskResumeAll+0x134>)
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007764:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <xTaskResumeAll+0x130>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800776c:	2301      	movs	r3, #1
 800776e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007770:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <xTaskResumeAll+0x138>)
 8007772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007780:	f001 fa44 	bl	8008c0c <vPortExitCritical>

	return xAlreadyYielded;
 8007784:	68bb      	ldr	r3, [r7, #8]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20000f54 	.word	0x20000f54
 8007794:	20000f2c 	.word	0x20000f2c
 8007798:	20000eec 	.word	0x20000eec
 800779c:	20000f34 	.word	0x20000f34
 80077a0:	20000a5c 	.word	0x20000a5c
 80077a4:	20000a58 	.word	0x20000a58
 80077a8:	20000f40 	.word	0x20000f40
 80077ac:	20000f3c 	.word	0x20000f3c
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077ba:	4b04      	ldr	r3, [pc, #16]	; (80077cc <xTaskGetTickCount+0x18>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077c0:	687b      	ldr	r3, [r7, #4]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bc80      	pop	{r7}
 80077ca:	4770      	bx	lr
 80077cc:	20000f30 	.word	0x20000f30

080077d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077da:	4b51      	ldr	r3, [pc, #324]	; (8007920 <xTaskIncrementTick+0x150>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f040 808e 	bne.w	8007900 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077e4:	4b4f      	ldr	r3, [pc, #316]	; (8007924 <xTaskIncrementTick+0x154>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3301      	adds	r3, #1
 80077ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077ec:	4a4d      	ldr	r2, [pc, #308]	; (8007924 <xTaskIncrementTick+0x154>)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d120      	bne.n	800783a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077f8:	4b4b      	ldr	r3, [pc, #300]	; (8007928 <xTaskIncrementTick+0x158>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <xTaskIncrementTick+0x48>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	603b      	str	r3, [r7, #0]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <xTaskIncrementTick+0x46>
 8007818:	4b43      	ldr	r3, [pc, #268]	; (8007928 <xTaskIncrementTick+0x158>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60fb      	str	r3, [r7, #12]
 800781e:	4b43      	ldr	r3, [pc, #268]	; (800792c <xTaskIncrementTick+0x15c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a41      	ldr	r2, [pc, #260]	; (8007928 <xTaskIncrementTick+0x158>)
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	4a41      	ldr	r2, [pc, #260]	; (800792c <xTaskIncrementTick+0x15c>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	4b40      	ldr	r3, [pc, #256]	; (8007930 <xTaskIncrementTick+0x160>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3301      	adds	r3, #1
 8007832:	4a3f      	ldr	r2, [pc, #252]	; (8007930 <xTaskIncrementTick+0x160>)
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	f000 fb71 	bl	8007f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800783a:	4b3e      	ldr	r3, [pc, #248]	; (8007934 <xTaskIncrementTick+0x164>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	693a      	ldr	r2, [r7, #16]
 8007840:	429a      	cmp	r2, r3
 8007842:	d34e      	bcc.n	80078e2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007844:	4b38      	ldr	r3, [pc, #224]	; (8007928 <xTaskIncrementTick+0x158>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <xTaskIncrementTick+0x82>
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <xTaskIncrementTick+0x84>
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007858:	4b36      	ldr	r3, [pc, #216]	; (8007934 <xTaskIncrementTick+0x164>)
 800785a:	f04f 32ff 	mov.w	r2, #4294967295
 800785e:	601a      	str	r2, [r3, #0]
					break;
 8007860:	e03f      	b.n	80078e2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007862:	4b31      	ldr	r3, [pc, #196]	; (8007928 <xTaskIncrementTick+0x158>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	429a      	cmp	r2, r3
 8007878:	d203      	bcs.n	8007882 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800787a:	4a2e      	ldr	r2, [pc, #184]	; (8007934 <xTaskIncrementTick+0x164>)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6013      	str	r3, [r2, #0]
						break;
 8007880:	e02f      	b.n	80078e2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fd96 	bl	80063b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d004      	beq.n	800789e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	3318      	adds	r3, #24
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fd8d 	bl	80063b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	4b25      	ldr	r3, [pc, #148]	; (8007938 <xTaskIncrementTick+0x168>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d903      	bls.n	80078b2 <xTaskIncrementTick+0xe2>
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	4a22      	ldr	r2, [pc, #136]	; (8007938 <xTaskIncrementTick+0x168>)
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b6:	4613      	mov	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4a1f      	ldr	r2, [pc, #124]	; (800793c <xTaskIncrementTick+0x16c>)
 80078c0:	441a      	add	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	3304      	adds	r3, #4
 80078c6:	4619      	mov	r1, r3
 80078c8:	4610      	mov	r0, r2
 80078ca:	f7fe fd1a 	bl	8006302 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <xTaskIncrementTick+0x170>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	429a      	cmp	r2, r3
 80078da:	d3b3      	bcc.n	8007844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078e0:	e7b0      	b.n	8007844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078e2:	4b17      	ldr	r3, [pc, #92]	; (8007940 <xTaskIncrementTick+0x170>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4914      	ldr	r1, [pc, #80]	; (800793c <xTaskIncrementTick+0x16c>)
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	440b      	add	r3, r1
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d907      	bls.n	800790a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80078fa:	2301      	movs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	e004      	b.n	800790a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007900:	4b10      	ldr	r3, [pc, #64]	; (8007944 <xTaskIncrementTick+0x174>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3301      	adds	r3, #1
 8007906:	4a0f      	ldr	r2, [pc, #60]	; (8007944 <xTaskIncrementTick+0x174>)
 8007908:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800790a:	4b0f      	ldr	r3, [pc, #60]	; (8007948 <xTaskIncrementTick+0x178>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007912:	2301      	movs	r3, #1
 8007914:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007916:	697b      	ldr	r3, [r7, #20]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20000f54 	.word	0x20000f54
 8007924:	20000f30 	.word	0x20000f30
 8007928:	20000ee4 	.word	0x20000ee4
 800792c:	20000ee8 	.word	0x20000ee8
 8007930:	20000f44 	.word	0x20000f44
 8007934:	20000f4c 	.word	0x20000f4c
 8007938:	20000f34 	.word	0x20000f34
 800793c:	20000a5c 	.word	0x20000a5c
 8007940:	20000a58 	.word	0x20000a58
 8007944:	20000f3c 	.word	0x20000f3c
 8007948:	20000f40 	.word	0x20000f40

0800794c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <vTaskSwitchContext+0xa4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d003      	beq.n	8007962 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800795a:	4b26      	ldr	r3, [pc, #152]	; (80079f4 <vTaskSwitchContext+0xa8>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007960:	e041      	b.n	80079e6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007962:	4b24      	ldr	r3, [pc, #144]	; (80079f4 <vTaskSwitchContext+0xa8>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007968:	4b23      	ldr	r3, [pc, #140]	; (80079f8 <vTaskSwitchContext+0xac>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	e010      	b.n	8007992 <vTaskSwitchContext+0x46>
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <vTaskSwitchContext+0x40>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	607b      	str	r3, [r7, #4]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <vTaskSwitchContext+0x3e>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	491a      	ldr	r1, [pc, #104]	; (80079fc <vTaskSwitchContext+0xb0>)
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d0e4      	beq.n	8007970 <vTaskSwitchContext+0x24>
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4a12      	ldr	r2, [pc, #72]	; (80079fc <vTaskSwitchContext+0xb0>)
 80079b2:	4413      	add	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	605a      	str	r2, [r3, #4]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3308      	adds	r3, #8
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d104      	bne.n	80079d6 <vTaskSwitchContext+0x8a>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	685a      	ldr	r2, [r3, #4]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	605a      	str	r2, [r3, #4]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	4a08      	ldr	r2, [pc, #32]	; (8007a00 <vTaskSwitchContext+0xb4>)
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	4a05      	ldr	r2, [pc, #20]	; (80079f8 <vTaskSwitchContext+0xac>)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6013      	str	r3, [r2, #0]
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bc80      	pop	{r7}
 80079ee:	4770      	bx	lr
 80079f0:	20000f54 	.word	0x20000f54
 80079f4:	20000f40 	.word	0x20000f40
 80079f8:	20000f34 	.word	0x20000f34
 80079fc:	20000a5c 	.word	0x20000a5c
 8007a00:	20000a58 	.word	0x20000a58

08007a04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	60fb      	str	r3, [r7, #12]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a2a:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <vTaskPlaceOnEventList+0x44>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3318      	adds	r3, #24
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fe fc88 	bl	8006348 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a38:	2101      	movs	r1, #1
 8007a3a:	6838      	ldr	r0, [r7, #0]
 8007a3c:	f000 fc3e 	bl	80082bc <prvAddCurrentTaskToDelayedList>
}
 8007a40:	bf00      	nop
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000a58 	.word	0x20000a58

08007a4c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10a      	bne.n	8007a74 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	617b      	str	r3, [r7, #20]
}
 8007a70:	bf00      	nop
 8007a72:	e7fe      	b.n	8007a72 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007a74:	4b11      	ldr	r3, [pc, #68]	; (8007abc <vTaskPlaceOnUnorderedEventList+0x70>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	613b      	str	r3, [r7, #16]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007a9c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a9e:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3318      	adds	r3, #24
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7fe fc2b 	bl	8006302 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007aac:	2101      	movs	r1, #1
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fc04 	bl	80082bc <prvAddCurrentTaskToDelayedList>
}
 8007ab4:	bf00      	nop
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000f54 	.word	0x20000f54
 8007ac0:	20000a58 	.word	0x20000a58

08007ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	617b      	str	r3, [r7, #20]
}
 8007ae8:	bf00      	nop
 8007aea:	e7fe      	b.n	8007aea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <vTaskPlaceOnEventListRestricted+0x54>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3318      	adds	r3, #24
 8007af2:	4619      	mov	r1, r3
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7fe fc04 	bl	8006302 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295
 8007b04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b06:	6879      	ldr	r1, [r7, #4]
 8007b08:	68b8      	ldr	r0, [r7, #8]
 8007b0a:	f000 fbd7 	bl	80082bc <prvAddCurrentTaskToDelayedList>
	}
 8007b0e:	bf00      	nop
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000a58 	.word	0x20000a58

08007b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	60fb      	str	r3, [r7, #12]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3318      	adds	r3, #24
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f7fe fc33 	bl	80063b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b52:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <xTaskRemoveFromEventList+0xb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11d      	bne.n	8007b96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fc2a 	bl	80063b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <xTaskRemoveFromEventList+0xb4>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d903      	bls.n	8007b78 <xTaskRemoveFromEventList+0x5c>
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a16      	ldr	r2, [pc, #88]	; (8007bd0 <xTaskRemoveFromEventList+0xb4>)
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4a13      	ldr	r2, [pc, #76]	; (8007bd4 <xTaskRemoveFromEventList+0xb8>)
 8007b86:	441a      	add	r2, r3
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fe fbb7 	bl	8006302 <vListInsertEnd>
 8007b94:	e005      	b.n	8007ba2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3318      	adds	r3, #24
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	480e      	ldr	r0, [pc, #56]	; (8007bd8 <xTaskRemoveFromEventList+0xbc>)
 8007b9e:	f7fe fbb0 	bl	8006302 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <xTaskRemoveFromEventList+0xc0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d905      	bls.n	8007bbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007bb4:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <xTaskRemoveFromEventList+0xc4>)
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e001      	b.n	8007bc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007bc0:	697b      	ldr	r3, [r7, #20]
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000f54 	.word	0x20000f54
 8007bd0:	20000f34 	.word	0x20000f34
 8007bd4:	20000a5c 	.word	0x20000a5c
 8007bd8:	20000eec 	.word	0x20000eec
 8007bdc:	20000a58 	.word	0x20000a58
 8007be0:	20000f40 	.word	0x20000f40

08007be4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007bee:	4b29      	ldr	r3, [pc, #164]	; (8007c94 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	613b      	str	r3, [r7, #16]
}
 8007c08:	bf00      	nop
 8007c0a:	e7fe      	b.n	8007c0a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	60fb      	str	r3, [r7, #12]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7fe fbbd 	bl	80063b8 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	3304      	adds	r3, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fbb8 	bl	80063b8 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4c:	4b12      	ldr	r3, [pc, #72]	; (8007c98 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d903      	bls.n	8007c5c <vTaskRemoveFromUnorderedEventList+0x78>
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	4a0f      	ldr	r2, [pc, #60]	; (8007c98 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007c5a:	6013      	str	r3, [r2, #0]
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4a0c      	ldr	r2, [pc, #48]	; (8007c9c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007c6a:	441a      	add	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4619      	mov	r1, r3
 8007c72:	4610      	mov	r0, r2
 8007c74:	f7fe fb45 	bl	8006302 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7c:	4b08      	ldr	r3, [pc, #32]	; (8007ca0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d902      	bls.n	8007c8c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
	}
}
 8007c8c:	bf00      	nop
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	20000f54 	.word	0x20000f54
 8007c98:	20000f34 	.word	0x20000f34
 8007c9c:	20000a5c 	.word	0x20000a5c
 8007ca0:	20000a58 	.word	0x20000a58
 8007ca4:	20000f40 	.word	0x20000f40

08007ca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cb0:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <vTaskInternalSetTimeOutState+0x24>)
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <vTaskInternalSetTimeOutState+0x28>)
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	605a      	str	r2, [r3, #4]
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	20000f44 	.word	0x20000f44
 8007cd0:	20000f30 	.word	0x20000f30

08007cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	613b      	str	r3, [r7, #16]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10a      	bne.n	8007d16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d04:	f383 8811 	msr	BASEPRI, r3
 8007d08:	f3bf 8f6f 	isb	sy
 8007d0c:	f3bf 8f4f 	dsb	sy
 8007d10:	60fb      	str	r3, [r7, #12]
}
 8007d12:	bf00      	nop
 8007d14:	e7fe      	b.n	8007d14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d16:	f000 ff49 	bl	8008bac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d1a:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <xTaskCheckForTimeOut+0xbc>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d32:	d102      	bne.n	8007d3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61fb      	str	r3, [r7, #28]
 8007d38:	e023      	b.n	8007d82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b15      	ldr	r3, [pc, #84]	; (8007d94 <xTaskCheckForTimeOut+0xc0>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d007      	beq.n	8007d56 <xTaskCheckForTimeOut+0x82>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d302      	bcc.n	8007d56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	61fb      	str	r3, [r7, #28]
 8007d54:	e015      	b.n	8007d82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d20b      	bcs.n	8007d78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff ff9b 	bl	8007ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d72:	2300      	movs	r3, #0
 8007d74:	61fb      	str	r3, [r7, #28]
 8007d76:	e004      	b.n	8007d82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d82:	f000 ff43 	bl	8008c0c <vPortExitCritical>

	return xReturn;
 8007d86:	69fb      	ldr	r3, [r7, #28]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	20000f30 	.word	0x20000f30
 8007d94:	20000f44 	.word	0x20000f44

08007d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d9c:	4b03      	ldr	r3, [pc, #12]	; (8007dac <vTaskMissedYield+0x14>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	601a      	str	r2, [r3, #0]
}
 8007da2:	bf00      	nop
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000f40 	.word	0x20000f40

08007db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007db8:	f000 f852 	bl	8007e60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dbc:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <prvIdleTask+0x28>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d9f9      	bls.n	8007db8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dc4:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <prvIdleTask+0x2c>)
 8007dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007dd4:	e7f0      	b.n	8007db8 <prvIdleTask+0x8>
 8007dd6:	bf00      	nop
 8007dd8:	20000a5c 	.word	0x20000a5c
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007de6:	2300      	movs	r3, #0
 8007de8:	607b      	str	r3, [r7, #4]
 8007dea:	e00c      	b.n	8007e06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4a12      	ldr	r2, [pc, #72]	; (8007e40 <prvInitialiseTaskLists+0x60>)
 8007df8:	4413      	add	r3, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fa56 	bl	80062ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	3301      	adds	r3, #1
 8007e04:	607b      	str	r3, [r7, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b37      	cmp	r3, #55	; 0x37
 8007e0a:	d9ef      	bls.n	8007dec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e0c:	480d      	ldr	r0, [pc, #52]	; (8007e44 <prvInitialiseTaskLists+0x64>)
 8007e0e:	f7fe fa4d 	bl	80062ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e12:	480d      	ldr	r0, [pc, #52]	; (8007e48 <prvInitialiseTaskLists+0x68>)
 8007e14:	f7fe fa4a 	bl	80062ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e18:	480c      	ldr	r0, [pc, #48]	; (8007e4c <prvInitialiseTaskLists+0x6c>)
 8007e1a:	f7fe fa47 	bl	80062ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e1e:	480c      	ldr	r0, [pc, #48]	; (8007e50 <prvInitialiseTaskLists+0x70>)
 8007e20:	f7fe fa44 	bl	80062ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e24:	480b      	ldr	r0, [pc, #44]	; (8007e54 <prvInitialiseTaskLists+0x74>)
 8007e26:	f7fe fa41 	bl	80062ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <prvInitialiseTaskLists+0x78>)
 8007e2c:	4a05      	ldr	r2, [pc, #20]	; (8007e44 <prvInitialiseTaskLists+0x64>)
 8007e2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e30:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <prvInitialiseTaskLists+0x7c>)
 8007e32:	4a05      	ldr	r2, [pc, #20]	; (8007e48 <prvInitialiseTaskLists+0x68>)
 8007e34:	601a      	str	r2, [r3, #0]
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000a5c 	.word	0x20000a5c
 8007e44:	20000ebc 	.word	0x20000ebc
 8007e48:	20000ed0 	.word	0x20000ed0
 8007e4c:	20000eec 	.word	0x20000eec
 8007e50:	20000f00 	.word	0x20000f00
 8007e54:	20000f18 	.word	0x20000f18
 8007e58:	20000ee4 	.word	0x20000ee4
 8007e5c:	20000ee8 	.word	0x20000ee8

08007e60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e66:	e019      	b.n	8007e9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e68:	f000 fea0 	bl	8008bac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007e6c:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <prvCheckTasksWaitingTermination+0x50>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fa9d 	bl	80063b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <prvCheckTasksWaitingTermination+0x54>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	4a0b      	ldr	r2, [pc, #44]	; (8007eb4 <prvCheckTasksWaitingTermination+0x54>)
 8007e86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e88:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <prvCheckTasksWaitingTermination+0x58>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <prvCheckTasksWaitingTermination+0x58>)
 8007e90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e92:	f000 febb 	bl	8008c0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 f810 	bl	8007ebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e9c:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <prvCheckTasksWaitingTermination+0x58>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e1      	bne.n	8007e68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	3708      	adds	r7, #8
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000f00 	.word	0x20000f00
 8007eb4:	20000f2c 	.word	0x20000f2c
 8007eb8:	20000f14 	.word	0x20000f14

08007ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d108      	bne.n	8007ee0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 f82e 	bl	8008f34 <vPortFree>
				vPortFree( pxTCB );
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 f82b 	bl	8008f34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ede:	e018      	b.n	8007f12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d103      	bne.n	8007ef2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f001 f822 	bl	8008f34 <vPortFree>
	}
 8007ef0:	e00f      	b.n	8007f12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d00a      	beq.n	8007f12 <prvDeleteTCB+0x56>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <prvDeleteTCB+0x54>
	}
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f22:	4b0e      	ldr	r3, [pc, #56]	; (8007f5c <prvResetNextTaskUnblockTime+0x40>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <prvResetNextTaskUnblockTime+0x14>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <prvResetNextTaskUnblockTime+0x16>
 8007f30:	2300      	movs	r3, #0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <prvResetNextTaskUnblockTime+0x44>)
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f3e:	e008      	b.n	8007f52 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f40:	4b06      	ldr	r3, [pc, #24]	; (8007f5c <prvResetNextTaskUnblockTime+0x40>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4a04      	ldr	r2, [pc, #16]	; (8007f60 <prvResetNextTaskUnblockTime+0x44>)
 8007f50:	6013      	str	r3, [r2, #0]
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bc80      	pop	{r7}
 8007f5a:	4770      	bx	lr
 8007f5c:	20000ee4 	.word	0x20000ee4
 8007f60:	20000f4c 	.word	0x20000f4c

08007f64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f6a:	4b0b      	ldr	r3, [pc, #44]	; (8007f98 <xTaskGetSchedulerState+0x34>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d102      	bne.n	8007f78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f72:	2301      	movs	r3, #1
 8007f74:	607b      	str	r3, [r7, #4]
 8007f76:	e008      	b.n	8007f8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f78:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <xTaskGetSchedulerState+0x38>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d102      	bne.n	8007f86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f80:	2302      	movs	r3, #2
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	e001      	b.n	8007f8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f86:	2300      	movs	r3, #0
 8007f88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f8a:	687b      	ldr	r3, [r7, #4]
	}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000f38 	.word	0x20000f38
 8007f9c:	20000f54 	.word	0x20000f54

08007fa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d056      	beq.n	8008064 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fba:	4b2d      	ldr	r3, [pc, #180]	; (8008070 <xTaskPriorityInherit+0xd0>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d246      	bcs.n	8008052 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	db06      	blt.n	8007fda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fcc:	4b28      	ldr	r3, [pc, #160]	; (8008070 <xTaskPriorityInherit+0xd0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6959      	ldr	r1, [r3, #20]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4a22      	ldr	r2, [pc, #136]	; (8008074 <xTaskPriorityInherit+0xd4>)
 8007fec:	4413      	add	r3, r2
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	d101      	bne.n	8007ff6 <xTaskPriorityInherit+0x56>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <xTaskPriorityInherit+0x58>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d022      	beq.n	8008042 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	3304      	adds	r3, #4
 8008000:	4618      	mov	r0, r3
 8008002:	f7fe f9d9 	bl	80063b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <xTaskPriorityInherit+0xd0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008014:	4b18      	ldr	r3, [pc, #96]	; (8008078 <xTaskPriorityInherit+0xd8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	429a      	cmp	r2, r3
 800801a:	d903      	bls.n	8008024 <xTaskPriorityInherit+0x84>
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4a15      	ldr	r2, [pc, #84]	; (8008078 <xTaskPriorityInherit+0xd8>)
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	4613      	mov	r3, r2
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4a10      	ldr	r2, [pc, #64]	; (8008074 <xTaskPriorityInherit+0xd4>)
 8008032:	441a      	add	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	3304      	adds	r3, #4
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fe f961 	bl	8006302 <vListInsertEnd>
 8008040:	e004      	b.n	800804c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <xTaskPriorityInherit+0xd0>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800804c:	2301      	movs	r3, #1
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e008      	b.n	8008064 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008056:	4b06      	ldr	r3, [pc, #24]	; (8008070 <xTaskPriorityInherit+0xd0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d201      	bcs.n	8008064 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008064:	68fb      	ldr	r3, [r7, #12]
	}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000a58 	.word	0x20000a58
 8008074:	20000a5c 	.word	0x20000a5c
 8008078:	20000f34 	.word	0x20000f34

0800807c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d056      	beq.n	8008140 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008092:	4b2e      	ldr	r3, [pc, #184]	; (800814c <xTaskPriorityDisinherit+0xd0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	429a      	cmp	r2, r3
 800809a:	d00a      	beq.n	80080b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	60fb      	str	r3, [r7, #12]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	60bb      	str	r3, [r7, #8]
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d4:	1e5a      	subs	r2, r3, #1
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d02c      	beq.n	8008140 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d128      	bne.n	8008140 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3304      	adds	r3, #4
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fe f960 	bl	80063b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008104:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008110:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <xTaskPriorityDisinherit+0xd4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d903      	bls.n	8008120 <xTaskPriorityDisinherit+0xa4>
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	4a0c      	ldr	r2, [pc, #48]	; (8008150 <xTaskPriorityDisinherit+0xd4>)
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4a09      	ldr	r2, [pc, #36]	; (8008154 <xTaskPriorityDisinherit+0xd8>)
 800812e:	441a      	add	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fe f8e3 	bl	8006302 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800813c:	2301      	movs	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008140:	697b      	ldr	r3, [r7, #20]
	}
 8008142:	4618      	mov	r0, r3
 8008144:	3718      	adds	r7, #24
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000a58 	.word	0x20000a58
 8008150:	20000f34 	.word	0x20000f34
 8008154:	20000a5c 	.word	0x20000a5c

08008158 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008166:	2301      	movs	r3, #1
 8008168:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d06f      	beq.n	8008250 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60fb      	str	r3, [r7, #12]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d902      	bls.n	800819e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	e002      	b.n	80081a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	69fa      	ldr	r2, [r7, #28]
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d050      	beq.n	8008250 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d14b      	bne.n	8008250 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80081b8:	4b27      	ldr	r3, [pc, #156]	; (8008258 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d10a      	bne.n	80081d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60bb      	str	r3, [r7, #8]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	db04      	blt.n	80081f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	6959      	ldr	r1, [r3, #20]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4a15      	ldr	r2, [pc, #84]	; (800825c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008206:	4413      	add	r3, r2
 8008208:	4299      	cmp	r1, r3
 800820a:	d101      	bne.n	8008210 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800820c:	2301      	movs	r3, #1
 800820e:	e000      	b.n	8008212 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8008210:	2300      	movs	r3, #0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01c      	beq.n	8008250 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	3304      	adds	r3, #4
 800821a:	4618      	mov	r0, r3
 800821c:	f7fe f8cc 	bl	80063b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008224:	4b0e      	ldr	r3, [pc, #56]	; (8008260 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	429a      	cmp	r2, r3
 800822a:	d903      	bls.n	8008234 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008232:	6013      	str	r3, [r2, #0]
 8008234:	69bb      	ldr	r3, [r7, #24]
 8008236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008238:	4613      	mov	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4413      	add	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4a06      	ldr	r2, [pc, #24]	; (800825c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008242:	441a      	add	r2, r3
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	3304      	adds	r3, #4
 8008248:	4619      	mov	r1, r3
 800824a:	4610      	mov	r0, r2
 800824c:	f7fe f859 	bl	8006302 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008250:	bf00      	nop
 8008252:	3720      	adds	r7, #32
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000a58 	.word	0x20000a58
 800825c:	20000a5c 	.word	0x20000a5c
 8008260:	20000f34 	.word	0x20000f34

08008264 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800826a:	4b09      	ldr	r3, [pc, #36]	; (8008290 <uxTaskResetEventItemValue+0x2c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	699b      	ldr	r3, [r3, #24]
 8008270:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <uxTaskResetEventItemValue+0x2c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008278:	4b05      	ldr	r3, [pc, #20]	; (8008290 <uxTaskResetEventItemValue+0x2c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008280:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008282:	687b      	ldr	r3, [r7, #4]
}
 8008284:	4618      	mov	r0, r3
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	bc80      	pop	{r7}
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	20000a58 	.word	0x20000a58

08008294 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8008294:	b480      	push	{r7}
 8008296:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008298:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80082a0:	4b05      	ldr	r3, [pc, #20]	; (80082b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082a6:	3201      	adds	r2, #1
 80082a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80082aa:	4b03      	ldr	r3, [pc, #12]	; (80082b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80082ac:	681b      	ldr	r3, [r3, #0]
	}
 80082ae:	4618      	mov	r0, r3
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	20000a58 	.word	0x20000a58

080082bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082c6:	4b21      	ldr	r3, [pc, #132]	; (800834c <prvAddCurrentTaskToDelayedList+0x90>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082cc:	4b20      	ldr	r3, [pc, #128]	; (8008350 <prvAddCurrentTaskToDelayedList+0x94>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3304      	adds	r3, #4
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7fe f870 	bl	80063b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d10a      	bne.n	80082f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082e6:	4b1a      	ldr	r3, [pc, #104]	; (8008350 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4819      	ldr	r0, [pc, #100]	; (8008354 <prvAddCurrentTaskToDelayedList+0x98>)
 80082f0:	f7fe f807 	bl	8006302 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082f4:	e026      	b.n	8008344 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4413      	add	r3, r2
 80082fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082fe:	4b14      	ldr	r3, [pc, #80]	; (8008350 <prvAddCurrentTaskToDelayedList+0x94>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	429a      	cmp	r2, r3
 800830c:	d209      	bcs.n	8008322 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800830e:	4b12      	ldr	r3, [pc, #72]	; (8008358 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b0f      	ldr	r3, [pc, #60]	; (8008350 <prvAddCurrentTaskToDelayedList+0x94>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3304      	adds	r3, #4
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f7fe f814 	bl	8006348 <vListInsert>
}
 8008320:	e010      	b.n	8008344 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <prvAddCurrentTaskToDelayedList+0x94>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	3304      	adds	r3, #4
 800832c:	4619      	mov	r1, r3
 800832e:	4610      	mov	r0, r2
 8008330:	f7fe f80a 	bl	8006348 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008334:	4b0a      	ldr	r3, [pc, #40]	; (8008360 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	429a      	cmp	r2, r3
 800833c:	d202      	bcs.n	8008344 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800833e:	4a08      	ldr	r2, [pc, #32]	; (8008360 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	6013      	str	r3, [r2, #0]
}
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000f30 	.word	0x20000f30
 8008350:	20000a58 	.word	0x20000a58
 8008354:	20000f18 	.word	0x20000f18
 8008358:	20000ee8 	.word	0x20000ee8
 800835c:	20000ee4 	.word	0x20000ee4
 8008360:	20000f4c 	.word	0x20000f4c

08008364 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b08a      	sub	sp, #40	; 0x28
 8008368:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800836a:	2300      	movs	r3, #0
 800836c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800836e:	f000 facb 	bl	8008908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008372:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <xTimerCreateTimerTask+0x80>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d021      	beq.n	80083be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008382:	1d3a      	adds	r2, r7, #4
 8008384:	f107 0108 	add.w	r1, r7, #8
 8008388:	f107 030c 	add.w	r3, r7, #12
 800838c:	4618      	mov	r0, r3
 800838e:	f7fd fdbd 	bl	8005f0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008392:	6879      	ldr	r1, [r7, #4]
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	9202      	str	r2, [sp, #8]
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	2302      	movs	r3, #2
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	2300      	movs	r3, #0
 80083a2:	460a      	mov	r2, r1
 80083a4:	4910      	ldr	r1, [pc, #64]	; (80083e8 <xTimerCreateTimerTask+0x84>)
 80083a6:	4811      	ldr	r0, [pc, #68]	; (80083ec <xTimerCreateTimerTask+0x88>)
 80083a8:	f7fe fea8 	bl	80070fc <xTaskCreateStatic>
 80083ac:	4603      	mov	r3, r0
 80083ae:	4a10      	ldr	r2, [pc, #64]	; (80083f0 <xTimerCreateTimerTask+0x8c>)
 80083b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083b2:	4b0f      	ldr	r3, [pc, #60]	; (80083f0 <xTimerCreateTimerTask+0x8c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083ba:	2301      	movs	r3, #1
 80083bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10a      	bne.n	80083da <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	613b      	str	r3, [r7, #16]
}
 80083d6:	bf00      	nop
 80083d8:	e7fe      	b.n	80083d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083da:	697b      	ldr	r3, [r7, #20]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000f88 	.word	0x20000f88
 80083e8:	0800da8c 	.word	0x0800da8c
 80083ec:	08008511 	.word	0x08008511
 80083f0:	20000f8c 	.word	0x20000f8c

080083f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08a      	sub	sp, #40	; 0x28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <xTimerGenericCommand+0x2e>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	623b      	str	r3, [r7, #32]
}
 800841e:	bf00      	nop
 8008420:	e7fe      	b.n	8008420 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008422:	4b1a      	ldr	r3, [pc, #104]	; (800848c <xTimerGenericCommand+0x98>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d02a      	beq.n	8008480 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b05      	cmp	r3, #5
 800843a:	dc18      	bgt.n	800846e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800843c:	f7ff fd92 	bl	8007f64 <xTaskGetSchedulerState>
 8008440:	4603      	mov	r3, r0
 8008442:	2b02      	cmp	r3, #2
 8008444:	d109      	bne.n	800845a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008446:	4b11      	ldr	r3, [pc, #68]	; (800848c <xTimerGenericCommand+0x98>)
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	f107 0110 	add.w	r1, r7, #16
 800844e:	2300      	movs	r3, #0
 8008450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008452:	f7fe f94d 	bl	80066f0 <xQueueGenericSend>
 8008456:	6278      	str	r0, [r7, #36]	; 0x24
 8008458:	e012      	b.n	8008480 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800845a:	4b0c      	ldr	r3, [pc, #48]	; (800848c <xTimerGenericCommand+0x98>)
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f107 0110 	add.w	r1, r7, #16
 8008462:	2300      	movs	r3, #0
 8008464:	2200      	movs	r2, #0
 8008466:	f7fe f943 	bl	80066f0 <xQueueGenericSend>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24
 800846c:	e008      	b.n	8008480 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800846e:	4b07      	ldr	r3, [pc, #28]	; (800848c <xTimerGenericCommand+0x98>)
 8008470:	6818      	ldr	r0, [r3, #0]
 8008472:	f107 0110 	add.w	r1, r7, #16
 8008476:	2300      	movs	r3, #0
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	f7fe fa37 	bl	80068ec <xQueueGenericSendFromISR>
 800847e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008482:	4618      	mov	r0, r3
 8008484:	3728      	adds	r7, #40	; 0x28
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20000f88 	.word	0x20000f88

08008490 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b088      	sub	sp, #32
 8008494:	af02      	add	r7, sp, #8
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800849a:	4b1c      	ldr	r3, [pc, #112]	; (800850c <prvProcessExpiredTimer+0x7c>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68db      	ldr	r3, [r3, #12]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	3304      	adds	r3, #4
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fd ff85 	bl	80063b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d122      	bne.n	80084fc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	18d1      	adds	r1, r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	6978      	ldr	r0, [r7, #20]
 80084c4:	f000 f8c8 	bl	8008658 <prvInsertTimerInActiveList>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d016      	beq.n	80084fc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084ce:	2300      	movs	r3, #0
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	2300      	movs	r3, #0
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	2100      	movs	r1, #0
 80084d8:	6978      	ldr	r0, [r7, #20]
 80084da:	f7ff ff8b 	bl	80083f4 <xTimerGenericCommand>
 80084de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	e7fe      	b.n	80084fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	6978      	ldr	r0, [r7, #20]
 8008502:	4798      	blx	r3
}
 8008504:	bf00      	nop
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000f80 	.word	0x20000f80

08008510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f857 	bl	80085d0 <prvGetNextExpireTime>
 8008522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 f803 	bl	8008534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800852e:	f000 f8d5 	bl	80086dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008532:	e7f1      	b.n	8008518 <prvTimerTask+0x8>

08008534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800853e:	f7ff f88d 	bl	800765c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008542:	f107 0308 	add.w	r3, r7, #8
 8008546:	4618      	mov	r0, r3
 8008548:	f000 f866 	bl	8008618 <prvSampleTimeNow>
 800854c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d130      	bne.n	80085b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <prvProcessTimerOrBlockTask+0x3c>
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	429a      	cmp	r2, r3
 8008560:	d806      	bhi.n	8008570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008562:	f7ff f889 	bl	8007678 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008566:	68f9      	ldr	r1, [r7, #12]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ff91 	bl	8008490 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800856e:	e024      	b.n	80085ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d008      	beq.n	8008588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008576:	4b13      	ldr	r3, [pc, #76]	; (80085c4 <prvProcessTimerOrBlockTask+0x90>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	bf0c      	ite	eq
 8008580:	2301      	moveq	r3, #1
 8008582:	2300      	movne	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008588:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <prvProcessTimerOrBlockTask+0x94>)
 800858a:	6818      	ldr	r0, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4619      	mov	r1, r3
 8008596:	f7fe fd7d 	bl	8007094 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800859a:	f7ff f86d 	bl	8007678 <xTaskResumeAll>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085a4:	4b09      	ldr	r3, [pc, #36]	; (80085cc <prvProcessTimerOrBlockTask+0x98>)
 80085a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	f3bf 8f6f 	isb	sy
}
 80085b4:	e001      	b.n	80085ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085b6:	f7ff f85f 	bl	8007678 <xTaskResumeAll>
}
 80085ba:	bf00      	nop
 80085bc:	3710      	adds	r7, #16
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000f84 	.word	0x20000f84
 80085c8:	20000f88 	.word	0x20000f88
 80085cc:	e000ed04 	.word	0xe000ed04

080085d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085d8:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <prvGetNextExpireTime+0x44>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	461a      	mov	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d105      	bne.n	8008602 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f6:	4b07      	ldr	r3, [pc, #28]	; (8008614 <prvGetNextExpireTime+0x44>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	e001      	b.n	8008606 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008606:	68fb      	ldr	r3, [r7, #12]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	bc80      	pop	{r7}
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	20000f80 	.word	0x20000f80

08008618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008620:	f7ff f8c8 	bl	80077b4 <xTaskGetTickCount>
 8008624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008626:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <prvSampleTimeNow+0x3c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68fa      	ldr	r2, [r7, #12]
 800862c:	429a      	cmp	r2, r3
 800862e:	d205      	bcs.n	800863c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008630:	f000 f908 	bl	8008844 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e002      	b.n	8008642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008642:	4a04      	ldr	r2, [pc, #16]	; (8008654 <prvSampleTimeNow+0x3c>)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008648:	68fb      	ldr	r3, [r7, #12]
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000f90 	.word	0x20000f90

08008658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
 8008664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008666:	2300      	movs	r3, #0
 8008668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d812      	bhi.n	80086a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	429a      	cmp	r2, r3
 800868a:	d302      	bcc.n	8008692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800868c:	2301      	movs	r3, #1
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	e01b      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008692:	4b10      	ldr	r3, [pc, #64]	; (80086d4 <prvInsertTimerInActiveList+0x7c>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3304      	adds	r3, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fd fe53 	bl	8006348 <vListInsert>
 80086a2:	e012      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d206      	bcs.n	80086ba <prvInsertTimerInActiveList+0x62>
 80086ac:	68ba      	ldr	r2, [r7, #8]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d302      	bcc.n	80086ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086b4:	2301      	movs	r3, #1
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	e007      	b.n	80086ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086ba:	4b07      	ldr	r3, [pc, #28]	; (80086d8 <prvInsertTimerInActiveList+0x80>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3304      	adds	r3, #4
 80086c2:	4619      	mov	r1, r3
 80086c4:	4610      	mov	r0, r2
 80086c6:	f7fd fe3f 	bl	8006348 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000f84 	.word	0x20000f84
 80086d8:	20000f80 	.word	0x20000f80

080086dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	; 0x38
 80086e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086e2:	e09d      	b.n	8008820 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da18      	bge.n	800871c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	3304      	adds	r3, #4
 80086ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008712:	6850      	ldr	r0, [r2, #4]
 8008714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008716:	6892      	ldr	r2, [r2, #8]
 8008718:	4611      	mov	r1, r2
 800871a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	db7d      	blt.n	800881e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008728:	695b      	ldr	r3, [r3, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	3304      	adds	r3, #4
 8008732:	4618      	mov	r0, r3
 8008734:	f7fd fe40 	bl	80063b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008738:	463b      	mov	r3, r7
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff ff6c 	bl	8008618 <prvSampleTimeNow>
 8008740:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b09      	cmp	r3, #9
 8008746:	d86b      	bhi.n	8008820 <prvProcessReceivedCommands+0x144>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <prvProcessReceivedCommands+0x74>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008779 	.word	0x08008779
 8008754:	08008779 	.word	0x08008779
 8008758:	08008779 	.word	0x08008779
 800875c:	08008821 	.word	0x08008821
 8008760:	080087d5 	.word	0x080087d5
 8008764:	0800880d 	.word	0x0800880d
 8008768:	08008779 	.word	0x08008779
 800876c:	08008779 	.word	0x08008779
 8008770:	08008821 	.word	0x08008821
 8008774:	080087d5 	.word	0x080087d5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	18d1      	adds	r1, r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008786:	f7ff ff67 	bl	8008658 <prvInsertTimerInActiveList>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d047      	beq.n	8008820 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008796:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d13f      	bne.n	8008820 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087a0:	68ba      	ldr	r2, [r7, #8]
 80087a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	441a      	add	r2, r3
 80087a8:	2300      	movs	r3, #0
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	2300      	movs	r3, #0
 80087ae:	2100      	movs	r1, #0
 80087b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b2:	f7ff fe1f 	bl	80083f4 <xTimerGenericCommand>
 80087b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d130      	bne.n	8008820 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	61bb      	str	r3, [r7, #24]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	617b      	str	r3, [r7, #20]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	18d1      	adds	r1, r2, r3
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008806:	f7ff ff27 	bl	8008658 <prvInsertTimerInActiveList>
					break;
 800880a:	e009      	b.n	8008820 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008818:	f000 fb8c 	bl	8008f34 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800881c:	e000      	b.n	8008820 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800881e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008820:	4b07      	ldr	r3, [pc, #28]	; (8008840 <prvProcessReceivedCommands+0x164>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	1d39      	adds	r1, r7, #4
 8008826:	2200      	movs	r2, #0
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe f8f7 	bl	8006a1c <xQueueReceive>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	f47f af57 	bne.w	80086e4 <prvProcessReceivedCommands+0x8>
	}
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	3730      	adds	r7, #48	; 0x30
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000f88 	.word	0x20000f88

08008844 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800884a:	e045      	b.n	80088d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800884c:	4b2c      	ldr	r3, [pc, #176]	; (8008900 <prvSwitchTimerLists+0xbc>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008856:	4b2a      	ldr	r3, [pc, #168]	; (8008900 <prvSwitchTimerLists+0xbc>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd fda7 	bl	80063b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	69db      	ldr	r3, [r3, #28]
 8008876:	2b01      	cmp	r3, #1
 8008878:	d12e      	bne.n	80088d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	4413      	add	r3, r2
 8008882:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	429a      	cmp	r2, r3
 800888a:	d90e      	bls.n	80088aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008898:	4b19      	ldr	r3, [pc, #100]	; (8008900 <prvSwitchTimerLists+0xbc>)
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3304      	adds	r3, #4
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fd fd50 	bl	8006348 <vListInsert>
 80088a8:	e016      	b.n	80088d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088aa:	2300      	movs	r3, #0
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	2300      	movs	r3, #0
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	2100      	movs	r1, #0
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f7ff fd9d 	bl	80083f4 <xTimerGenericCommand>
 80088ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	603b      	str	r3, [r7, #0]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088d8:	4b09      	ldr	r3, [pc, #36]	; (8008900 <prvSwitchTimerLists+0xbc>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1b4      	bne.n	800884c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088e2:	4b07      	ldr	r3, [pc, #28]	; (8008900 <prvSwitchTimerLists+0xbc>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088e8:	4b06      	ldr	r3, [pc, #24]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a04      	ldr	r2, [pc, #16]	; (8008900 <prvSwitchTimerLists+0xbc>)
 80088ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088f0:	4a04      	ldr	r2, [pc, #16]	; (8008904 <prvSwitchTimerLists+0xc0>)
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	6013      	str	r3, [r2, #0]
}
 80088f6:	bf00      	nop
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000f80 	.word	0x20000f80
 8008904:	20000f84 	.word	0x20000f84

08008908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800890e:	f000 f94d 	bl	8008bac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d120      	bne.n	800895c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800891a:	4814      	ldr	r0, [pc, #80]	; (800896c <prvCheckForValidListAndQueue+0x64>)
 800891c:	f7fd fcc6 	bl	80062ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008920:	4813      	ldr	r0, [pc, #76]	; (8008970 <prvCheckForValidListAndQueue+0x68>)
 8008922:	f7fd fcc3 	bl	80062ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <prvCheckForValidListAndQueue+0x6c>)
 8008928:	4a10      	ldr	r2, [pc, #64]	; (800896c <prvCheckForValidListAndQueue+0x64>)
 800892a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800892c:	4b12      	ldr	r3, [pc, #72]	; (8008978 <prvCheckForValidListAndQueue+0x70>)
 800892e:	4a10      	ldr	r2, [pc, #64]	; (8008970 <prvCheckForValidListAndQueue+0x68>)
 8008930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008932:	2300      	movs	r3, #0
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	4b11      	ldr	r3, [pc, #68]	; (800897c <prvCheckForValidListAndQueue+0x74>)
 8008938:	4a11      	ldr	r2, [pc, #68]	; (8008980 <prvCheckForValidListAndQueue+0x78>)
 800893a:	2110      	movs	r1, #16
 800893c:	200a      	movs	r0, #10
 800893e:	f7fd fdcd 	bl	80064dc <xQueueGenericCreateStatic>
 8008942:	4603      	mov	r3, r0
 8008944:	4a08      	ldr	r2, [pc, #32]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 8008946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008948:	4b07      	ldr	r3, [pc, #28]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d005      	beq.n	800895c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008950:	4b05      	ldr	r3, [pc, #20]	; (8008968 <prvCheckForValidListAndQueue+0x60>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	490b      	ldr	r1, [pc, #44]	; (8008984 <prvCheckForValidListAndQueue+0x7c>)
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fb74 	bl	8007044 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800895c:	f000 f956 	bl	8008c0c <vPortExitCritical>
}
 8008960:	bf00      	nop
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000f88 	.word	0x20000f88
 800896c:	20000f58 	.word	0x20000f58
 8008970:	20000f6c 	.word	0x20000f6c
 8008974:	20000f80 	.word	0x20000f80
 8008978:	20000f84 	.word	0x20000f84
 800897c:	20001034 	.word	0x20001034
 8008980:	20000f94 	.word	0x20000f94
 8008984:	0800da94 	.word	0x0800da94

08008988 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b08a      	sub	sp, #40	; 0x28
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008996:	f06f 0301 	mvn.w	r3, #1
 800899a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <xTimerPendFunctionCallFromISR+0x3c>)
 80089aa:	6818      	ldr	r0, [r3, #0]
 80089ac:	f107 0114 	add.w	r1, r7, #20
 80089b0:	2300      	movs	r3, #0
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	f7fd ff9a 	bl	80068ec <xQueueGenericSendFromISR>
 80089b8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80089bc:	4618      	mov	r0, r3
 80089be:	3728      	adds	r7, #40	; 0x28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	20000f88 	.word	0x20000f88

080089c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3b04      	subs	r3, #4
 80089d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3b04      	subs	r3, #4
 80089e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	f023 0201 	bic.w	r2, r3, #1
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	3b04      	subs	r3, #4
 80089f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089f8:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <pxPortInitialiseStack+0x54>)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	3b14      	subs	r3, #20
 8008a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3b20      	subs	r3, #32
 8008a0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a10:	68fb      	ldr	r3, [r7, #12]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3714      	adds	r7, #20
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bc80      	pop	{r7}
 8008a1a:	4770      	bx	lr
 8008a1c:	08008a21 	.word	0x08008a21

08008a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008a26:	2300      	movs	r3, #0
 8008a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a2a:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <prvTaskExitError+0x54>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d00a      	beq.n	8008a4a <prvTaskExitError+0x2a>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	60fb      	str	r3, [r7, #12]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <prvTaskExitError+0x28>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	60bb      	str	r3, [r7, #8]
}
 8008a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a5e:	bf00      	nop
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0fc      	beq.n	8008a60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a66:	bf00      	nop
 8008a68:	bf00      	nop
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	20000014 	.word	0x20000014
	...

08008a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a80:	4b07      	ldr	r3, [pc, #28]	; (8008aa0 <pxCurrentTCBConst2>)
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	6808      	ldr	r0, [r1, #0]
 8008a86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a8a:	f380 8809 	msr	PSP, r0
 8008a8e:	f3bf 8f6f 	isb	sy
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8811 	msr	BASEPRI, r0
 8008a9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a9e:	4770      	bx	lr

08008aa0 <pxCurrentTCBConst2>:
 8008aa0:	20000a58 	.word	0x20000a58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008aa8:	4806      	ldr	r0, [pc, #24]	; (8008ac4 <prvPortStartFirstTask+0x1c>)
 8008aaa:	6800      	ldr	r0, [r0, #0]
 8008aac:	6800      	ldr	r0, [r0, #0]
 8008aae:	f380 8808 	msr	MSP, r0
 8008ab2:	b662      	cpsie	i
 8008ab4:	b661      	cpsie	f
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	df00      	svc	0
 8008ac0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008ac2:	bf00      	nop
 8008ac4:	e000ed08 	.word	0xe000ed08

08008ac8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ace:	4b32      	ldr	r3, [pc, #200]	; (8008b98 <xPortStartScheduler+0xd0>)
 8008ad0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	22ff      	movs	r2, #255	; 0xff
 8008ade:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae8:	78fb      	ldrb	r3, [r7, #3]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008af0:	b2da      	uxtb	r2, r3
 8008af2:	4b2a      	ldr	r3, [pc, #168]	; (8008b9c <xPortStartScheduler+0xd4>)
 8008af4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008af6:	4b2a      	ldr	r3, [pc, #168]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008af8:	2207      	movs	r2, #7
 8008afa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008afc:	e009      	b.n	8008b12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008afe:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	4a26      	ldr	r2, [pc, #152]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b08:	78fb      	ldrb	r3, [r7, #3]
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b1a:	2b80      	cmp	r3, #128	; 0x80
 8008b1c:	d0ef      	beq.n	8008afe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b1e:	4b20      	ldr	r3, [pc, #128]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f1c3 0307 	rsb	r3, r3, #7
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	d00a      	beq.n	8008b40 <xPortStartScheduler+0x78>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	60bb      	str	r3, [r7, #8]
}
 8008b3c:	bf00      	nop
 8008b3e:	e7fe      	b.n	8008b3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b40:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	021b      	lsls	r3, r3, #8
 8008b46:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b4a:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b52:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <xPortStartScheduler+0xd8>)
 8008b54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b5e:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <xPortStartScheduler+0xdc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a10      	ldr	r2, [pc, #64]	; (8008ba4 <xPortStartScheduler+0xdc>)
 8008b64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ba4 <xPortStartScheduler+0xdc>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a0d      	ldr	r2, [pc, #52]	; (8008ba4 <xPortStartScheduler+0xdc>)
 8008b70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b76:	f000 f8b9 	bl	8008cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b7a:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <xPortStartScheduler+0xe0>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b80:	f7ff ff92 	bl	8008aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b84:	f7fe fee2 	bl	800794c <vTaskSwitchContext>
	prvTaskExitError();
 8008b88:	f7ff ff4a 	bl	8008a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	e000e400 	.word	0xe000e400
 8008b9c:	20001084 	.word	0x20001084
 8008ba0:	20001088 	.word	0x20001088
 8008ba4:	e000ed20 	.word	0xe000ed20
 8008ba8:	20000014 	.word	0x20000014

08008bac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	607b      	str	r3, [r7, #4]
}
 8008bc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bc6:	4b0f      	ldr	r3, [pc, #60]	; (8008c04 <vPortEnterCritical+0x58>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	4a0d      	ldr	r2, [pc, #52]	; (8008c04 <vPortEnterCritical+0x58>)
 8008bce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008bd0:	4b0c      	ldr	r3, [pc, #48]	; (8008c04 <vPortEnterCritical+0x58>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d10f      	bne.n	8008bf8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <vPortEnterCritical+0x5c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	603b      	str	r3, [r7, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <vPortEnterCritical+0x4a>
	}
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bc80      	pop	{r7}
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000014 	.word	0x20000014
 8008c08:	e000ed04 	.word	0xe000ed04

08008c0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <vPortExitCritical+0x4c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <vPortExitCritical+0x24>
	__asm volatile
 8008c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c1e:	f383 8811 	msr	BASEPRI, r3
 8008c22:	f3bf 8f6f 	isb	sy
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	607b      	str	r3, [r7, #4]
}
 8008c2c:	bf00      	nop
 8008c2e:	e7fe      	b.n	8008c2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <vPortExitCritical+0x4c>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3b01      	subs	r3, #1
 8008c36:	4a08      	ldr	r2, [pc, #32]	; (8008c58 <vPortExitCritical+0x4c>)
 8008c38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c3a:	4b07      	ldr	r3, [pc, #28]	; (8008c58 <vPortExitCritical+0x4c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d105      	bne.n	8008c4e <vPortExitCritical+0x42>
 8008c42:	2300      	movs	r3, #0
 8008c44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	f383 8811 	msr	BASEPRI, r3
}
 8008c4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bc80      	pop	{r7}
 8008c56:	4770      	bx	lr
 8008c58:	20000014 	.word	0x20000014
 8008c5c:	00000000 	.word	0x00000000

08008c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c60:	f3ef 8009 	mrs	r0, PSP
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <pxCurrentTCBConst>)
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c70:	6010      	str	r0, [r2, #0]
 8008c72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008c76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c7a:	f380 8811 	msr	BASEPRI, r0
 8008c7e:	f7fe fe65 	bl	800794c <vTaskSwitchContext>
 8008c82:	f04f 0000 	mov.w	r0, #0
 8008c86:	f380 8811 	msr	BASEPRI, r0
 8008c8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6808      	ldr	r0, [r1, #0]
 8008c92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c96:	f380 8809 	msr	PSP, r0
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	4770      	bx	lr

08008ca0 <pxCurrentTCBConst>:
 8008ca0:	20000a58 	.word	0x20000a58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop

08008ca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
	__asm volatile
 8008cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb2:	f383 8811 	msr	BASEPRI, r3
 8008cb6:	f3bf 8f6f 	isb	sy
 8008cba:	f3bf 8f4f 	dsb	sy
 8008cbe:	607b      	str	r3, [r7, #4]
}
 8008cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008cc2:	f7fe fd85 	bl	80077d0 <xTaskIncrementTick>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <SysTick_Handler+0x40>)
 8008cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f383 8811 	msr	BASEPRI, r3
}
 8008cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ce0:	bf00      	nop
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	e000ed04 	.word	0xe000ed04

08008cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <vPortSetupTimerInterrupt+0x30>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cf6:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <vPortSetupTimerInterrupt+0x34>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cfc:	4b09      	ldr	r3, [pc, #36]	; (8008d24 <vPortSetupTimerInterrupt+0x38>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <vPortSetupTimerInterrupt+0x3c>)
 8008d02:	fba2 2303 	umull	r2, r3, r2, r3
 8008d06:	099b      	lsrs	r3, r3, #6
 8008d08:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <vPortSetupTimerInterrupt+0x40>)
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d0e:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <vPortSetupTimerInterrupt+0x30>)
 8008d10:	2207      	movs	r2, #7
 8008d12:	601a      	str	r2, [r3, #0]
}
 8008d14:	bf00      	nop
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr
 8008d1c:	e000e010 	.word	0xe000e010
 8008d20:	e000e018 	.word	0xe000e018
 8008d24:	20000008 	.word	0x20000008
 8008d28:	10624dd3 	.word	0x10624dd3
 8008d2c:	e000e014 	.word	0xe000e014

08008d30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d36:	f3ef 8305 	mrs	r3, IPSR
 8008d3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b0f      	cmp	r3, #15
 8008d40:	d914      	bls.n	8008d6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d42:	4a16      	ldr	r2, [pc, #88]	; (8008d9c <vPortValidateInterruptPriority+0x6c>)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d4c:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <vPortValidateInterruptPriority+0x70>)
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	7afa      	ldrb	r2, [r7, #11]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d20a      	bcs.n	8008d6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5a:	f383 8811 	msr	BASEPRI, r3
 8008d5e:	f3bf 8f6f 	isb	sy
 8008d62:	f3bf 8f4f 	dsb	sy
 8008d66:	607b      	str	r3, [r7, #4]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d6c:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <vPortValidateInterruptPriority+0x74>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d74:	4b0c      	ldr	r3, [pc, #48]	; (8008da8 <vPortValidateInterruptPriority+0x78>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d90a      	bls.n	8008d92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	603b      	str	r3, [r7, #0]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <vPortValidateInterruptPriority+0x60>
	}
 8008d92:	bf00      	nop
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc80      	pop	{r7}
 8008d9a:	4770      	bx	lr
 8008d9c:	e000e3f0 	.word	0xe000e3f0
 8008da0:	20001084 	.word	0x20001084
 8008da4:	e000ed0c 	.word	0xe000ed0c
 8008da8:	20001088 	.word	0x20001088

08008dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	; 0x28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008db8:	f7fe fc50 	bl	800765c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dbc:	4b58      	ldr	r3, [pc, #352]	; (8008f20 <pvPortMalloc+0x174>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dc4:	f000 f910 	bl	8008fe8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dc8:	4b56      	ldr	r3, [pc, #344]	; (8008f24 <pvPortMalloc+0x178>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 808e 	bne.w	8008ef2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01d      	beq.n	8008e18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ddc:	2208      	movs	r2, #8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4413      	add	r3, r2
 8008de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d014      	beq.n	8008e18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f023 0307 	bic.w	r3, r3, #7
 8008df4:	3308      	adds	r3, #8
 8008df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00a      	beq.n	8008e18 <pvPortMalloc+0x6c>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	617b      	str	r3, [r7, #20]
}
 8008e14:	bf00      	nop
 8008e16:	e7fe      	b.n	8008e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d069      	beq.n	8008ef2 <pvPortMalloc+0x146>
 8008e1e:	4b42      	ldr	r3, [pc, #264]	; (8008f28 <pvPortMalloc+0x17c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d864      	bhi.n	8008ef2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e28:	4b40      	ldr	r3, [pc, #256]	; (8008f2c <pvPortMalloc+0x180>)
 8008e2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e2c:	4b3f      	ldr	r3, [pc, #252]	; (8008f2c <pvPortMalloc+0x180>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e32:	e004      	b.n	8008e3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d903      	bls.n	8008e50 <pvPortMalloc+0xa4>
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1f1      	bne.n	8008e34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e50:	4b33      	ldr	r3, [pc, #204]	; (8008f20 <pvPortMalloc+0x174>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d04b      	beq.n	8008ef2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2208      	movs	r2, #8
 8008e60:	4413      	add	r3, r2
 8008e62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	1ad2      	subs	r2, r2, r3
 8008e74:	2308      	movs	r3, #8
 8008e76:	005b      	lsls	r3, r3, #1
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d91f      	bls.n	8008ebc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4413      	add	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <pvPortMalloc+0xf8>
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	613b      	str	r3, [r7, #16]
}
 8008ea0:	bf00      	nop
 8008ea2:	e7fe      	b.n	8008ea2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eb6:	69b8      	ldr	r0, [r7, #24]
 8008eb8:	f000 f8f8 	bl	80090ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ebc:	4b1a      	ldr	r3, [pc, #104]	; (8008f28 <pvPortMalloc+0x17c>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	4a18      	ldr	r2, [pc, #96]	; (8008f28 <pvPortMalloc+0x17c>)
 8008ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eca:	4b17      	ldr	r3, [pc, #92]	; (8008f28 <pvPortMalloc+0x17c>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b18      	ldr	r3, [pc, #96]	; (8008f30 <pvPortMalloc+0x184>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d203      	bcs.n	8008ede <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <pvPortMalloc+0x17c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <pvPortMalloc+0x184>)
 8008edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <pvPortMalloc+0x178>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	431a      	orrs	r2, r3
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ef2:	f7fe fbc1 	bl	8007678 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <pvPortMalloc+0x16a>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60fb      	str	r3, [r7, #12]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <pvPortMalloc+0x168>
	return pvReturn;
 8008f16:	69fb      	ldr	r3, [r7, #28]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3728      	adds	r7, #40	; 0x28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	20002894 	.word	0x20002894
 8008f24:	200028a0 	.word	0x200028a0
 8008f28:	20002898 	.word	0x20002898
 8008f2c:	2000288c 	.word	0x2000288c
 8008f30:	2000289c 	.word	0x2000289c

08008f34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d048      	beq.n	8008fd8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f46:	2308      	movs	r3, #8
 8008f48:	425b      	negs	r3, r3
 8008f4a:	697a      	ldr	r2, [r7, #20]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	685a      	ldr	r2, [r3, #4]
 8008f58:	4b21      	ldr	r3, [pc, #132]	; (8008fe0 <vPortFree+0xac>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d10a      	bne.n	8008f78 <vPortFree+0x44>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	60fb      	str	r3, [r7, #12]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00a      	beq.n	8008f96 <vPortFree+0x62>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60bb      	str	r3, [r7, #8]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	4b11      	ldr	r3, [pc, #68]	; (8008fe0 <vPortFree+0xac>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d019      	beq.n	8008fd8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d115      	bne.n	8008fd8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <vPortFree+0xac>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	43db      	mvns	r3, r3
 8008fb6:	401a      	ands	r2, r3
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fbc:	f7fe fb4e 	bl	800765c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <vPortFree+0xb0>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4413      	add	r3, r2
 8008fca:	4a06      	ldr	r2, [pc, #24]	; (8008fe4 <vPortFree+0xb0>)
 8008fcc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fce:	6938      	ldr	r0, [r7, #16]
 8008fd0:	f000 f86c 	bl	80090ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fd4:	f7fe fb50 	bl	8007678 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fd8:	bf00      	nop
 8008fda:	3718      	adds	r7, #24
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	200028a0 	.word	0x200028a0
 8008fe4:	20002898 	.word	0x20002898

08008fe8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008ff2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ff4:	4b27      	ldr	r3, [pc, #156]	; (8009094 <prvHeapInit+0xac>)
 8008ff6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00c      	beq.n	800901c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	3307      	adds	r3, #7
 8009006:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0307 	bic.w	r3, r3, #7
 800900e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1ad3      	subs	r3, r2, r3
 8009016:	4a1f      	ldr	r2, [pc, #124]	; (8009094 <prvHeapInit+0xac>)
 8009018:	4413      	add	r3, r2
 800901a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009020:	4a1d      	ldr	r2, [pc, #116]	; (8009098 <prvHeapInit+0xb0>)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009026:	4b1c      	ldr	r3, [pc, #112]	; (8009098 <prvHeapInit+0xb0>)
 8009028:	2200      	movs	r2, #0
 800902a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	68ba      	ldr	r2, [r7, #8]
 8009030:	4413      	add	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009034:	2208      	movs	r2, #8
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1a9b      	subs	r3, r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f023 0307 	bic.w	r3, r3, #7
 8009042:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	4a15      	ldr	r2, [pc, #84]	; (800909c <prvHeapInit+0xb4>)
 8009048:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800904a:	4b14      	ldr	r3, [pc, #80]	; (800909c <prvHeapInit+0xb4>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2200      	movs	r2, #0
 8009050:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009052:	4b12      	ldr	r3, [pc, #72]	; (800909c <prvHeapInit+0xb4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	2200      	movs	r2, #0
 8009058:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	1ad2      	subs	r2, r2, r3
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <prvHeapInit+0xb4>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	4a0a      	ldr	r2, [pc, #40]	; (80090a0 <prvHeapInit+0xb8>)
 8009076:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <prvHeapInit+0xbc>)
 800907e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009080:	4b09      	ldr	r3, [pc, #36]	; (80090a8 <prvHeapInit+0xc0>)
 8009082:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009086:	601a      	str	r2, [r3, #0]
}
 8009088:	bf00      	nop
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	bc80      	pop	{r7}
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	2000108c 	.word	0x2000108c
 8009098:	2000288c 	.word	0x2000288c
 800909c:	20002894 	.word	0x20002894
 80090a0:	2000289c 	.word	0x2000289c
 80090a4:	20002898 	.word	0x20002898
 80090a8:	200028a0 	.word	0x200028a0

080090ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090b4:	4b27      	ldr	r3, [pc, #156]	; (8009154 <prvInsertBlockIntoFreeList+0xa8>)
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	e002      	b.n	80090c0 <prvInsertBlockIntoFreeList+0x14>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d8f7      	bhi.n	80090ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	4413      	add	r3, r2
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d108      	bne.n	80090ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	441a      	add	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	441a      	add	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d118      	bne.n	8009134 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	4b14      	ldr	r3, [pc, #80]	; (8009158 <prvInsertBlockIntoFreeList+0xac>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d00d      	beq.n	800912a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	441a      	add	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	e008      	b.n	800913c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800912a:	4b0b      	ldr	r3, [pc, #44]	; (8009158 <prvInsertBlockIntoFreeList+0xac>)
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	e003      	b.n	800913c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	429a      	cmp	r2, r3
 8009142:	d002      	beq.n	800914a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800914a:	bf00      	nop
 800914c:	3714      	adds	r7, #20
 800914e:	46bd      	mov	sp, r7
 8009150:	bc80      	pop	{r7}
 8009152:	4770      	bx	lr
 8009154:	2000288c 	.word	0x2000288c
 8009158:	20002894 	.word	0x20002894

0800915c <atof>:
 800915c:	2100      	movs	r1, #0
 800915e:	f000 bff3 	b.w	800a148 <strtod>
	...

08009164 <calloc>:
 8009164:	4b02      	ldr	r3, [pc, #8]	; (8009170 <calloc+0xc>)
 8009166:	460a      	mov	r2, r1
 8009168:	4601      	mov	r1, r0
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	f000 b852 	b.w	8009214 <_calloc_r>
 8009170:	20000018 	.word	0x20000018

08009174 <__errno>:
 8009174:	4b01      	ldr	r3, [pc, #4]	; (800917c <__errno+0x8>)
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	20000018 	.word	0x20000018

08009180 <__libc_init_array>:
 8009180:	b570      	push	{r4, r5, r6, lr}
 8009182:	2600      	movs	r6, #0
 8009184:	4d0c      	ldr	r5, [pc, #48]	; (80091b8 <__libc_init_array+0x38>)
 8009186:	4c0d      	ldr	r4, [pc, #52]	; (80091bc <__libc_init_array+0x3c>)
 8009188:	1b64      	subs	r4, r4, r5
 800918a:	10a4      	asrs	r4, r4, #2
 800918c:	42a6      	cmp	r6, r4
 800918e:	d109      	bne.n	80091a4 <__libc_init_array+0x24>
 8009190:	f004 fc1c 	bl	800d9cc <_init>
 8009194:	2600      	movs	r6, #0
 8009196:	4d0a      	ldr	r5, [pc, #40]	; (80091c0 <__libc_init_array+0x40>)
 8009198:	4c0a      	ldr	r4, [pc, #40]	; (80091c4 <__libc_init_array+0x44>)
 800919a:	1b64      	subs	r4, r4, r5
 800919c:	10a4      	asrs	r4, r4, #2
 800919e:	42a6      	cmp	r6, r4
 80091a0:	d105      	bne.n	80091ae <__libc_init_array+0x2e>
 80091a2:	bd70      	pop	{r4, r5, r6, pc}
 80091a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091a8:	4798      	blx	r3
 80091aa:	3601      	adds	r6, #1
 80091ac:	e7ee      	b.n	800918c <__libc_init_array+0xc>
 80091ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b2:	4798      	blx	r3
 80091b4:	3601      	adds	r6, #1
 80091b6:	e7f2      	b.n	800919e <__libc_init_array+0x1e>
 80091b8:	0800df38 	.word	0x0800df38
 80091bc:	0800df38 	.word	0x0800df38
 80091c0:	0800df38 	.word	0x0800df38
 80091c4:	0800df3c 	.word	0x0800df3c

080091c8 <malloc>:
 80091c8:	4b02      	ldr	r3, [pc, #8]	; (80091d4 <malloc+0xc>)
 80091ca:	4601      	mov	r1, r0
 80091cc:	6818      	ldr	r0, [r3, #0]
 80091ce:	f000 b89d 	b.w	800930c <_malloc_r>
 80091d2:	bf00      	nop
 80091d4:	20000018 	.word	0x20000018

080091d8 <free>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <free+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f000 b82d 	b.w	800923c <_free_r>
 80091e2:	bf00      	nop
 80091e4:	20000018 	.word	0x20000018

080091e8 <memcpy>:
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	4770      	bx	lr
 80091f4:	b510      	push	{r4, lr}
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	4291      	cmp	r1, r2
 80091fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009200:	d1f9      	bne.n	80091f6 <memcpy+0xe>
 8009202:	bd10      	pop	{r4, pc}

08009204 <memset>:
 8009204:	4603      	mov	r3, r0
 8009206:	4402      	add	r2, r0
 8009208:	4293      	cmp	r3, r2
 800920a:	d100      	bne.n	800920e <memset+0xa>
 800920c:	4770      	bx	lr
 800920e:	f803 1b01 	strb.w	r1, [r3], #1
 8009212:	e7f9      	b.n	8009208 <memset+0x4>

08009214 <_calloc_r>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	fba1 5402 	umull	r5, r4, r1, r2
 800921a:	b934      	cbnz	r4, 800922a <_calloc_r+0x16>
 800921c:	4629      	mov	r1, r5
 800921e:	f000 f875 	bl	800930c <_malloc_r>
 8009222:	4606      	mov	r6, r0
 8009224:	b928      	cbnz	r0, 8009232 <_calloc_r+0x1e>
 8009226:	4630      	mov	r0, r6
 8009228:	bd70      	pop	{r4, r5, r6, pc}
 800922a:	220c      	movs	r2, #12
 800922c:	2600      	movs	r6, #0
 800922e:	6002      	str	r2, [r0, #0]
 8009230:	e7f9      	b.n	8009226 <_calloc_r+0x12>
 8009232:	462a      	mov	r2, r5
 8009234:	4621      	mov	r1, r4
 8009236:	f7ff ffe5 	bl	8009204 <memset>
 800923a:	e7f4      	b.n	8009226 <_calloc_r+0x12>

0800923c <_free_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4605      	mov	r5, r0
 8009240:	2900      	cmp	r1, #0
 8009242:	d040      	beq.n	80092c6 <_free_r+0x8a>
 8009244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009248:	1f0c      	subs	r4, r1, #4
 800924a:	2b00      	cmp	r3, #0
 800924c:	bfb8      	it	lt
 800924e:	18e4      	addlt	r4, r4, r3
 8009250:	f001 fb32 	bl	800a8b8 <__malloc_lock>
 8009254:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <_free_r+0x8c>)
 8009256:	6813      	ldr	r3, [r2, #0]
 8009258:	b933      	cbnz	r3, 8009268 <_free_r+0x2c>
 800925a:	6063      	str	r3, [r4, #4]
 800925c:	6014      	str	r4, [r2, #0]
 800925e:	4628      	mov	r0, r5
 8009260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009264:	f001 bb2e 	b.w	800a8c4 <__malloc_unlock>
 8009268:	42a3      	cmp	r3, r4
 800926a:	d908      	bls.n	800927e <_free_r+0x42>
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	1821      	adds	r1, r4, r0
 8009270:	428b      	cmp	r3, r1
 8009272:	bf01      	itttt	eq
 8009274:	6819      	ldreq	r1, [r3, #0]
 8009276:	685b      	ldreq	r3, [r3, #4]
 8009278:	1809      	addeq	r1, r1, r0
 800927a:	6021      	streq	r1, [r4, #0]
 800927c:	e7ed      	b.n	800925a <_free_r+0x1e>
 800927e:	461a      	mov	r2, r3
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	b10b      	cbz	r3, 8009288 <_free_r+0x4c>
 8009284:	42a3      	cmp	r3, r4
 8009286:	d9fa      	bls.n	800927e <_free_r+0x42>
 8009288:	6811      	ldr	r1, [r2, #0]
 800928a:	1850      	adds	r0, r2, r1
 800928c:	42a0      	cmp	r0, r4
 800928e:	d10b      	bne.n	80092a8 <_free_r+0x6c>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	4401      	add	r1, r0
 8009294:	1850      	adds	r0, r2, r1
 8009296:	4283      	cmp	r3, r0
 8009298:	6011      	str	r1, [r2, #0]
 800929a:	d1e0      	bne.n	800925e <_free_r+0x22>
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	4401      	add	r1, r0
 80092a2:	6011      	str	r1, [r2, #0]
 80092a4:	6053      	str	r3, [r2, #4]
 80092a6:	e7da      	b.n	800925e <_free_r+0x22>
 80092a8:	d902      	bls.n	80092b0 <_free_r+0x74>
 80092aa:	230c      	movs	r3, #12
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	e7d6      	b.n	800925e <_free_r+0x22>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	1821      	adds	r1, r4, r0
 80092b4:	428b      	cmp	r3, r1
 80092b6:	bf01      	itttt	eq
 80092b8:	6819      	ldreq	r1, [r3, #0]
 80092ba:	685b      	ldreq	r3, [r3, #4]
 80092bc:	1809      	addeq	r1, r1, r0
 80092be:	6021      	streq	r1, [r4, #0]
 80092c0:	6063      	str	r3, [r4, #4]
 80092c2:	6054      	str	r4, [r2, #4]
 80092c4:	e7cb      	b.n	800925e <_free_r+0x22>
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	200028a4 	.word	0x200028a4

080092cc <sbrk_aligned>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	4e0e      	ldr	r6, [pc, #56]	; (8009308 <sbrk_aligned+0x3c>)
 80092d0:	460c      	mov	r4, r1
 80092d2:	6831      	ldr	r1, [r6, #0]
 80092d4:	4605      	mov	r5, r0
 80092d6:	b911      	cbnz	r1, 80092de <sbrk_aligned+0x12>
 80092d8:	f000 f88c 	bl	80093f4 <_sbrk_r>
 80092dc:	6030      	str	r0, [r6, #0]
 80092de:	4621      	mov	r1, r4
 80092e0:	4628      	mov	r0, r5
 80092e2:	f000 f887 	bl	80093f4 <_sbrk_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d00a      	beq.n	8009300 <sbrk_aligned+0x34>
 80092ea:	1cc4      	adds	r4, r0, #3
 80092ec:	f024 0403 	bic.w	r4, r4, #3
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d007      	beq.n	8009304 <sbrk_aligned+0x38>
 80092f4:	1a21      	subs	r1, r4, r0
 80092f6:	4628      	mov	r0, r5
 80092f8:	f000 f87c 	bl	80093f4 <_sbrk_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d101      	bne.n	8009304 <sbrk_aligned+0x38>
 8009300:	f04f 34ff 	mov.w	r4, #4294967295
 8009304:	4620      	mov	r0, r4
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	200028a8 	.word	0x200028a8

0800930c <_malloc_r>:
 800930c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009310:	1ccd      	adds	r5, r1, #3
 8009312:	f025 0503 	bic.w	r5, r5, #3
 8009316:	3508      	adds	r5, #8
 8009318:	2d0c      	cmp	r5, #12
 800931a:	bf38      	it	cc
 800931c:	250c      	movcc	r5, #12
 800931e:	2d00      	cmp	r5, #0
 8009320:	4607      	mov	r7, r0
 8009322:	db01      	blt.n	8009328 <_malloc_r+0x1c>
 8009324:	42a9      	cmp	r1, r5
 8009326:	d905      	bls.n	8009334 <_malloc_r+0x28>
 8009328:	230c      	movs	r3, #12
 800932a:	2600      	movs	r6, #0
 800932c:	603b      	str	r3, [r7, #0]
 800932e:	4630      	mov	r0, r6
 8009330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009334:	4e2e      	ldr	r6, [pc, #184]	; (80093f0 <_malloc_r+0xe4>)
 8009336:	f001 fabf 	bl	800a8b8 <__malloc_lock>
 800933a:	6833      	ldr	r3, [r6, #0]
 800933c:	461c      	mov	r4, r3
 800933e:	bb34      	cbnz	r4, 800938e <_malloc_r+0x82>
 8009340:	4629      	mov	r1, r5
 8009342:	4638      	mov	r0, r7
 8009344:	f7ff ffc2 	bl	80092cc <sbrk_aligned>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	4604      	mov	r4, r0
 800934c:	d14d      	bne.n	80093ea <_malloc_r+0xde>
 800934e:	6834      	ldr	r4, [r6, #0]
 8009350:	4626      	mov	r6, r4
 8009352:	2e00      	cmp	r6, #0
 8009354:	d140      	bne.n	80093d8 <_malloc_r+0xcc>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	4631      	mov	r1, r6
 800935a:	4638      	mov	r0, r7
 800935c:	eb04 0803 	add.w	r8, r4, r3
 8009360:	f000 f848 	bl	80093f4 <_sbrk_r>
 8009364:	4580      	cmp	r8, r0
 8009366:	d13a      	bne.n	80093de <_malloc_r+0xd2>
 8009368:	6821      	ldr	r1, [r4, #0]
 800936a:	3503      	adds	r5, #3
 800936c:	1a6d      	subs	r5, r5, r1
 800936e:	f025 0503 	bic.w	r5, r5, #3
 8009372:	3508      	adds	r5, #8
 8009374:	2d0c      	cmp	r5, #12
 8009376:	bf38      	it	cc
 8009378:	250c      	movcc	r5, #12
 800937a:	4638      	mov	r0, r7
 800937c:	4629      	mov	r1, r5
 800937e:	f7ff ffa5 	bl	80092cc <sbrk_aligned>
 8009382:	3001      	adds	r0, #1
 8009384:	d02b      	beq.n	80093de <_malloc_r+0xd2>
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	442b      	add	r3, r5
 800938a:	6023      	str	r3, [r4, #0]
 800938c:	e00e      	b.n	80093ac <_malloc_r+0xa0>
 800938e:	6822      	ldr	r2, [r4, #0]
 8009390:	1b52      	subs	r2, r2, r5
 8009392:	d41e      	bmi.n	80093d2 <_malloc_r+0xc6>
 8009394:	2a0b      	cmp	r2, #11
 8009396:	d916      	bls.n	80093c6 <_malloc_r+0xba>
 8009398:	1961      	adds	r1, r4, r5
 800939a:	42a3      	cmp	r3, r4
 800939c:	6025      	str	r5, [r4, #0]
 800939e:	bf18      	it	ne
 80093a0:	6059      	strne	r1, [r3, #4]
 80093a2:	6863      	ldr	r3, [r4, #4]
 80093a4:	bf08      	it	eq
 80093a6:	6031      	streq	r1, [r6, #0]
 80093a8:	5162      	str	r2, [r4, r5]
 80093aa:	604b      	str	r3, [r1, #4]
 80093ac:	4638      	mov	r0, r7
 80093ae:	f104 060b 	add.w	r6, r4, #11
 80093b2:	f001 fa87 	bl	800a8c4 <__malloc_unlock>
 80093b6:	f026 0607 	bic.w	r6, r6, #7
 80093ba:	1d23      	adds	r3, r4, #4
 80093bc:	1af2      	subs	r2, r6, r3
 80093be:	d0b6      	beq.n	800932e <_malloc_r+0x22>
 80093c0:	1b9b      	subs	r3, r3, r6
 80093c2:	50a3      	str	r3, [r4, r2]
 80093c4:	e7b3      	b.n	800932e <_malloc_r+0x22>
 80093c6:	6862      	ldr	r2, [r4, #4]
 80093c8:	42a3      	cmp	r3, r4
 80093ca:	bf0c      	ite	eq
 80093cc:	6032      	streq	r2, [r6, #0]
 80093ce:	605a      	strne	r2, [r3, #4]
 80093d0:	e7ec      	b.n	80093ac <_malloc_r+0xa0>
 80093d2:	4623      	mov	r3, r4
 80093d4:	6864      	ldr	r4, [r4, #4]
 80093d6:	e7b2      	b.n	800933e <_malloc_r+0x32>
 80093d8:	4634      	mov	r4, r6
 80093da:	6876      	ldr	r6, [r6, #4]
 80093dc:	e7b9      	b.n	8009352 <_malloc_r+0x46>
 80093de:	230c      	movs	r3, #12
 80093e0:	4638      	mov	r0, r7
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	f001 fa6e 	bl	800a8c4 <__malloc_unlock>
 80093e8:	e7a1      	b.n	800932e <_malloc_r+0x22>
 80093ea:	6025      	str	r5, [r4, #0]
 80093ec:	e7de      	b.n	80093ac <_malloc_r+0xa0>
 80093ee:	bf00      	nop
 80093f0:	200028a4 	.word	0x200028a4

080093f4 <_sbrk_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	2300      	movs	r3, #0
 80093f8:	4d05      	ldr	r5, [pc, #20]	; (8009410 <_sbrk_r+0x1c>)
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f8 ff86 	bl	8002310 <_sbrk>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_sbrk_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_sbrk_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	200028ac 	.word	0x200028ac

08009414 <siprintf>:
 8009414:	b40e      	push	{r1, r2, r3}
 8009416:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800941a:	b500      	push	{lr}
 800941c:	b09c      	sub	sp, #112	; 0x70
 800941e:	ab1d      	add	r3, sp, #116	; 0x74
 8009420:	9002      	str	r0, [sp, #8]
 8009422:	9006      	str	r0, [sp, #24]
 8009424:	9107      	str	r1, [sp, #28]
 8009426:	9104      	str	r1, [sp, #16]
 8009428:	4808      	ldr	r0, [pc, #32]	; (800944c <siprintf+0x38>)
 800942a:	4909      	ldr	r1, [pc, #36]	; (8009450 <siprintf+0x3c>)
 800942c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009430:	9105      	str	r1, [sp, #20]
 8009432:	6800      	ldr	r0, [r0, #0]
 8009434:	a902      	add	r1, sp, #8
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	f001 ff5e 	bl	800b2f8 <_svfiprintf_r>
 800943c:	2200      	movs	r2, #0
 800943e:	9b02      	ldr	r3, [sp, #8]
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	b01c      	add	sp, #112	; 0x70
 8009444:	f85d eb04 	ldr.w	lr, [sp], #4
 8009448:	b003      	add	sp, #12
 800944a:	4770      	bx	lr
 800944c:	20000018 	.word	0x20000018
 8009450:	ffff0208 	.word	0xffff0208

08009454 <siscanf>:
 8009454:	b40e      	push	{r1, r2, r3}
 8009456:	f44f 7201 	mov.w	r2, #516	; 0x204
 800945a:	b530      	push	{r4, r5, lr}
 800945c:	b09c      	sub	sp, #112	; 0x70
 800945e:	ac1f      	add	r4, sp, #124	; 0x7c
 8009460:	f854 5b04 	ldr.w	r5, [r4], #4
 8009464:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009468:	9002      	str	r0, [sp, #8]
 800946a:	9006      	str	r0, [sp, #24]
 800946c:	f7f6 fee0 	bl	8000230 <strlen>
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <siscanf+0x4c>)
 8009472:	9003      	str	r0, [sp, #12]
 8009474:	930b      	str	r3, [sp, #44]	; 0x2c
 8009476:	2300      	movs	r3, #0
 8009478:	930f      	str	r3, [sp, #60]	; 0x3c
 800947a:	9314      	str	r3, [sp, #80]	; 0x50
 800947c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009480:	9007      	str	r0, [sp, #28]
 8009482:	4808      	ldr	r0, [pc, #32]	; (80094a4 <siscanf+0x50>)
 8009484:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009488:	462a      	mov	r2, r5
 800948a:	4623      	mov	r3, r4
 800948c:	a902      	add	r1, sp, #8
 800948e:	6800      	ldr	r0, [r0, #0]
 8009490:	9401      	str	r4, [sp, #4]
 8009492:	f002 f88b 	bl	800b5ac <__ssvfiscanf_r>
 8009496:	b01c      	add	sp, #112	; 0x70
 8009498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800949c:	b003      	add	sp, #12
 800949e:	4770      	bx	lr
 80094a0:	080094cb 	.word	0x080094cb
 80094a4:	20000018 	.word	0x20000018

080094a8 <__sread>:
 80094a8:	b510      	push	{r4, lr}
 80094aa:	460c      	mov	r4, r1
 80094ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b0:	f002 fcde 	bl	800be70 <_read_r>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	bfab      	itete	ge
 80094b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ba:	89a3      	ldrhlt	r3, [r4, #12]
 80094bc:	181b      	addge	r3, r3, r0
 80094be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094c2:	bfac      	ite	ge
 80094c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80094c6:	81a3      	strhlt	r3, [r4, #12]
 80094c8:	bd10      	pop	{r4, pc}

080094ca <__seofread>:
 80094ca:	2000      	movs	r0, #0
 80094cc:	4770      	bx	lr

080094ce <__swrite>:
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	461f      	mov	r7, r3
 80094d4:	898b      	ldrh	r3, [r1, #12]
 80094d6:	4605      	mov	r5, r0
 80094d8:	05db      	lsls	r3, r3, #23
 80094da:	460c      	mov	r4, r1
 80094dc:	4616      	mov	r6, r2
 80094de:	d505      	bpl.n	80094ec <__swrite+0x1e>
 80094e0:	2302      	movs	r3, #2
 80094e2:	2200      	movs	r2, #0
 80094e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e8:	f001 f9c2 	bl	800a870 <_lseek_r>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	4632      	mov	r2, r6
 80094f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f4:	81a3      	strh	r3, [r4, #12]
 80094f6:	4628      	mov	r0, r5
 80094f8:	463b      	mov	r3, r7
 80094fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	f000 be2d 	b.w	800a160 <_write_r>

08009506 <__sseek>:
 8009506:	b510      	push	{r4, lr}
 8009508:	460c      	mov	r4, r1
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	f001 f9af 	bl	800a870 <_lseek_r>
 8009512:	1c43      	adds	r3, r0, #1
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	bf15      	itete	ne
 8009518:	6560      	strne	r0, [r4, #84]	; 0x54
 800951a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800951e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009522:	81a3      	strheq	r3, [r4, #12]
 8009524:	bf18      	it	ne
 8009526:	81a3      	strhne	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__sclose>:
 800952a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952e:	f000 be29 	b.w	800a184 <_close_r>

08009532 <sulp>:
 8009532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009536:	460f      	mov	r7, r1
 8009538:	4690      	mov	r8, r2
 800953a:	f001 fd39 	bl	800afb0 <__ulp>
 800953e:	4604      	mov	r4, r0
 8009540:	460d      	mov	r5, r1
 8009542:	f1b8 0f00 	cmp.w	r8, #0
 8009546:	d011      	beq.n	800956c <sulp+0x3a>
 8009548:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800954c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009550:	2b00      	cmp	r3, #0
 8009552:	dd0b      	ble.n	800956c <sulp+0x3a>
 8009554:	2400      	movs	r4, #0
 8009556:	051b      	lsls	r3, r3, #20
 8009558:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800955c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009560:	4622      	mov	r2, r4
 8009562:	462b      	mov	r3, r5
 8009564:	f7f7 f828 	bl	80005b8 <__aeabi_dmul>
 8009568:	4604      	mov	r4, r0
 800956a:	460d      	mov	r5, r1
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009574:	0000      	movs	r0, r0
	...

08009578 <_strtod_l>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	469b      	mov	fp, r3
 800957e:	2300      	movs	r3, #0
 8009580:	b09f      	sub	sp, #124	; 0x7c
 8009582:	931a      	str	r3, [sp, #104]	; 0x68
 8009584:	4b9e      	ldr	r3, [pc, #632]	; (8009800 <_strtod_l+0x288>)
 8009586:	4682      	mov	sl, r0
 8009588:	681f      	ldr	r7, [r3, #0]
 800958a:	460e      	mov	r6, r1
 800958c:	4638      	mov	r0, r7
 800958e:	9215      	str	r2, [sp, #84]	; 0x54
 8009590:	f7f6 fe4e 	bl	8000230 <strlen>
 8009594:	f04f 0800 	mov.w	r8, #0
 8009598:	4604      	mov	r4, r0
 800959a:	f04f 0900 	mov.w	r9, #0
 800959e:	9619      	str	r6, [sp, #100]	; 0x64
 80095a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095a2:	781a      	ldrb	r2, [r3, #0]
 80095a4:	2a2b      	cmp	r2, #43	; 0x2b
 80095a6:	d04c      	beq.n	8009642 <_strtod_l+0xca>
 80095a8:	d83a      	bhi.n	8009620 <_strtod_l+0xa8>
 80095aa:	2a0d      	cmp	r2, #13
 80095ac:	d833      	bhi.n	8009616 <_strtod_l+0x9e>
 80095ae:	2a08      	cmp	r2, #8
 80095b0:	d833      	bhi.n	800961a <_strtod_l+0xa2>
 80095b2:	2a00      	cmp	r2, #0
 80095b4:	d03d      	beq.n	8009632 <_strtod_l+0xba>
 80095b6:	2300      	movs	r3, #0
 80095b8:	930a      	str	r3, [sp, #40]	; 0x28
 80095ba:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80095bc:	782b      	ldrb	r3, [r5, #0]
 80095be:	2b30      	cmp	r3, #48	; 0x30
 80095c0:	f040 80aa 	bne.w	8009718 <_strtod_l+0x1a0>
 80095c4:	786b      	ldrb	r3, [r5, #1]
 80095c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095ca:	2b58      	cmp	r3, #88	; 0x58
 80095cc:	d166      	bne.n	800969c <_strtod_l+0x124>
 80095ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095d0:	4650      	mov	r0, sl
 80095d2:	9301      	str	r3, [sp, #4]
 80095d4:	ab1a      	add	r3, sp, #104	; 0x68
 80095d6:	9300      	str	r3, [sp, #0]
 80095d8:	4a8a      	ldr	r2, [pc, #552]	; (8009804 <_strtod_l+0x28c>)
 80095da:	f8cd b008 	str.w	fp, [sp, #8]
 80095de:	ab1b      	add	r3, sp, #108	; 0x6c
 80095e0:	a919      	add	r1, sp, #100	; 0x64
 80095e2:	f000 fe47 	bl	800a274 <__gethex>
 80095e6:	f010 0607 	ands.w	r6, r0, #7
 80095ea:	4604      	mov	r4, r0
 80095ec:	d005      	beq.n	80095fa <_strtod_l+0x82>
 80095ee:	2e06      	cmp	r6, #6
 80095f0:	d129      	bne.n	8009646 <_strtod_l+0xce>
 80095f2:	2300      	movs	r3, #0
 80095f4:	3501      	adds	r5, #1
 80095f6:	9519      	str	r5, [sp, #100]	; 0x64
 80095f8:	930a      	str	r3, [sp, #40]	; 0x28
 80095fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f040 858a 	bne.w	800a116 <_strtod_l+0xb9e>
 8009602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009604:	b1d3      	cbz	r3, 800963c <_strtod_l+0xc4>
 8009606:	4642      	mov	r2, r8
 8009608:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800960c:	4610      	mov	r0, r2
 800960e:	4619      	mov	r1, r3
 8009610:	b01f      	add	sp, #124	; 0x7c
 8009612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009616:	2a20      	cmp	r2, #32
 8009618:	d1cd      	bne.n	80095b6 <_strtod_l+0x3e>
 800961a:	3301      	adds	r3, #1
 800961c:	9319      	str	r3, [sp, #100]	; 0x64
 800961e:	e7bf      	b.n	80095a0 <_strtod_l+0x28>
 8009620:	2a2d      	cmp	r2, #45	; 0x2d
 8009622:	d1c8      	bne.n	80095b6 <_strtod_l+0x3e>
 8009624:	2201      	movs	r2, #1
 8009626:	920a      	str	r2, [sp, #40]	; 0x28
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	9219      	str	r2, [sp, #100]	; 0x64
 800962c:	785b      	ldrb	r3, [r3, #1]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1c3      	bne.n	80095ba <_strtod_l+0x42>
 8009632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009634:	9619      	str	r6, [sp, #100]	; 0x64
 8009636:	2b00      	cmp	r3, #0
 8009638:	f040 856b 	bne.w	800a112 <_strtod_l+0xb9a>
 800963c:	4642      	mov	r2, r8
 800963e:	464b      	mov	r3, r9
 8009640:	e7e4      	b.n	800960c <_strtod_l+0x94>
 8009642:	2200      	movs	r2, #0
 8009644:	e7ef      	b.n	8009626 <_strtod_l+0xae>
 8009646:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009648:	b13a      	cbz	r2, 800965a <_strtod_l+0xe2>
 800964a:	2135      	movs	r1, #53	; 0x35
 800964c:	a81c      	add	r0, sp, #112	; 0x70
 800964e:	f001 fdb3 	bl	800b1b8 <__copybits>
 8009652:	4650      	mov	r0, sl
 8009654:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009656:	f001 f97b 	bl	800a950 <_Bfree>
 800965a:	3e01      	subs	r6, #1
 800965c:	2e04      	cmp	r6, #4
 800965e:	d806      	bhi.n	800966e <_strtod_l+0xf6>
 8009660:	e8df f006 	tbb	[pc, r6]
 8009664:	1714030a 	.word	0x1714030a
 8009668:	0a          	.byte	0x0a
 8009669:	00          	.byte	0x00
 800966a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800966e:	0721      	lsls	r1, r4, #28
 8009670:	d5c3      	bpl.n	80095fa <_strtod_l+0x82>
 8009672:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009676:	e7c0      	b.n	80095fa <_strtod_l+0x82>
 8009678:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800967a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800967e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009682:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009686:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800968a:	e7f0      	b.n	800966e <_strtod_l+0xf6>
 800968c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009808 <_strtod_l+0x290>
 8009690:	e7ed      	b.n	800966e <_strtod_l+0xf6>
 8009692:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009696:	f04f 38ff 	mov.w	r8, #4294967295
 800969a:	e7e8      	b.n	800966e <_strtod_l+0xf6>
 800969c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	9219      	str	r2, [sp, #100]	; 0x64
 80096a2:	785b      	ldrb	r3, [r3, #1]
 80096a4:	2b30      	cmp	r3, #48	; 0x30
 80096a6:	d0f9      	beq.n	800969c <_strtod_l+0x124>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d0a6      	beq.n	80095fa <_strtod_l+0x82>
 80096ac:	2301      	movs	r3, #1
 80096ae:	9307      	str	r3, [sp, #28]
 80096b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80096b2:	220a      	movs	r2, #10
 80096b4:	9308      	str	r3, [sp, #32]
 80096b6:	2300      	movs	r3, #0
 80096b8:	469b      	mov	fp, r3
 80096ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80096be:	9819      	ldr	r0, [sp, #100]	; 0x64
 80096c0:	7805      	ldrb	r5, [r0, #0]
 80096c2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80096c6:	b2d9      	uxtb	r1, r3
 80096c8:	2909      	cmp	r1, #9
 80096ca:	d927      	bls.n	800971c <_strtod_l+0x1a4>
 80096cc:	4622      	mov	r2, r4
 80096ce:	4639      	mov	r1, r7
 80096d0:	f002 fc1e 	bl	800bf10 <strncmp>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d033      	beq.n	8009740 <_strtod_l+0x1c8>
 80096d8:	2000      	movs	r0, #0
 80096da:	462a      	mov	r2, r5
 80096dc:	465c      	mov	r4, fp
 80096de:	4603      	mov	r3, r0
 80096e0:	9004      	str	r0, [sp, #16]
 80096e2:	2a65      	cmp	r2, #101	; 0x65
 80096e4:	d001      	beq.n	80096ea <_strtod_l+0x172>
 80096e6:	2a45      	cmp	r2, #69	; 0x45
 80096e8:	d114      	bne.n	8009714 <_strtod_l+0x19c>
 80096ea:	b91c      	cbnz	r4, 80096f4 <_strtod_l+0x17c>
 80096ec:	9a07      	ldr	r2, [sp, #28]
 80096ee:	4302      	orrs	r2, r0
 80096f0:	d09f      	beq.n	8009632 <_strtod_l+0xba>
 80096f2:	2400      	movs	r4, #0
 80096f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80096f6:	1c72      	adds	r2, r6, #1
 80096f8:	9219      	str	r2, [sp, #100]	; 0x64
 80096fa:	7872      	ldrb	r2, [r6, #1]
 80096fc:	2a2b      	cmp	r2, #43	; 0x2b
 80096fe:	d079      	beq.n	80097f4 <_strtod_l+0x27c>
 8009700:	2a2d      	cmp	r2, #45	; 0x2d
 8009702:	f000 8083 	beq.w	800980c <_strtod_l+0x294>
 8009706:	2700      	movs	r7, #0
 8009708:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800970c:	2909      	cmp	r1, #9
 800970e:	f240 8083 	bls.w	8009818 <_strtod_l+0x2a0>
 8009712:	9619      	str	r6, [sp, #100]	; 0x64
 8009714:	2500      	movs	r5, #0
 8009716:	e09f      	b.n	8009858 <_strtod_l+0x2e0>
 8009718:	2300      	movs	r3, #0
 800971a:	e7c8      	b.n	80096ae <_strtod_l+0x136>
 800971c:	f1bb 0f08 	cmp.w	fp, #8
 8009720:	bfd5      	itete	le
 8009722:	9906      	ldrle	r1, [sp, #24]
 8009724:	9905      	ldrgt	r1, [sp, #20]
 8009726:	fb02 3301 	mlale	r3, r2, r1, r3
 800972a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800972e:	f100 0001 	add.w	r0, r0, #1
 8009732:	bfd4      	ite	le
 8009734:	9306      	strle	r3, [sp, #24]
 8009736:	9305      	strgt	r3, [sp, #20]
 8009738:	f10b 0b01 	add.w	fp, fp, #1
 800973c:	9019      	str	r0, [sp, #100]	; 0x64
 800973e:	e7be      	b.n	80096be <_strtod_l+0x146>
 8009740:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009742:	191a      	adds	r2, r3, r4
 8009744:	9219      	str	r2, [sp, #100]	; 0x64
 8009746:	5d1a      	ldrb	r2, [r3, r4]
 8009748:	f1bb 0f00 	cmp.w	fp, #0
 800974c:	d036      	beq.n	80097bc <_strtod_l+0x244>
 800974e:	465c      	mov	r4, fp
 8009750:	9004      	str	r0, [sp, #16]
 8009752:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009756:	2b09      	cmp	r3, #9
 8009758:	d912      	bls.n	8009780 <_strtod_l+0x208>
 800975a:	2301      	movs	r3, #1
 800975c:	e7c1      	b.n	80096e2 <_strtod_l+0x16a>
 800975e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009760:	3001      	adds	r0, #1
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	9219      	str	r2, [sp, #100]	; 0x64
 8009766:	785a      	ldrb	r2, [r3, #1]
 8009768:	2a30      	cmp	r2, #48	; 0x30
 800976a:	d0f8      	beq.n	800975e <_strtod_l+0x1e6>
 800976c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009770:	2b08      	cmp	r3, #8
 8009772:	f200 84d5 	bhi.w	800a120 <_strtod_l+0xba8>
 8009776:	9004      	str	r0, [sp, #16]
 8009778:	2000      	movs	r0, #0
 800977a:	4604      	mov	r4, r0
 800977c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800977e:	9308      	str	r3, [sp, #32]
 8009780:	3a30      	subs	r2, #48	; 0x30
 8009782:	f100 0301 	add.w	r3, r0, #1
 8009786:	d013      	beq.n	80097b0 <_strtod_l+0x238>
 8009788:	9904      	ldr	r1, [sp, #16]
 800978a:	1905      	adds	r5, r0, r4
 800978c:	4419      	add	r1, r3
 800978e:	9104      	str	r1, [sp, #16]
 8009790:	4623      	mov	r3, r4
 8009792:	210a      	movs	r1, #10
 8009794:	42ab      	cmp	r3, r5
 8009796:	d113      	bne.n	80097c0 <_strtod_l+0x248>
 8009798:	1823      	adds	r3, r4, r0
 800979a:	2b08      	cmp	r3, #8
 800979c:	f104 0401 	add.w	r4, r4, #1
 80097a0:	4404      	add	r4, r0
 80097a2:	dc1b      	bgt.n	80097dc <_strtod_l+0x264>
 80097a4:	230a      	movs	r3, #10
 80097a6:	9906      	ldr	r1, [sp, #24]
 80097a8:	fb03 2301 	mla	r3, r3, r1, r2
 80097ac:	9306      	str	r3, [sp, #24]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80097b2:	4618      	mov	r0, r3
 80097b4:	1c51      	adds	r1, r2, #1
 80097b6:	9119      	str	r1, [sp, #100]	; 0x64
 80097b8:	7852      	ldrb	r2, [r2, #1]
 80097ba:	e7ca      	b.n	8009752 <_strtod_l+0x1da>
 80097bc:	4658      	mov	r0, fp
 80097be:	e7d3      	b.n	8009768 <_strtod_l+0x1f0>
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	dc04      	bgt.n	80097ce <_strtod_l+0x256>
 80097c4:	9f06      	ldr	r7, [sp, #24]
 80097c6:	434f      	muls	r7, r1
 80097c8:	9706      	str	r7, [sp, #24]
 80097ca:	3301      	adds	r3, #1
 80097cc:	e7e2      	b.n	8009794 <_strtod_l+0x21c>
 80097ce:	1c5f      	adds	r7, r3, #1
 80097d0:	2f10      	cmp	r7, #16
 80097d2:	bfde      	ittt	le
 80097d4:	9f05      	ldrle	r7, [sp, #20]
 80097d6:	434f      	mulle	r7, r1
 80097d8:	9705      	strle	r7, [sp, #20]
 80097da:	e7f6      	b.n	80097ca <_strtod_l+0x252>
 80097dc:	2c10      	cmp	r4, #16
 80097de:	bfdf      	itttt	le
 80097e0:	230a      	movle	r3, #10
 80097e2:	9905      	ldrle	r1, [sp, #20]
 80097e4:	fb03 2301 	mlale	r3, r3, r1, r2
 80097e8:	9305      	strle	r3, [sp, #20]
 80097ea:	e7e0      	b.n	80097ae <_strtod_l+0x236>
 80097ec:	2300      	movs	r3, #0
 80097ee:	9304      	str	r3, [sp, #16]
 80097f0:	2301      	movs	r3, #1
 80097f2:	e77b      	b.n	80096ec <_strtod_l+0x174>
 80097f4:	2700      	movs	r7, #0
 80097f6:	1cb2      	adds	r2, r6, #2
 80097f8:	9219      	str	r2, [sp, #100]	; 0x64
 80097fa:	78b2      	ldrb	r2, [r6, #2]
 80097fc:	e784      	b.n	8009708 <_strtod_l+0x190>
 80097fe:	bf00      	nop
 8009800:	0800db98 	.word	0x0800db98
 8009804:	0800dad0 	.word	0x0800dad0
 8009808:	7ff00000 	.word	0x7ff00000
 800980c:	2701      	movs	r7, #1
 800980e:	e7f2      	b.n	80097f6 <_strtod_l+0x27e>
 8009810:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009812:	1c51      	adds	r1, r2, #1
 8009814:	9119      	str	r1, [sp, #100]	; 0x64
 8009816:	7852      	ldrb	r2, [r2, #1]
 8009818:	2a30      	cmp	r2, #48	; 0x30
 800981a:	d0f9      	beq.n	8009810 <_strtod_l+0x298>
 800981c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009820:	2908      	cmp	r1, #8
 8009822:	f63f af77 	bhi.w	8009714 <_strtod_l+0x19c>
 8009826:	f04f 0e0a 	mov.w	lr, #10
 800982a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800982e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009830:	9209      	str	r2, [sp, #36]	; 0x24
 8009832:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009834:	1c51      	adds	r1, r2, #1
 8009836:	9119      	str	r1, [sp, #100]	; 0x64
 8009838:	7852      	ldrb	r2, [r2, #1]
 800983a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800983e:	2d09      	cmp	r5, #9
 8009840:	d935      	bls.n	80098ae <_strtod_l+0x336>
 8009842:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009844:	1b49      	subs	r1, r1, r5
 8009846:	2908      	cmp	r1, #8
 8009848:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800984c:	dc02      	bgt.n	8009854 <_strtod_l+0x2dc>
 800984e:	4565      	cmp	r5, ip
 8009850:	bfa8      	it	ge
 8009852:	4665      	movge	r5, ip
 8009854:	b107      	cbz	r7, 8009858 <_strtod_l+0x2e0>
 8009856:	426d      	negs	r5, r5
 8009858:	2c00      	cmp	r4, #0
 800985a:	d14c      	bne.n	80098f6 <_strtod_l+0x37e>
 800985c:	9907      	ldr	r1, [sp, #28]
 800985e:	4301      	orrs	r1, r0
 8009860:	f47f aecb 	bne.w	80095fa <_strtod_l+0x82>
 8009864:	2b00      	cmp	r3, #0
 8009866:	f47f aee4 	bne.w	8009632 <_strtod_l+0xba>
 800986a:	2a69      	cmp	r2, #105	; 0x69
 800986c:	d026      	beq.n	80098bc <_strtod_l+0x344>
 800986e:	dc23      	bgt.n	80098b8 <_strtod_l+0x340>
 8009870:	2a49      	cmp	r2, #73	; 0x49
 8009872:	d023      	beq.n	80098bc <_strtod_l+0x344>
 8009874:	2a4e      	cmp	r2, #78	; 0x4e
 8009876:	f47f aedc 	bne.w	8009632 <_strtod_l+0xba>
 800987a:	499d      	ldr	r1, [pc, #628]	; (8009af0 <_strtod_l+0x578>)
 800987c:	a819      	add	r0, sp, #100	; 0x64
 800987e:	f000 ff47 	bl	800a710 <__match>
 8009882:	2800      	cmp	r0, #0
 8009884:	f43f aed5 	beq.w	8009632 <_strtod_l+0xba>
 8009888:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b28      	cmp	r3, #40	; 0x28
 800988e:	d12c      	bne.n	80098ea <_strtod_l+0x372>
 8009890:	4998      	ldr	r1, [pc, #608]	; (8009af4 <_strtod_l+0x57c>)
 8009892:	aa1c      	add	r2, sp, #112	; 0x70
 8009894:	a819      	add	r0, sp, #100	; 0x64
 8009896:	f000 ff4f 	bl	800a738 <__hexnan>
 800989a:	2805      	cmp	r0, #5
 800989c:	d125      	bne.n	80098ea <_strtod_l+0x372>
 800989e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098a0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80098a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80098a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80098ac:	e6a5      	b.n	80095fa <_strtod_l+0x82>
 80098ae:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80098b2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80098b6:	e7bc      	b.n	8009832 <_strtod_l+0x2ba>
 80098b8:	2a6e      	cmp	r2, #110	; 0x6e
 80098ba:	e7dc      	b.n	8009876 <_strtod_l+0x2fe>
 80098bc:	498e      	ldr	r1, [pc, #568]	; (8009af8 <_strtod_l+0x580>)
 80098be:	a819      	add	r0, sp, #100	; 0x64
 80098c0:	f000 ff26 	bl	800a710 <__match>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	f43f aeb4 	beq.w	8009632 <_strtod_l+0xba>
 80098ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098cc:	498b      	ldr	r1, [pc, #556]	; (8009afc <_strtod_l+0x584>)
 80098ce:	3b01      	subs	r3, #1
 80098d0:	a819      	add	r0, sp, #100	; 0x64
 80098d2:	9319      	str	r3, [sp, #100]	; 0x64
 80098d4:	f000 ff1c 	bl	800a710 <__match>
 80098d8:	b910      	cbnz	r0, 80098e0 <_strtod_l+0x368>
 80098da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80098dc:	3301      	adds	r3, #1
 80098de:	9319      	str	r3, [sp, #100]	; 0x64
 80098e0:	f04f 0800 	mov.w	r8, #0
 80098e4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009b00 <_strtod_l+0x588>
 80098e8:	e687      	b.n	80095fa <_strtod_l+0x82>
 80098ea:	4886      	ldr	r0, [pc, #536]	; (8009b04 <_strtod_l+0x58c>)
 80098ec:	f002 fad2 	bl	800be94 <nan>
 80098f0:	4680      	mov	r8, r0
 80098f2:	4689      	mov	r9, r1
 80098f4:	e681      	b.n	80095fa <_strtod_l+0x82>
 80098f6:	9b04      	ldr	r3, [sp, #16]
 80098f8:	f1bb 0f00 	cmp.w	fp, #0
 80098fc:	bf08      	it	eq
 80098fe:	46a3      	moveq	fp, r4
 8009900:	1aeb      	subs	r3, r5, r3
 8009902:	2c10      	cmp	r4, #16
 8009904:	9806      	ldr	r0, [sp, #24]
 8009906:	4626      	mov	r6, r4
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	bfa8      	it	ge
 800990c:	2610      	movge	r6, #16
 800990e:	f7f6 fdd9 	bl	80004c4 <__aeabi_ui2d>
 8009912:	2c09      	cmp	r4, #9
 8009914:	4680      	mov	r8, r0
 8009916:	4689      	mov	r9, r1
 8009918:	dd13      	ble.n	8009942 <_strtod_l+0x3ca>
 800991a:	4b7b      	ldr	r3, [pc, #492]	; (8009b08 <_strtod_l+0x590>)
 800991c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009920:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009924:	f7f6 fe48 	bl	80005b8 <__aeabi_dmul>
 8009928:	4680      	mov	r8, r0
 800992a:	9805      	ldr	r0, [sp, #20]
 800992c:	4689      	mov	r9, r1
 800992e:	f7f6 fdc9 	bl	80004c4 <__aeabi_ui2d>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4640      	mov	r0, r8
 8009938:	4649      	mov	r1, r9
 800993a:	f7f6 fc87 	bl	800024c <__adddf3>
 800993e:	4680      	mov	r8, r0
 8009940:	4689      	mov	r9, r1
 8009942:	2c0f      	cmp	r4, #15
 8009944:	dc36      	bgt.n	80099b4 <_strtod_l+0x43c>
 8009946:	9b07      	ldr	r3, [sp, #28]
 8009948:	2b00      	cmp	r3, #0
 800994a:	f43f ae56 	beq.w	80095fa <_strtod_l+0x82>
 800994e:	dd22      	ble.n	8009996 <_strtod_l+0x41e>
 8009950:	2b16      	cmp	r3, #22
 8009952:	dc09      	bgt.n	8009968 <_strtod_l+0x3f0>
 8009954:	496c      	ldr	r1, [pc, #432]	; (8009b08 <_strtod_l+0x590>)
 8009956:	4642      	mov	r2, r8
 8009958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800995c:	464b      	mov	r3, r9
 800995e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009962:	f7f6 fe29 	bl	80005b8 <__aeabi_dmul>
 8009966:	e7c3      	b.n	80098f0 <_strtod_l+0x378>
 8009968:	9a07      	ldr	r2, [sp, #28]
 800996a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800996e:	4293      	cmp	r3, r2
 8009970:	db20      	blt.n	80099b4 <_strtod_l+0x43c>
 8009972:	4d65      	ldr	r5, [pc, #404]	; (8009b08 <_strtod_l+0x590>)
 8009974:	f1c4 040f 	rsb	r4, r4, #15
 8009978:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800997c:	4642      	mov	r2, r8
 800997e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009982:	464b      	mov	r3, r9
 8009984:	f7f6 fe18 	bl	80005b8 <__aeabi_dmul>
 8009988:	9b07      	ldr	r3, [sp, #28]
 800998a:	1b1c      	subs	r4, r3, r4
 800998c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009994:	e7e5      	b.n	8009962 <_strtod_l+0x3ea>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	3316      	adds	r3, #22
 800999a:	db0b      	blt.n	80099b4 <_strtod_l+0x43c>
 800999c:	9b04      	ldr	r3, [sp, #16]
 800999e:	4640      	mov	r0, r8
 80099a0:	1b5d      	subs	r5, r3, r5
 80099a2:	4b59      	ldr	r3, [pc, #356]	; (8009b08 <_strtod_l+0x590>)
 80099a4:	4649      	mov	r1, r9
 80099a6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80099aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099ae:	f7f6 ff2d 	bl	800080c <__aeabi_ddiv>
 80099b2:	e79d      	b.n	80098f0 <_strtod_l+0x378>
 80099b4:	9b07      	ldr	r3, [sp, #28]
 80099b6:	1ba6      	subs	r6, r4, r6
 80099b8:	441e      	add	r6, r3
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	dd74      	ble.n	8009aa8 <_strtod_l+0x530>
 80099be:	f016 030f 	ands.w	r3, r6, #15
 80099c2:	d00a      	beq.n	80099da <_strtod_l+0x462>
 80099c4:	4950      	ldr	r1, [pc, #320]	; (8009b08 <_strtod_l+0x590>)
 80099c6:	4642      	mov	r2, r8
 80099c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d0:	464b      	mov	r3, r9
 80099d2:	f7f6 fdf1 	bl	80005b8 <__aeabi_dmul>
 80099d6:	4680      	mov	r8, r0
 80099d8:	4689      	mov	r9, r1
 80099da:	f036 060f 	bics.w	r6, r6, #15
 80099de:	d052      	beq.n	8009a86 <_strtod_l+0x50e>
 80099e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80099e4:	dd27      	ble.n	8009a36 <_strtod_l+0x4be>
 80099e6:	f04f 0b00 	mov.w	fp, #0
 80099ea:	f8cd b010 	str.w	fp, [sp, #16]
 80099ee:	f8cd b020 	str.w	fp, [sp, #32]
 80099f2:	f8cd b018 	str.w	fp, [sp, #24]
 80099f6:	2322      	movs	r3, #34	; 0x22
 80099f8:	f04f 0800 	mov.w	r8, #0
 80099fc:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009b00 <_strtod_l+0x588>
 8009a00:	f8ca 3000 	str.w	r3, [sl]
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	f43f adf7 	beq.w	80095fa <_strtod_l+0x82>
 8009a0c:	4650      	mov	r0, sl
 8009a0e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009a10:	f000 ff9e 	bl	800a950 <_Bfree>
 8009a14:	4650      	mov	r0, sl
 8009a16:	9906      	ldr	r1, [sp, #24]
 8009a18:	f000 ff9a 	bl	800a950 <_Bfree>
 8009a1c:	4650      	mov	r0, sl
 8009a1e:	9904      	ldr	r1, [sp, #16]
 8009a20:	f000 ff96 	bl	800a950 <_Bfree>
 8009a24:	4650      	mov	r0, sl
 8009a26:	9908      	ldr	r1, [sp, #32]
 8009a28:	f000 ff92 	bl	800a950 <_Bfree>
 8009a2c:	4659      	mov	r1, fp
 8009a2e:	4650      	mov	r0, sl
 8009a30:	f000 ff8e 	bl	800a950 <_Bfree>
 8009a34:	e5e1      	b.n	80095fa <_strtod_l+0x82>
 8009a36:	4b35      	ldr	r3, [pc, #212]	; (8009b0c <_strtod_l+0x594>)
 8009a38:	4640      	mov	r0, r8
 8009a3a:	9305      	str	r3, [sp, #20]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4649      	mov	r1, r9
 8009a40:	461f      	mov	r7, r3
 8009a42:	1136      	asrs	r6, r6, #4
 8009a44:	2e01      	cmp	r6, #1
 8009a46:	dc21      	bgt.n	8009a8c <_strtod_l+0x514>
 8009a48:	b10b      	cbz	r3, 8009a4e <_strtod_l+0x4d6>
 8009a4a:	4680      	mov	r8, r0
 8009a4c:	4689      	mov	r9, r1
 8009a4e:	4b2f      	ldr	r3, [pc, #188]	; (8009b0c <_strtod_l+0x594>)
 8009a50:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009a54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009a58:	4642      	mov	r2, r8
 8009a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a5e:	464b      	mov	r3, r9
 8009a60:	f7f6 fdaa 	bl	80005b8 <__aeabi_dmul>
 8009a64:	4b26      	ldr	r3, [pc, #152]	; (8009b00 <_strtod_l+0x588>)
 8009a66:	460a      	mov	r2, r1
 8009a68:	400b      	ands	r3, r1
 8009a6a:	4929      	ldr	r1, [pc, #164]	; (8009b10 <_strtod_l+0x598>)
 8009a6c:	4680      	mov	r8, r0
 8009a6e:	428b      	cmp	r3, r1
 8009a70:	d8b9      	bhi.n	80099e6 <_strtod_l+0x46e>
 8009a72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009a76:	428b      	cmp	r3, r1
 8009a78:	bf86      	itte	hi
 8009a7a:	f04f 38ff 	movhi.w	r8, #4294967295
 8009a7e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009b14 <_strtod_l+0x59c>
 8009a82:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009a86:	2300      	movs	r3, #0
 8009a88:	9305      	str	r3, [sp, #20]
 8009a8a:	e07f      	b.n	8009b8c <_strtod_l+0x614>
 8009a8c:	07f2      	lsls	r2, r6, #31
 8009a8e:	d505      	bpl.n	8009a9c <_strtod_l+0x524>
 8009a90:	9b05      	ldr	r3, [sp, #20]
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	f7f6 fd8f 	bl	80005b8 <__aeabi_dmul>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	9a05      	ldr	r2, [sp, #20]
 8009a9e:	3701      	adds	r7, #1
 8009aa0:	3208      	adds	r2, #8
 8009aa2:	1076      	asrs	r6, r6, #1
 8009aa4:	9205      	str	r2, [sp, #20]
 8009aa6:	e7cd      	b.n	8009a44 <_strtod_l+0x4cc>
 8009aa8:	d0ed      	beq.n	8009a86 <_strtod_l+0x50e>
 8009aaa:	4276      	negs	r6, r6
 8009aac:	f016 020f 	ands.w	r2, r6, #15
 8009ab0:	d00a      	beq.n	8009ac8 <_strtod_l+0x550>
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <_strtod_l+0x590>)
 8009ab4:	4640      	mov	r0, r8
 8009ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aba:	4649      	mov	r1, r9
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fea4 	bl	800080c <__aeabi_ddiv>
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	1136      	asrs	r6, r6, #4
 8009aca:	d0dc      	beq.n	8009a86 <_strtod_l+0x50e>
 8009acc:	2e1f      	cmp	r6, #31
 8009ace:	dd23      	ble.n	8009b18 <_strtod_l+0x5a0>
 8009ad0:	f04f 0b00 	mov.w	fp, #0
 8009ad4:	f8cd b010 	str.w	fp, [sp, #16]
 8009ad8:	f8cd b020 	str.w	fp, [sp, #32]
 8009adc:	f8cd b018 	str.w	fp, [sp, #24]
 8009ae0:	2322      	movs	r3, #34	; 0x22
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	f8ca 3000 	str.w	r3, [sl]
 8009aee:	e789      	b.n	8009a04 <_strtod_l+0x48c>
 8009af0:	0800dacd 	.word	0x0800dacd
 8009af4:	0800dae4 	.word	0x0800dae4
 8009af8:	0800dac4 	.word	0x0800dac4
 8009afc:	0800dac7 	.word	0x0800dac7
 8009b00:	7ff00000 	.word	0x7ff00000
 8009b04:	0800dda5 	.word	0x0800dda5
 8009b08:	0800dc48 	.word	0x0800dc48
 8009b0c:	0800dc20 	.word	0x0800dc20
 8009b10:	7ca00000 	.word	0x7ca00000
 8009b14:	7fefffff 	.word	0x7fefffff
 8009b18:	f016 0310 	ands.w	r3, r6, #16
 8009b1c:	bf18      	it	ne
 8009b1e:	236a      	movne	r3, #106	; 0x6a
 8009b20:	4640      	mov	r0, r8
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	4649      	mov	r1, r9
 8009b26:	2300      	movs	r3, #0
 8009b28:	4fb0      	ldr	r7, [pc, #704]	; (8009dec <_strtod_l+0x874>)
 8009b2a:	07f2      	lsls	r2, r6, #31
 8009b2c:	d504      	bpl.n	8009b38 <_strtod_l+0x5c0>
 8009b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b32:	f7f6 fd41 	bl	80005b8 <__aeabi_dmul>
 8009b36:	2301      	movs	r3, #1
 8009b38:	1076      	asrs	r6, r6, #1
 8009b3a:	f107 0708 	add.w	r7, r7, #8
 8009b3e:	d1f4      	bne.n	8009b2a <_strtod_l+0x5b2>
 8009b40:	b10b      	cbz	r3, 8009b46 <_strtod_l+0x5ce>
 8009b42:	4680      	mov	r8, r0
 8009b44:	4689      	mov	r9, r1
 8009b46:	9b05      	ldr	r3, [sp, #20]
 8009b48:	b1c3      	cbz	r3, 8009b7c <_strtod_l+0x604>
 8009b4a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009b4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	4649      	mov	r1, r9
 8009b56:	dd11      	ble.n	8009b7c <_strtod_l+0x604>
 8009b58:	2b1f      	cmp	r3, #31
 8009b5a:	f340 8127 	ble.w	8009dac <_strtod_l+0x834>
 8009b5e:	2b34      	cmp	r3, #52	; 0x34
 8009b60:	bfd8      	it	le
 8009b62:	f04f 33ff 	movle.w	r3, #4294967295
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	bfcf      	iteee	gt
 8009b6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009b70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009b74:	fa03 f202 	lslle.w	r2, r3, r2
 8009b78:	ea02 0901 	andle.w	r9, r2, r1
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2300      	movs	r3, #0
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 ff80 	bl	8000a88 <__aeabi_dcmpeq>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d1a1      	bne.n	8009ad0 <_strtod_l+0x558>
 8009b8c:	9b06      	ldr	r3, [sp, #24]
 8009b8e:	465a      	mov	r2, fp
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	4650      	mov	r0, sl
 8009b94:	4623      	mov	r3, r4
 8009b96:	9908      	ldr	r1, [sp, #32]
 8009b98:	f000 ff42 	bl	800aa20 <__s2b>
 8009b9c:	9008      	str	r0, [sp, #32]
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	f43f af21 	beq.w	80099e6 <_strtod_l+0x46e>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	f04f 0b00 	mov.w	fp, #0
 8009baa:	1b5d      	subs	r5, r3, r5
 8009bac:	9b07      	ldr	r3, [sp, #28]
 8009bae:	f8cd b010 	str.w	fp, [sp, #16]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bfb4      	ite	lt
 8009bb6:	462b      	movlt	r3, r5
 8009bb8:	2300      	movge	r3, #0
 8009bba:	930e      	str	r3, [sp, #56]	; 0x38
 8009bbc:	9b07      	ldr	r3, [sp, #28]
 8009bbe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009bc2:	9314      	str	r3, [sp, #80]	; 0x50
 8009bc4:	9b08      	ldr	r3, [sp, #32]
 8009bc6:	4650      	mov	r0, sl
 8009bc8:	6859      	ldr	r1, [r3, #4]
 8009bca:	f000 fe81 	bl	800a8d0 <_Balloc>
 8009bce:	9006      	str	r0, [sp, #24]
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	f43f af10 	beq.w	80099f6 <_strtod_l+0x47e>
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	300c      	adds	r0, #12
 8009bda:	691a      	ldr	r2, [r3, #16]
 8009bdc:	f103 010c 	add.w	r1, r3, #12
 8009be0:	3202      	adds	r2, #2
 8009be2:	0092      	lsls	r2, r2, #2
 8009be4:	f7ff fb00 	bl	80091e8 <memcpy>
 8009be8:	ab1c      	add	r3, sp, #112	; 0x70
 8009bea:	9301      	str	r3, [sp, #4]
 8009bec:	ab1b      	add	r3, sp, #108	; 0x6c
 8009bee:	9300      	str	r3, [sp, #0]
 8009bf0:	4642      	mov	r2, r8
 8009bf2:	464b      	mov	r3, r9
 8009bf4:	4650      	mov	r0, sl
 8009bf6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009bfa:	f001 fa53 	bl	800b0a4 <__d2b>
 8009bfe:	901a      	str	r0, [sp, #104]	; 0x68
 8009c00:	2800      	cmp	r0, #0
 8009c02:	f43f aef8 	beq.w	80099f6 <_strtod_l+0x47e>
 8009c06:	2101      	movs	r1, #1
 8009c08:	4650      	mov	r0, sl
 8009c0a:	f000 ffa1 	bl	800ab50 <__i2b>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	9004      	str	r0, [sp, #16]
 8009c12:	2800      	cmp	r0, #0
 8009c14:	f43f aeef 	beq.w	80099f6 <_strtod_l+0x47e>
 8009c18:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009c1a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c1c:	2d00      	cmp	r5, #0
 8009c1e:	bfab      	itete	ge
 8009c20:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009c22:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8009c24:	18ee      	addge	r6, r5, r3
 8009c26:	1b5c      	sublt	r4, r3, r5
 8009c28:	9b05      	ldr	r3, [sp, #20]
 8009c2a:	bfa8      	it	ge
 8009c2c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009c2e:	eba5 0503 	sub.w	r5, r5, r3
 8009c32:	4415      	add	r5, r2
 8009c34:	4b6e      	ldr	r3, [pc, #440]	; (8009df0 <_strtod_l+0x878>)
 8009c36:	f105 35ff 	add.w	r5, r5, #4294967295
 8009c3a:	bfb8      	it	lt
 8009c3c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009c3e:	429d      	cmp	r5, r3
 8009c40:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009c44:	f280 80c4 	bge.w	8009dd0 <_strtod_l+0x858>
 8009c48:	1b5b      	subs	r3, r3, r5
 8009c4a:	2b1f      	cmp	r3, #31
 8009c4c:	f04f 0701 	mov.w	r7, #1
 8009c50:	eba2 0203 	sub.w	r2, r2, r3
 8009c54:	f300 80b1 	bgt.w	8009dba <_strtod_l+0x842>
 8009c58:	2500      	movs	r5, #0
 8009c5a:	fa07 f303 	lsl.w	r3, r7, r3
 8009c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c60:	18b7      	adds	r7, r6, r2
 8009c62:	9b05      	ldr	r3, [sp, #20]
 8009c64:	42be      	cmp	r6, r7
 8009c66:	4414      	add	r4, r2
 8009c68:	441c      	add	r4, r3
 8009c6a:	4633      	mov	r3, r6
 8009c6c:	bfa8      	it	ge
 8009c6e:	463b      	movge	r3, r7
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	bfa8      	it	ge
 8009c74:	4623      	movge	r3, r4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	bfc2      	ittt	gt
 8009c7a:	1aff      	subgt	r7, r7, r3
 8009c7c:	1ae4      	subgt	r4, r4, r3
 8009c7e:	1af6      	subgt	r6, r6, r3
 8009c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd17      	ble.n	8009cb6 <_strtod_l+0x73e>
 8009c86:	461a      	mov	r2, r3
 8009c88:	4650      	mov	r0, sl
 8009c8a:	9904      	ldr	r1, [sp, #16]
 8009c8c:	f001 f81e 	bl	800accc <__pow5mult>
 8009c90:	9004      	str	r0, [sp, #16]
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f43f aeaf 	beq.w	80099f6 <_strtod_l+0x47e>
 8009c98:	4601      	mov	r1, r0
 8009c9a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	f000 ff6d 	bl	800ab7c <__multiply>
 8009ca2:	9009      	str	r0, [sp, #36]	; 0x24
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	f43f aea6 	beq.w	80099f6 <_strtod_l+0x47e>
 8009caa:	4650      	mov	r0, sl
 8009cac:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009cae:	f000 fe4f 	bl	800a950 <_Bfree>
 8009cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cb4:	931a      	str	r3, [sp, #104]	; 0x68
 8009cb6:	2f00      	cmp	r7, #0
 8009cb8:	f300 808e 	bgt.w	8009dd8 <_strtod_l+0x860>
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd08      	ble.n	8009cd4 <_strtod_l+0x75c>
 8009cc2:	4650      	mov	r0, sl
 8009cc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cc6:	9906      	ldr	r1, [sp, #24]
 8009cc8:	f001 f800 	bl	800accc <__pow5mult>
 8009ccc:	9006      	str	r0, [sp, #24]
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	f43f ae91 	beq.w	80099f6 <_strtod_l+0x47e>
 8009cd4:	2c00      	cmp	r4, #0
 8009cd6:	dd08      	ble.n	8009cea <_strtod_l+0x772>
 8009cd8:	4622      	mov	r2, r4
 8009cda:	4650      	mov	r0, sl
 8009cdc:	9906      	ldr	r1, [sp, #24]
 8009cde:	f001 f84f 	bl	800ad80 <__lshift>
 8009ce2:	9006      	str	r0, [sp, #24]
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f43f ae86 	beq.w	80099f6 <_strtod_l+0x47e>
 8009cea:	2e00      	cmp	r6, #0
 8009cec:	dd08      	ble.n	8009d00 <_strtod_l+0x788>
 8009cee:	4632      	mov	r2, r6
 8009cf0:	4650      	mov	r0, sl
 8009cf2:	9904      	ldr	r1, [sp, #16]
 8009cf4:	f001 f844 	bl	800ad80 <__lshift>
 8009cf8:	9004      	str	r0, [sp, #16]
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f43f ae7b 	beq.w	80099f6 <_strtod_l+0x47e>
 8009d00:	4650      	mov	r0, sl
 8009d02:	9a06      	ldr	r2, [sp, #24]
 8009d04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009d06:	f001 f8c7 	bl	800ae98 <__mdiff>
 8009d0a:	4683      	mov	fp, r0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	f43f ae72 	beq.w	80099f6 <_strtod_l+0x47e>
 8009d12:	2400      	movs	r4, #0
 8009d14:	68c3      	ldr	r3, [r0, #12]
 8009d16:	9904      	ldr	r1, [sp, #16]
 8009d18:	60c4      	str	r4, [r0, #12]
 8009d1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d1c:	f001 f8a0 	bl	800ae60 <__mcmp>
 8009d20:	42a0      	cmp	r0, r4
 8009d22:	da6b      	bge.n	8009dfc <_strtod_l+0x884>
 8009d24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d26:	ea53 0308 	orrs.w	r3, r3, r8
 8009d2a:	f040 8091 	bne.w	8009e50 <_strtod_l+0x8d8>
 8009d2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f040 808c 	bne.w	8009e50 <_strtod_l+0x8d8>
 8009d38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d3c:	0d1b      	lsrs	r3, r3, #20
 8009d3e:	051b      	lsls	r3, r3, #20
 8009d40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009d44:	f240 8084 	bls.w	8009e50 <_strtod_l+0x8d8>
 8009d48:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009d4c:	b91b      	cbnz	r3, 8009d56 <_strtod_l+0x7de>
 8009d4e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	dd7c      	ble.n	8009e50 <_strtod_l+0x8d8>
 8009d56:	4659      	mov	r1, fp
 8009d58:	2201      	movs	r2, #1
 8009d5a:	4650      	mov	r0, sl
 8009d5c:	f001 f810 	bl	800ad80 <__lshift>
 8009d60:	9904      	ldr	r1, [sp, #16]
 8009d62:	4683      	mov	fp, r0
 8009d64:	f001 f87c 	bl	800ae60 <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	dd71      	ble.n	8009e50 <_strtod_l+0x8d8>
 8009d6c:	9905      	ldr	r1, [sp, #20]
 8009d6e:	464b      	mov	r3, r9
 8009d70:	4a20      	ldr	r2, [pc, #128]	; (8009df4 <_strtod_l+0x87c>)
 8009d72:	2900      	cmp	r1, #0
 8009d74:	f000 808c 	beq.w	8009e90 <_strtod_l+0x918>
 8009d78:	ea02 0109 	and.w	r1, r2, r9
 8009d7c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009d80:	f300 8086 	bgt.w	8009e90 <_strtod_l+0x918>
 8009d84:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009d88:	f77f aeaa 	ble.w	8009ae0 <_strtod_l+0x568>
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	4b19      	ldr	r3, [pc, #100]	; (8009df8 <_strtod_l+0x880>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	f7f6 fc10 	bl	80005b8 <__aeabi_dmul>
 8009d98:	460b      	mov	r3, r1
 8009d9a:	4303      	orrs	r3, r0
 8009d9c:	bf08      	it	eq
 8009d9e:	2322      	moveq	r3, #34	; 0x22
 8009da0:	4680      	mov	r8, r0
 8009da2:	4689      	mov	r9, r1
 8009da4:	bf08      	it	eq
 8009da6:	f8ca 3000 	streq.w	r3, [sl]
 8009daa:	e62f      	b.n	8009a0c <_strtod_l+0x494>
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295
 8009db0:	fa02 f303 	lsl.w	r3, r2, r3
 8009db4:	ea03 0808 	and.w	r8, r3, r8
 8009db8:	e6e0      	b.n	8009b7c <_strtod_l+0x604>
 8009dba:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009dbe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009dc2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009dc6:	35e2      	adds	r5, #226	; 0xe2
 8009dc8:	fa07 f505 	lsl.w	r5, r7, r5
 8009dcc:	970f      	str	r7, [sp, #60]	; 0x3c
 8009dce:	e747      	b.n	8009c60 <_strtod_l+0x6e8>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	2500      	movs	r5, #0
 8009dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd6:	e743      	b.n	8009c60 <_strtod_l+0x6e8>
 8009dd8:	463a      	mov	r2, r7
 8009dda:	4650      	mov	r0, sl
 8009ddc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009dde:	f000 ffcf 	bl	800ad80 <__lshift>
 8009de2:	901a      	str	r0, [sp, #104]	; 0x68
 8009de4:	2800      	cmp	r0, #0
 8009de6:	f47f af69 	bne.w	8009cbc <_strtod_l+0x744>
 8009dea:	e604      	b.n	80099f6 <_strtod_l+0x47e>
 8009dec:	0800daf8 	.word	0x0800daf8
 8009df0:	fffffc02 	.word	0xfffffc02
 8009df4:	7ff00000 	.word	0x7ff00000
 8009df8:	39500000 	.word	0x39500000
 8009dfc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009e00:	d165      	bne.n	8009ece <_strtod_l+0x956>
 8009e02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e08:	b35a      	cbz	r2, 8009e62 <_strtod_l+0x8ea>
 8009e0a:	4a99      	ldr	r2, [pc, #612]	; (800a070 <_strtod_l+0xaf8>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d12b      	bne.n	8009e68 <_strtod_l+0x8f0>
 8009e10:	9b05      	ldr	r3, [sp, #20]
 8009e12:	4641      	mov	r1, r8
 8009e14:	b303      	cbz	r3, 8009e58 <_strtod_l+0x8e0>
 8009e16:	464a      	mov	r2, r9
 8009e18:	4b96      	ldr	r3, [pc, #600]	; (800a074 <_strtod_l+0xafc>)
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e20:	f04f 32ff 	mov.w	r2, #4294967295
 8009e24:	d81b      	bhi.n	8009e5e <_strtod_l+0x8e6>
 8009e26:	0d1b      	lsrs	r3, r3, #20
 8009e28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e30:	4299      	cmp	r1, r3
 8009e32:	d119      	bne.n	8009e68 <_strtod_l+0x8f0>
 8009e34:	4b90      	ldr	r3, [pc, #576]	; (800a078 <_strtod_l+0xb00>)
 8009e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d102      	bne.n	8009e42 <_strtod_l+0x8ca>
 8009e3c:	3101      	adds	r1, #1
 8009e3e:	f43f adda 	beq.w	80099f6 <_strtod_l+0x47e>
 8009e42:	f04f 0800 	mov.w	r8, #0
 8009e46:	4b8b      	ldr	r3, [pc, #556]	; (800a074 <_strtod_l+0xafc>)
 8009e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e4a:	401a      	ands	r2, r3
 8009e4c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009e50:	9b05      	ldr	r3, [sp, #20]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d19a      	bne.n	8009d8c <_strtod_l+0x814>
 8009e56:	e5d9      	b.n	8009a0c <_strtod_l+0x494>
 8009e58:	f04f 33ff 	mov.w	r3, #4294967295
 8009e5c:	e7e8      	b.n	8009e30 <_strtod_l+0x8b8>
 8009e5e:	4613      	mov	r3, r2
 8009e60:	e7e6      	b.n	8009e30 <_strtod_l+0x8b8>
 8009e62:	ea53 0308 	orrs.w	r3, r3, r8
 8009e66:	d081      	beq.n	8009d6c <_strtod_l+0x7f4>
 8009e68:	b1e5      	cbz	r5, 8009ea4 <_strtod_l+0x92c>
 8009e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e6c:	421d      	tst	r5, r3
 8009e6e:	d0ef      	beq.n	8009e50 <_strtod_l+0x8d8>
 8009e70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e72:	4640      	mov	r0, r8
 8009e74:	4649      	mov	r1, r9
 8009e76:	9a05      	ldr	r2, [sp, #20]
 8009e78:	b1c3      	cbz	r3, 8009eac <_strtod_l+0x934>
 8009e7a:	f7ff fb5a 	bl	8009532 <sulp>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e86:	f7f6 f9e1 	bl	800024c <__adddf3>
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	4689      	mov	r9, r1
 8009e8e:	e7df      	b.n	8009e50 <_strtod_l+0x8d8>
 8009e90:	4013      	ands	r3, r2
 8009e92:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009e96:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009e9a:	f04f 38ff 	mov.w	r8, #4294967295
 8009e9e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009ea2:	e7d5      	b.n	8009e50 <_strtod_l+0x8d8>
 8009ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ea6:	ea13 0f08 	tst.w	r3, r8
 8009eaa:	e7e0      	b.n	8009e6e <_strtod_l+0x8f6>
 8009eac:	f7ff fb41 	bl	8009532 <sulp>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009eb8:	f7f6 f9c6 	bl	8000248 <__aeabi_dsub>
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	4689      	mov	r9, r1
 8009ec4:	f7f6 fde0 	bl	8000a88 <__aeabi_dcmpeq>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d0c1      	beq.n	8009e50 <_strtod_l+0x8d8>
 8009ecc:	e608      	b.n	8009ae0 <_strtod_l+0x568>
 8009ece:	4658      	mov	r0, fp
 8009ed0:	9904      	ldr	r1, [sp, #16]
 8009ed2:	f001 f943 	bl	800b15c <__ratio>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009edc:	4606      	mov	r6, r0
 8009ede:	460f      	mov	r7, r1
 8009ee0:	f7f6 fde6 	bl	8000ab0 <__aeabi_dcmple>
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d070      	beq.n	8009fca <_strtod_l+0xa52>
 8009ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d042      	beq.n	8009f74 <_strtod_l+0x9fc>
 8009eee:	2600      	movs	r6, #0
 8009ef0:	4f62      	ldr	r7, [pc, #392]	; (800a07c <_strtod_l+0xb04>)
 8009ef2:	4d62      	ldr	r5, [pc, #392]	; (800a07c <_strtod_l+0xb04>)
 8009ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009efa:	0d1b      	lsrs	r3, r3, #20
 8009efc:	051b      	lsls	r3, r3, #20
 8009efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f02:	4b5f      	ldr	r3, [pc, #380]	; (800a080 <_strtod_l+0xb08>)
 8009f04:	429a      	cmp	r2, r3
 8009f06:	f040 80c3 	bne.w	800a090 <_strtod_l+0xb18>
 8009f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f0c:	4640      	mov	r0, r8
 8009f0e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8009f12:	4649      	mov	r1, r9
 8009f14:	f001 f84c 	bl	800afb0 <__ulp>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	4639      	mov	r1, r7
 8009f20:	f7f6 fb4a 	bl	80005b8 <__aeabi_dmul>
 8009f24:	4642      	mov	r2, r8
 8009f26:	464b      	mov	r3, r9
 8009f28:	f7f6 f990 	bl	800024c <__adddf3>
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4951      	ldr	r1, [pc, #324]	; (800a074 <_strtod_l+0xafc>)
 8009f30:	4a54      	ldr	r2, [pc, #336]	; (800a084 <_strtod_l+0xb0c>)
 8009f32:	4019      	ands	r1, r3
 8009f34:	4291      	cmp	r1, r2
 8009f36:	4680      	mov	r8, r0
 8009f38:	d95d      	bls.n	8009ff6 <_strtod_l+0xa7e>
 8009f3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f3c:	4b4e      	ldr	r3, [pc, #312]	; (800a078 <_strtod_l+0xb00>)
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d103      	bne.n	8009f4a <_strtod_l+0x9d2>
 8009f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f44:	3301      	adds	r3, #1
 8009f46:	f43f ad56 	beq.w	80099f6 <_strtod_l+0x47e>
 8009f4a:	f04f 38ff 	mov.w	r8, #4294967295
 8009f4e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a078 <_strtod_l+0xb00>
 8009f52:	4650      	mov	r0, sl
 8009f54:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009f56:	f000 fcfb 	bl	800a950 <_Bfree>
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	9906      	ldr	r1, [sp, #24]
 8009f5e:	f000 fcf7 	bl	800a950 <_Bfree>
 8009f62:	4650      	mov	r0, sl
 8009f64:	9904      	ldr	r1, [sp, #16]
 8009f66:	f000 fcf3 	bl	800a950 <_Bfree>
 8009f6a:	4659      	mov	r1, fp
 8009f6c:	4650      	mov	r0, sl
 8009f6e:	f000 fcef 	bl	800a950 <_Bfree>
 8009f72:	e627      	b.n	8009bc4 <_strtod_l+0x64c>
 8009f74:	f1b8 0f00 	cmp.w	r8, #0
 8009f78:	d119      	bne.n	8009fae <_strtod_l+0xa36>
 8009f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f80:	b9e3      	cbnz	r3, 8009fbc <_strtod_l+0xa44>
 8009f82:	2200      	movs	r2, #0
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	4b3c      	ldr	r3, [pc, #240]	; (800a07c <_strtod_l+0xb04>)
 8009f8a:	f7f6 fd87 	bl	8000a9c <__aeabi_dcmplt>
 8009f8e:	b9c8      	cbnz	r0, 8009fc4 <_strtod_l+0xa4c>
 8009f90:	2200      	movs	r2, #0
 8009f92:	4630      	mov	r0, r6
 8009f94:	4639      	mov	r1, r7
 8009f96:	4b3c      	ldr	r3, [pc, #240]	; (800a088 <_strtod_l+0xb10>)
 8009f98:	f7f6 fb0e 	bl	80005b8 <__aeabi_dmul>
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009fa4:	9416      	str	r4, [sp, #88]	; 0x58
 8009fa6:	9317      	str	r3, [sp, #92]	; 0x5c
 8009fa8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8009fac:	e7a2      	b.n	8009ef4 <_strtod_l+0x97c>
 8009fae:	f1b8 0f01 	cmp.w	r8, #1
 8009fb2:	d103      	bne.n	8009fbc <_strtod_l+0xa44>
 8009fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f43f ad92 	beq.w	8009ae0 <_strtod_l+0x568>
 8009fbc:	2600      	movs	r6, #0
 8009fbe:	2400      	movs	r4, #0
 8009fc0:	4f32      	ldr	r7, [pc, #200]	; (800a08c <_strtod_l+0xb14>)
 8009fc2:	e796      	b.n	8009ef2 <_strtod_l+0x97a>
 8009fc4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009fc6:	4d30      	ldr	r5, [pc, #192]	; (800a088 <_strtod_l+0xb10>)
 8009fc8:	e7ea      	b.n	8009fa0 <_strtod_l+0xa28>
 8009fca:	4b2f      	ldr	r3, [pc, #188]	; (800a088 <_strtod_l+0xb10>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 faf1 	bl	80005b8 <__aeabi_dmul>
 8009fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd8:	4604      	mov	r4, r0
 8009fda:	460d      	mov	r5, r1
 8009fdc:	b933      	cbnz	r3, 8009fec <_strtod_l+0xa74>
 8009fde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe2:	9010      	str	r0, [sp, #64]	; 0x40
 8009fe4:	9311      	str	r3, [sp, #68]	; 0x44
 8009fe6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009fea:	e783      	b.n	8009ef4 <_strtod_l+0x97c>
 8009fec:	4602      	mov	r2, r0
 8009fee:	460b      	mov	r3, r1
 8009ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8009ff4:	e7f7      	b.n	8009fe6 <_strtod_l+0xa6e>
 8009ff6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1a8      	bne.n	8009f52 <_strtod_l+0x9da>
 800a000:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a004:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a006:	0d1b      	lsrs	r3, r3, #20
 800a008:	051b      	lsls	r3, r3, #20
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d1a1      	bne.n	8009f52 <_strtod_l+0x9da>
 800a00e:	4620      	mov	r0, r4
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 fdc9 	bl	8000ba8 <__aeabi_d2lz>
 800a016:	f7f6 faa1 	bl	800055c <__aeabi_l2d>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 f911 	bl	8000248 <__aeabi_dsub>
 800a026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a028:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a02c:	ea43 0308 	orr.w	r3, r3, r8
 800a030:	4313      	orrs	r3, r2
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	d066      	beq.n	800a106 <_strtod_l+0xb8e>
 800a038:	a309      	add	r3, pc, #36	; (adr r3, 800a060 <_strtod_l+0xae8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 fd2d 	bl	8000a9c <__aeabi_dcmplt>
 800a042:	2800      	cmp	r0, #0
 800a044:	f47f ace2 	bne.w	8009a0c <_strtod_l+0x494>
 800a048:	a307      	add	r3, pc, #28	; (adr r3, 800a068 <_strtod_l+0xaf0>)
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	4620      	mov	r0, r4
 800a050:	4629      	mov	r1, r5
 800a052:	f7f6 fd41 	bl	8000ad8 <__aeabi_dcmpgt>
 800a056:	2800      	cmp	r0, #0
 800a058:	f43f af7b 	beq.w	8009f52 <_strtod_l+0x9da>
 800a05c:	e4d6      	b.n	8009a0c <_strtod_l+0x494>
 800a05e:	bf00      	nop
 800a060:	94a03595 	.word	0x94a03595
 800a064:	3fdfffff 	.word	0x3fdfffff
 800a068:	35afe535 	.word	0x35afe535
 800a06c:	3fe00000 	.word	0x3fe00000
 800a070:	000fffff 	.word	0x000fffff
 800a074:	7ff00000 	.word	0x7ff00000
 800a078:	7fefffff 	.word	0x7fefffff
 800a07c:	3ff00000 	.word	0x3ff00000
 800a080:	7fe00000 	.word	0x7fe00000
 800a084:	7c9fffff 	.word	0x7c9fffff
 800a088:	3fe00000 	.word	0x3fe00000
 800a08c:	bff00000 	.word	0xbff00000
 800a090:	9b05      	ldr	r3, [sp, #20]
 800a092:	b313      	cbz	r3, 800a0da <_strtod_l+0xb62>
 800a094:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a096:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a09a:	d81e      	bhi.n	800a0da <_strtod_l+0xb62>
 800a09c:	a326      	add	r3, pc, #152	; (adr r3, 800a138 <_strtod_l+0xbc0>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	f7f6 fd03 	bl	8000ab0 <__aeabi_dcmple>
 800a0aa:	b190      	cbz	r0, 800a0d2 <_strtod_l+0xb5a>
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	f7f6 fd5a 	bl	8000b68 <__aeabi_d2uiz>
 800a0b4:	2801      	cmp	r0, #1
 800a0b6:	bf38      	it	cc
 800a0b8:	2001      	movcc	r0, #1
 800a0ba:	f7f6 fa03 	bl	80004c4 <__aeabi_ui2d>
 800a0be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	460d      	mov	r5, r1
 800a0c4:	b9d3      	cbnz	r3, 800a0fc <_strtod_l+0xb84>
 800a0c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0ca:	9012      	str	r0, [sp, #72]	; 0x48
 800a0cc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a0ce:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a0d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0d4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a0d8:	1a9f      	subs	r7, r3, r2
 800a0da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0de:	f000 ff67 	bl	800afb0 <__ulp>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 fa65 	bl	80005b8 <__aeabi_dmul>
 800a0ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0f2:	f7f6 f8ab 	bl	800024c <__adddf3>
 800a0f6:	4680      	mov	r8, r0
 800a0f8:	4689      	mov	r9, r1
 800a0fa:	e77e      	b.n	8009ffa <_strtod_l+0xa82>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a104:	e7e3      	b.n	800a0ce <_strtod_l+0xb56>
 800a106:	a30e      	add	r3, pc, #56	; (adr r3, 800a140 <_strtod_l+0xbc8>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f7f6 fcc6 	bl	8000a9c <__aeabi_dcmplt>
 800a110:	e7a1      	b.n	800a056 <_strtod_l+0xade>
 800a112:	2300      	movs	r3, #0
 800a114:	930a      	str	r3, [sp, #40]	; 0x28
 800a116:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a118:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	f7ff ba71 	b.w	8009602 <_strtod_l+0x8a>
 800a120:	2a65      	cmp	r2, #101	; 0x65
 800a122:	f43f ab63 	beq.w	80097ec <_strtod_l+0x274>
 800a126:	2a45      	cmp	r2, #69	; 0x45
 800a128:	f43f ab60 	beq.w	80097ec <_strtod_l+0x274>
 800a12c:	2301      	movs	r3, #1
 800a12e:	f7ff bb95 	b.w	800985c <_strtod_l+0x2e4>
 800a132:	bf00      	nop
 800a134:	f3af 8000 	nop.w
 800a138:	ffc00000 	.word	0xffc00000
 800a13c:	41dfffff 	.word	0x41dfffff
 800a140:	94a03595 	.word	0x94a03595
 800a144:	3fcfffff 	.word	0x3fcfffff

0800a148 <strtod>:
 800a148:	460a      	mov	r2, r1
 800a14a:	4601      	mov	r1, r0
 800a14c:	4802      	ldr	r0, [pc, #8]	; (800a158 <strtod+0x10>)
 800a14e:	4b03      	ldr	r3, [pc, #12]	; (800a15c <strtod+0x14>)
 800a150:	6800      	ldr	r0, [r0, #0]
 800a152:	f7ff ba11 	b.w	8009578 <_strtod_l>
 800a156:	bf00      	nop
 800a158:	20000018 	.word	0x20000018
 800a15c:	20000080 	.word	0x20000080

0800a160 <_write_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	4611      	mov	r1, r2
 800a168:	2200      	movs	r2, #0
 800a16a:	4d05      	ldr	r5, [pc, #20]	; (800a180 <_write_r+0x20>)
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	f7f8 f882 	bl	8002278 <_write>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d102      	bne.n	800a17e <_write_r+0x1e>
 800a178:	682b      	ldr	r3, [r5, #0]
 800a17a:	b103      	cbz	r3, 800a17e <_write_r+0x1e>
 800a17c:	6023      	str	r3, [r4, #0]
 800a17e:	bd38      	pop	{r3, r4, r5, pc}
 800a180:	200028ac 	.word	0x200028ac

0800a184 <_close_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	2300      	movs	r3, #0
 800a188:	4d05      	ldr	r5, [pc, #20]	; (800a1a0 <_close_r+0x1c>)
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f8 f88e 	bl	80022b0 <_close>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_close_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_close_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	200028ac 	.word	0x200028ac

0800a1a4 <rshift>:
 800a1a4:	6903      	ldr	r3, [r0, #16]
 800a1a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1ae:	f100 0414 	add.w	r4, r0, #20
 800a1b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1b6:	dd46      	ble.n	800a246 <rshift+0xa2>
 800a1b8:	f011 011f 	ands.w	r1, r1, #31
 800a1bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1c4:	d10c      	bne.n	800a1e0 <rshift+0x3c>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f100 0710 	add.w	r7, r0, #16
 800a1cc:	42b1      	cmp	r1, r6
 800a1ce:	d335      	bcc.n	800a23c <rshift+0x98>
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	1eea      	subs	r2, r5, #3
 800a1d6:	4296      	cmp	r6, r2
 800a1d8:	bf38      	it	cc
 800a1da:	2300      	movcc	r3, #0
 800a1dc:	4423      	add	r3, r4
 800a1de:	e015      	b.n	800a20c <rshift+0x68>
 800a1e0:	46a1      	mov	r9, r4
 800a1e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a1e6:	f1c1 0820 	rsb	r8, r1, #32
 800a1ea:	40cf      	lsrs	r7, r1
 800a1ec:	f105 0e04 	add.w	lr, r5, #4
 800a1f0:	4576      	cmp	r6, lr
 800a1f2:	46f4      	mov	ip, lr
 800a1f4:	d816      	bhi.n	800a224 <rshift+0x80>
 800a1f6:	1a9a      	subs	r2, r3, r2
 800a1f8:	0092      	lsls	r2, r2, #2
 800a1fa:	3a04      	subs	r2, #4
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	42ae      	cmp	r6, r5
 800a200:	bf38      	it	cc
 800a202:	2200      	movcc	r2, #0
 800a204:	18a3      	adds	r3, r4, r2
 800a206:	50a7      	str	r7, [r4, r2]
 800a208:	b107      	cbz	r7, 800a20c <rshift+0x68>
 800a20a:	3304      	adds	r3, #4
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	eba3 0204 	sub.w	r2, r3, r4
 800a212:	bf08      	it	eq
 800a214:	2300      	moveq	r3, #0
 800a216:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a21a:	6102      	str	r2, [r0, #16]
 800a21c:	bf08      	it	eq
 800a21e:	6143      	streq	r3, [r0, #20]
 800a220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a224:	f8dc c000 	ldr.w	ip, [ip]
 800a228:	fa0c fc08 	lsl.w	ip, ip, r8
 800a22c:	ea4c 0707 	orr.w	r7, ip, r7
 800a230:	f849 7b04 	str.w	r7, [r9], #4
 800a234:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a238:	40cf      	lsrs	r7, r1
 800a23a:	e7d9      	b.n	800a1f0 <rshift+0x4c>
 800a23c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a240:	f847 cf04 	str.w	ip, [r7, #4]!
 800a244:	e7c2      	b.n	800a1cc <rshift+0x28>
 800a246:	4623      	mov	r3, r4
 800a248:	e7e0      	b.n	800a20c <rshift+0x68>

0800a24a <__hexdig_fun>:
 800a24a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d802      	bhi.n	800a258 <__hexdig_fun+0xe>
 800a252:	3820      	subs	r0, #32
 800a254:	b2c0      	uxtb	r0, r0
 800a256:	4770      	bx	lr
 800a258:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d801      	bhi.n	800a264 <__hexdig_fun+0x1a>
 800a260:	3847      	subs	r0, #71	; 0x47
 800a262:	e7f7      	b.n	800a254 <__hexdig_fun+0xa>
 800a264:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a268:	2b05      	cmp	r3, #5
 800a26a:	d801      	bhi.n	800a270 <__hexdig_fun+0x26>
 800a26c:	3827      	subs	r0, #39	; 0x27
 800a26e:	e7f1      	b.n	800a254 <__hexdig_fun+0xa>
 800a270:	2000      	movs	r0, #0
 800a272:	4770      	bx	lr

0800a274 <__gethex>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	b08b      	sub	sp, #44	; 0x2c
 800a27a:	9305      	str	r3, [sp, #20]
 800a27c:	4bb2      	ldr	r3, [pc, #712]	; (800a548 <__gethex+0x2d4>)
 800a27e:	9002      	str	r0, [sp, #8]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	468b      	mov	fp, r1
 800a284:	4618      	mov	r0, r3
 800a286:	4690      	mov	r8, r2
 800a288:	9303      	str	r3, [sp, #12]
 800a28a:	f7f5 ffd1 	bl	8000230 <strlen>
 800a28e:	4682      	mov	sl, r0
 800a290:	9b03      	ldr	r3, [sp, #12]
 800a292:	f8db 2000 	ldr.w	r2, [fp]
 800a296:	4403      	add	r3, r0
 800a298:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a29c:	9306      	str	r3, [sp, #24]
 800a29e:	1c93      	adds	r3, r2, #2
 800a2a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a2a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a2a8:	32fe      	adds	r2, #254	; 0xfe
 800a2aa:	18d1      	adds	r1, r2, r3
 800a2ac:	461f      	mov	r7, r3
 800a2ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a2b2:	9101      	str	r1, [sp, #4]
 800a2b4:	2830      	cmp	r0, #48	; 0x30
 800a2b6:	d0f8      	beq.n	800a2aa <__gethex+0x36>
 800a2b8:	f7ff ffc7 	bl	800a24a <__hexdig_fun>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d13a      	bne.n	800a338 <__gethex+0xc4>
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	9903      	ldr	r1, [sp, #12]
 800a2c8:	f001 fe22 	bl	800bf10 <strncmp>
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d166      	bne.n	800a3a0 <__gethex+0x12c>
 800a2d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a2d6:	eb07 060a 	add.w	r6, r7, sl
 800a2da:	f7ff ffb6 	bl	800a24a <__hexdig_fun>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d060      	beq.n	800a3a4 <__gethex+0x130>
 800a2e2:	4633      	mov	r3, r6
 800a2e4:	7818      	ldrb	r0, [r3, #0]
 800a2e6:	461f      	mov	r7, r3
 800a2e8:	2830      	cmp	r0, #48	; 0x30
 800a2ea:	f103 0301 	add.w	r3, r3, #1
 800a2ee:	d0f9      	beq.n	800a2e4 <__gethex+0x70>
 800a2f0:	f7ff ffab 	bl	800a24a <__hexdig_fun>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	fab0 f480 	clz	r4, r0
 800a2fa:	4635      	mov	r5, r6
 800a2fc:	0964      	lsrs	r4, r4, #5
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	463a      	mov	r2, r7
 800a302:	4616      	mov	r6, r2
 800a304:	7830      	ldrb	r0, [r6, #0]
 800a306:	3201      	adds	r2, #1
 800a308:	f7ff ff9f 	bl	800a24a <__hexdig_fun>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1f8      	bne.n	800a302 <__gethex+0x8e>
 800a310:	4652      	mov	r2, sl
 800a312:	4630      	mov	r0, r6
 800a314:	9903      	ldr	r1, [sp, #12]
 800a316:	f001 fdfb 	bl	800bf10 <strncmp>
 800a31a:	b980      	cbnz	r0, 800a33e <__gethex+0xca>
 800a31c:	b94d      	cbnz	r5, 800a332 <__gethex+0xbe>
 800a31e:	eb06 050a 	add.w	r5, r6, sl
 800a322:	462a      	mov	r2, r5
 800a324:	4616      	mov	r6, r2
 800a326:	7830      	ldrb	r0, [r6, #0]
 800a328:	3201      	adds	r2, #1
 800a32a:	f7ff ff8e 	bl	800a24a <__hexdig_fun>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d1f8      	bne.n	800a324 <__gethex+0xb0>
 800a332:	1bad      	subs	r5, r5, r6
 800a334:	00ad      	lsls	r5, r5, #2
 800a336:	e004      	b.n	800a342 <__gethex+0xce>
 800a338:	2400      	movs	r4, #0
 800a33a:	4625      	mov	r5, r4
 800a33c:	e7e0      	b.n	800a300 <__gethex+0x8c>
 800a33e:	2d00      	cmp	r5, #0
 800a340:	d1f7      	bne.n	800a332 <__gethex+0xbe>
 800a342:	7833      	ldrb	r3, [r6, #0]
 800a344:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a348:	2b50      	cmp	r3, #80	; 0x50
 800a34a:	d139      	bne.n	800a3c0 <__gethex+0x14c>
 800a34c:	7873      	ldrb	r3, [r6, #1]
 800a34e:	2b2b      	cmp	r3, #43	; 0x2b
 800a350:	d02a      	beq.n	800a3a8 <__gethex+0x134>
 800a352:	2b2d      	cmp	r3, #45	; 0x2d
 800a354:	d02c      	beq.n	800a3b0 <__gethex+0x13c>
 800a356:	f04f 0900 	mov.w	r9, #0
 800a35a:	1c71      	adds	r1, r6, #1
 800a35c:	7808      	ldrb	r0, [r1, #0]
 800a35e:	f7ff ff74 	bl	800a24a <__hexdig_fun>
 800a362:	1e43      	subs	r3, r0, #1
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b18      	cmp	r3, #24
 800a368:	d82a      	bhi.n	800a3c0 <__gethex+0x14c>
 800a36a:	f1a0 0210 	sub.w	r2, r0, #16
 800a36e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a372:	f7ff ff6a 	bl	800a24a <__hexdig_fun>
 800a376:	1e43      	subs	r3, r0, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b18      	cmp	r3, #24
 800a37c:	d91b      	bls.n	800a3b6 <__gethex+0x142>
 800a37e:	f1b9 0f00 	cmp.w	r9, #0
 800a382:	d000      	beq.n	800a386 <__gethex+0x112>
 800a384:	4252      	negs	r2, r2
 800a386:	4415      	add	r5, r2
 800a388:	f8cb 1000 	str.w	r1, [fp]
 800a38c:	b1d4      	cbz	r4, 800a3c4 <__gethex+0x150>
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	2b00      	cmp	r3, #0
 800a392:	bf14      	ite	ne
 800a394:	2700      	movne	r7, #0
 800a396:	2706      	moveq	r7, #6
 800a398:	4638      	mov	r0, r7
 800a39a:	b00b      	add	sp, #44	; 0x2c
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a0:	463e      	mov	r6, r7
 800a3a2:	4625      	mov	r5, r4
 800a3a4:	2401      	movs	r4, #1
 800a3a6:	e7cc      	b.n	800a342 <__gethex+0xce>
 800a3a8:	f04f 0900 	mov.w	r9, #0
 800a3ac:	1cb1      	adds	r1, r6, #2
 800a3ae:	e7d5      	b.n	800a35c <__gethex+0xe8>
 800a3b0:	f04f 0901 	mov.w	r9, #1
 800a3b4:	e7fa      	b.n	800a3ac <__gethex+0x138>
 800a3b6:	230a      	movs	r3, #10
 800a3b8:	fb03 0202 	mla	r2, r3, r2, r0
 800a3bc:	3a10      	subs	r2, #16
 800a3be:	e7d6      	b.n	800a36e <__gethex+0xfa>
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	e7e1      	b.n	800a388 <__gethex+0x114>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	1bf3      	subs	r3, r6, r7
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	dc0a      	bgt.n	800a3e4 <__gethex+0x170>
 800a3ce:	9802      	ldr	r0, [sp, #8]
 800a3d0:	f000 fa7e 	bl	800a8d0 <_Balloc>
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	b940      	cbnz	r0, 800a3ea <__gethex+0x176>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	21de      	movs	r1, #222	; 0xde
 800a3dc:	4b5b      	ldr	r3, [pc, #364]	; (800a54c <__gethex+0x2d8>)
 800a3de:	485c      	ldr	r0, [pc, #368]	; (800a550 <__gethex+0x2dc>)
 800a3e0:	f001 fee2 	bl	800c1a8 <__assert_func>
 800a3e4:	3101      	adds	r1, #1
 800a3e6:	105b      	asrs	r3, r3, #1
 800a3e8:	e7ef      	b.n	800a3ca <__gethex+0x156>
 800a3ea:	f04f 0b00 	mov.w	fp, #0
 800a3ee:	f100 0914 	add.w	r9, r0, #20
 800a3f2:	f1ca 0301 	rsb	r3, sl, #1
 800a3f6:	f8cd 9010 	str.w	r9, [sp, #16]
 800a3fa:	f8cd b004 	str.w	fp, [sp, #4]
 800a3fe:	9308      	str	r3, [sp, #32]
 800a400:	42b7      	cmp	r7, r6
 800a402:	d33f      	bcc.n	800a484 <__gethex+0x210>
 800a404:	9f04      	ldr	r7, [sp, #16]
 800a406:	9b01      	ldr	r3, [sp, #4]
 800a408:	f847 3b04 	str.w	r3, [r7], #4
 800a40c:	eba7 0709 	sub.w	r7, r7, r9
 800a410:	10bf      	asrs	r7, r7, #2
 800a412:	6127      	str	r7, [r4, #16]
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fb4d 	bl	800aab4 <__hi0bits>
 800a41a:	017f      	lsls	r7, r7, #5
 800a41c:	f8d8 6000 	ldr.w	r6, [r8]
 800a420:	1a3f      	subs	r7, r7, r0
 800a422:	42b7      	cmp	r7, r6
 800a424:	dd62      	ble.n	800a4ec <__gethex+0x278>
 800a426:	1bbf      	subs	r7, r7, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	4620      	mov	r0, r4
 800a42c:	f000 fee7 	bl	800b1fe <__any_on>
 800a430:	4682      	mov	sl, r0
 800a432:	b1a8      	cbz	r0, 800a460 <__gethex+0x1ec>
 800a434:	f04f 0a01 	mov.w	sl, #1
 800a438:	1e7b      	subs	r3, r7, #1
 800a43a:	1159      	asrs	r1, r3, #5
 800a43c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a440:	f003 021f 	and.w	r2, r3, #31
 800a444:	fa0a f202 	lsl.w	r2, sl, r2
 800a448:	420a      	tst	r2, r1
 800a44a:	d009      	beq.n	800a460 <__gethex+0x1ec>
 800a44c:	4553      	cmp	r3, sl
 800a44e:	dd05      	ble.n	800a45c <__gethex+0x1e8>
 800a450:	4620      	mov	r0, r4
 800a452:	1eb9      	subs	r1, r7, #2
 800a454:	f000 fed3 	bl	800b1fe <__any_on>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d144      	bne.n	800a4e6 <__gethex+0x272>
 800a45c:	f04f 0a02 	mov.w	sl, #2
 800a460:	4639      	mov	r1, r7
 800a462:	4620      	mov	r0, r4
 800a464:	f7ff fe9e 	bl	800a1a4 <rshift>
 800a468:	443d      	add	r5, r7
 800a46a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a46e:	42ab      	cmp	r3, r5
 800a470:	da4a      	bge.n	800a508 <__gethex+0x294>
 800a472:	4621      	mov	r1, r4
 800a474:	9802      	ldr	r0, [sp, #8]
 800a476:	f000 fa6b 	bl	800a950 <_Bfree>
 800a47a:	2300      	movs	r3, #0
 800a47c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a47e:	27a3      	movs	r7, #163	; 0xa3
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	e789      	b.n	800a398 <__gethex+0x124>
 800a484:	1e73      	subs	r3, r6, #1
 800a486:	9a06      	ldr	r2, [sp, #24]
 800a488:	9307      	str	r3, [sp, #28]
 800a48a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a48e:	4293      	cmp	r3, r2
 800a490:	d019      	beq.n	800a4c6 <__gethex+0x252>
 800a492:	f1bb 0f20 	cmp.w	fp, #32
 800a496:	d107      	bne.n	800a4a8 <__gethex+0x234>
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	9a01      	ldr	r2, [sp, #4]
 800a49c:	f843 2b04 	str.w	r2, [r3], #4
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	469b      	mov	fp, r3
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a4ac:	f7ff fecd 	bl	800a24a <__hexdig_fun>
 800a4b0:	9b01      	ldr	r3, [sp, #4]
 800a4b2:	f000 000f 	and.w	r0, r0, #15
 800a4b6:	fa00 f00b 	lsl.w	r0, r0, fp
 800a4ba:	4303      	orrs	r3, r0
 800a4bc:	9301      	str	r3, [sp, #4]
 800a4be:	f10b 0b04 	add.w	fp, fp, #4
 800a4c2:	9b07      	ldr	r3, [sp, #28]
 800a4c4:	e00d      	b.n	800a4e2 <__gethex+0x26e>
 800a4c6:	9a08      	ldr	r2, [sp, #32]
 800a4c8:	1e73      	subs	r3, r6, #1
 800a4ca:	4413      	add	r3, r2
 800a4cc:	42bb      	cmp	r3, r7
 800a4ce:	d3e0      	bcc.n	800a492 <__gethex+0x21e>
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	4652      	mov	r2, sl
 800a4d4:	9903      	ldr	r1, [sp, #12]
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	f001 fd1a 	bl	800bf10 <strncmp>
 800a4dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d1d7      	bne.n	800a492 <__gethex+0x21e>
 800a4e2:	461e      	mov	r6, r3
 800a4e4:	e78c      	b.n	800a400 <__gethex+0x18c>
 800a4e6:	f04f 0a03 	mov.w	sl, #3
 800a4ea:	e7b9      	b.n	800a460 <__gethex+0x1ec>
 800a4ec:	da09      	bge.n	800a502 <__gethex+0x28e>
 800a4ee:	1bf7      	subs	r7, r6, r7
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	463a      	mov	r2, r7
 800a4f4:	9802      	ldr	r0, [sp, #8]
 800a4f6:	f000 fc43 	bl	800ad80 <__lshift>
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	1bed      	subs	r5, r5, r7
 800a4fe:	f100 0914 	add.w	r9, r0, #20
 800a502:	f04f 0a00 	mov.w	sl, #0
 800a506:	e7b0      	b.n	800a46a <__gethex+0x1f6>
 800a508:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a50c:	42a8      	cmp	r0, r5
 800a50e:	dd72      	ble.n	800a5f6 <__gethex+0x382>
 800a510:	1b45      	subs	r5, r0, r5
 800a512:	42ae      	cmp	r6, r5
 800a514:	dc35      	bgt.n	800a582 <__gethex+0x30e>
 800a516:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d029      	beq.n	800a572 <__gethex+0x2fe>
 800a51e:	2b03      	cmp	r3, #3
 800a520:	d02b      	beq.n	800a57a <__gethex+0x306>
 800a522:	2b01      	cmp	r3, #1
 800a524:	d11c      	bne.n	800a560 <__gethex+0x2ec>
 800a526:	42ae      	cmp	r6, r5
 800a528:	d11a      	bne.n	800a560 <__gethex+0x2ec>
 800a52a:	2e01      	cmp	r6, #1
 800a52c:	d112      	bne.n	800a554 <__gethex+0x2e0>
 800a52e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a532:	9a05      	ldr	r2, [sp, #20]
 800a534:	2762      	movs	r7, #98	; 0x62
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	2301      	movs	r3, #1
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	f8c9 3000 	str.w	r3, [r9]
 800a540:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a542:	601c      	str	r4, [r3, #0]
 800a544:	e728      	b.n	800a398 <__gethex+0x124>
 800a546:	bf00      	nop
 800a548:	0800db98 	.word	0x0800db98
 800a54c:	0800db20 	.word	0x0800db20
 800a550:	0800db31 	.word	0x0800db31
 800a554:	4620      	mov	r0, r4
 800a556:	1e71      	subs	r1, r6, #1
 800a558:	f000 fe51 	bl	800b1fe <__any_on>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d1e6      	bne.n	800a52e <__gethex+0x2ba>
 800a560:	4621      	mov	r1, r4
 800a562:	9802      	ldr	r0, [sp, #8]
 800a564:	f000 f9f4 	bl	800a950 <_Bfree>
 800a568:	2300      	movs	r3, #0
 800a56a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a56c:	2750      	movs	r7, #80	; 0x50
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	e712      	b.n	800a398 <__gethex+0x124>
 800a572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1f3      	bne.n	800a560 <__gethex+0x2ec>
 800a578:	e7d9      	b.n	800a52e <__gethex+0x2ba>
 800a57a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1d6      	bne.n	800a52e <__gethex+0x2ba>
 800a580:	e7ee      	b.n	800a560 <__gethex+0x2ec>
 800a582:	1e6f      	subs	r7, r5, #1
 800a584:	f1ba 0f00 	cmp.w	sl, #0
 800a588:	d132      	bne.n	800a5f0 <__gethex+0x37c>
 800a58a:	b127      	cbz	r7, 800a596 <__gethex+0x322>
 800a58c:	4639      	mov	r1, r7
 800a58e:	4620      	mov	r0, r4
 800a590:	f000 fe35 	bl	800b1fe <__any_on>
 800a594:	4682      	mov	sl, r0
 800a596:	2101      	movs	r1, #1
 800a598:	117b      	asrs	r3, r7, #5
 800a59a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a59e:	f007 071f 	and.w	r7, r7, #31
 800a5a2:	fa01 f707 	lsl.w	r7, r1, r7
 800a5a6:	421f      	tst	r7, r3
 800a5a8:	f04f 0702 	mov.w	r7, #2
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	bf18      	it	ne
 800a5b2:	f04a 0a02 	orrne.w	sl, sl, #2
 800a5b6:	1b76      	subs	r6, r6, r5
 800a5b8:	f7ff fdf4 	bl	800a1a4 <rshift>
 800a5bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	d048      	beq.n	800a658 <__gethex+0x3e4>
 800a5c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d015      	beq.n	800a5fa <__gethex+0x386>
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d017      	beq.n	800a602 <__gethex+0x38e>
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d109      	bne.n	800a5ea <__gethex+0x376>
 800a5d6:	f01a 0f02 	tst.w	sl, #2
 800a5da:	d006      	beq.n	800a5ea <__gethex+0x376>
 800a5dc:	f8d9 0000 	ldr.w	r0, [r9]
 800a5e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800a5e4:	f01a 0f01 	tst.w	sl, #1
 800a5e8:	d10e      	bne.n	800a608 <__gethex+0x394>
 800a5ea:	f047 0710 	orr.w	r7, r7, #16
 800a5ee:	e033      	b.n	800a658 <__gethex+0x3e4>
 800a5f0:	f04f 0a01 	mov.w	sl, #1
 800a5f4:	e7cf      	b.n	800a596 <__gethex+0x322>
 800a5f6:	2701      	movs	r7, #1
 800a5f8:	e7e2      	b.n	800a5c0 <__gethex+0x34c>
 800a5fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a5fc:	f1c3 0301 	rsb	r3, r3, #1
 800a600:	9315      	str	r3, [sp, #84]	; 0x54
 800a602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0f0      	beq.n	800a5ea <__gethex+0x376>
 800a608:	f04f 0c00 	mov.w	ip, #0
 800a60c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a610:	f104 0314 	add.w	r3, r4, #20
 800a614:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a618:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a61c:	4618      	mov	r0, r3
 800a61e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a622:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a626:	d01c      	beq.n	800a662 <__gethex+0x3ee>
 800a628:	3201      	adds	r2, #1
 800a62a:	6002      	str	r2, [r0, #0]
 800a62c:	2f02      	cmp	r7, #2
 800a62e:	f104 0314 	add.w	r3, r4, #20
 800a632:	d13d      	bne.n	800a6b0 <__gethex+0x43c>
 800a634:	f8d8 2000 	ldr.w	r2, [r8]
 800a638:	3a01      	subs	r2, #1
 800a63a:	42b2      	cmp	r2, r6
 800a63c:	d10a      	bne.n	800a654 <__gethex+0x3e0>
 800a63e:	2201      	movs	r2, #1
 800a640:	1171      	asrs	r1, r6, #5
 800a642:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a646:	f006 061f 	and.w	r6, r6, #31
 800a64a:	fa02 f606 	lsl.w	r6, r2, r6
 800a64e:	421e      	tst	r6, r3
 800a650:	bf18      	it	ne
 800a652:	4617      	movne	r7, r2
 800a654:	f047 0720 	orr.w	r7, r7, #32
 800a658:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a65a:	601c      	str	r4, [r3, #0]
 800a65c:	9b05      	ldr	r3, [sp, #20]
 800a65e:	601d      	str	r5, [r3, #0]
 800a660:	e69a      	b.n	800a398 <__gethex+0x124>
 800a662:	4299      	cmp	r1, r3
 800a664:	f843 cc04 	str.w	ip, [r3, #-4]
 800a668:	d8d8      	bhi.n	800a61c <__gethex+0x3a8>
 800a66a:	68a3      	ldr	r3, [r4, #8]
 800a66c:	459b      	cmp	fp, r3
 800a66e:	db17      	blt.n	800a6a0 <__gethex+0x42c>
 800a670:	6861      	ldr	r1, [r4, #4]
 800a672:	9802      	ldr	r0, [sp, #8]
 800a674:	3101      	adds	r1, #1
 800a676:	f000 f92b 	bl	800a8d0 <_Balloc>
 800a67a:	4681      	mov	r9, r0
 800a67c:	b918      	cbnz	r0, 800a686 <__gethex+0x412>
 800a67e:	4602      	mov	r2, r0
 800a680:	2184      	movs	r1, #132	; 0x84
 800a682:	4b19      	ldr	r3, [pc, #100]	; (800a6e8 <__gethex+0x474>)
 800a684:	e6ab      	b.n	800a3de <__gethex+0x16a>
 800a686:	6922      	ldr	r2, [r4, #16]
 800a688:	f104 010c 	add.w	r1, r4, #12
 800a68c:	3202      	adds	r2, #2
 800a68e:	0092      	lsls	r2, r2, #2
 800a690:	300c      	adds	r0, #12
 800a692:	f7fe fda9 	bl	80091e8 <memcpy>
 800a696:	4621      	mov	r1, r4
 800a698:	9802      	ldr	r0, [sp, #8]
 800a69a:	f000 f959 	bl	800a950 <_Bfree>
 800a69e:	464c      	mov	r4, r9
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	6122      	str	r2, [r4, #16]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6ac:	615a      	str	r2, [r3, #20]
 800a6ae:	e7bd      	b.n	800a62c <__gethex+0x3b8>
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	455a      	cmp	r2, fp
 800a6b4:	dd0b      	ble.n	800a6ce <__gethex+0x45a>
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f7ff fd73 	bl	800a1a4 <rshift>
 800a6be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6c2:	3501      	adds	r5, #1
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	f6ff aed4 	blt.w	800a472 <__gethex+0x1fe>
 800a6ca:	2701      	movs	r7, #1
 800a6cc:	e7c2      	b.n	800a654 <__gethex+0x3e0>
 800a6ce:	f016 061f 	ands.w	r6, r6, #31
 800a6d2:	d0fa      	beq.n	800a6ca <__gethex+0x456>
 800a6d4:	4453      	add	r3, sl
 800a6d6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6da:	f000 f9eb 	bl	800aab4 <__hi0bits>
 800a6de:	f1c6 0620 	rsb	r6, r6, #32
 800a6e2:	42b0      	cmp	r0, r6
 800a6e4:	dbe7      	blt.n	800a6b6 <__gethex+0x442>
 800a6e6:	e7f0      	b.n	800a6ca <__gethex+0x456>
 800a6e8:	0800db20 	.word	0x0800db20

0800a6ec <L_shift>:
 800a6ec:	f1c2 0208 	rsb	r2, r2, #8
 800a6f0:	0092      	lsls	r2, r2, #2
 800a6f2:	b570      	push	{r4, r5, r6, lr}
 800a6f4:	f1c2 0620 	rsb	r6, r2, #32
 800a6f8:	6843      	ldr	r3, [r0, #4]
 800a6fa:	6804      	ldr	r4, [r0, #0]
 800a6fc:	fa03 f506 	lsl.w	r5, r3, r6
 800a700:	432c      	orrs	r4, r5
 800a702:	40d3      	lsrs	r3, r2
 800a704:	6004      	str	r4, [r0, #0]
 800a706:	f840 3f04 	str.w	r3, [r0, #4]!
 800a70a:	4288      	cmp	r0, r1
 800a70c:	d3f4      	bcc.n	800a6f8 <L_shift+0xc>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}

0800a710 <__match>:
 800a710:	b530      	push	{r4, r5, lr}
 800a712:	6803      	ldr	r3, [r0, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a71a:	b914      	cbnz	r4, 800a722 <__match+0x12>
 800a71c:	6003      	str	r3, [r0, #0]
 800a71e:	2001      	movs	r0, #1
 800a720:	bd30      	pop	{r4, r5, pc}
 800a722:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a726:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a72a:	2d19      	cmp	r5, #25
 800a72c:	bf98      	it	ls
 800a72e:	3220      	addls	r2, #32
 800a730:	42a2      	cmp	r2, r4
 800a732:	d0f0      	beq.n	800a716 <__match+0x6>
 800a734:	2000      	movs	r0, #0
 800a736:	e7f3      	b.n	800a720 <__match+0x10>

0800a738 <__hexnan>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	2500      	movs	r5, #0
 800a73e:	680b      	ldr	r3, [r1, #0]
 800a740:	4682      	mov	sl, r0
 800a742:	115e      	asrs	r6, r3, #5
 800a744:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a748:	f013 031f 	ands.w	r3, r3, #31
 800a74c:	bf18      	it	ne
 800a74e:	3604      	addne	r6, #4
 800a750:	1f37      	subs	r7, r6, #4
 800a752:	46b9      	mov	r9, r7
 800a754:	463c      	mov	r4, r7
 800a756:	46ab      	mov	fp, r5
 800a758:	b087      	sub	sp, #28
 800a75a:	4690      	mov	r8, r2
 800a75c:	6802      	ldr	r2, [r0, #0]
 800a75e:	9301      	str	r3, [sp, #4]
 800a760:	f846 5c04 	str.w	r5, [r6, #-4]
 800a764:	9502      	str	r5, [sp, #8]
 800a766:	7851      	ldrb	r1, [r2, #1]
 800a768:	1c53      	adds	r3, r2, #1
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	b341      	cbz	r1, 800a7c0 <__hexnan+0x88>
 800a76e:	4608      	mov	r0, r1
 800a770:	9205      	str	r2, [sp, #20]
 800a772:	9104      	str	r1, [sp, #16]
 800a774:	f7ff fd69 	bl	800a24a <__hexdig_fun>
 800a778:	2800      	cmp	r0, #0
 800a77a:	d14f      	bne.n	800a81c <__hexnan+0xe4>
 800a77c:	9904      	ldr	r1, [sp, #16]
 800a77e:	9a05      	ldr	r2, [sp, #20]
 800a780:	2920      	cmp	r1, #32
 800a782:	d818      	bhi.n	800a7b6 <__hexnan+0x7e>
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	459b      	cmp	fp, r3
 800a788:	dd13      	ble.n	800a7b2 <__hexnan+0x7a>
 800a78a:	454c      	cmp	r4, r9
 800a78c:	d206      	bcs.n	800a79c <__hexnan+0x64>
 800a78e:	2d07      	cmp	r5, #7
 800a790:	dc04      	bgt.n	800a79c <__hexnan+0x64>
 800a792:	462a      	mov	r2, r5
 800a794:	4649      	mov	r1, r9
 800a796:	4620      	mov	r0, r4
 800a798:	f7ff ffa8 	bl	800a6ec <L_shift>
 800a79c:	4544      	cmp	r4, r8
 800a79e:	d950      	bls.n	800a842 <__hexnan+0x10a>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f1a4 0904 	sub.w	r9, r4, #4
 800a7a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a7aa:	461d      	mov	r5, r3
 800a7ac:	464c      	mov	r4, r9
 800a7ae:	f8cd b008 	str.w	fp, [sp, #8]
 800a7b2:	9a03      	ldr	r2, [sp, #12]
 800a7b4:	e7d7      	b.n	800a766 <__hexnan+0x2e>
 800a7b6:	2929      	cmp	r1, #41	; 0x29
 800a7b8:	d156      	bne.n	800a868 <__hexnan+0x130>
 800a7ba:	3202      	adds	r2, #2
 800a7bc:	f8ca 2000 	str.w	r2, [sl]
 800a7c0:	f1bb 0f00 	cmp.w	fp, #0
 800a7c4:	d050      	beq.n	800a868 <__hexnan+0x130>
 800a7c6:	454c      	cmp	r4, r9
 800a7c8:	d206      	bcs.n	800a7d8 <__hexnan+0xa0>
 800a7ca:	2d07      	cmp	r5, #7
 800a7cc:	dc04      	bgt.n	800a7d8 <__hexnan+0xa0>
 800a7ce:	462a      	mov	r2, r5
 800a7d0:	4649      	mov	r1, r9
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7ff ff8a 	bl	800a6ec <L_shift>
 800a7d8:	4544      	cmp	r4, r8
 800a7da:	d934      	bls.n	800a846 <__hexnan+0x10e>
 800a7dc:	4623      	mov	r3, r4
 800a7de:	f1a8 0204 	sub.w	r2, r8, #4
 800a7e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7e6:	429f      	cmp	r7, r3
 800a7e8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7ec:	d2f9      	bcs.n	800a7e2 <__hexnan+0xaa>
 800a7ee:	1b3b      	subs	r3, r7, r4
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	3401      	adds	r4, #1
 800a7f8:	3e03      	subs	r6, #3
 800a7fa:	42b4      	cmp	r4, r6
 800a7fc:	bf88      	it	hi
 800a7fe:	2304      	movhi	r3, #4
 800a800:	2200      	movs	r2, #0
 800a802:	4443      	add	r3, r8
 800a804:	f843 2b04 	str.w	r2, [r3], #4
 800a808:	429f      	cmp	r7, r3
 800a80a:	d2fb      	bcs.n	800a804 <__hexnan+0xcc>
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	b91b      	cbnz	r3, 800a818 <__hexnan+0xe0>
 800a810:	4547      	cmp	r7, r8
 800a812:	d127      	bne.n	800a864 <__hexnan+0x12c>
 800a814:	2301      	movs	r3, #1
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	2005      	movs	r0, #5
 800a81a:	e026      	b.n	800a86a <__hexnan+0x132>
 800a81c:	3501      	adds	r5, #1
 800a81e:	2d08      	cmp	r5, #8
 800a820:	f10b 0b01 	add.w	fp, fp, #1
 800a824:	dd06      	ble.n	800a834 <__hexnan+0xfc>
 800a826:	4544      	cmp	r4, r8
 800a828:	d9c3      	bls.n	800a7b2 <__hexnan+0x7a>
 800a82a:	2300      	movs	r3, #0
 800a82c:	2501      	movs	r5, #1
 800a82e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a832:	3c04      	subs	r4, #4
 800a834:	6822      	ldr	r2, [r4, #0]
 800a836:	f000 000f 	and.w	r0, r0, #15
 800a83a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a83e:	6022      	str	r2, [r4, #0]
 800a840:	e7b7      	b.n	800a7b2 <__hexnan+0x7a>
 800a842:	2508      	movs	r5, #8
 800a844:	e7b5      	b.n	800a7b2 <__hexnan+0x7a>
 800a846:	9b01      	ldr	r3, [sp, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0df      	beq.n	800a80c <__hexnan+0xd4>
 800a84c:	f04f 32ff 	mov.w	r2, #4294967295
 800a850:	f1c3 0320 	rsb	r3, r3, #32
 800a854:	fa22 f303 	lsr.w	r3, r2, r3
 800a858:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a85c:	401a      	ands	r2, r3
 800a85e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a862:	e7d3      	b.n	800a80c <__hexnan+0xd4>
 800a864:	3f04      	subs	r7, #4
 800a866:	e7d1      	b.n	800a80c <__hexnan+0xd4>
 800a868:	2004      	movs	r0, #4
 800a86a:	b007      	add	sp, #28
 800a86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a870 <_lseek_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4604      	mov	r4, r0
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	2200      	movs	r2, #0
 800a87a:	4d05      	ldr	r5, [pc, #20]	; (800a890 <_lseek_r+0x20>)
 800a87c:	602a      	str	r2, [r5, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	f7f7 fd3a 	bl	80022f8 <_lseek>
 800a884:	1c43      	adds	r3, r0, #1
 800a886:	d102      	bne.n	800a88e <_lseek_r+0x1e>
 800a888:	682b      	ldr	r3, [r5, #0]
 800a88a:	b103      	cbz	r3, 800a88e <_lseek_r+0x1e>
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	200028ac 	.word	0x200028ac

0800a894 <__ascii_mbtowc>:
 800a894:	b082      	sub	sp, #8
 800a896:	b901      	cbnz	r1, 800a89a <__ascii_mbtowc+0x6>
 800a898:	a901      	add	r1, sp, #4
 800a89a:	b142      	cbz	r2, 800a8ae <__ascii_mbtowc+0x1a>
 800a89c:	b14b      	cbz	r3, 800a8b2 <__ascii_mbtowc+0x1e>
 800a89e:	7813      	ldrb	r3, [r2, #0]
 800a8a0:	600b      	str	r3, [r1, #0]
 800a8a2:	7812      	ldrb	r2, [r2, #0]
 800a8a4:	1e10      	subs	r0, r2, #0
 800a8a6:	bf18      	it	ne
 800a8a8:	2001      	movne	r0, #1
 800a8aa:	b002      	add	sp, #8
 800a8ac:	4770      	bx	lr
 800a8ae:	4610      	mov	r0, r2
 800a8b0:	e7fb      	b.n	800a8aa <__ascii_mbtowc+0x16>
 800a8b2:	f06f 0001 	mvn.w	r0, #1
 800a8b6:	e7f8      	b.n	800a8aa <__ascii_mbtowc+0x16>

0800a8b8 <__malloc_lock>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	; (800a8c0 <__malloc_lock+0x8>)
 800a8ba:	f001 be59 	b.w	800c570 <__retarget_lock_acquire_recursive>
 800a8be:	bf00      	nop
 800a8c0:	200028b0 	.word	0x200028b0

0800a8c4 <__malloc_unlock>:
 800a8c4:	4801      	ldr	r0, [pc, #4]	; (800a8cc <__malloc_unlock+0x8>)
 800a8c6:	f001 be54 	b.w	800c572 <__retarget_lock_release_recursive>
 800a8ca:	bf00      	nop
 800a8cc:	200028b0 	.word	0x200028b0

0800a8d0 <_Balloc>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	460d      	mov	r5, r1
 800a8d8:	b976      	cbnz	r6, 800a8f8 <_Balloc+0x28>
 800a8da:	2010      	movs	r0, #16
 800a8dc:	f7fe fc74 	bl	80091c8 <malloc>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a8e4:	b920      	cbnz	r0, 800a8f0 <_Balloc+0x20>
 800a8e6:	2166      	movs	r1, #102	; 0x66
 800a8e8:	4b17      	ldr	r3, [pc, #92]	; (800a948 <_Balloc+0x78>)
 800a8ea:	4818      	ldr	r0, [pc, #96]	; (800a94c <_Balloc+0x7c>)
 800a8ec:	f001 fc5c 	bl	800c1a8 <__assert_func>
 800a8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8f4:	6006      	str	r6, [r0, #0]
 800a8f6:	60c6      	str	r6, [r0, #12]
 800a8f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8fa:	68f3      	ldr	r3, [r6, #12]
 800a8fc:	b183      	cbz	r3, 800a920 <_Balloc+0x50>
 800a8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a906:	b9b8      	cbnz	r0, 800a938 <_Balloc+0x68>
 800a908:	2101      	movs	r1, #1
 800a90a:	fa01 f605 	lsl.w	r6, r1, r5
 800a90e:	1d72      	adds	r2, r6, #5
 800a910:	4620      	mov	r0, r4
 800a912:	0092      	lsls	r2, r2, #2
 800a914:	f7fe fc7e 	bl	8009214 <_calloc_r>
 800a918:	b160      	cbz	r0, 800a934 <_Balloc+0x64>
 800a91a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a91e:	e00e      	b.n	800a93e <_Balloc+0x6e>
 800a920:	2221      	movs	r2, #33	; 0x21
 800a922:	2104      	movs	r1, #4
 800a924:	4620      	mov	r0, r4
 800a926:	f7fe fc75 	bl	8009214 <_calloc_r>
 800a92a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a92c:	60f0      	str	r0, [r6, #12]
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1e4      	bne.n	800a8fe <_Balloc+0x2e>
 800a934:	2000      	movs	r0, #0
 800a936:	bd70      	pop	{r4, r5, r6, pc}
 800a938:	6802      	ldr	r2, [r0, #0]
 800a93a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a93e:	2300      	movs	r3, #0
 800a940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a944:	e7f7      	b.n	800a936 <_Balloc+0x66>
 800a946:	bf00      	nop
 800a948:	0800dbac 	.word	0x0800dbac
 800a94c:	0800dbc3 	.word	0x0800dbc3

0800a950 <_Bfree>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a954:	4605      	mov	r5, r0
 800a956:	460c      	mov	r4, r1
 800a958:	b976      	cbnz	r6, 800a978 <_Bfree+0x28>
 800a95a:	2010      	movs	r0, #16
 800a95c:	f7fe fc34 	bl	80091c8 <malloc>
 800a960:	4602      	mov	r2, r0
 800a962:	6268      	str	r0, [r5, #36]	; 0x24
 800a964:	b920      	cbnz	r0, 800a970 <_Bfree+0x20>
 800a966:	218a      	movs	r1, #138	; 0x8a
 800a968:	4b08      	ldr	r3, [pc, #32]	; (800a98c <_Bfree+0x3c>)
 800a96a:	4809      	ldr	r0, [pc, #36]	; (800a990 <_Bfree+0x40>)
 800a96c:	f001 fc1c 	bl	800c1a8 <__assert_func>
 800a970:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a974:	6006      	str	r6, [r0, #0]
 800a976:	60c6      	str	r6, [r0, #12]
 800a978:	b13c      	cbz	r4, 800a98a <_Bfree+0x3a>
 800a97a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a97c:	6862      	ldr	r2, [r4, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a984:	6021      	str	r1, [r4, #0]
 800a986:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	0800dbac 	.word	0x0800dbac
 800a990:	0800dbc3 	.word	0x0800dbc3

0800a994 <__multadd>:
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	4607      	mov	r7, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	461e      	mov	r6, r3
 800a99e:	2000      	movs	r0, #0
 800a9a0:	690d      	ldr	r5, [r1, #16]
 800a9a2:	f101 0c14 	add.w	ip, r1, #20
 800a9a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a9aa:	3001      	adds	r0, #1
 800a9ac:	b299      	uxth	r1, r3
 800a9ae:	fb02 6101 	mla	r1, r2, r1, r6
 800a9b2:	0c1e      	lsrs	r6, r3, #16
 800a9b4:	0c0b      	lsrs	r3, r1, #16
 800a9b6:	fb02 3306 	mla	r3, r2, r6, r3
 800a9ba:	b289      	uxth	r1, r1
 800a9bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9c0:	4285      	cmp	r5, r0
 800a9c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a9ca:	dcec      	bgt.n	800a9a6 <__multadd+0x12>
 800a9cc:	b30e      	cbz	r6, 800aa12 <__multadd+0x7e>
 800a9ce:	68a3      	ldr	r3, [r4, #8]
 800a9d0:	42ab      	cmp	r3, r5
 800a9d2:	dc19      	bgt.n	800aa08 <__multadd+0x74>
 800a9d4:	6861      	ldr	r1, [r4, #4]
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	3101      	adds	r1, #1
 800a9da:	f7ff ff79 	bl	800a8d0 <_Balloc>
 800a9de:	4680      	mov	r8, r0
 800a9e0:	b928      	cbnz	r0, 800a9ee <__multadd+0x5a>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	21b5      	movs	r1, #181	; 0xb5
 800a9e6:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <__multadd+0x84>)
 800a9e8:	480c      	ldr	r0, [pc, #48]	; (800aa1c <__multadd+0x88>)
 800a9ea:	f001 fbdd 	bl	800c1a8 <__assert_func>
 800a9ee:	6922      	ldr	r2, [r4, #16]
 800a9f0:	f104 010c 	add.w	r1, r4, #12
 800a9f4:	3202      	adds	r2, #2
 800a9f6:	0092      	lsls	r2, r2, #2
 800a9f8:	300c      	adds	r0, #12
 800a9fa:	f7fe fbf5 	bl	80091e8 <memcpy>
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff ffa5 	bl	800a950 <_Bfree>
 800aa06:	4644      	mov	r4, r8
 800aa08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa0c:	3501      	adds	r5, #1
 800aa0e:	615e      	str	r6, [r3, #20]
 800aa10:	6125      	str	r5, [r4, #16]
 800aa12:	4620      	mov	r0, r4
 800aa14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa18:	0800db20 	.word	0x0800db20
 800aa1c:	0800dbc3 	.word	0x0800dbc3

0800aa20 <__s2b>:
 800aa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa24:	4615      	mov	r5, r2
 800aa26:	2209      	movs	r2, #9
 800aa28:	461f      	mov	r7, r3
 800aa2a:	3308      	adds	r3, #8
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa32:	4606      	mov	r6, r0
 800aa34:	2201      	movs	r2, #1
 800aa36:	2100      	movs	r1, #0
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	db09      	blt.n	800aa50 <__s2b+0x30>
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7ff ff47 	bl	800a8d0 <_Balloc>
 800aa42:	b940      	cbnz	r0, 800aa56 <__s2b+0x36>
 800aa44:	4602      	mov	r2, r0
 800aa46:	21ce      	movs	r1, #206	; 0xce
 800aa48:	4b18      	ldr	r3, [pc, #96]	; (800aaac <__s2b+0x8c>)
 800aa4a:	4819      	ldr	r0, [pc, #100]	; (800aab0 <__s2b+0x90>)
 800aa4c:	f001 fbac 	bl	800c1a8 <__assert_func>
 800aa50:	0052      	lsls	r2, r2, #1
 800aa52:	3101      	adds	r1, #1
 800aa54:	e7f0      	b.n	800aa38 <__s2b+0x18>
 800aa56:	9b08      	ldr	r3, [sp, #32]
 800aa58:	2d09      	cmp	r5, #9
 800aa5a:	6143      	str	r3, [r0, #20]
 800aa5c:	f04f 0301 	mov.w	r3, #1
 800aa60:	6103      	str	r3, [r0, #16]
 800aa62:	dd16      	ble.n	800aa92 <__s2b+0x72>
 800aa64:	f104 0909 	add.w	r9, r4, #9
 800aa68:	46c8      	mov	r8, r9
 800aa6a:	442c      	add	r4, r5
 800aa6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa70:	4601      	mov	r1, r0
 800aa72:	220a      	movs	r2, #10
 800aa74:	4630      	mov	r0, r6
 800aa76:	3b30      	subs	r3, #48	; 0x30
 800aa78:	f7ff ff8c 	bl	800a994 <__multadd>
 800aa7c:	45a0      	cmp	r8, r4
 800aa7e:	d1f5      	bne.n	800aa6c <__s2b+0x4c>
 800aa80:	f1a5 0408 	sub.w	r4, r5, #8
 800aa84:	444c      	add	r4, r9
 800aa86:	1b2d      	subs	r5, r5, r4
 800aa88:	1963      	adds	r3, r4, r5
 800aa8a:	42bb      	cmp	r3, r7
 800aa8c:	db04      	blt.n	800aa98 <__s2b+0x78>
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	2509      	movs	r5, #9
 800aa94:	340a      	adds	r4, #10
 800aa96:	e7f6      	b.n	800aa86 <__s2b+0x66>
 800aa98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa9c:	4601      	mov	r1, r0
 800aa9e:	220a      	movs	r2, #10
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	3b30      	subs	r3, #48	; 0x30
 800aaa4:	f7ff ff76 	bl	800a994 <__multadd>
 800aaa8:	e7ee      	b.n	800aa88 <__s2b+0x68>
 800aaaa:	bf00      	nop
 800aaac:	0800db20 	.word	0x0800db20
 800aab0:	0800dbc3 	.word	0x0800dbc3

0800aab4 <__hi0bits>:
 800aab4:	0c02      	lsrs	r2, r0, #16
 800aab6:	0412      	lsls	r2, r2, #16
 800aab8:	4603      	mov	r3, r0
 800aaba:	b9ca      	cbnz	r2, 800aaf0 <__hi0bits+0x3c>
 800aabc:	0403      	lsls	r3, r0, #16
 800aabe:	2010      	movs	r0, #16
 800aac0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aac4:	bf04      	itt	eq
 800aac6:	021b      	lsleq	r3, r3, #8
 800aac8:	3008      	addeq	r0, #8
 800aaca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aace:	bf04      	itt	eq
 800aad0:	011b      	lsleq	r3, r3, #4
 800aad2:	3004      	addeq	r0, #4
 800aad4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aad8:	bf04      	itt	eq
 800aada:	009b      	lsleq	r3, r3, #2
 800aadc:	3002      	addeq	r0, #2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	db05      	blt.n	800aaee <__hi0bits+0x3a>
 800aae2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aae6:	f100 0001 	add.w	r0, r0, #1
 800aaea:	bf08      	it	eq
 800aaec:	2020      	moveq	r0, #32
 800aaee:	4770      	bx	lr
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	e7e5      	b.n	800aac0 <__hi0bits+0xc>

0800aaf4 <__lo0bits>:
 800aaf4:	6803      	ldr	r3, [r0, #0]
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	f013 0007 	ands.w	r0, r3, #7
 800aafc:	d00b      	beq.n	800ab16 <__lo0bits+0x22>
 800aafe:	07d9      	lsls	r1, r3, #31
 800ab00:	d421      	bmi.n	800ab46 <__lo0bits+0x52>
 800ab02:	0798      	lsls	r0, r3, #30
 800ab04:	bf49      	itett	mi
 800ab06:	085b      	lsrmi	r3, r3, #1
 800ab08:	089b      	lsrpl	r3, r3, #2
 800ab0a:	2001      	movmi	r0, #1
 800ab0c:	6013      	strmi	r3, [r2, #0]
 800ab0e:	bf5c      	itt	pl
 800ab10:	2002      	movpl	r0, #2
 800ab12:	6013      	strpl	r3, [r2, #0]
 800ab14:	4770      	bx	lr
 800ab16:	b299      	uxth	r1, r3
 800ab18:	b909      	cbnz	r1, 800ab1e <__lo0bits+0x2a>
 800ab1a:	2010      	movs	r0, #16
 800ab1c:	0c1b      	lsrs	r3, r3, #16
 800ab1e:	b2d9      	uxtb	r1, r3
 800ab20:	b909      	cbnz	r1, 800ab26 <__lo0bits+0x32>
 800ab22:	3008      	adds	r0, #8
 800ab24:	0a1b      	lsrs	r3, r3, #8
 800ab26:	0719      	lsls	r1, r3, #28
 800ab28:	bf04      	itt	eq
 800ab2a:	091b      	lsreq	r3, r3, #4
 800ab2c:	3004      	addeq	r0, #4
 800ab2e:	0799      	lsls	r1, r3, #30
 800ab30:	bf04      	itt	eq
 800ab32:	089b      	lsreq	r3, r3, #2
 800ab34:	3002      	addeq	r0, #2
 800ab36:	07d9      	lsls	r1, r3, #31
 800ab38:	d403      	bmi.n	800ab42 <__lo0bits+0x4e>
 800ab3a:	085b      	lsrs	r3, r3, #1
 800ab3c:	f100 0001 	add.w	r0, r0, #1
 800ab40:	d003      	beq.n	800ab4a <__lo0bits+0x56>
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	4770      	bx	lr
 800ab46:	2000      	movs	r0, #0
 800ab48:	4770      	bx	lr
 800ab4a:	2020      	movs	r0, #32
 800ab4c:	4770      	bx	lr
	...

0800ab50 <__i2b>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	2101      	movs	r1, #1
 800ab56:	f7ff febb 	bl	800a8d0 <_Balloc>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	b928      	cbnz	r0, 800ab6a <__i2b+0x1a>
 800ab5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab62:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <__i2b+0x24>)
 800ab64:	4804      	ldr	r0, [pc, #16]	; (800ab78 <__i2b+0x28>)
 800ab66:	f001 fb1f 	bl	800c1a8 <__assert_func>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	6144      	str	r4, [r0, #20]
 800ab6e:	6103      	str	r3, [r0, #16]
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop
 800ab74:	0800db20 	.word	0x0800db20
 800ab78:	0800dbc3 	.word	0x0800dbc3

0800ab7c <__multiply>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4691      	mov	r9, r2
 800ab82:	690a      	ldr	r2, [r1, #16]
 800ab84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab88:	460c      	mov	r4, r1
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	bfbe      	ittt	lt
 800ab8e:	460b      	movlt	r3, r1
 800ab90:	464c      	movlt	r4, r9
 800ab92:	4699      	movlt	r9, r3
 800ab94:	6927      	ldr	r7, [r4, #16]
 800ab96:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	6861      	ldr	r1, [r4, #4]
 800ab9e:	eb07 060a 	add.w	r6, r7, sl
 800aba2:	42b3      	cmp	r3, r6
 800aba4:	b085      	sub	sp, #20
 800aba6:	bfb8      	it	lt
 800aba8:	3101      	addlt	r1, #1
 800abaa:	f7ff fe91 	bl	800a8d0 <_Balloc>
 800abae:	b930      	cbnz	r0, 800abbe <__multiply+0x42>
 800abb0:	4602      	mov	r2, r0
 800abb2:	f240 115d 	movw	r1, #349	; 0x15d
 800abb6:	4b43      	ldr	r3, [pc, #268]	; (800acc4 <__multiply+0x148>)
 800abb8:	4843      	ldr	r0, [pc, #268]	; (800acc8 <__multiply+0x14c>)
 800abba:	f001 faf5 	bl	800c1a8 <__assert_func>
 800abbe:	f100 0514 	add.w	r5, r0, #20
 800abc2:	462b      	mov	r3, r5
 800abc4:	2200      	movs	r2, #0
 800abc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abca:	4543      	cmp	r3, r8
 800abcc:	d321      	bcc.n	800ac12 <__multiply+0x96>
 800abce:	f104 0314 	add.w	r3, r4, #20
 800abd2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800abd6:	f109 0314 	add.w	r3, r9, #20
 800abda:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800abde:	9202      	str	r2, [sp, #8]
 800abe0:	1b3a      	subs	r2, r7, r4
 800abe2:	3a15      	subs	r2, #21
 800abe4:	f022 0203 	bic.w	r2, r2, #3
 800abe8:	3204      	adds	r2, #4
 800abea:	f104 0115 	add.w	r1, r4, #21
 800abee:	428f      	cmp	r7, r1
 800abf0:	bf38      	it	cc
 800abf2:	2204      	movcc	r2, #4
 800abf4:	9201      	str	r2, [sp, #4]
 800abf6:	9a02      	ldr	r2, [sp, #8]
 800abf8:	9303      	str	r3, [sp, #12]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d80c      	bhi.n	800ac18 <__multiply+0x9c>
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	dd03      	ble.n	800ac0a <__multiply+0x8e>
 800ac02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d059      	beq.n	800acbe <__multiply+0x142>
 800ac0a:	6106      	str	r6, [r0, #16]
 800ac0c:	b005      	add	sp, #20
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	f843 2b04 	str.w	r2, [r3], #4
 800ac16:	e7d8      	b.n	800abca <__multiply+0x4e>
 800ac18:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac1c:	f1ba 0f00 	cmp.w	sl, #0
 800ac20:	d023      	beq.n	800ac6a <__multiply+0xee>
 800ac22:	46a9      	mov	r9, r5
 800ac24:	f04f 0c00 	mov.w	ip, #0
 800ac28:	f104 0e14 	add.w	lr, r4, #20
 800ac2c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac30:	f8d9 1000 	ldr.w	r1, [r9]
 800ac34:	fa1f fb82 	uxth.w	fp, r2
 800ac38:	b289      	uxth	r1, r1
 800ac3a:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac3e:	4461      	add	r1, ip
 800ac40:	f8d9 c000 	ldr.w	ip, [r9]
 800ac44:	0c12      	lsrs	r2, r2, #16
 800ac46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac4a:	fb0a c202 	mla	r2, sl, r2, ip
 800ac4e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac52:	b289      	uxth	r1, r1
 800ac54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac58:	4577      	cmp	r7, lr
 800ac5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac5e:	f849 1b04 	str.w	r1, [r9], #4
 800ac62:	d8e3      	bhi.n	800ac2c <__multiply+0xb0>
 800ac64:	9a01      	ldr	r2, [sp, #4]
 800ac66:	f845 c002 	str.w	ip, [r5, r2]
 800ac6a:	9a03      	ldr	r2, [sp, #12]
 800ac6c:	3304      	adds	r3, #4
 800ac6e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac72:	f1b9 0f00 	cmp.w	r9, #0
 800ac76:	d020      	beq.n	800acba <__multiply+0x13e>
 800ac78:	46ae      	mov	lr, r5
 800ac7a:	f04f 0a00 	mov.w	sl, #0
 800ac7e:	6829      	ldr	r1, [r5, #0]
 800ac80:	f104 0c14 	add.w	ip, r4, #20
 800ac84:	f8bc b000 	ldrh.w	fp, [ip]
 800ac88:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac8c:	b289      	uxth	r1, r1
 800ac8e:	fb09 220b 	mla	r2, r9, fp, r2
 800ac92:	4492      	add	sl, r2
 800ac94:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac98:	f84e 1b04 	str.w	r1, [lr], #4
 800ac9c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aca0:	f8be 1000 	ldrh.w	r1, [lr]
 800aca4:	0c12      	lsrs	r2, r2, #16
 800aca6:	fb09 1102 	mla	r1, r9, r2, r1
 800acaa:	4567      	cmp	r7, ip
 800acac:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800acb0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800acb4:	d8e6      	bhi.n	800ac84 <__multiply+0x108>
 800acb6:	9a01      	ldr	r2, [sp, #4]
 800acb8:	50a9      	str	r1, [r5, r2]
 800acba:	3504      	adds	r5, #4
 800acbc:	e79b      	b.n	800abf6 <__multiply+0x7a>
 800acbe:	3e01      	subs	r6, #1
 800acc0:	e79d      	b.n	800abfe <__multiply+0x82>
 800acc2:	bf00      	nop
 800acc4:	0800db20 	.word	0x0800db20
 800acc8:	0800dbc3 	.word	0x0800dbc3

0800accc <__pow5mult>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	4615      	mov	r5, r2
 800acd2:	f012 0203 	ands.w	r2, r2, #3
 800acd6:	4606      	mov	r6, r0
 800acd8:	460f      	mov	r7, r1
 800acda:	d007      	beq.n	800acec <__pow5mult+0x20>
 800acdc:	4c25      	ldr	r4, [pc, #148]	; (800ad74 <__pow5mult+0xa8>)
 800acde:	3a01      	subs	r2, #1
 800ace0:	2300      	movs	r3, #0
 800ace2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ace6:	f7ff fe55 	bl	800a994 <__multadd>
 800acea:	4607      	mov	r7, r0
 800acec:	10ad      	asrs	r5, r5, #2
 800acee:	d03d      	beq.n	800ad6c <__pow5mult+0xa0>
 800acf0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acf2:	b97c      	cbnz	r4, 800ad14 <__pow5mult+0x48>
 800acf4:	2010      	movs	r0, #16
 800acf6:	f7fe fa67 	bl	80091c8 <malloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	6270      	str	r0, [r6, #36]	; 0x24
 800acfe:	b928      	cbnz	r0, 800ad0c <__pow5mult+0x40>
 800ad00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <__pow5mult+0xac>)
 800ad06:	481d      	ldr	r0, [pc, #116]	; (800ad7c <__pow5mult+0xb0>)
 800ad08:	f001 fa4e 	bl	800c1a8 <__assert_func>
 800ad0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad10:	6004      	str	r4, [r0, #0]
 800ad12:	60c4      	str	r4, [r0, #12]
 800ad14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad1c:	b94c      	cbnz	r4, 800ad32 <__pow5mult+0x66>
 800ad1e:	f240 2171 	movw	r1, #625	; 0x271
 800ad22:	4630      	mov	r0, r6
 800ad24:	f7ff ff14 	bl	800ab50 <__i2b>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad30:	6003      	str	r3, [r0, #0]
 800ad32:	f04f 0900 	mov.w	r9, #0
 800ad36:	07eb      	lsls	r3, r5, #31
 800ad38:	d50a      	bpl.n	800ad50 <__pow5mult+0x84>
 800ad3a:	4639      	mov	r1, r7
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f7ff ff1c 	bl	800ab7c <__multiply>
 800ad44:	4680      	mov	r8, r0
 800ad46:	4639      	mov	r1, r7
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7ff fe01 	bl	800a950 <_Bfree>
 800ad4e:	4647      	mov	r7, r8
 800ad50:	106d      	asrs	r5, r5, #1
 800ad52:	d00b      	beq.n	800ad6c <__pow5mult+0xa0>
 800ad54:	6820      	ldr	r0, [r4, #0]
 800ad56:	b938      	cbnz	r0, 800ad68 <__pow5mult+0x9c>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	f7ff ff0d 	bl	800ab7c <__multiply>
 800ad62:	6020      	str	r0, [r4, #0]
 800ad64:	f8c0 9000 	str.w	r9, [r0]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	e7e4      	b.n	800ad36 <__pow5mult+0x6a>
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad72:	bf00      	nop
 800ad74:	0800dd10 	.word	0x0800dd10
 800ad78:	0800dbac 	.word	0x0800dbac
 800ad7c:	0800dbc3 	.word	0x0800dbc3

0800ad80 <__lshift>:
 800ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	460c      	mov	r4, r1
 800ad86:	4607      	mov	r7, r0
 800ad88:	4691      	mov	r9, r2
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	6849      	ldr	r1, [r1, #4]
 800ad8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad98:	f108 0601 	add.w	r6, r8, #1
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	db0b      	blt.n	800adb8 <__lshift+0x38>
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff fd95 	bl	800a8d0 <_Balloc>
 800ada6:	4605      	mov	r5, r0
 800ada8:	b948      	cbnz	r0, 800adbe <__lshift+0x3e>
 800adaa:	4602      	mov	r2, r0
 800adac:	f240 11d9 	movw	r1, #473	; 0x1d9
 800adb0:	4b29      	ldr	r3, [pc, #164]	; (800ae58 <__lshift+0xd8>)
 800adb2:	482a      	ldr	r0, [pc, #168]	; (800ae5c <__lshift+0xdc>)
 800adb4:	f001 f9f8 	bl	800c1a8 <__assert_func>
 800adb8:	3101      	adds	r1, #1
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	e7ee      	b.n	800ad9c <__lshift+0x1c>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f100 0114 	add.w	r1, r0, #20
 800adc4:	f100 0210 	add.w	r2, r0, #16
 800adc8:	4618      	mov	r0, r3
 800adca:	4553      	cmp	r3, sl
 800adcc:	db37      	blt.n	800ae3e <__lshift+0xbe>
 800adce:	6920      	ldr	r0, [r4, #16]
 800add0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800add4:	f104 0314 	add.w	r3, r4, #20
 800add8:	f019 091f 	ands.w	r9, r9, #31
 800addc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ade0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ade4:	d02f      	beq.n	800ae46 <__lshift+0xc6>
 800ade6:	468a      	mov	sl, r1
 800ade8:	f04f 0c00 	mov.w	ip, #0
 800adec:	f1c9 0e20 	rsb	lr, r9, #32
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	fa02 f209 	lsl.w	r2, r2, r9
 800adf6:	ea42 020c 	orr.w	r2, r2, ip
 800adfa:	f84a 2b04 	str.w	r2, [sl], #4
 800adfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae02:	4298      	cmp	r0, r3
 800ae04:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ae08:	d8f2      	bhi.n	800adf0 <__lshift+0x70>
 800ae0a:	1b03      	subs	r3, r0, r4
 800ae0c:	3b15      	subs	r3, #21
 800ae0e:	f023 0303 	bic.w	r3, r3, #3
 800ae12:	3304      	adds	r3, #4
 800ae14:	f104 0215 	add.w	r2, r4, #21
 800ae18:	4290      	cmp	r0, r2
 800ae1a:	bf38      	it	cc
 800ae1c:	2304      	movcc	r3, #4
 800ae1e:	f841 c003 	str.w	ip, [r1, r3]
 800ae22:	f1bc 0f00 	cmp.w	ip, #0
 800ae26:	d001      	beq.n	800ae2c <__lshift+0xac>
 800ae28:	f108 0602 	add.w	r6, r8, #2
 800ae2c:	3e01      	subs	r6, #1
 800ae2e:	4638      	mov	r0, r7
 800ae30:	4621      	mov	r1, r4
 800ae32:	612e      	str	r6, [r5, #16]
 800ae34:	f7ff fd8c 	bl	800a950 <_Bfree>
 800ae38:	4628      	mov	r0, r5
 800ae3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae3e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae42:	3301      	adds	r3, #1
 800ae44:	e7c1      	b.n	800adca <__lshift+0x4a>
 800ae46:	3904      	subs	r1, #4
 800ae48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae4c:	4298      	cmp	r0, r3
 800ae4e:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae52:	d8f9      	bhi.n	800ae48 <__lshift+0xc8>
 800ae54:	e7ea      	b.n	800ae2c <__lshift+0xac>
 800ae56:	bf00      	nop
 800ae58:	0800db20 	.word	0x0800db20
 800ae5c:	0800dbc3 	.word	0x0800dbc3

0800ae60 <__mcmp>:
 800ae60:	4603      	mov	r3, r0
 800ae62:	690a      	ldr	r2, [r1, #16]
 800ae64:	6900      	ldr	r0, [r0, #16]
 800ae66:	b530      	push	{r4, r5, lr}
 800ae68:	1a80      	subs	r0, r0, r2
 800ae6a:	d10d      	bne.n	800ae88 <__mcmp+0x28>
 800ae6c:	3314      	adds	r3, #20
 800ae6e:	3114      	adds	r1, #20
 800ae70:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae74:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae80:	4295      	cmp	r5, r2
 800ae82:	d002      	beq.n	800ae8a <__mcmp+0x2a>
 800ae84:	d304      	bcc.n	800ae90 <__mcmp+0x30>
 800ae86:	2001      	movs	r0, #1
 800ae88:	bd30      	pop	{r4, r5, pc}
 800ae8a:	42a3      	cmp	r3, r4
 800ae8c:	d3f4      	bcc.n	800ae78 <__mcmp+0x18>
 800ae8e:	e7fb      	b.n	800ae88 <__mcmp+0x28>
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e7f8      	b.n	800ae88 <__mcmp+0x28>
	...

0800ae98 <__mdiff>:
 800ae98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	4607      	mov	r7, r0
 800aea0:	4611      	mov	r1, r2
 800aea2:	4628      	mov	r0, r5
 800aea4:	4614      	mov	r4, r2
 800aea6:	f7ff ffdb 	bl	800ae60 <__mcmp>
 800aeaa:	1e06      	subs	r6, r0, #0
 800aeac:	d111      	bne.n	800aed2 <__mdiff+0x3a>
 800aeae:	4631      	mov	r1, r6
 800aeb0:	4638      	mov	r0, r7
 800aeb2:	f7ff fd0d 	bl	800a8d0 <_Balloc>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	b928      	cbnz	r0, 800aec6 <__mdiff+0x2e>
 800aeba:	f240 2132 	movw	r1, #562	; 0x232
 800aebe:	4b3a      	ldr	r3, [pc, #232]	; (800afa8 <__mdiff+0x110>)
 800aec0:	483a      	ldr	r0, [pc, #232]	; (800afac <__mdiff+0x114>)
 800aec2:	f001 f971 	bl	800c1a8 <__assert_func>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aecc:	4610      	mov	r0, r2
 800aece:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed2:	bfa4      	itt	ge
 800aed4:	4623      	movge	r3, r4
 800aed6:	462c      	movge	r4, r5
 800aed8:	4638      	mov	r0, r7
 800aeda:	6861      	ldr	r1, [r4, #4]
 800aedc:	bfa6      	itte	ge
 800aede:	461d      	movge	r5, r3
 800aee0:	2600      	movge	r6, #0
 800aee2:	2601      	movlt	r6, #1
 800aee4:	f7ff fcf4 	bl	800a8d0 <_Balloc>
 800aee8:	4602      	mov	r2, r0
 800aeea:	b918      	cbnz	r0, 800aef4 <__mdiff+0x5c>
 800aeec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aef0:	4b2d      	ldr	r3, [pc, #180]	; (800afa8 <__mdiff+0x110>)
 800aef2:	e7e5      	b.n	800aec0 <__mdiff+0x28>
 800aef4:	f102 0814 	add.w	r8, r2, #20
 800aef8:	46c2      	mov	sl, r8
 800aefa:	f04f 0c00 	mov.w	ip, #0
 800aefe:	6927      	ldr	r7, [r4, #16]
 800af00:	60c6      	str	r6, [r0, #12]
 800af02:	692e      	ldr	r6, [r5, #16]
 800af04:	f104 0014 	add.w	r0, r4, #20
 800af08:	f105 0914 	add.w	r9, r5, #20
 800af0c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800af10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800af14:	3410      	adds	r4, #16
 800af16:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800af1a:	f859 3b04 	ldr.w	r3, [r9], #4
 800af1e:	fa1f f18b 	uxth.w	r1, fp
 800af22:	448c      	add	ip, r1
 800af24:	b299      	uxth	r1, r3
 800af26:	0c1b      	lsrs	r3, r3, #16
 800af28:	ebac 0101 	sub.w	r1, ip, r1
 800af2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af30:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800af34:	b289      	uxth	r1, r1
 800af36:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800af3a:	454e      	cmp	r6, r9
 800af3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800af40:	f84a 3b04 	str.w	r3, [sl], #4
 800af44:	d8e7      	bhi.n	800af16 <__mdiff+0x7e>
 800af46:	1b73      	subs	r3, r6, r5
 800af48:	3b15      	subs	r3, #21
 800af4a:	f023 0303 	bic.w	r3, r3, #3
 800af4e:	3515      	adds	r5, #21
 800af50:	3304      	adds	r3, #4
 800af52:	42ae      	cmp	r6, r5
 800af54:	bf38      	it	cc
 800af56:	2304      	movcc	r3, #4
 800af58:	4418      	add	r0, r3
 800af5a:	4443      	add	r3, r8
 800af5c:	461e      	mov	r6, r3
 800af5e:	4605      	mov	r5, r0
 800af60:	4575      	cmp	r5, lr
 800af62:	d30e      	bcc.n	800af82 <__mdiff+0xea>
 800af64:	f10e 0103 	add.w	r1, lr, #3
 800af68:	1a09      	subs	r1, r1, r0
 800af6a:	f021 0103 	bic.w	r1, r1, #3
 800af6e:	3803      	subs	r0, #3
 800af70:	4586      	cmp	lr, r0
 800af72:	bf38      	it	cc
 800af74:	2100      	movcc	r1, #0
 800af76:	4419      	add	r1, r3
 800af78:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800af7c:	b18b      	cbz	r3, 800afa2 <__mdiff+0x10a>
 800af7e:	6117      	str	r7, [r2, #16]
 800af80:	e7a4      	b.n	800aecc <__mdiff+0x34>
 800af82:	f855 8b04 	ldr.w	r8, [r5], #4
 800af86:	fa1f f188 	uxth.w	r1, r8
 800af8a:	4461      	add	r1, ip
 800af8c:	140c      	asrs	r4, r1, #16
 800af8e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af92:	b289      	uxth	r1, r1
 800af94:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800af98:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800af9c:	f846 1b04 	str.w	r1, [r6], #4
 800afa0:	e7de      	b.n	800af60 <__mdiff+0xc8>
 800afa2:	3f01      	subs	r7, #1
 800afa4:	e7e8      	b.n	800af78 <__mdiff+0xe0>
 800afa6:	bf00      	nop
 800afa8:	0800db20 	.word	0x0800db20
 800afac:	0800dbc3 	.word	0x0800dbc3

0800afb0 <__ulp>:
 800afb0:	4b11      	ldr	r3, [pc, #68]	; (800aff8 <__ulp+0x48>)
 800afb2:	400b      	ands	r3, r1
 800afb4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	dd02      	ble.n	800afc2 <__ulp+0x12>
 800afbc:	2000      	movs	r0, #0
 800afbe:	4619      	mov	r1, r3
 800afc0:	4770      	bx	lr
 800afc2:	425b      	negs	r3, r3
 800afc4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800afc8:	f04f 0000 	mov.w	r0, #0
 800afcc:	f04f 0100 	mov.w	r1, #0
 800afd0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800afd4:	da04      	bge.n	800afe0 <__ulp+0x30>
 800afd6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800afda:	fa43 f102 	asr.w	r1, r3, r2
 800afde:	4770      	bx	lr
 800afe0:	f1a2 0314 	sub.w	r3, r2, #20
 800afe4:	2b1e      	cmp	r3, #30
 800afe6:	bfd6      	itet	le
 800afe8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800afec:	2301      	movgt	r3, #1
 800afee:	fa22 f303 	lsrle.w	r3, r2, r3
 800aff2:	4618      	mov	r0, r3
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	7ff00000 	.word	0x7ff00000

0800affc <__b2d>:
 800affc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b000:	6907      	ldr	r7, [r0, #16]
 800b002:	f100 0914 	add.w	r9, r0, #20
 800b006:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b00a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b00e:	f1a7 0804 	sub.w	r8, r7, #4
 800b012:	4630      	mov	r0, r6
 800b014:	f7ff fd4e 	bl	800aab4 <__hi0bits>
 800b018:	f1c0 0320 	rsb	r3, r0, #32
 800b01c:	280a      	cmp	r0, #10
 800b01e:	600b      	str	r3, [r1, #0]
 800b020:	491f      	ldr	r1, [pc, #124]	; (800b0a0 <__b2d+0xa4>)
 800b022:	dc17      	bgt.n	800b054 <__b2d+0x58>
 800b024:	45c1      	cmp	r9, r8
 800b026:	bf28      	it	cs
 800b028:	2200      	movcs	r2, #0
 800b02a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b02e:	fa26 f30c 	lsr.w	r3, r6, ip
 800b032:	bf38      	it	cc
 800b034:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b038:	ea43 0501 	orr.w	r5, r3, r1
 800b03c:	f100 0315 	add.w	r3, r0, #21
 800b040:	fa06 f303 	lsl.w	r3, r6, r3
 800b044:	fa22 f20c 	lsr.w	r2, r2, ip
 800b048:	ea43 0402 	orr.w	r4, r3, r2
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b054:	45c1      	cmp	r9, r8
 800b056:	bf2e      	itee	cs
 800b058:	2200      	movcs	r2, #0
 800b05a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b05e:	f1a7 0808 	subcc.w	r8, r7, #8
 800b062:	f1b0 030b 	subs.w	r3, r0, #11
 800b066:	d016      	beq.n	800b096 <__b2d+0x9a>
 800b068:	f1c3 0720 	rsb	r7, r3, #32
 800b06c:	fa22 f107 	lsr.w	r1, r2, r7
 800b070:	45c8      	cmp	r8, r9
 800b072:	fa06 f603 	lsl.w	r6, r6, r3
 800b076:	ea46 0601 	orr.w	r6, r6, r1
 800b07a:	bf94      	ite	ls
 800b07c:	2100      	movls	r1, #0
 800b07e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b082:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b086:	fa02 f003 	lsl.w	r0, r2, r3
 800b08a:	40f9      	lsrs	r1, r7
 800b08c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b090:	ea40 0401 	orr.w	r4, r0, r1
 800b094:	e7da      	b.n	800b04c <__b2d+0x50>
 800b096:	4614      	mov	r4, r2
 800b098:	ea46 0501 	orr.w	r5, r6, r1
 800b09c:	e7d6      	b.n	800b04c <__b2d+0x50>
 800b09e:	bf00      	nop
 800b0a0:	3ff00000 	.word	0x3ff00000

0800b0a4 <__d2b>:
 800b0a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b0ae:	4690      	mov	r8, r2
 800b0b0:	461d      	mov	r5, r3
 800b0b2:	f7ff fc0d 	bl	800a8d0 <_Balloc>
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	b930      	cbnz	r0, 800b0c8 <__d2b+0x24>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	f240 310a 	movw	r1, #778	; 0x30a
 800b0c0:	4b24      	ldr	r3, [pc, #144]	; (800b154 <__d2b+0xb0>)
 800b0c2:	4825      	ldr	r0, [pc, #148]	; (800b158 <__d2b+0xb4>)
 800b0c4:	f001 f870 	bl	800c1a8 <__assert_func>
 800b0c8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b0cc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b0d0:	bb2d      	cbnz	r5, 800b11e <__d2b+0x7a>
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	f1b8 0300 	subs.w	r3, r8, #0
 800b0d8:	d026      	beq.n	800b128 <__d2b+0x84>
 800b0da:	4668      	mov	r0, sp
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	f7ff fd09 	bl	800aaf4 <__lo0bits>
 800b0e2:	9900      	ldr	r1, [sp, #0]
 800b0e4:	b1f0      	cbz	r0, 800b124 <__d2b+0x80>
 800b0e6:	9a01      	ldr	r2, [sp, #4]
 800b0e8:	f1c0 0320 	rsb	r3, r0, #32
 800b0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f0:	430b      	orrs	r3, r1
 800b0f2:	40c2      	lsrs	r2, r0
 800b0f4:	6163      	str	r3, [r4, #20]
 800b0f6:	9201      	str	r2, [sp, #4]
 800b0f8:	9b01      	ldr	r3, [sp, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bf14      	ite	ne
 800b0fe:	2102      	movne	r1, #2
 800b100:	2101      	moveq	r1, #1
 800b102:	61a3      	str	r3, [r4, #24]
 800b104:	6121      	str	r1, [r4, #16]
 800b106:	b1c5      	cbz	r5, 800b13a <__d2b+0x96>
 800b108:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b10c:	4405      	add	r5, r0
 800b10e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b112:	603d      	str	r5, [r7, #0]
 800b114:	6030      	str	r0, [r6, #0]
 800b116:	4620      	mov	r0, r4
 800b118:	b002      	add	sp, #8
 800b11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b122:	e7d6      	b.n	800b0d2 <__d2b+0x2e>
 800b124:	6161      	str	r1, [r4, #20]
 800b126:	e7e7      	b.n	800b0f8 <__d2b+0x54>
 800b128:	a801      	add	r0, sp, #4
 800b12a:	f7ff fce3 	bl	800aaf4 <__lo0bits>
 800b12e:	2101      	movs	r1, #1
 800b130:	9b01      	ldr	r3, [sp, #4]
 800b132:	6121      	str	r1, [r4, #16]
 800b134:	6163      	str	r3, [r4, #20]
 800b136:	3020      	adds	r0, #32
 800b138:	e7e5      	b.n	800b106 <__d2b+0x62>
 800b13a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b13e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b142:	6038      	str	r0, [r7, #0]
 800b144:	6918      	ldr	r0, [r3, #16]
 800b146:	f7ff fcb5 	bl	800aab4 <__hi0bits>
 800b14a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b14e:	6031      	str	r1, [r6, #0]
 800b150:	e7e1      	b.n	800b116 <__d2b+0x72>
 800b152:	bf00      	nop
 800b154:	0800db20 	.word	0x0800db20
 800b158:	0800dbc3 	.word	0x0800dbc3

0800b15c <__ratio>:
 800b15c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b160:	4688      	mov	r8, r1
 800b162:	4669      	mov	r1, sp
 800b164:	4681      	mov	r9, r0
 800b166:	f7ff ff49 	bl	800affc <__b2d>
 800b16a:	460f      	mov	r7, r1
 800b16c:	4604      	mov	r4, r0
 800b16e:	460d      	mov	r5, r1
 800b170:	4640      	mov	r0, r8
 800b172:	a901      	add	r1, sp, #4
 800b174:	f7ff ff42 	bl	800affc <__b2d>
 800b178:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b17c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b180:	468b      	mov	fp, r1
 800b182:	eba3 0c02 	sub.w	ip, r3, r2
 800b186:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfd5      	itete	le
 800b194:	460a      	movle	r2, r1
 800b196:	462a      	movgt	r2, r5
 800b198:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b19c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b1a0:	bfd8      	it	le
 800b1a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b1a6:	465b      	mov	r3, fp
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7f5 fb2d 	bl	800080c <__aeabi_ddiv>
 800b1b2:	b003      	add	sp, #12
 800b1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1b8 <__copybits>:
 800b1b8:	3901      	subs	r1, #1
 800b1ba:	b570      	push	{r4, r5, r6, lr}
 800b1bc:	1149      	asrs	r1, r1, #5
 800b1be:	6914      	ldr	r4, [r2, #16]
 800b1c0:	3101      	adds	r1, #1
 800b1c2:	f102 0314 	add.w	r3, r2, #20
 800b1c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1ce:	1f05      	subs	r5, r0, #4
 800b1d0:	42a3      	cmp	r3, r4
 800b1d2:	d30c      	bcc.n	800b1ee <__copybits+0x36>
 800b1d4:	1aa3      	subs	r3, r4, r2
 800b1d6:	3b11      	subs	r3, #17
 800b1d8:	f023 0303 	bic.w	r3, r3, #3
 800b1dc:	3211      	adds	r2, #17
 800b1de:	42a2      	cmp	r2, r4
 800b1e0:	bf88      	it	hi
 800b1e2:	2300      	movhi	r3, #0
 800b1e4:	4418      	add	r0, r3
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	4288      	cmp	r0, r1
 800b1ea:	d305      	bcc.n	800b1f8 <__copybits+0x40>
 800b1ec:	bd70      	pop	{r4, r5, r6, pc}
 800b1ee:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1f2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1f6:	e7eb      	b.n	800b1d0 <__copybits+0x18>
 800b1f8:	f840 3b04 	str.w	r3, [r0], #4
 800b1fc:	e7f4      	b.n	800b1e8 <__copybits+0x30>

0800b1fe <__any_on>:
 800b1fe:	f100 0214 	add.w	r2, r0, #20
 800b202:	6900      	ldr	r0, [r0, #16]
 800b204:	114b      	asrs	r3, r1, #5
 800b206:	4298      	cmp	r0, r3
 800b208:	b510      	push	{r4, lr}
 800b20a:	db11      	blt.n	800b230 <__any_on+0x32>
 800b20c:	dd0a      	ble.n	800b224 <__any_on+0x26>
 800b20e:	f011 011f 	ands.w	r1, r1, #31
 800b212:	d007      	beq.n	800b224 <__any_on+0x26>
 800b214:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b218:	fa24 f001 	lsr.w	r0, r4, r1
 800b21c:	fa00 f101 	lsl.w	r1, r0, r1
 800b220:	428c      	cmp	r4, r1
 800b222:	d10b      	bne.n	800b23c <__any_on+0x3e>
 800b224:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b228:	4293      	cmp	r3, r2
 800b22a:	d803      	bhi.n	800b234 <__any_on+0x36>
 800b22c:	2000      	movs	r0, #0
 800b22e:	bd10      	pop	{r4, pc}
 800b230:	4603      	mov	r3, r0
 800b232:	e7f7      	b.n	800b224 <__any_on+0x26>
 800b234:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b238:	2900      	cmp	r1, #0
 800b23a:	d0f5      	beq.n	800b228 <__any_on+0x2a>
 800b23c:	2001      	movs	r0, #1
 800b23e:	e7f6      	b.n	800b22e <__any_on+0x30>

0800b240 <__ssputs_r>:
 800b240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b244:	688e      	ldr	r6, [r1, #8]
 800b246:	4682      	mov	sl, r0
 800b248:	429e      	cmp	r6, r3
 800b24a:	460c      	mov	r4, r1
 800b24c:	4690      	mov	r8, r2
 800b24e:	461f      	mov	r7, r3
 800b250:	d838      	bhi.n	800b2c4 <__ssputs_r+0x84>
 800b252:	898a      	ldrh	r2, [r1, #12]
 800b254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b258:	d032      	beq.n	800b2c0 <__ssputs_r+0x80>
 800b25a:	6825      	ldr	r5, [r4, #0]
 800b25c:	6909      	ldr	r1, [r1, #16]
 800b25e:	3301      	adds	r3, #1
 800b260:	eba5 0901 	sub.w	r9, r5, r1
 800b264:	6965      	ldr	r5, [r4, #20]
 800b266:	444b      	add	r3, r9
 800b268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b26c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b270:	106d      	asrs	r5, r5, #1
 800b272:	429d      	cmp	r5, r3
 800b274:	bf38      	it	cc
 800b276:	461d      	movcc	r5, r3
 800b278:	0553      	lsls	r3, r2, #21
 800b27a:	d531      	bpl.n	800b2e0 <__ssputs_r+0xa0>
 800b27c:	4629      	mov	r1, r5
 800b27e:	f7fe f845 	bl	800930c <_malloc_r>
 800b282:	4606      	mov	r6, r0
 800b284:	b950      	cbnz	r0, 800b29c <__ssputs_r+0x5c>
 800b286:	230c      	movs	r3, #12
 800b288:	f04f 30ff 	mov.w	r0, #4294967295
 800b28c:	f8ca 3000 	str.w	r3, [sl]
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29c:	464a      	mov	r2, r9
 800b29e:	6921      	ldr	r1, [r4, #16]
 800b2a0:	f7fd ffa2 	bl	80091e8 <memcpy>
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ae:	81a3      	strh	r3, [r4, #12]
 800b2b0:	6126      	str	r6, [r4, #16]
 800b2b2:	444e      	add	r6, r9
 800b2b4:	6026      	str	r6, [r4, #0]
 800b2b6:	463e      	mov	r6, r7
 800b2b8:	6165      	str	r5, [r4, #20]
 800b2ba:	eba5 0509 	sub.w	r5, r5, r9
 800b2be:	60a5      	str	r5, [r4, #8]
 800b2c0:	42be      	cmp	r6, r7
 800b2c2:	d900      	bls.n	800b2c6 <__ssputs_r+0x86>
 800b2c4:	463e      	mov	r6, r7
 800b2c6:	4632      	mov	r2, r6
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	6820      	ldr	r0, [r4, #0]
 800b2cc:	f001 f960 	bl	800c590 <memmove>
 800b2d0:	68a3      	ldr	r3, [r4, #8]
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	1b9b      	subs	r3, r3, r6
 800b2d6:	60a3      	str	r3, [r4, #8]
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	4433      	add	r3, r6
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	e7db      	b.n	800b298 <__ssputs_r+0x58>
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	f001 f96f 	bl	800c5c4 <_realloc_r>
 800b2e6:	4606      	mov	r6, r0
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d1e1      	bne.n	800b2b0 <__ssputs_r+0x70>
 800b2ec:	4650      	mov	r0, sl
 800b2ee:	6921      	ldr	r1, [r4, #16]
 800b2f0:	f7fd ffa4 	bl	800923c <_free_r>
 800b2f4:	e7c7      	b.n	800b286 <__ssputs_r+0x46>
	...

0800b2f8 <_svfiprintf_r>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	4698      	mov	r8, r3
 800b2fe:	898b      	ldrh	r3, [r1, #12]
 800b300:	4607      	mov	r7, r0
 800b302:	061b      	lsls	r3, r3, #24
 800b304:	460d      	mov	r5, r1
 800b306:	4614      	mov	r4, r2
 800b308:	b09d      	sub	sp, #116	; 0x74
 800b30a:	d50e      	bpl.n	800b32a <_svfiprintf_r+0x32>
 800b30c:	690b      	ldr	r3, [r1, #16]
 800b30e:	b963      	cbnz	r3, 800b32a <_svfiprintf_r+0x32>
 800b310:	2140      	movs	r1, #64	; 0x40
 800b312:	f7fd fffb 	bl	800930c <_malloc_r>
 800b316:	6028      	str	r0, [r5, #0]
 800b318:	6128      	str	r0, [r5, #16]
 800b31a:	b920      	cbnz	r0, 800b326 <_svfiprintf_r+0x2e>
 800b31c:	230c      	movs	r3, #12
 800b31e:	603b      	str	r3, [r7, #0]
 800b320:	f04f 30ff 	mov.w	r0, #4294967295
 800b324:	e0d1      	b.n	800b4ca <_svfiprintf_r+0x1d2>
 800b326:	2340      	movs	r3, #64	; 0x40
 800b328:	616b      	str	r3, [r5, #20]
 800b32a:	2300      	movs	r3, #0
 800b32c:	9309      	str	r3, [sp, #36]	; 0x24
 800b32e:	2320      	movs	r3, #32
 800b330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b334:	2330      	movs	r3, #48	; 0x30
 800b336:	f04f 0901 	mov.w	r9, #1
 800b33a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b33e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b4e4 <_svfiprintf_r+0x1ec>
 800b342:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b346:	4623      	mov	r3, r4
 800b348:	469a      	mov	sl, r3
 800b34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b34e:	b10a      	cbz	r2, 800b354 <_svfiprintf_r+0x5c>
 800b350:	2a25      	cmp	r2, #37	; 0x25
 800b352:	d1f9      	bne.n	800b348 <_svfiprintf_r+0x50>
 800b354:	ebba 0b04 	subs.w	fp, sl, r4
 800b358:	d00b      	beq.n	800b372 <_svfiprintf_r+0x7a>
 800b35a:	465b      	mov	r3, fp
 800b35c:	4622      	mov	r2, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	4638      	mov	r0, r7
 800b362:	f7ff ff6d 	bl	800b240 <__ssputs_r>
 800b366:	3001      	adds	r0, #1
 800b368:	f000 80aa 	beq.w	800b4c0 <_svfiprintf_r+0x1c8>
 800b36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36e:	445a      	add	r2, fp
 800b370:	9209      	str	r2, [sp, #36]	; 0x24
 800b372:	f89a 3000 	ldrb.w	r3, [sl]
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 80a2 	beq.w	800b4c0 <_svfiprintf_r+0x1c8>
 800b37c:	2300      	movs	r3, #0
 800b37e:	f04f 32ff 	mov.w	r2, #4294967295
 800b382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b386:	f10a 0a01 	add.w	sl, sl, #1
 800b38a:	9304      	str	r3, [sp, #16]
 800b38c:	9307      	str	r3, [sp, #28]
 800b38e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b392:	931a      	str	r3, [sp, #104]	; 0x68
 800b394:	4654      	mov	r4, sl
 800b396:	2205      	movs	r2, #5
 800b398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b39c:	4851      	ldr	r0, [pc, #324]	; (800b4e4 <_svfiprintf_r+0x1ec>)
 800b39e:	f001 f8e9 	bl	800c574 <memchr>
 800b3a2:	9a04      	ldr	r2, [sp, #16]
 800b3a4:	b9d8      	cbnz	r0, 800b3de <_svfiprintf_r+0xe6>
 800b3a6:	06d0      	lsls	r0, r2, #27
 800b3a8:	bf44      	itt	mi
 800b3aa:	2320      	movmi	r3, #32
 800b3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b0:	0711      	lsls	r1, r2, #28
 800b3b2:	bf44      	itt	mi
 800b3b4:	232b      	movmi	r3, #43	; 0x2b
 800b3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b3be:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c0:	d015      	beq.n	800b3ee <_svfiprintf_r+0xf6>
 800b3c2:	4654      	mov	r4, sl
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	f04f 0c0a 	mov.w	ip, #10
 800b3ca:	9a07      	ldr	r2, [sp, #28]
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3d2:	3b30      	subs	r3, #48	; 0x30
 800b3d4:	2b09      	cmp	r3, #9
 800b3d6:	d94e      	bls.n	800b476 <_svfiprintf_r+0x17e>
 800b3d8:	b1b0      	cbz	r0, 800b408 <_svfiprintf_r+0x110>
 800b3da:	9207      	str	r2, [sp, #28]
 800b3dc:	e014      	b.n	800b408 <_svfiprintf_r+0x110>
 800b3de:	eba0 0308 	sub.w	r3, r0, r8
 800b3e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	46a2      	mov	sl, r4
 800b3ea:	9304      	str	r3, [sp, #16]
 800b3ec:	e7d2      	b.n	800b394 <_svfiprintf_r+0x9c>
 800b3ee:	9b03      	ldr	r3, [sp, #12]
 800b3f0:	1d19      	adds	r1, r3, #4
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	9103      	str	r1, [sp, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	bfbb      	ittet	lt
 800b3fa:	425b      	neglt	r3, r3
 800b3fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b400:	9307      	strge	r3, [sp, #28]
 800b402:	9307      	strlt	r3, [sp, #28]
 800b404:	bfb8      	it	lt
 800b406:	9204      	strlt	r2, [sp, #16]
 800b408:	7823      	ldrb	r3, [r4, #0]
 800b40a:	2b2e      	cmp	r3, #46	; 0x2e
 800b40c:	d10c      	bne.n	800b428 <_svfiprintf_r+0x130>
 800b40e:	7863      	ldrb	r3, [r4, #1]
 800b410:	2b2a      	cmp	r3, #42	; 0x2a
 800b412:	d135      	bne.n	800b480 <_svfiprintf_r+0x188>
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	3402      	adds	r4, #2
 800b418:	1d1a      	adds	r2, r3, #4
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	9203      	str	r2, [sp, #12]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	bfb8      	it	lt
 800b422:	f04f 33ff 	movlt.w	r3, #4294967295
 800b426:	9305      	str	r3, [sp, #20]
 800b428:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b4e8 <_svfiprintf_r+0x1f0>
 800b42c:	2203      	movs	r2, #3
 800b42e:	4650      	mov	r0, sl
 800b430:	7821      	ldrb	r1, [r4, #0]
 800b432:	f001 f89f 	bl	800c574 <memchr>
 800b436:	b140      	cbz	r0, 800b44a <_svfiprintf_r+0x152>
 800b438:	2340      	movs	r3, #64	; 0x40
 800b43a:	eba0 000a 	sub.w	r0, r0, sl
 800b43e:	fa03 f000 	lsl.w	r0, r3, r0
 800b442:	9b04      	ldr	r3, [sp, #16]
 800b444:	3401      	adds	r4, #1
 800b446:	4303      	orrs	r3, r0
 800b448:	9304      	str	r3, [sp, #16]
 800b44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b44e:	2206      	movs	r2, #6
 800b450:	4826      	ldr	r0, [pc, #152]	; (800b4ec <_svfiprintf_r+0x1f4>)
 800b452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b456:	f001 f88d 	bl	800c574 <memchr>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	d038      	beq.n	800b4d0 <_svfiprintf_r+0x1d8>
 800b45e:	4b24      	ldr	r3, [pc, #144]	; (800b4f0 <_svfiprintf_r+0x1f8>)
 800b460:	bb1b      	cbnz	r3, 800b4aa <_svfiprintf_r+0x1b2>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	3307      	adds	r3, #7
 800b466:	f023 0307 	bic.w	r3, r3, #7
 800b46a:	3308      	adds	r3, #8
 800b46c:	9303      	str	r3, [sp, #12]
 800b46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b470:	4433      	add	r3, r6
 800b472:	9309      	str	r3, [sp, #36]	; 0x24
 800b474:	e767      	b.n	800b346 <_svfiprintf_r+0x4e>
 800b476:	460c      	mov	r4, r1
 800b478:	2001      	movs	r0, #1
 800b47a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b47e:	e7a5      	b.n	800b3cc <_svfiprintf_r+0xd4>
 800b480:	2300      	movs	r3, #0
 800b482:	f04f 0c0a 	mov.w	ip, #10
 800b486:	4619      	mov	r1, r3
 800b488:	3401      	adds	r4, #1
 800b48a:	9305      	str	r3, [sp, #20]
 800b48c:	4620      	mov	r0, r4
 800b48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b492:	3a30      	subs	r2, #48	; 0x30
 800b494:	2a09      	cmp	r2, #9
 800b496:	d903      	bls.n	800b4a0 <_svfiprintf_r+0x1a8>
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0c5      	beq.n	800b428 <_svfiprintf_r+0x130>
 800b49c:	9105      	str	r1, [sp, #20]
 800b49e:	e7c3      	b.n	800b428 <_svfiprintf_r+0x130>
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4a8:	e7f0      	b.n	800b48c <_svfiprintf_r+0x194>
 800b4aa:	ab03      	add	r3, sp, #12
 800b4ac:	9300      	str	r3, [sp, #0]
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4638      	mov	r0, r7
 800b4b2:	4b10      	ldr	r3, [pc, #64]	; (800b4f4 <_svfiprintf_r+0x1fc>)
 800b4b4:	a904      	add	r1, sp, #16
 800b4b6:	f3af 8000 	nop.w
 800b4ba:	1c42      	adds	r2, r0, #1
 800b4bc:	4606      	mov	r6, r0
 800b4be:	d1d6      	bne.n	800b46e <_svfiprintf_r+0x176>
 800b4c0:	89ab      	ldrh	r3, [r5, #12]
 800b4c2:	065b      	lsls	r3, r3, #25
 800b4c4:	f53f af2c 	bmi.w	800b320 <_svfiprintf_r+0x28>
 800b4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4ca:	b01d      	add	sp, #116	; 0x74
 800b4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d0:	ab03      	add	r3, sp, #12
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	462a      	mov	r2, r5
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	4b06      	ldr	r3, [pc, #24]	; (800b4f4 <_svfiprintf_r+0x1fc>)
 800b4da:	a904      	add	r1, sp, #16
 800b4dc:	f000 fa50 	bl	800b980 <_printf_i>
 800b4e0:	e7eb      	b.n	800b4ba <_svfiprintf_r+0x1c2>
 800b4e2:	bf00      	nop
 800b4e4:	0800dd1c 	.word	0x0800dd1c
 800b4e8:	0800dd22 	.word	0x0800dd22
 800b4ec:	0800dd26 	.word	0x0800dd26
 800b4f0:	00000000 	.word	0x00000000
 800b4f4:	0800b241 	.word	0x0800b241

0800b4f8 <_sungetc_r>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	1c4b      	adds	r3, r1, #1
 800b4fc:	4614      	mov	r4, r2
 800b4fe:	d103      	bne.n	800b508 <_sungetc_r+0x10>
 800b500:	f04f 35ff 	mov.w	r5, #4294967295
 800b504:	4628      	mov	r0, r5
 800b506:	bd38      	pop	{r3, r4, r5, pc}
 800b508:	8993      	ldrh	r3, [r2, #12]
 800b50a:	b2cd      	uxtb	r5, r1
 800b50c:	f023 0320 	bic.w	r3, r3, #32
 800b510:	8193      	strh	r3, [r2, #12]
 800b512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b514:	6852      	ldr	r2, [r2, #4]
 800b516:	b18b      	cbz	r3, 800b53c <_sungetc_r+0x44>
 800b518:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b51a:	4293      	cmp	r3, r2
 800b51c:	dd08      	ble.n	800b530 <_sungetc_r+0x38>
 800b51e:	6823      	ldr	r3, [r4, #0]
 800b520:	1e5a      	subs	r2, r3, #1
 800b522:	6022      	str	r2, [r4, #0]
 800b524:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b528:	6863      	ldr	r3, [r4, #4]
 800b52a:	3301      	adds	r3, #1
 800b52c:	6063      	str	r3, [r4, #4]
 800b52e:	e7e9      	b.n	800b504 <_sungetc_r+0xc>
 800b530:	4621      	mov	r1, r4
 800b532:	f000 fdf3 	bl	800c11c <__submore>
 800b536:	2800      	cmp	r0, #0
 800b538:	d0f1      	beq.n	800b51e <_sungetc_r+0x26>
 800b53a:	e7e1      	b.n	800b500 <_sungetc_r+0x8>
 800b53c:	6921      	ldr	r1, [r4, #16]
 800b53e:	6823      	ldr	r3, [r4, #0]
 800b540:	b151      	cbz	r1, 800b558 <_sungetc_r+0x60>
 800b542:	4299      	cmp	r1, r3
 800b544:	d208      	bcs.n	800b558 <_sungetc_r+0x60>
 800b546:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b54a:	42a9      	cmp	r1, r5
 800b54c:	d104      	bne.n	800b558 <_sungetc_r+0x60>
 800b54e:	3b01      	subs	r3, #1
 800b550:	3201      	adds	r2, #1
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	6062      	str	r2, [r4, #4]
 800b556:	e7d5      	b.n	800b504 <_sungetc_r+0xc>
 800b558:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b55c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b560:	6363      	str	r3, [r4, #52]	; 0x34
 800b562:	2303      	movs	r3, #3
 800b564:	63a3      	str	r3, [r4, #56]	; 0x38
 800b566:	4623      	mov	r3, r4
 800b568:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	2301      	movs	r3, #1
 800b570:	e7dc      	b.n	800b52c <_sungetc_r+0x34>

0800b572 <__ssrefill_r>:
 800b572:	b510      	push	{r4, lr}
 800b574:	460c      	mov	r4, r1
 800b576:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b578:	b169      	cbz	r1, 800b596 <__ssrefill_r+0x24>
 800b57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b57e:	4299      	cmp	r1, r3
 800b580:	d001      	beq.n	800b586 <__ssrefill_r+0x14>
 800b582:	f7fd fe5b 	bl	800923c <_free_r>
 800b586:	2000      	movs	r0, #0
 800b588:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b58a:	6360      	str	r0, [r4, #52]	; 0x34
 800b58c:	6063      	str	r3, [r4, #4]
 800b58e:	b113      	cbz	r3, 800b596 <__ssrefill_r+0x24>
 800b590:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b592:	6023      	str	r3, [r4, #0]
 800b594:	bd10      	pop	{r4, pc}
 800b596:	6923      	ldr	r3, [r4, #16]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	6063      	str	r3, [r4, #4]
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	f043 0320 	orr.w	r3, r3, #32
 800b5a8:	81a3      	strh	r3, [r4, #12]
 800b5aa:	e7f3      	b.n	800b594 <__ssrefill_r+0x22>

0800b5ac <__ssvfiscanf_r>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b5ba:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b5be:	49a7      	ldr	r1, [pc, #668]	; (800b85c <__ssvfiscanf_r+0x2b0>)
 800b5c0:	f10d 0804 	add.w	r8, sp, #4
 800b5c4:	91a0      	str	r1, [sp, #640]	; 0x280
 800b5c6:	49a6      	ldr	r1, [pc, #664]	; (800b860 <__ssvfiscanf_r+0x2b4>)
 800b5c8:	4fa6      	ldr	r7, [pc, #664]	; (800b864 <__ssvfiscanf_r+0x2b8>)
 800b5ca:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800b868 <__ssvfiscanf_r+0x2bc>
 800b5ce:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b5d2:	91a1      	str	r1, [sp, #644]	; 0x284
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	7813      	ldrb	r3, [r2, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 815c 	beq.w	800b896 <__ssvfiscanf_r+0x2ea>
 800b5de:	5dd9      	ldrb	r1, [r3, r7]
 800b5e0:	1c55      	adds	r5, r2, #1
 800b5e2:	f011 0108 	ands.w	r1, r1, #8
 800b5e6:	d019      	beq.n	800b61c <__ssvfiscanf_r+0x70>
 800b5e8:	6863      	ldr	r3, [r4, #4]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	dd0f      	ble.n	800b60e <__ssvfiscanf_r+0x62>
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	781a      	ldrb	r2, [r3, #0]
 800b5f2:	5cba      	ldrb	r2, [r7, r2]
 800b5f4:	0712      	lsls	r2, r2, #28
 800b5f6:	d401      	bmi.n	800b5fc <__ssvfiscanf_r+0x50>
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	e7ec      	b.n	800b5d6 <__ssvfiscanf_r+0x2a>
 800b5fc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b5fe:	3301      	adds	r3, #1
 800b600:	3201      	adds	r2, #1
 800b602:	9245      	str	r2, [sp, #276]	; 0x114
 800b604:	6862      	ldr	r2, [r4, #4]
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	3a01      	subs	r2, #1
 800b60a:	6062      	str	r2, [r4, #4]
 800b60c:	e7ec      	b.n	800b5e8 <__ssvfiscanf_r+0x3c>
 800b60e:	4621      	mov	r1, r4
 800b610:	4630      	mov	r0, r6
 800b612:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b614:	4798      	blx	r3
 800b616:	2800      	cmp	r0, #0
 800b618:	d0e9      	beq.n	800b5ee <__ssvfiscanf_r+0x42>
 800b61a:	e7ed      	b.n	800b5f8 <__ssvfiscanf_r+0x4c>
 800b61c:	2b25      	cmp	r3, #37	; 0x25
 800b61e:	d012      	beq.n	800b646 <__ssvfiscanf_r+0x9a>
 800b620:	469a      	mov	sl, r3
 800b622:	6863      	ldr	r3, [r4, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f340 8094 	ble.w	800b752 <__ssvfiscanf_r+0x1a6>
 800b62a:	6822      	ldr	r2, [r4, #0]
 800b62c:	7813      	ldrb	r3, [r2, #0]
 800b62e:	4553      	cmp	r3, sl
 800b630:	f040 8131 	bne.w	800b896 <__ssvfiscanf_r+0x2ea>
 800b634:	6863      	ldr	r3, [r4, #4]
 800b636:	3201      	adds	r2, #1
 800b638:	3b01      	subs	r3, #1
 800b63a:	6063      	str	r3, [r4, #4]
 800b63c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b63e:	6022      	str	r2, [r4, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	9345      	str	r3, [sp, #276]	; 0x114
 800b644:	e7d8      	b.n	800b5f8 <__ssvfiscanf_r+0x4c>
 800b646:	9141      	str	r1, [sp, #260]	; 0x104
 800b648:	9143      	str	r1, [sp, #268]	; 0x10c
 800b64a:	7853      	ldrb	r3, [r2, #1]
 800b64c:	2b2a      	cmp	r3, #42	; 0x2a
 800b64e:	bf04      	itt	eq
 800b650:	2310      	moveq	r3, #16
 800b652:	1c95      	addeq	r5, r2, #2
 800b654:	f04f 020a 	mov.w	r2, #10
 800b658:	bf08      	it	eq
 800b65a:	9341      	streq	r3, [sp, #260]	; 0x104
 800b65c:	46aa      	mov	sl, r5
 800b65e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b662:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b666:	2b09      	cmp	r3, #9
 800b668:	d91d      	bls.n	800b6a6 <__ssvfiscanf_r+0xfa>
 800b66a:	2203      	movs	r2, #3
 800b66c:	487e      	ldr	r0, [pc, #504]	; (800b868 <__ssvfiscanf_r+0x2bc>)
 800b66e:	f000 ff81 	bl	800c574 <memchr>
 800b672:	b140      	cbz	r0, 800b686 <__ssvfiscanf_r+0xda>
 800b674:	2301      	movs	r3, #1
 800b676:	4655      	mov	r5, sl
 800b678:	eba0 0009 	sub.w	r0, r0, r9
 800b67c:	fa03 f000 	lsl.w	r0, r3, r0
 800b680:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b682:	4318      	orrs	r0, r3
 800b684:	9041      	str	r0, [sp, #260]	; 0x104
 800b686:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b68a:	2b78      	cmp	r3, #120	; 0x78
 800b68c:	d806      	bhi.n	800b69c <__ssvfiscanf_r+0xf0>
 800b68e:	2b57      	cmp	r3, #87	; 0x57
 800b690:	d810      	bhi.n	800b6b4 <__ssvfiscanf_r+0x108>
 800b692:	2b25      	cmp	r3, #37	; 0x25
 800b694:	d0c4      	beq.n	800b620 <__ssvfiscanf_r+0x74>
 800b696:	d857      	bhi.n	800b748 <__ssvfiscanf_r+0x19c>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d065      	beq.n	800b768 <__ssvfiscanf_r+0x1bc>
 800b69c:	2303      	movs	r3, #3
 800b69e:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6a0:	230a      	movs	r3, #10
 800b6a2:	9342      	str	r3, [sp, #264]	; 0x108
 800b6a4:	e072      	b.n	800b78c <__ssvfiscanf_r+0x1e0>
 800b6a6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b6a8:	4655      	mov	r5, sl
 800b6aa:	fb02 1103 	mla	r1, r2, r3, r1
 800b6ae:	3930      	subs	r1, #48	; 0x30
 800b6b0:	9143      	str	r1, [sp, #268]	; 0x10c
 800b6b2:	e7d3      	b.n	800b65c <__ssvfiscanf_r+0xb0>
 800b6b4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b6b8:	2a20      	cmp	r2, #32
 800b6ba:	d8ef      	bhi.n	800b69c <__ssvfiscanf_r+0xf0>
 800b6bc:	a101      	add	r1, pc, #4	; (adr r1, 800b6c4 <__ssvfiscanf_r+0x118>)
 800b6be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b777 	.word	0x0800b777
 800b6c8:	0800b69d 	.word	0x0800b69d
 800b6cc:	0800b69d 	.word	0x0800b69d
 800b6d0:	0800b7d5 	.word	0x0800b7d5
 800b6d4:	0800b69d 	.word	0x0800b69d
 800b6d8:	0800b69d 	.word	0x0800b69d
 800b6dc:	0800b69d 	.word	0x0800b69d
 800b6e0:	0800b69d 	.word	0x0800b69d
 800b6e4:	0800b69d 	.word	0x0800b69d
 800b6e8:	0800b69d 	.word	0x0800b69d
 800b6ec:	0800b69d 	.word	0x0800b69d
 800b6f0:	0800b7eb 	.word	0x0800b7eb
 800b6f4:	0800b7c1 	.word	0x0800b7c1
 800b6f8:	0800b74f 	.word	0x0800b74f
 800b6fc:	0800b74f 	.word	0x0800b74f
 800b700:	0800b74f 	.word	0x0800b74f
 800b704:	0800b69d 	.word	0x0800b69d
 800b708:	0800b7c5 	.word	0x0800b7c5
 800b70c:	0800b69d 	.word	0x0800b69d
 800b710:	0800b69d 	.word	0x0800b69d
 800b714:	0800b69d 	.word	0x0800b69d
 800b718:	0800b69d 	.word	0x0800b69d
 800b71c:	0800b7fb 	.word	0x0800b7fb
 800b720:	0800b7cd 	.word	0x0800b7cd
 800b724:	0800b76f 	.word	0x0800b76f
 800b728:	0800b69d 	.word	0x0800b69d
 800b72c:	0800b69d 	.word	0x0800b69d
 800b730:	0800b7f7 	.word	0x0800b7f7
 800b734:	0800b69d 	.word	0x0800b69d
 800b738:	0800b7c1 	.word	0x0800b7c1
 800b73c:	0800b69d 	.word	0x0800b69d
 800b740:	0800b69d 	.word	0x0800b69d
 800b744:	0800b777 	.word	0x0800b777
 800b748:	3b45      	subs	r3, #69	; 0x45
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d8a6      	bhi.n	800b69c <__ssvfiscanf_r+0xf0>
 800b74e:	2305      	movs	r3, #5
 800b750:	e01b      	b.n	800b78a <__ssvfiscanf_r+0x1de>
 800b752:	4621      	mov	r1, r4
 800b754:	4630      	mov	r0, r6
 800b756:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b758:	4798      	blx	r3
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f43f af65 	beq.w	800b62a <__ssvfiscanf_r+0x7e>
 800b760:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b762:	2800      	cmp	r0, #0
 800b764:	f040 808d 	bne.w	800b882 <__ssvfiscanf_r+0x2d6>
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	e08f      	b.n	800b88e <__ssvfiscanf_r+0x2e2>
 800b76e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b770:	f042 0220 	orr.w	r2, r2, #32
 800b774:	9241      	str	r2, [sp, #260]	; 0x104
 800b776:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b77c:	9241      	str	r2, [sp, #260]	; 0x104
 800b77e:	2210      	movs	r2, #16
 800b780:	2b6f      	cmp	r3, #111	; 0x6f
 800b782:	bf34      	ite	cc
 800b784:	2303      	movcc	r3, #3
 800b786:	2304      	movcs	r3, #4
 800b788:	9242      	str	r2, [sp, #264]	; 0x108
 800b78a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b78c:	6863      	ldr	r3, [r4, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	dd42      	ble.n	800b818 <__ssvfiscanf_r+0x26c>
 800b792:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b794:	0659      	lsls	r1, r3, #25
 800b796:	d404      	bmi.n	800b7a2 <__ssvfiscanf_r+0x1f6>
 800b798:	6823      	ldr	r3, [r4, #0]
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	5cba      	ldrb	r2, [r7, r2]
 800b79e:	0712      	lsls	r2, r2, #28
 800b7a0:	d441      	bmi.n	800b826 <__ssvfiscanf_r+0x27a>
 800b7a2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	dc50      	bgt.n	800b84a <__ssvfiscanf_r+0x29e>
 800b7a8:	466b      	mov	r3, sp
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	a941      	add	r1, sp, #260	; 0x104
 800b7b0:	f000 fa0c 	bl	800bbcc <_scanf_chars>
 800b7b4:	2801      	cmp	r0, #1
 800b7b6:	d06e      	beq.n	800b896 <__ssvfiscanf_r+0x2ea>
 800b7b8:	2802      	cmp	r0, #2
 800b7ba:	f47f af1d 	bne.w	800b5f8 <__ssvfiscanf_r+0x4c>
 800b7be:	e7cf      	b.n	800b760 <__ssvfiscanf_r+0x1b4>
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	e7dd      	b.n	800b780 <__ssvfiscanf_r+0x1d4>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	9342      	str	r3, [sp, #264]	; 0x108
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e7de      	b.n	800b78a <__ssvfiscanf_r+0x1de>
 800b7cc:	2308      	movs	r3, #8
 800b7ce:	9342      	str	r3, [sp, #264]	; 0x108
 800b7d0:	2304      	movs	r3, #4
 800b7d2:	e7da      	b.n	800b78a <__ssvfiscanf_r+0x1de>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4640      	mov	r0, r8
 800b7d8:	f000 fb62 	bl	800bea0 <__sccl>
 800b7dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7de:	4605      	mov	r5, r0
 800b7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e4:	9341      	str	r3, [sp, #260]	; 0x104
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e7cf      	b.n	800b78a <__ssvfiscanf_r+0x1de>
 800b7ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7f0:	9341      	str	r3, [sp, #260]	; 0x104
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e7c9      	b.n	800b78a <__ssvfiscanf_r+0x1de>
 800b7f6:	2302      	movs	r3, #2
 800b7f8:	e7c7      	b.n	800b78a <__ssvfiscanf_r+0x1de>
 800b7fa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b7fc:	06c3      	lsls	r3, r0, #27
 800b7fe:	f53f aefb 	bmi.w	800b5f8 <__ssvfiscanf_r+0x4c>
 800b802:	9b00      	ldr	r3, [sp, #0]
 800b804:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b806:	1d19      	adds	r1, r3, #4
 800b808:	9100      	str	r1, [sp, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f010 0f01 	tst.w	r0, #1
 800b810:	bf14      	ite	ne
 800b812:	801a      	strhne	r2, [r3, #0]
 800b814:	601a      	streq	r2, [r3, #0]
 800b816:	e6ef      	b.n	800b5f8 <__ssvfiscanf_r+0x4c>
 800b818:	4621      	mov	r1, r4
 800b81a:	4630      	mov	r0, r6
 800b81c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b81e:	4798      	blx	r3
 800b820:	2800      	cmp	r0, #0
 800b822:	d0b6      	beq.n	800b792 <__ssvfiscanf_r+0x1e6>
 800b824:	e79c      	b.n	800b760 <__ssvfiscanf_r+0x1b4>
 800b826:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b828:	3201      	adds	r2, #1
 800b82a:	9245      	str	r2, [sp, #276]	; 0x114
 800b82c:	6862      	ldr	r2, [r4, #4]
 800b82e:	3a01      	subs	r2, #1
 800b830:	2a00      	cmp	r2, #0
 800b832:	6062      	str	r2, [r4, #4]
 800b834:	dd02      	ble.n	800b83c <__ssvfiscanf_r+0x290>
 800b836:	3301      	adds	r3, #1
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	e7ad      	b.n	800b798 <__ssvfiscanf_r+0x1ec>
 800b83c:	4621      	mov	r1, r4
 800b83e:	4630      	mov	r0, r6
 800b840:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b842:	4798      	blx	r3
 800b844:	2800      	cmp	r0, #0
 800b846:	d0a7      	beq.n	800b798 <__ssvfiscanf_r+0x1ec>
 800b848:	e78a      	b.n	800b760 <__ssvfiscanf_r+0x1b4>
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	dc0e      	bgt.n	800b86c <__ssvfiscanf_r+0x2c0>
 800b84e:	466b      	mov	r3, sp
 800b850:	4622      	mov	r2, r4
 800b852:	4630      	mov	r0, r6
 800b854:	a941      	add	r1, sp, #260	; 0x104
 800b856:	f000 fa13 	bl	800bc80 <_scanf_i>
 800b85a:	e7ab      	b.n	800b7b4 <__ssvfiscanf_r+0x208>
 800b85c:	0800b4f9 	.word	0x0800b4f9
 800b860:	0800b573 	.word	0x0800b573
 800b864:	0800dda7 	.word	0x0800dda7
 800b868:	0800dd22 	.word	0x0800dd22
 800b86c:	4b0b      	ldr	r3, [pc, #44]	; (800b89c <__ssvfiscanf_r+0x2f0>)
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f43f aec2 	beq.w	800b5f8 <__ssvfiscanf_r+0x4c>
 800b874:	466b      	mov	r3, sp
 800b876:	4622      	mov	r2, r4
 800b878:	4630      	mov	r0, r6
 800b87a:	a941      	add	r1, sp, #260	; 0x104
 800b87c:	f3af 8000 	nop.w
 800b880:	e798      	b.n	800b7b4 <__ssvfiscanf_r+0x208>
 800b882:	89a3      	ldrh	r3, [r4, #12]
 800b884:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b888:	bf18      	it	ne
 800b88a:	f04f 30ff 	movne.w	r0, #4294967295
 800b88e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b896:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b898:	e7f9      	b.n	800b88e <__ssvfiscanf_r+0x2e2>
 800b89a:	bf00      	nop
 800b89c:	00000000 	.word	0x00000000

0800b8a0 <_printf_common>:
 800b8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a4:	4616      	mov	r6, r2
 800b8a6:	4699      	mov	r9, r3
 800b8a8:	688a      	ldr	r2, [r1, #8]
 800b8aa:	690b      	ldr	r3, [r1, #16]
 800b8ac:	4607      	mov	r7, r0
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	bfb8      	it	lt
 800b8b2:	4613      	movlt	r3, r2
 800b8b4:	6033      	str	r3, [r6, #0]
 800b8b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8ba:	460c      	mov	r4, r1
 800b8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8c0:	b10a      	cbz	r2, 800b8c6 <_printf_common+0x26>
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	6033      	str	r3, [r6, #0]
 800b8c6:	6823      	ldr	r3, [r4, #0]
 800b8c8:	0699      	lsls	r1, r3, #26
 800b8ca:	bf42      	ittt	mi
 800b8cc:	6833      	ldrmi	r3, [r6, #0]
 800b8ce:	3302      	addmi	r3, #2
 800b8d0:	6033      	strmi	r3, [r6, #0]
 800b8d2:	6825      	ldr	r5, [r4, #0]
 800b8d4:	f015 0506 	ands.w	r5, r5, #6
 800b8d8:	d106      	bne.n	800b8e8 <_printf_common+0x48>
 800b8da:	f104 0a19 	add.w	sl, r4, #25
 800b8de:	68e3      	ldr	r3, [r4, #12]
 800b8e0:	6832      	ldr	r2, [r6, #0]
 800b8e2:	1a9b      	subs	r3, r3, r2
 800b8e4:	42ab      	cmp	r3, r5
 800b8e6:	dc28      	bgt.n	800b93a <_printf_common+0x9a>
 800b8e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8ec:	1e13      	subs	r3, r2, #0
 800b8ee:	6822      	ldr	r2, [r4, #0]
 800b8f0:	bf18      	it	ne
 800b8f2:	2301      	movne	r3, #1
 800b8f4:	0692      	lsls	r2, r2, #26
 800b8f6:	d42d      	bmi.n	800b954 <_printf_common+0xb4>
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b900:	47c0      	blx	r8
 800b902:	3001      	adds	r0, #1
 800b904:	d020      	beq.n	800b948 <_printf_common+0xa8>
 800b906:	6823      	ldr	r3, [r4, #0]
 800b908:	68e5      	ldr	r5, [r4, #12]
 800b90a:	f003 0306 	and.w	r3, r3, #6
 800b90e:	2b04      	cmp	r3, #4
 800b910:	bf18      	it	ne
 800b912:	2500      	movne	r5, #0
 800b914:	6832      	ldr	r2, [r6, #0]
 800b916:	f04f 0600 	mov.w	r6, #0
 800b91a:	68a3      	ldr	r3, [r4, #8]
 800b91c:	bf08      	it	eq
 800b91e:	1aad      	subeq	r5, r5, r2
 800b920:	6922      	ldr	r2, [r4, #16]
 800b922:	bf08      	it	eq
 800b924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b928:	4293      	cmp	r3, r2
 800b92a:	bfc4      	itt	gt
 800b92c:	1a9b      	subgt	r3, r3, r2
 800b92e:	18ed      	addgt	r5, r5, r3
 800b930:	341a      	adds	r4, #26
 800b932:	42b5      	cmp	r5, r6
 800b934:	d11a      	bne.n	800b96c <_printf_common+0xcc>
 800b936:	2000      	movs	r0, #0
 800b938:	e008      	b.n	800b94c <_printf_common+0xac>
 800b93a:	2301      	movs	r3, #1
 800b93c:	4652      	mov	r2, sl
 800b93e:	4649      	mov	r1, r9
 800b940:	4638      	mov	r0, r7
 800b942:	47c0      	blx	r8
 800b944:	3001      	adds	r0, #1
 800b946:	d103      	bne.n	800b950 <_printf_common+0xb0>
 800b948:	f04f 30ff 	mov.w	r0, #4294967295
 800b94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b950:	3501      	adds	r5, #1
 800b952:	e7c4      	b.n	800b8de <_printf_common+0x3e>
 800b954:	2030      	movs	r0, #48	; 0x30
 800b956:	18e1      	adds	r1, r4, r3
 800b958:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b962:	4422      	add	r2, r4
 800b964:	3302      	adds	r3, #2
 800b966:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b96a:	e7c5      	b.n	800b8f8 <_printf_common+0x58>
 800b96c:	2301      	movs	r3, #1
 800b96e:	4622      	mov	r2, r4
 800b970:	4649      	mov	r1, r9
 800b972:	4638      	mov	r0, r7
 800b974:	47c0      	blx	r8
 800b976:	3001      	adds	r0, #1
 800b978:	d0e6      	beq.n	800b948 <_printf_common+0xa8>
 800b97a:	3601      	adds	r6, #1
 800b97c:	e7d9      	b.n	800b932 <_printf_common+0x92>
	...

0800b980 <_printf_i>:
 800b980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b984:	7e0f      	ldrb	r7, [r1, #24]
 800b986:	4691      	mov	r9, r2
 800b988:	2f78      	cmp	r7, #120	; 0x78
 800b98a:	4680      	mov	r8, r0
 800b98c:	460c      	mov	r4, r1
 800b98e:	469a      	mov	sl, r3
 800b990:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b996:	d807      	bhi.n	800b9a8 <_printf_i+0x28>
 800b998:	2f62      	cmp	r7, #98	; 0x62
 800b99a:	d80a      	bhi.n	800b9b2 <_printf_i+0x32>
 800b99c:	2f00      	cmp	r7, #0
 800b99e:	f000 80d9 	beq.w	800bb54 <_printf_i+0x1d4>
 800b9a2:	2f58      	cmp	r7, #88	; 0x58
 800b9a4:	f000 80a4 	beq.w	800baf0 <_printf_i+0x170>
 800b9a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9b0:	e03a      	b.n	800ba28 <_printf_i+0xa8>
 800b9b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9b6:	2b15      	cmp	r3, #21
 800b9b8:	d8f6      	bhi.n	800b9a8 <_printf_i+0x28>
 800b9ba:	a101      	add	r1, pc, #4	; (adr r1, 800b9c0 <_printf_i+0x40>)
 800b9bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9c0:	0800ba19 	.word	0x0800ba19
 800b9c4:	0800ba2d 	.word	0x0800ba2d
 800b9c8:	0800b9a9 	.word	0x0800b9a9
 800b9cc:	0800b9a9 	.word	0x0800b9a9
 800b9d0:	0800b9a9 	.word	0x0800b9a9
 800b9d4:	0800b9a9 	.word	0x0800b9a9
 800b9d8:	0800ba2d 	.word	0x0800ba2d
 800b9dc:	0800b9a9 	.word	0x0800b9a9
 800b9e0:	0800b9a9 	.word	0x0800b9a9
 800b9e4:	0800b9a9 	.word	0x0800b9a9
 800b9e8:	0800b9a9 	.word	0x0800b9a9
 800b9ec:	0800bb3b 	.word	0x0800bb3b
 800b9f0:	0800ba5d 	.word	0x0800ba5d
 800b9f4:	0800bb1d 	.word	0x0800bb1d
 800b9f8:	0800b9a9 	.word	0x0800b9a9
 800b9fc:	0800b9a9 	.word	0x0800b9a9
 800ba00:	0800bb5d 	.word	0x0800bb5d
 800ba04:	0800b9a9 	.word	0x0800b9a9
 800ba08:	0800ba5d 	.word	0x0800ba5d
 800ba0c:	0800b9a9 	.word	0x0800b9a9
 800ba10:	0800b9a9 	.word	0x0800b9a9
 800ba14:	0800bb25 	.word	0x0800bb25
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	1d1a      	adds	r2, r3, #4
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	602a      	str	r2, [r5, #0]
 800ba20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba28:	2301      	movs	r3, #1
 800ba2a:	e0a4      	b.n	800bb76 <_printf_i+0x1f6>
 800ba2c:	6820      	ldr	r0, [r4, #0]
 800ba2e:	6829      	ldr	r1, [r5, #0]
 800ba30:	0606      	lsls	r6, r0, #24
 800ba32:	f101 0304 	add.w	r3, r1, #4
 800ba36:	d50a      	bpl.n	800ba4e <_printf_i+0xce>
 800ba38:	680e      	ldr	r6, [r1, #0]
 800ba3a:	602b      	str	r3, [r5, #0]
 800ba3c:	2e00      	cmp	r6, #0
 800ba3e:	da03      	bge.n	800ba48 <_printf_i+0xc8>
 800ba40:	232d      	movs	r3, #45	; 0x2d
 800ba42:	4276      	negs	r6, r6
 800ba44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba48:	230a      	movs	r3, #10
 800ba4a:	485e      	ldr	r0, [pc, #376]	; (800bbc4 <_printf_i+0x244>)
 800ba4c:	e019      	b.n	800ba82 <_printf_i+0x102>
 800ba4e:	680e      	ldr	r6, [r1, #0]
 800ba50:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba54:	602b      	str	r3, [r5, #0]
 800ba56:	bf18      	it	ne
 800ba58:	b236      	sxthne	r6, r6
 800ba5a:	e7ef      	b.n	800ba3c <_printf_i+0xbc>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	6820      	ldr	r0, [r4, #0]
 800ba60:	1d19      	adds	r1, r3, #4
 800ba62:	6029      	str	r1, [r5, #0]
 800ba64:	0601      	lsls	r1, r0, #24
 800ba66:	d501      	bpl.n	800ba6c <_printf_i+0xec>
 800ba68:	681e      	ldr	r6, [r3, #0]
 800ba6a:	e002      	b.n	800ba72 <_printf_i+0xf2>
 800ba6c:	0646      	lsls	r6, r0, #25
 800ba6e:	d5fb      	bpl.n	800ba68 <_printf_i+0xe8>
 800ba70:	881e      	ldrh	r6, [r3, #0]
 800ba72:	2f6f      	cmp	r7, #111	; 0x6f
 800ba74:	bf0c      	ite	eq
 800ba76:	2308      	moveq	r3, #8
 800ba78:	230a      	movne	r3, #10
 800ba7a:	4852      	ldr	r0, [pc, #328]	; (800bbc4 <_printf_i+0x244>)
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba82:	6865      	ldr	r5, [r4, #4]
 800ba84:	2d00      	cmp	r5, #0
 800ba86:	bfa8      	it	ge
 800ba88:	6821      	ldrge	r1, [r4, #0]
 800ba8a:	60a5      	str	r5, [r4, #8]
 800ba8c:	bfa4      	itt	ge
 800ba8e:	f021 0104 	bicge.w	r1, r1, #4
 800ba92:	6021      	strge	r1, [r4, #0]
 800ba94:	b90e      	cbnz	r6, 800ba9a <_printf_i+0x11a>
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	d04d      	beq.n	800bb36 <_printf_i+0x1b6>
 800ba9a:	4615      	mov	r5, r2
 800ba9c:	fbb6 f1f3 	udiv	r1, r6, r3
 800baa0:	fb03 6711 	mls	r7, r3, r1, r6
 800baa4:	5dc7      	ldrb	r7, [r0, r7]
 800baa6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800baaa:	4637      	mov	r7, r6
 800baac:	42bb      	cmp	r3, r7
 800baae:	460e      	mov	r6, r1
 800bab0:	d9f4      	bls.n	800ba9c <_printf_i+0x11c>
 800bab2:	2b08      	cmp	r3, #8
 800bab4:	d10b      	bne.n	800bace <_printf_i+0x14e>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	07de      	lsls	r6, r3, #31
 800baba:	d508      	bpl.n	800bace <_printf_i+0x14e>
 800babc:	6923      	ldr	r3, [r4, #16]
 800babe:	6861      	ldr	r1, [r4, #4]
 800bac0:	4299      	cmp	r1, r3
 800bac2:	bfde      	ittt	le
 800bac4:	2330      	movle	r3, #48	; 0x30
 800bac6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800baca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bace:	1b52      	subs	r2, r2, r5
 800bad0:	6122      	str	r2, [r4, #16]
 800bad2:	464b      	mov	r3, r9
 800bad4:	4621      	mov	r1, r4
 800bad6:	4640      	mov	r0, r8
 800bad8:	f8cd a000 	str.w	sl, [sp]
 800badc:	aa03      	add	r2, sp, #12
 800bade:	f7ff fedf 	bl	800b8a0 <_printf_common>
 800bae2:	3001      	adds	r0, #1
 800bae4:	d14c      	bne.n	800bb80 <_printf_i+0x200>
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	b004      	add	sp, #16
 800baec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf0:	4834      	ldr	r0, [pc, #208]	; (800bbc4 <_printf_i+0x244>)
 800baf2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800baf6:	6829      	ldr	r1, [r5, #0]
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	f851 6b04 	ldr.w	r6, [r1], #4
 800bafe:	6029      	str	r1, [r5, #0]
 800bb00:	061d      	lsls	r5, r3, #24
 800bb02:	d514      	bpl.n	800bb2e <_printf_i+0x1ae>
 800bb04:	07df      	lsls	r7, r3, #31
 800bb06:	bf44      	itt	mi
 800bb08:	f043 0320 	orrmi.w	r3, r3, #32
 800bb0c:	6023      	strmi	r3, [r4, #0]
 800bb0e:	b91e      	cbnz	r6, 800bb18 <_printf_i+0x198>
 800bb10:	6823      	ldr	r3, [r4, #0]
 800bb12:	f023 0320 	bic.w	r3, r3, #32
 800bb16:	6023      	str	r3, [r4, #0]
 800bb18:	2310      	movs	r3, #16
 800bb1a:	e7af      	b.n	800ba7c <_printf_i+0xfc>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	f043 0320 	orr.w	r3, r3, #32
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	2378      	movs	r3, #120	; 0x78
 800bb26:	4828      	ldr	r0, [pc, #160]	; (800bbc8 <_printf_i+0x248>)
 800bb28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb2c:	e7e3      	b.n	800baf6 <_printf_i+0x176>
 800bb2e:	0659      	lsls	r1, r3, #25
 800bb30:	bf48      	it	mi
 800bb32:	b2b6      	uxthmi	r6, r6
 800bb34:	e7e6      	b.n	800bb04 <_printf_i+0x184>
 800bb36:	4615      	mov	r5, r2
 800bb38:	e7bb      	b.n	800bab2 <_printf_i+0x132>
 800bb3a:	682b      	ldr	r3, [r5, #0]
 800bb3c:	6826      	ldr	r6, [r4, #0]
 800bb3e:	1d18      	adds	r0, r3, #4
 800bb40:	6961      	ldr	r1, [r4, #20]
 800bb42:	6028      	str	r0, [r5, #0]
 800bb44:	0635      	lsls	r5, r6, #24
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	d501      	bpl.n	800bb4e <_printf_i+0x1ce>
 800bb4a:	6019      	str	r1, [r3, #0]
 800bb4c:	e002      	b.n	800bb54 <_printf_i+0x1d4>
 800bb4e:	0670      	lsls	r0, r6, #25
 800bb50:	d5fb      	bpl.n	800bb4a <_printf_i+0x1ca>
 800bb52:	8019      	strh	r1, [r3, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	4615      	mov	r5, r2
 800bb58:	6123      	str	r3, [r4, #16]
 800bb5a:	e7ba      	b.n	800bad2 <_printf_i+0x152>
 800bb5c:	682b      	ldr	r3, [r5, #0]
 800bb5e:	2100      	movs	r1, #0
 800bb60:	1d1a      	adds	r2, r3, #4
 800bb62:	602a      	str	r2, [r5, #0]
 800bb64:	681d      	ldr	r5, [r3, #0]
 800bb66:	6862      	ldr	r2, [r4, #4]
 800bb68:	4628      	mov	r0, r5
 800bb6a:	f000 fd03 	bl	800c574 <memchr>
 800bb6e:	b108      	cbz	r0, 800bb74 <_printf_i+0x1f4>
 800bb70:	1b40      	subs	r0, r0, r5
 800bb72:	6060      	str	r0, [r4, #4]
 800bb74:	6863      	ldr	r3, [r4, #4]
 800bb76:	6123      	str	r3, [r4, #16]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb7e:	e7a8      	b.n	800bad2 <_printf_i+0x152>
 800bb80:	462a      	mov	r2, r5
 800bb82:	4649      	mov	r1, r9
 800bb84:	4640      	mov	r0, r8
 800bb86:	6923      	ldr	r3, [r4, #16]
 800bb88:	47d0      	blx	sl
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	d0ab      	beq.n	800bae6 <_printf_i+0x166>
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	079b      	lsls	r3, r3, #30
 800bb92:	d413      	bmi.n	800bbbc <_printf_i+0x23c>
 800bb94:	68e0      	ldr	r0, [r4, #12]
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	4298      	cmp	r0, r3
 800bb9a:	bfb8      	it	lt
 800bb9c:	4618      	movlt	r0, r3
 800bb9e:	e7a4      	b.n	800baea <_printf_i+0x16a>
 800bba0:	2301      	movs	r3, #1
 800bba2:	4632      	mov	r2, r6
 800bba4:	4649      	mov	r1, r9
 800bba6:	4640      	mov	r0, r8
 800bba8:	47d0      	blx	sl
 800bbaa:	3001      	adds	r0, #1
 800bbac:	d09b      	beq.n	800bae6 <_printf_i+0x166>
 800bbae:	3501      	adds	r5, #1
 800bbb0:	68e3      	ldr	r3, [r4, #12]
 800bbb2:	9903      	ldr	r1, [sp, #12]
 800bbb4:	1a5b      	subs	r3, r3, r1
 800bbb6:	42ab      	cmp	r3, r5
 800bbb8:	dcf2      	bgt.n	800bba0 <_printf_i+0x220>
 800bbba:	e7eb      	b.n	800bb94 <_printf_i+0x214>
 800bbbc:	2500      	movs	r5, #0
 800bbbe:	f104 0619 	add.w	r6, r4, #25
 800bbc2:	e7f5      	b.n	800bbb0 <_printf_i+0x230>
 800bbc4:	0800dd2d 	.word	0x0800dd2d
 800bbc8:	0800dd3e 	.word	0x0800dd3e

0800bbcc <_scanf_chars>:
 800bbcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbd0:	4615      	mov	r5, r2
 800bbd2:	688a      	ldr	r2, [r1, #8]
 800bbd4:	4680      	mov	r8, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b932      	cbnz	r2, 800bbe8 <_scanf_chars+0x1c>
 800bbda:	698a      	ldr	r2, [r1, #24]
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	bf0c      	ite	eq
 800bbe0:	2201      	moveq	r2, #1
 800bbe2:	f04f 32ff 	movne.w	r2, #4294967295
 800bbe6:	608a      	str	r2, [r1, #8]
 800bbe8:	2700      	movs	r7, #0
 800bbea:	6822      	ldr	r2, [r4, #0]
 800bbec:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800bc7c <_scanf_chars+0xb0>
 800bbf0:	06d1      	lsls	r1, r2, #27
 800bbf2:	bf5f      	itttt	pl
 800bbf4:	681a      	ldrpl	r2, [r3, #0]
 800bbf6:	1d11      	addpl	r1, r2, #4
 800bbf8:	6019      	strpl	r1, [r3, #0]
 800bbfa:	6816      	ldrpl	r6, [r2, #0]
 800bbfc:	69a0      	ldr	r0, [r4, #24]
 800bbfe:	b188      	cbz	r0, 800bc24 <_scanf_chars+0x58>
 800bc00:	2801      	cmp	r0, #1
 800bc02:	d107      	bne.n	800bc14 <_scanf_chars+0x48>
 800bc04:	682b      	ldr	r3, [r5, #0]
 800bc06:	781a      	ldrb	r2, [r3, #0]
 800bc08:	6963      	ldr	r3, [r4, #20]
 800bc0a:	5c9b      	ldrb	r3, [r3, r2]
 800bc0c:	b953      	cbnz	r3, 800bc24 <_scanf_chars+0x58>
 800bc0e:	2f00      	cmp	r7, #0
 800bc10:	d031      	beq.n	800bc76 <_scanf_chars+0xaa>
 800bc12:	e022      	b.n	800bc5a <_scanf_chars+0x8e>
 800bc14:	2802      	cmp	r0, #2
 800bc16:	d120      	bne.n	800bc5a <_scanf_chars+0x8e>
 800bc18:	682b      	ldr	r3, [r5, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800bc20:	071b      	lsls	r3, r3, #28
 800bc22:	d41a      	bmi.n	800bc5a <_scanf_chars+0x8e>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	3701      	adds	r7, #1
 800bc28:	06da      	lsls	r2, r3, #27
 800bc2a:	bf5e      	ittt	pl
 800bc2c:	682b      	ldrpl	r3, [r5, #0]
 800bc2e:	781b      	ldrbpl	r3, [r3, #0]
 800bc30:	f806 3b01 	strbpl.w	r3, [r6], #1
 800bc34:	682a      	ldr	r2, [r5, #0]
 800bc36:	686b      	ldr	r3, [r5, #4]
 800bc38:	3201      	adds	r2, #1
 800bc3a:	602a      	str	r2, [r5, #0]
 800bc3c:	68a2      	ldr	r2, [r4, #8]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	3a01      	subs	r2, #1
 800bc42:	606b      	str	r3, [r5, #4]
 800bc44:	60a2      	str	r2, [r4, #8]
 800bc46:	b142      	cbz	r2, 800bc5a <_scanf_chars+0x8e>
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	dcd7      	bgt.n	800bbfc <_scanf_chars+0x30>
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bc54:	4798      	blx	r3
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d0d0      	beq.n	800bbfc <_scanf_chars+0x30>
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	f013 0310 	ands.w	r3, r3, #16
 800bc60:	d105      	bne.n	800bc6e <_scanf_chars+0xa2>
 800bc62:	68e2      	ldr	r2, [r4, #12]
 800bc64:	3201      	adds	r2, #1
 800bc66:	60e2      	str	r2, [r4, #12]
 800bc68:	69a2      	ldr	r2, [r4, #24]
 800bc6a:	b102      	cbz	r2, 800bc6e <_scanf_chars+0xa2>
 800bc6c:	7033      	strb	r3, [r6, #0]
 800bc6e:	2000      	movs	r0, #0
 800bc70:	6923      	ldr	r3, [r4, #16]
 800bc72:	443b      	add	r3, r7
 800bc74:	6123      	str	r3, [r4, #16]
 800bc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc7a:	bf00      	nop
 800bc7c:	0800dda7 	.word	0x0800dda7

0800bc80 <_scanf_i>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	460c      	mov	r4, r1
 800bc86:	4698      	mov	r8, r3
 800bc88:	4b75      	ldr	r3, [pc, #468]	; (800be60 <_scanf_i+0x1e0>)
 800bc8a:	b087      	sub	sp, #28
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	4616      	mov	r6, r2
 800bc90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bc94:	ab03      	add	r3, sp, #12
 800bc96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc9a:	4b72      	ldr	r3, [pc, #456]	; (800be64 <_scanf_i+0x1e4>)
 800bc9c:	69a1      	ldr	r1, [r4, #24]
 800bc9e:	4a72      	ldr	r2, [pc, #456]	; (800be68 <_scanf_i+0x1e8>)
 800bca0:	4627      	mov	r7, r4
 800bca2:	2903      	cmp	r1, #3
 800bca4:	bf18      	it	ne
 800bca6:	461a      	movne	r2, r3
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	9201      	str	r2, [sp, #4]
 800bcac:	1e5a      	subs	r2, r3, #1
 800bcae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bcb2:	bf81      	itttt	hi
 800bcb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bcb8:	eb03 0905 	addhi.w	r9, r3, r5
 800bcbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bcc0:	60a3      	strhi	r3, [r4, #8]
 800bcc2:	f857 3b1c 	ldr.w	r3, [r7], #28
 800bcc6:	bf98      	it	ls
 800bcc8:	f04f 0900 	movls.w	r9, #0
 800bccc:	463d      	mov	r5, r7
 800bcce:	f04f 0b00 	mov.w	fp, #0
 800bcd2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800bcd6:	6023      	str	r3, [r4, #0]
 800bcd8:	6831      	ldr	r1, [r6, #0]
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	2202      	movs	r2, #2
 800bcde:	7809      	ldrb	r1, [r1, #0]
 800bce0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800bce4:	f000 fc46 	bl	800c574 <memchr>
 800bce8:	b328      	cbz	r0, 800bd36 <_scanf_i+0xb6>
 800bcea:	f1bb 0f01 	cmp.w	fp, #1
 800bcee:	d159      	bne.n	800bda4 <_scanf_i+0x124>
 800bcf0:	6862      	ldr	r2, [r4, #4]
 800bcf2:	b92a      	cbnz	r2, 800bd00 <_scanf_i+0x80>
 800bcf4:	2308      	movs	r3, #8
 800bcf6:	6822      	ldr	r2, [r4, #0]
 800bcf8:	6063      	str	r3, [r4, #4]
 800bcfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcfe:	6022      	str	r2, [r4, #0]
 800bd00:	6822      	ldr	r2, [r4, #0]
 800bd02:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800bd06:	6022      	str	r2, [r4, #0]
 800bd08:	68a2      	ldr	r2, [r4, #8]
 800bd0a:	1e51      	subs	r1, r2, #1
 800bd0c:	60a1      	str	r1, [r4, #8]
 800bd0e:	b192      	cbz	r2, 800bd36 <_scanf_i+0xb6>
 800bd10:	6832      	ldr	r2, [r6, #0]
 800bd12:	1c51      	adds	r1, r2, #1
 800bd14:	6031      	str	r1, [r6, #0]
 800bd16:	7812      	ldrb	r2, [r2, #0]
 800bd18:	f805 2b01 	strb.w	r2, [r5], #1
 800bd1c:	6872      	ldr	r2, [r6, #4]
 800bd1e:	3a01      	subs	r2, #1
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	6072      	str	r2, [r6, #4]
 800bd24:	dc07      	bgt.n	800bd36 <_scanf_i+0xb6>
 800bd26:	4631      	mov	r1, r6
 800bd28:	4650      	mov	r0, sl
 800bd2a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800bd2e:	4790      	blx	r2
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f040 8085 	bne.w	800be40 <_scanf_i+0x1c0>
 800bd36:	f10b 0b01 	add.w	fp, fp, #1
 800bd3a:	f1bb 0f03 	cmp.w	fp, #3
 800bd3e:	d1cb      	bne.n	800bcd8 <_scanf_i+0x58>
 800bd40:	6863      	ldr	r3, [r4, #4]
 800bd42:	b90b      	cbnz	r3, 800bd48 <_scanf_i+0xc8>
 800bd44:	230a      	movs	r3, #10
 800bd46:	6063      	str	r3, [r4, #4]
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	4948      	ldr	r1, [pc, #288]	; (800be6c <_scanf_i+0x1ec>)
 800bd4c:	6960      	ldr	r0, [r4, #20]
 800bd4e:	1ac9      	subs	r1, r1, r3
 800bd50:	f000 f8a6 	bl	800bea0 <__sccl>
 800bd54:	f04f 0b00 	mov.w	fp, #0
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	6822      	ldr	r2, [r4, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d03d      	beq.n	800bddc <_scanf_i+0x15c>
 800bd60:	6831      	ldr	r1, [r6, #0]
 800bd62:	6960      	ldr	r0, [r4, #20]
 800bd64:	f891 c000 	ldrb.w	ip, [r1]
 800bd68:	f810 000c 	ldrb.w	r0, [r0, ip]
 800bd6c:	2800      	cmp	r0, #0
 800bd6e:	d035      	beq.n	800bddc <_scanf_i+0x15c>
 800bd70:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800bd74:	d124      	bne.n	800bdc0 <_scanf_i+0x140>
 800bd76:	0510      	lsls	r0, r2, #20
 800bd78:	d522      	bpl.n	800bdc0 <_scanf_i+0x140>
 800bd7a:	f10b 0b01 	add.w	fp, fp, #1
 800bd7e:	f1b9 0f00 	cmp.w	r9, #0
 800bd82:	d003      	beq.n	800bd8c <_scanf_i+0x10c>
 800bd84:	3301      	adds	r3, #1
 800bd86:	f109 39ff 	add.w	r9, r9, #4294967295
 800bd8a:	60a3      	str	r3, [r4, #8]
 800bd8c:	6873      	ldr	r3, [r6, #4]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	6073      	str	r3, [r6, #4]
 800bd94:	dd1b      	ble.n	800bdce <_scanf_i+0x14e>
 800bd96:	6833      	ldr	r3, [r6, #0]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	6033      	str	r3, [r6, #0]
 800bd9c:	68a3      	ldr	r3, [r4, #8]
 800bd9e:	3b01      	subs	r3, #1
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	e7d9      	b.n	800bd58 <_scanf_i+0xd8>
 800bda4:	f1bb 0f02 	cmp.w	fp, #2
 800bda8:	d1ae      	bne.n	800bd08 <_scanf_i+0x88>
 800bdaa:	6822      	ldr	r2, [r4, #0]
 800bdac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800bdb0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bdb4:	d1bf      	bne.n	800bd36 <_scanf_i+0xb6>
 800bdb6:	2310      	movs	r3, #16
 800bdb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdbc:	6063      	str	r3, [r4, #4]
 800bdbe:	e7a2      	b.n	800bd06 <_scanf_i+0x86>
 800bdc0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bdc4:	6022      	str	r2, [r4, #0]
 800bdc6:	780b      	ldrb	r3, [r1, #0]
 800bdc8:	f805 3b01 	strb.w	r3, [r5], #1
 800bdcc:	e7de      	b.n	800bd8c <_scanf_i+0x10c>
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4650      	mov	r0, sl
 800bdd2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdd6:	4798      	blx	r3
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0df      	beq.n	800bd9c <_scanf_i+0x11c>
 800bddc:	6823      	ldr	r3, [r4, #0]
 800bdde:	05db      	lsls	r3, r3, #23
 800bde0:	d50d      	bpl.n	800bdfe <_scanf_i+0x17e>
 800bde2:	42bd      	cmp	r5, r7
 800bde4:	d909      	bls.n	800bdfa <_scanf_i+0x17a>
 800bde6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bdea:	4632      	mov	r2, r6
 800bdec:	4650      	mov	r0, sl
 800bdee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdf2:	f105 39ff 	add.w	r9, r5, #4294967295
 800bdf6:	4798      	blx	r3
 800bdf8:	464d      	mov	r5, r9
 800bdfa:	42bd      	cmp	r5, r7
 800bdfc:	d02d      	beq.n	800be5a <_scanf_i+0x1da>
 800bdfe:	6822      	ldr	r2, [r4, #0]
 800be00:	f012 0210 	ands.w	r2, r2, #16
 800be04:	d113      	bne.n	800be2e <_scanf_i+0x1ae>
 800be06:	702a      	strb	r2, [r5, #0]
 800be08:	4639      	mov	r1, r7
 800be0a:	6863      	ldr	r3, [r4, #4]
 800be0c:	4650      	mov	r0, sl
 800be0e:	9e01      	ldr	r6, [sp, #4]
 800be10:	47b0      	blx	r6
 800be12:	6821      	ldr	r1, [r4, #0]
 800be14:	f8d8 3000 	ldr.w	r3, [r8]
 800be18:	f011 0f20 	tst.w	r1, #32
 800be1c:	d013      	beq.n	800be46 <_scanf_i+0x1c6>
 800be1e:	1d1a      	adds	r2, r3, #4
 800be20:	f8c8 2000 	str.w	r2, [r8]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	6018      	str	r0, [r3, #0]
 800be28:	68e3      	ldr	r3, [r4, #12]
 800be2a:	3301      	adds	r3, #1
 800be2c:	60e3      	str	r3, [r4, #12]
 800be2e:	2000      	movs	r0, #0
 800be30:	1bed      	subs	r5, r5, r7
 800be32:	44ab      	add	fp, r5
 800be34:	6925      	ldr	r5, [r4, #16]
 800be36:	445d      	add	r5, fp
 800be38:	6125      	str	r5, [r4, #16]
 800be3a:	b007      	add	sp, #28
 800be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be40:	f04f 0b00 	mov.w	fp, #0
 800be44:	e7ca      	b.n	800bddc <_scanf_i+0x15c>
 800be46:	1d1a      	adds	r2, r3, #4
 800be48:	f8c8 2000 	str.w	r2, [r8]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f011 0f01 	tst.w	r1, #1
 800be52:	bf14      	ite	ne
 800be54:	8018      	strhne	r0, [r3, #0]
 800be56:	6018      	streq	r0, [r3, #0]
 800be58:	e7e6      	b.n	800be28 <_scanf_i+0x1a8>
 800be5a:	2001      	movs	r0, #1
 800be5c:	e7ed      	b.n	800be3a <_scanf_i+0x1ba>
 800be5e:	bf00      	nop
 800be60:	0800da9c 	.word	0x0800da9c
 800be64:	0800c119 	.word	0x0800c119
 800be68:	0800c031 	.word	0x0800c031
 800be6c:	0800dd68 	.word	0x0800dd68

0800be70 <_read_r>:
 800be70:	b538      	push	{r3, r4, r5, lr}
 800be72:	4604      	mov	r4, r0
 800be74:	4608      	mov	r0, r1
 800be76:	4611      	mov	r1, r2
 800be78:	2200      	movs	r2, #0
 800be7a:	4d05      	ldr	r5, [pc, #20]	; (800be90 <_read_r+0x20>)
 800be7c:	602a      	str	r2, [r5, #0]
 800be7e:	461a      	mov	r2, r3
 800be80:	f7f6 f9dd 	bl	800223e <_read>
 800be84:	1c43      	adds	r3, r0, #1
 800be86:	d102      	bne.n	800be8e <_read_r+0x1e>
 800be88:	682b      	ldr	r3, [r5, #0]
 800be8a:	b103      	cbz	r3, 800be8e <_read_r+0x1e>
 800be8c:	6023      	str	r3, [r4, #0]
 800be8e:	bd38      	pop	{r3, r4, r5, pc}
 800be90:	200028ac 	.word	0x200028ac

0800be94 <nan>:
 800be94:	2000      	movs	r0, #0
 800be96:	4901      	ldr	r1, [pc, #4]	; (800be9c <nan+0x8>)
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	7ff80000 	.word	0x7ff80000

0800bea0 <__sccl>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	780b      	ldrb	r3, [r1, #0]
 800bea4:	4604      	mov	r4, r0
 800bea6:	2b5e      	cmp	r3, #94	; 0x5e
 800bea8:	bf13      	iteet	ne
 800beaa:	2200      	movne	r2, #0
 800beac:	2201      	moveq	r2, #1
 800beae:	784b      	ldrbeq	r3, [r1, #1]
 800beb0:	1c48      	addne	r0, r1, #1
 800beb2:	bf08      	it	eq
 800beb4:	1c88      	addeq	r0, r1, #2
 800beb6:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800beba:	1e61      	subs	r1, r4, #1
 800bebc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bec0:	42a9      	cmp	r1, r5
 800bec2:	d1fb      	bne.n	800bebc <__sccl+0x1c>
 800bec4:	b90b      	cbnz	r3, 800beca <__sccl+0x2a>
 800bec6:	3801      	subs	r0, #1
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	f082 0201 	eor.w	r2, r2, #1
 800bece:	4605      	mov	r5, r0
 800bed0:	54e2      	strb	r2, [r4, r3]
 800bed2:	4628      	mov	r0, r5
 800bed4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bed8:	292d      	cmp	r1, #45	; 0x2d
 800beda:	d006      	beq.n	800beea <__sccl+0x4a>
 800bedc:	295d      	cmp	r1, #93	; 0x5d
 800bede:	d0f3      	beq.n	800bec8 <__sccl+0x28>
 800bee0:	b909      	cbnz	r1, 800bee6 <__sccl+0x46>
 800bee2:	4628      	mov	r0, r5
 800bee4:	e7f0      	b.n	800bec8 <__sccl+0x28>
 800bee6:	460b      	mov	r3, r1
 800bee8:	e7f1      	b.n	800bece <__sccl+0x2e>
 800beea:	786e      	ldrb	r6, [r5, #1]
 800beec:	2e5d      	cmp	r6, #93	; 0x5d
 800beee:	d0fa      	beq.n	800bee6 <__sccl+0x46>
 800bef0:	42b3      	cmp	r3, r6
 800bef2:	dcf8      	bgt.n	800bee6 <__sccl+0x46>
 800bef4:	4619      	mov	r1, r3
 800bef6:	3502      	adds	r5, #2
 800bef8:	3101      	adds	r1, #1
 800befa:	428e      	cmp	r6, r1
 800befc:	5462      	strb	r2, [r4, r1]
 800befe:	dcfb      	bgt.n	800bef8 <__sccl+0x58>
 800bf00:	1af1      	subs	r1, r6, r3
 800bf02:	3901      	subs	r1, #1
 800bf04:	42b3      	cmp	r3, r6
 800bf06:	bfa8      	it	ge
 800bf08:	2100      	movge	r1, #0
 800bf0a:	1c58      	adds	r0, r3, #1
 800bf0c:	1843      	adds	r3, r0, r1
 800bf0e:	e7e0      	b.n	800bed2 <__sccl+0x32>

0800bf10 <strncmp>:
 800bf10:	4603      	mov	r3, r0
 800bf12:	b510      	push	{r4, lr}
 800bf14:	b172      	cbz	r2, 800bf34 <strncmp+0x24>
 800bf16:	3901      	subs	r1, #1
 800bf18:	1884      	adds	r4, r0, r2
 800bf1a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf22:	4290      	cmp	r0, r2
 800bf24:	d101      	bne.n	800bf2a <strncmp+0x1a>
 800bf26:	42a3      	cmp	r3, r4
 800bf28:	d101      	bne.n	800bf2e <strncmp+0x1e>
 800bf2a:	1a80      	subs	r0, r0, r2
 800bf2c:	bd10      	pop	{r4, pc}
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d1f3      	bne.n	800bf1a <strncmp+0xa>
 800bf32:	e7fa      	b.n	800bf2a <strncmp+0x1a>
 800bf34:	4610      	mov	r0, r2
 800bf36:	e7f9      	b.n	800bf2c <strncmp+0x1c>

0800bf38 <_strtol_l.constprop.0>:
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf3e:	4680      	mov	r8, r0
 800bf40:	d001      	beq.n	800bf46 <_strtol_l.constprop.0+0xe>
 800bf42:	2b24      	cmp	r3, #36	; 0x24
 800bf44:	d906      	bls.n	800bf54 <_strtol_l.constprop.0+0x1c>
 800bf46:	f7fd f915 	bl	8009174 <__errno>
 800bf4a:	2316      	movs	r3, #22
 800bf4c:	6003      	str	r3, [r0, #0]
 800bf4e:	2000      	movs	r0, #0
 800bf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf54:	460d      	mov	r5, r1
 800bf56:	4f35      	ldr	r7, [pc, #212]	; (800c02c <_strtol_l.constprop.0+0xf4>)
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf5e:	5de6      	ldrb	r6, [r4, r7]
 800bf60:	f016 0608 	ands.w	r6, r6, #8
 800bf64:	d1f8      	bne.n	800bf58 <_strtol_l.constprop.0+0x20>
 800bf66:	2c2d      	cmp	r4, #45	; 0x2d
 800bf68:	d12f      	bne.n	800bfca <_strtol_l.constprop.0+0x92>
 800bf6a:	2601      	movs	r6, #1
 800bf6c:	782c      	ldrb	r4, [r5, #0]
 800bf6e:	1c85      	adds	r5, r0, #2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d057      	beq.n	800c024 <_strtol_l.constprop.0+0xec>
 800bf74:	2b10      	cmp	r3, #16
 800bf76:	d109      	bne.n	800bf8c <_strtol_l.constprop.0+0x54>
 800bf78:	2c30      	cmp	r4, #48	; 0x30
 800bf7a:	d107      	bne.n	800bf8c <_strtol_l.constprop.0+0x54>
 800bf7c:	7828      	ldrb	r0, [r5, #0]
 800bf7e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800bf82:	2858      	cmp	r0, #88	; 0x58
 800bf84:	d149      	bne.n	800c01a <_strtol_l.constprop.0+0xe2>
 800bf86:	2310      	movs	r3, #16
 800bf88:	786c      	ldrb	r4, [r5, #1]
 800bf8a:	3502      	adds	r5, #2
 800bf8c:	2700      	movs	r7, #0
 800bf8e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800bf92:	f10e 3eff 	add.w	lr, lr, #4294967295
 800bf96:	fbbe f9f3 	udiv	r9, lr, r3
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	fb03 ea19 	mls	sl, r3, r9, lr
 800bfa0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bfa4:	f1bc 0f09 	cmp.w	ip, #9
 800bfa8:	d814      	bhi.n	800bfd4 <_strtol_l.constprop.0+0x9c>
 800bfaa:	4664      	mov	r4, ip
 800bfac:	42a3      	cmp	r3, r4
 800bfae:	dd22      	ble.n	800bff6 <_strtol_l.constprop.0+0xbe>
 800bfb0:	2f00      	cmp	r7, #0
 800bfb2:	db1d      	blt.n	800bff0 <_strtol_l.constprop.0+0xb8>
 800bfb4:	4581      	cmp	r9, r0
 800bfb6:	d31b      	bcc.n	800bff0 <_strtol_l.constprop.0+0xb8>
 800bfb8:	d101      	bne.n	800bfbe <_strtol_l.constprop.0+0x86>
 800bfba:	45a2      	cmp	sl, r4
 800bfbc:	db18      	blt.n	800bff0 <_strtol_l.constprop.0+0xb8>
 800bfbe:	2701      	movs	r7, #1
 800bfc0:	fb00 4003 	mla	r0, r0, r3, r4
 800bfc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfc8:	e7ea      	b.n	800bfa0 <_strtol_l.constprop.0+0x68>
 800bfca:	2c2b      	cmp	r4, #43	; 0x2b
 800bfcc:	bf04      	itt	eq
 800bfce:	782c      	ldrbeq	r4, [r5, #0]
 800bfd0:	1c85      	addeq	r5, r0, #2
 800bfd2:	e7cd      	b.n	800bf70 <_strtol_l.constprop.0+0x38>
 800bfd4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bfd8:	f1bc 0f19 	cmp.w	ip, #25
 800bfdc:	d801      	bhi.n	800bfe2 <_strtol_l.constprop.0+0xaa>
 800bfde:	3c37      	subs	r4, #55	; 0x37
 800bfe0:	e7e4      	b.n	800bfac <_strtol_l.constprop.0+0x74>
 800bfe2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfe6:	f1bc 0f19 	cmp.w	ip, #25
 800bfea:	d804      	bhi.n	800bff6 <_strtol_l.constprop.0+0xbe>
 800bfec:	3c57      	subs	r4, #87	; 0x57
 800bfee:	e7dd      	b.n	800bfac <_strtol_l.constprop.0+0x74>
 800bff0:	f04f 37ff 	mov.w	r7, #4294967295
 800bff4:	e7e6      	b.n	800bfc4 <_strtol_l.constprop.0+0x8c>
 800bff6:	2f00      	cmp	r7, #0
 800bff8:	da07      	bge.n	800c00a <_strtol_l.constprop.0+0xd2>
 800bffa:	2322      	movs	r3, #34	; 0x22
 800bffc:	4670      	mov	r0, lr
 800bffe:	f8c8 3000 	str.w	r3, [r8]
 800c002:	2a00      	cmp	r2, #0
 800c004:	d0a4      	beq.n	800bf50 <_strtol_l.constprop.0+0x18>
 800c006:	1e69      	subs	r1, r5, #1
 800c008:	e005      	b.n	800c016 <_strtol_l.constprop.0+0xde>
 800c00a:	b106      	cbz	r6, 800c00e <_strtol_l.constprop.0+0xd6>
 800c00c:	4240      	negs	r0, r0
 800c00e:	2a00      	cmp	r2, #0
 800c010:	d09e      	beq.n	800bf50 <_strtol_l.constprop.0+0x18>
 800c012:	2f00      	cmp	r7, #0
 800c014:	d1f7      	bne.n	800c006 <_strtol_l.constprop.0+0xce>
 800c016:	6011      	str	r1, [r2, #0]
 800c018:	e79a      	b.n	800bf50 <_strtol_l.constprop.0+0x18>
 800c01a:	2430      	movs	r4, #48	; 0x30
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1b5      	bne.n	800bf8c <_strtol_l.constprop.0+0x54>
 800c020:	2308      	movs	r3, #8
 800c022:	e7b3      	b.n	800bf8c <_strtol_l.constprop.0+0x54>
 800c024:	2c30      	cmp	r4, #48	; 0x30
 800c026:	d0a9      	beq.n	800bf7c <_strtol_l.constprop.0+0x44>
 800c028:	230a      	movs	r3, #10
 800c02a:	e7af      	b.n	800bf8c <_strtol_l.constprop.0+0x54>
 800c02c:	0800dda7 	.word	0x0800dda7

0800c030 <_strtol_r>:
 800c030:	f7ff bf82 	b.w	800bf38 <_strtol_l.constprop.0>

0800c034 <_strtoul_l.constprop.0>:
 800c034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c038:	4686      	mov	lr, r0
 800c03a:	460d      	mov	r5, r1
 800c03c:	4f35      	ldr	r7, [pc, #212]	; (800c114 <_strtoul_l.constprop.0+0xe0>)
 800c03e:	4628      	mov	r0, r5
 800c040:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c044:	5de6      	ldrb	r6, [r4, r7]
 800c046:	f016 0608 	ands.w	r6, r6, #8
 800c04a:	d1f8      	bne.n	800c03e <_strtoul_l.constprop.0+0xa>
 800c04c:	2c2d      	cmp	r4, #45	; 0x2d
 800c04e:	d12f      	bne.n	800c0b0 <_strtoul_l.constprop.0+0x7c>
 800c050:	2601      	movs	r6, #1
 800c052:	782c      	ldrb	r4, [r5, #0]
 800c054:	1c85      	adds	r5, r0, #2
 800c056:	2b00      	cmp	r3, #0
 800c058:	d057      	beq.n	800c10a <_strtoul_l.constprop.0+0xd6>
 800c05a:	2b10      	cmp	r3, #16
 800c05c:	d109      	bne.n	800c072 <_strtoul_l.constprop.0+0x3e>
 800c05e:	2c30      	cmp	r4, #48	; 0x30
 800c060:	d107      	bne.n	800c072 <_strtoul_l.constprop.0+0x3e>
 800c062:	7828      	ldrb	r0, [r5, #0]
 800c064:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c068:	2858      	cmp	r0, #88	; 0x58
 800c06a:	d149      	bne.n	800c100 <_strtoul_l.constprop.0+0xcc>
 800c06c:	2310      	movs	r3, #16
 800c06e:	786c      	ldrb	r4, [r5, #1]
 800c070:	3502      	adds	r5, #2
 800c072:	f04f 38ff 	mov.w	r8, #4294967295
 800c076:	fbb8 f8f3 	udiv	r8, r8, r3
 800c07a:	2700      	movs	r7, #0
 800c07c:	fb03 f908 	mul.w	r9, r3, r8
 800c080:	4638      	mov	r0, r7
 800c082:	ea6f 0909 	mvn.w	r9, r9
 800c086:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c08a:	f1bc 0f09 	cmp.w	ip, #9
 800c08e:	d814      	bhi.n	800c0ba <_strtoul_l.constprop.0+0x86>
 800c090:	4664      	mov	r4, ip
 800c092:	42a3      	cmp	r3, r4
 800c094:	dd22      	ble.n	800c0dc <_strtoul_l.constprop.0+0xa8>
 800c096:	2f00      	cmp	r7, #0
 800c098:	db1d      	blt.n	800c0d6 <_strtoul_l.constprop.0+0xa2>
 800c09a:	4580      	cmp	r8, r0
 800c09c:	d31b      	bcc.n	800c0d6 <_strtoul_l.constprop.0+0xa2>
 800c09e:	d101      	bne.n	800c0a4 <_strtoul_l.constprop.0+0x70>
 800c0a0:	45a1      	cmp	r9, r4
 800c0a2:	db18      	blt.n	800c0d6 <_strtoul_l.constprop.0+0xa2>
 800c0a4:	2701      	movs	r7, #1
 800c0a6:	fb00 4003 	mla	r0, r0, r3, r4
 800c0aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0ae:	e7ea      	b.n	800c086 <_strtoul_l.constprop.0+0x52>
 800c0b0:	2c2b      	cmp	r4, #43	; 0x2b
 800c0b2:	bf04      	itt	eq
 800c0b4:	782c      	ldrbeq	r4, [r5, #0]
 800c0b6:	1c85      	addeq	r5, r0, #2
 800c0b8:	e7cd      	b.n	800c056 <_strtoul_l.constprop.0+0x22>
 800c0ba:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c0be:	f1bc 0f19 	cmp.w	ip, #25
 800c0c2:	d801      	bhi.n	800c0c8 <_strtoul_l.constprop.0+0x94>
 800c0c4:	3c37      	subs	r4, #55	; 0x37
 800c0c6:	e7e4      	b.n	800c092 <_strtoul_l.constprop.0+0x5e>
 800c0c8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c0cc:	f1bc 0f19 	cmp.w	ip, #25
 800c0d0:	d804      	bhi.n	800c0dc <_strtoul_l.constprop.0+0xa8>
 800c0d2:	3c57      	subs	r4, #87	; 0x57
 800c0d4:	e7dd      	b.n	800c092 <_strtoul_l.constprop.0+0x5e>
 800c0d6:	f04f 37ff 	mov.w	r7, #4294967295
 800c0da:	e7e6      	b.n	800c0aa <_strtoul_l.constprop.0+0x76>
 800c0dc:	2f00      	cmp	r7, #0
 800c0de:	da07      	bge.n	800c0f0 <_strtoul_l.constprop.0+0xbc>
 800c0e0:	2322      	movs	r3, #34	; 0x22
 800c0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e6:	f8ce 3000 	str.w	r3, [lr]
 800c0ea:	b932      	cbnz	r2, 800c0fa <_strtoul_l.constprop.0+0xc6>
 800c0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0f0:	b106      	cbz	r6, 800c0f4 <_strtoul_l.constprop.0+0xc0>
 800c0f2:	4240      	negs	r0, r0
 800c0f4:	2a00      	cmp	r2, #0
 800c0f6:	d0f9      	beq.n	800c0ec <_strtoul_l.constprop.0+0xb8>
 800c0f8:	b107      	cbz	r7, 800c0fc <_strtoul_l.constprop.0+0xc8>
 800c0fa:	1e69      	subs	r1, r5, #1
 800c0fc:	6011      	str	r1, [r2, #0]
 800c0fe:	e7f5      	b.n	800c0ec <_strtoul_l.constprop.0+0xb8>
 800c100:	2430      	movs	r4, #48	; 0x30
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1b5      	bne.n	800c072 <_strtoul_l.constprop.0+0x3e>
 800c106:	2308      	movs	r3, #8
 800c108:	e7b3      	b.n	800c072 <_strtoul_l.constprop.0+0x3e>
 800c10a:	2c30      	cmp	r4, #48	; 0x30
 800c10c:	d0a9      	beq.n	800c062 <_strtoul_l.constprop.0+0x2e>
 800c10e:	230a      	movs	r3, #10
 800c110:	e7af      	b.n	800c072 <_strtoul_l.constprop.0+0x3e>
 800c112:	bf00      	nop
 800c114:	0800dda7 	.word	0x0800dda7

0800c118 <_strtoul_r>:
 800c118:	f7ff bf8c 	b.w	800c034 <_strtoul_l.constprop.0>

0800c11c <__submore>:
 800c11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c124:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c128:	4299      	cmp	r1, r3
 800c12a:	d11b      	bne.n	800c164 <__submore+0x48>
 800c12c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c130:	f7fd f8ec 	bl	800930c <_malloc_r>
 800c134:	b918      	cbnz	r0, 800c13e <__submore+0x22>
 800c136:	f04f 30ff 	mov.w	r0, #4294967295
 800c13a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c142:	63a3      	str	r3, [r4, #56]	; 0x38
 800c144:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c148:	6360      	str	r0, [r4, #52]	; 0x34
 800c14a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c14e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c152:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c156:	7043      	strb	r3, [r0, #1]
 800c158:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c15c:	7003      	strb	r3, [r0, #0]
 800c15e:	6020      	str	r0, [r4, #0]
 800c160:	2000      	movs	r0, #0
 800c162:	e7ea      	b.n	800c13a <__submore+0x1e>
 800c164:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c166:	0077      	lsls	r7, r6, #1
 800c168:	463a      	mov	r2, r7
 800c16a:	f000 fa2b 	bl	800c5c4 <_realloc_r>
 800c16e:	4605      	mov	r5, r0
 800c170:	2800      	cmp	r0, #0
 800c172:	d0e0      	beq.n	800c136 <__submore+0x1a>
 800c174:	eb00 0806 	add.w	r8, r0, r6
 800c178:	4601      	mov	r1, r0
 800c17a:	4632      	mov	r2, r6
 800c17c:	4640      	mov	r0, r8
 800c17e:	f7fd f833 	bl	80091e8 <memcpy>
 800c182:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c186:	f8c4 8000 	str.w	r8, [r4]
 800c18a:	e7e9      	b.n	800c160 <__submore+0x44>

0800c18c <__ascii_wctomb>:
 800c18c:	4603      	mov	r3, r0
 800c18e:	4608      	mov	r0, r1
 800c190:	b141      	cbz	r1, 800c1a4 <__ascii_wctomb+0x18>
 800c192:	2aff      	cmp	r2, #255	; 0xff
 800c194:	d904      	bls.n	800c1a0 <__ascii_wctomb+0x14>
 800c196:	228a      	movs	r2, #138	; 0x8a
 800c198:	f04f 30ff 	mov.w	r0, #4294967295
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	4770      	bx	lr
 800c1a0:	2001      	movs	r0, #1
 800c1a2:	700a      	strb	r2, [r1, #0]
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <__assert_func>:
 800c1a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1aa:	4614      	mov	r4, r2
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <__assert_func+0x2c>)
 800c1b0:	4605      	mov	r5, r0
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	68d8      	ldr	r0, [r3, #12]
 800c1b6:	b14c      	cbz	r4, 800c1cc <__assert_func+0x24>
 800c1b8:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <__assert_func+0x30>)
 800c1ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1be:	9100      	str	r1, [sp, #0]
 800c1c0:	462b      	mov	r3, r5
 800c1c2:	4906      	ldr	r1, [pc, #24]	; (800c1dc <__assert_func+0x34>)
 800c1c4:	f000 f9a2 	bl	800c50c <fiprintf>
 800c1c8:	f000 fc42 	bl	800ca50 <abort>
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <__assert_func+0x38>)
 800c1ce:	461c      	mov	r4, r3
 800c1d0:	e7f3      	b.n	800c1ba <__assert_func+0x12>
 800c1d2:	bf00      	nop
 800c1d4:	20000018 	.word	0x20000018
 800c1d8:	0800dd6a 	.word	0x0800dd6a
 800c1dc:	0800dd77 	.word	0x0800dd77
 800c1e0:	0800dda5 	.word	0x0800dda5

0800c1e4 <__sflush_r>:
 800c1e4:	898a      	ldrh	r2, [r1, #12]
 800c1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e8:	4605      	mov	r5, r0
 800c1ea:	0710      	lsls	r0, r2, #28
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	d457      	bmi.n	800c2a0 <__sflush_r+0xbc>
 800c1f0:	684b      	ldr	r3, [r1, #4]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	dc04      	bgt.n	800c200 <__sflush_r+0x1c>
 800c1f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	dc01      	bgt.n	800c200 <__sflush_r+0x1c>
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c202:	2e00      	cmp	r6, #0
 800c204:	d0fa      	beq.n	800c1fc <__sflush_r+0x18>
 800c206:	2300      	movs	r3, #0
 800c208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c20c:	682f      	ldr	r7, [r5, #0]
 800c20e:	602b      	str	r3, [r5, #0]
 800c210:	d032      	beq.n	800c278 <__sflush_r+0x94>
 800c212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c214:	89a3      	ldrh	r3, [r4, #12]
 800c216:	075a      	lsls	r2, r3, #29
 800c218:	d505      	bpl.n	800c226 <__sflush_r+0x42>
 800c21a:	6863      	ldr	r3, [r4, #4]
 800c21c:	1ac0      	subs	r0, r0, r3
 800c21e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c220:	b10b      	cbz	r3, 800c226 <__sflush_r+0x42>
 800c222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c224:	1ac0      	subs	r0, r0, r3
 800c226:	2300      	movs	r3, #0
 800c228:	4602      	mov	r2, r0
 800c22a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c22c:	4628      	mov	r0, r5
 800c22e:	6a21      	ldr	r1, [r4, #32]
 800c230:	47b0      	blx	r6
 800c232:	1c43      	adds	r3, r0, #1
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	d106      	bne.n	800c246 <__sflush_r+0x62>
 800c238:	6829      	ldr	r1, [r5, #0]
 800c23a:	291d      	cmp	r1, #29
 800c23c:	d82c      	bhi.n	800c298 <__sflush_r+0xb4>
 800c23e:	4a29      	ldr	r2, [pc, #164]	; (800c2e4 <__sflush_r+0x100>)
 800c240:	40ca      	lsrs	r2, r1
 800c242:	07d6      	lsls	r6, r2, #31
 800c244:	d528      	bpl.n	800c298 <__sflush_r+0xb4>
 800c246:	2200      	movs	r2, #0
 800c248:	6062      	str	r2, [r4, #4]
 800c24a:	6922      	ldr	r2, [r4, #16]
 800c24c:	04d9      	lsls	r1, r3, #19
 800c24e:	6022      	str	r2, [r4, #0]
 800c250:	d504      	bpl.n	800c25c <__sflush_r+0x78>
 800c252:	1c42      	adds	r2, r0, #1
 800c254:	d101      	bne.n	800c25a <__sflush_r+0x76>
 800c256:	682b      	ldr	r3, [r5, #0]
 800c258:	b903      	cbnz	r3, 800c25c <__sflush_r+0x78>
 800c25a:	6560      	str	r0, [r4, #84]	; 0x54
 800c25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c25e:	602f      	str	r7, [r5, #0]
 800c260:	2900      	cmp	r1, #0
 800c262:	d0cb      	beq.n	800c1fc <__sflush_r+0x18>
 800c264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c268:	4299      	cmp	r1, r3
 800c26a:	d002      	beq.n	800c272 <__sflush_r+0x8e>
 800c26c:	4628      	mov	r0, r5
 800c26e:	f7fc ffe5 	bl	800923c <_free_r>
 800c272:	2000      	movs	r0, #0
 800c274:	6360      	str	r0, [r4, #52]	; 0x34
 800c276:	e7c2      	b.n	800c1fe <__sflush_r+0x1a>
 800c278:	6a21      	ldr	r1, [r4, #32]
 800c27a:	2301      	movs	r3, #1
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b0      	blx	r6
 800c280:	1c41      	adds	r1, r0, #1
 800c282:	d1c7      	bne.n	800c214 <__sflush_r+0x30>
 800c284:	682b      	ldr	r3, [r5, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d0c4      	beq.n	800c214 <__sflush_r+0x30>
 800c28a:	2b1d      	cmp	r3, #29
 800c28c:	d001      	beq.n	800c292 <__sflush_r+0xae>
 800c28e:	2b16      	cmp	r3, #22
 800c290:	d101      	bne.n	800c296 <__sflush_r+0xb2>
 800c292:	602f      	str	r7, [r5, #0]
 800c294:	e7b2      	b.n	800c1fc <__sflush_r+0x18>
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c29c:	81a3      	strh	r3, [r4, #12]
 800c29e:	e7ae      	b.n	800c1fe <__sflush_r+0x1a>
 800c2a0:	690f      	ldr	r7, [r1, #16]
 800c2a2:	2f00      	cmp	r7, #0
 800c2a4:	d0aa      	beq.n	800c1fc <__sflush_r+0x18>
 800c2a6:	0793      	lsls	r3, r2, #30
 800c2a8:	bf18      	it	ne
 800c2aa:	2300      	movne	r3, #0
 800c2ac:	680e      	ldr	r6, [r1, #0]
 800c2ae:	bf08      	it	eq
 800c2b0:	694b      	ldreq	r3, [r1, #20]
 800c2b2:	1bf6      	subs	r6, r6, r7
 800c2b4:	600f      	str	r7, [r1, #0]
 800c2b6:	608b      	str	r3, [r1, #8]
 800c2b8:	2e00      	cmp	r6, #0
 800c2ba:	dd9f      	ble.n	800c1fc <__sflush_r+0x18>
 800c2bc:	4633      	mov	r3, r6
 800c2be:	463a      	mov	r2, r7
 800c2c0:	4628      	mov	r0, r5
 800c2c2:	6a21      	ldr	r1, [r4, #32]
 800c2c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c2c8:	47e0      	blx	ip
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	dc06      	bgt.n	800c2dc <__sflush_r+0xf8>
 800c2ce:	89a3      	ldrh	r3, [r4, #12]
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2d8:	81a3      	strh	r3, [r4, #12]
 800c2da:	e790      	b.n	800c1fe <__sflush_r+0x1a>
 800c2dc:	4407      	add	r7, r0
 800c2de:	1a36      	subs	r6, r6, r0
 800c2e0:	e7ea      	b.n	800c2b8 <__sflush_r+0xd4>
 800c2e2:	bf00      	nop
 800c2e4:	20400001 	.word	0x20400001

0800c2e8 <_fflush_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	690b      	ldr	r3, [r1, #16]
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	b913      	cbnz	r3, 800c2f8 <_fflush_r+0x10>
 800c2f2:	2500      	movs	r5, #0
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	b118      	cbz	r0, 800c302 <_fflush_r+0x1a>
 800c2fa:	6983      	ldr	r3, [r0, #24]
 800c2fc:	b90b      	cbnz	r3, 800c302 <_fflush_r+0x1a>
 800c2fe:	f000 f887 	bl	800c410 <__sinit>
 800c302:	4b14      	ldr	r3, [pc, #80]	; (800c354 <_fflush_r+0x6c>)
 800c304:	429c      	cmp	r4, r3
 800c306:	d11b      	bne.n	800c340 <_fflush_r+0x58>
 800c308:	686c      	ldr	r4, [r5, #4]
 800c30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d0ef      	beq.n	800c2f2 <_fflush_r+0xa>
 800c312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c314:	07d0      	lsls	r0, r2, #31
 800c316:	d404      	bmi.n	800c322 <_fflush_r+0x3a>
 800c318:	0599      	lsls	r1, r3, #22
 800c31a:	d402      	bmi.n	800c322 <_fflush_r+0x3a>
 800c31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c31e:	f000 f927 	bl	800c570 <__retarget_lock_acquire_recursive>
 800c322:	4628      	mov	r0, r5
 800c324:	4621      	mov	r1, r4
 800c326:	f7ff ff5d 	bl	800c1e4 <__sflush_r>
 800c32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c32c:	4605      	mov	r5, r0
 800c32e:	07da      	lsls	r2, r3, #31
 800c330:	d4e0      	bmi.n	800c2f4 <_fflush_r+0xc>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	059b      	lsls	r3, r3, #22
 800c336:	d4dd      	bmi.n	800c2f4 <_fflush_r+0xc>
 800c338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c33a:	f000 f91a 	bl	800c572 <__retarget_lock_release_recursive>
 800c33e:	e7d9      	b.n	800c2f4 <_fflush_r+0xc>
 800c340:	4b05      	ldr	r3, [pc, #20]	; (800c358 <_fflush_r+0x70>)
 800c342:	429c      	cmp	r4, r3
 800c344:	d101      	bne.n	800c34a <_fflush_r+0x62>
 800c346:	68ac      	ldr	r4, [r5, #8]
 800c348:	e7df      	b.n	800c30a <_fflush_r+0x22>
 800c34a:	4b04      	ldr	r3, [pc, #16]	; (800c35c <_fflush_r+0x74>)
 800c34c:	429c      	cmp	r4, r3
 800c34e:	bf08      	it	eq
 800c350:	68ec      	ldreq	r4, [r5, #12]
 800c352:	e7da      	b.n	800c30a <_fflush_r+0x22>
 800c354:	0800dec8 	.word	0x0800dec8
 800c358:	0800dee8 	.word	0x0800dee8
 800c35c:	0800dea8 	.word	0x0800dea8

0800c360 <std>:
 800c360:	2300      	movs	r3, #0
 800c362:	b510      	push	{r4, lr}
 800c364:	4604      	mov	r4, r0
 800c366:	e9c0 3300 	strd	r3, r3, [r0]
 800c36a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c36e:	6083      	str	r3, [r0, #8]
 800c370:	8181      	strh	r1, [r0, #12]
 800c372:	6643      	str	r3, [r0, #100]	; 0x64
 800c374:	81c2      	strh	r2, [r0, #14]
 800c376:	6183      	str	r3, [r0, #24]
 800c378:	4619      	mov	r1, r3
 800c37a:	2208      	movs	r2, #8
 800c37c:	305c      	adds	r0, #92	; 0x5c
 800c37e:	f7fc ff41 	bl	8009204 <memset>
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x38>)
 800c384:	6224      	str	r4, [r4, #32]
 800c386:	6263      	str	r3, [r4, #36]	; 0x24
 800c388:	4b04      	ldr	r3, [pc, #16]	; (800c39c <std+0x3c>)
 800c38a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c38c:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <std+0x40>)
 800c38e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c390:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <std+0x44>)
 800c392:	6323      	str	r3, [r4, #48]	; 0x30
 800c394:	bd10      	pop	{r4, pc}
 800c396:	bf00      	nop
 800c398:	080094a9 	.word	0x080094a9
 800c39c:	080094cf 	.word	0x080094cf
 800c3a0:	08009507 	.word	0x08009507
 800c3a4:	0800952b 	.word	0x0800952b

0800c3a8 <_cleanup_r>:
 800c3a8:	4901      	ldr	r1, [pc, #4]	; (800c3b0 <_cleanup_r+0x8>)
 800c3aa:	f000 b8c1 	b.w	800c530 <_fwalk_reent>
 800c3ae:	bf00      	nop
 800c3b0:	0800c2e9 	.word	0x0800c2e9

0800c3b4 <__sfmoreglue>:
 800c3b4:	2268      	movs	r2, #104	; 0x68
 800c3b6:	b570      	push	{r4, r5, r6, lr}
 800c3b8:	1e4d      	subs	r5, r1, #1
 800c3ba:	4355      	muls	r5, r2
 800c3bc:	460e      	mov	r6, r1
 800c3be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3c2:	f7fc ffa3 	bl	800930c <_malloc_r>
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	b140      	cbz	r0, 800c3dc <__sfmoreglue+0x28>
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	e9c0 1600 	strd	r1, r6, [r0]
 800c3d0:	300c      	adds	r0, #12
 800c3d2:	60a0      	str	r0, [r4, #8]
 800c3d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3d8:	f7fc ff14 	bl	8009204 <memset>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	bd70      	pop	{r4, r5, r6, pc}

0800c3e0 <__sfp_lock_acquire>:
 800c3e0:	4801      	ldr	r0, [pc, #4]	; (800c3e8 <__sfp_lock_acquire+0x8>)
 800c3e2:	f000 b8c5 	b.w	800c570 <__retarget_lock_acquire_recursive>
 800c3e6:	bf00      	nop
 800c3e8:	200028b1 	.word	0x200028b1

0800c3ec <__sfp_lock_release>:
 800c3ec:	4801      	ldr	r0, [pc, #4]	; (800c3f4 <__sfp_lock_release+0x8>)
 800c3ee:	f000 b8c0 	b.w	800c572 <__retarget_lock_release_recursive>
 800c3f2:	bf00      	nop
 800c3f4:	200028b1 	.word	0x200028b1

0800c3f8 <__sinit_lock_acquire>:
 800c3f8:	4801      	ldr	r0, [pc, #4]	; (800c400 <__sinit_lock_acquire+0x8>)
 800c3fa:	f000 b8b9 	b.w	800c570 <__retarget_lock_acquire_recursive>
 800c3fe:	bf00      	nop
 800c400:	200028b2 	.word	0x200028b2

0800c404 <__sinit_lock_release>:
 800c404:	4801      	ldr	r0, [pc, #4]	; (800c40c <__sinit_lock_release+0x8>)
 800c406:	f000 b8b4 	b.w	800c572 <__retarget_lock_release_recursive>
 800c40a:	bf00      	nop
 800c40c:	200028b2 	.word	0x200028b2

0800c410 <__sinit>:
 800c410:	b510      	push	{r4, lr}
 800c412:	4604      	mov	r4, r0
 800c414:	f7ff fff0 	bl	800c3f8 <__sinit_lock_acquire>
 800c418:	69a3      	ldr	r3, [r4, #24]
 800c41a:	b11b      	cbz	r3, 800c424 <__sinit+0x14>
 800c41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c420:	f7ff bff0 	b.w	800c404 <__sinit_lock_release>
 800c424:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c428:	6523      	str	r3, [r4, #80]	; 0x50
 800c42a:	4b13      	ldr	r3, [pc, #76]	; (800c478 <__sinit+0x68>)
 800c42c:	4a13      	ldr	r2, [pc, #76]	; (800c47c <__sinit+0x6c>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	62a2      	str	r2, [r4, #40]	; 0x28
 800c432:	42a3      	cmp	r3, r4
 800c434:	bf08      	it	eq
 800c436:	2301      	moveq	r3, #1
 800c438:	4620      	mov	r0, r4
 800c43a:	bf08      	it	eq
 800c43c:	61a3      	streq	r3, [r4, #24]
 800c43e:	f000 f81f 	bl	800c480 <__sfp>
 800c442:	6060      	str	r0, [r4, #4]
 800c444:	4620      	mov	r0, r4
 800c446:	f000 f81b 	bl	800c480 <__sfp>
 800c44a:	60a0      	str	r0, [r4, #8]
 800c44c:	4620      	mov	r0, r4
 800c44e:	f000 f817 	bl	800c480 <__sfp>
 800c452:	2200      	movs	r2, #0
 800c454:	2104      	movs	r1, #4
 800c456:	60e0      	str	r0, [r4, #12]
 800c458:	6860      	ldr	r0, [r4, #4]
 800c45a:	f7ff ff81 	bl	800c360 <std>
 800c45e:	2201      	movs	r2, #1
 800c460:	2109      	movs	r1, #9
 800c462:	68a0      	ldr	r0, [r4, #8]
 800c464:	f7ff ff7c 	bl	800c360 <std>
 800c468:	2202      	movs	r2, #2
 800c46a:	2112      	movs	r1, #18
 800c46c:	68e0      	ldr	r0, [r4, #12]
 800c46e:	f7ff ff77 	bl	800c360 <std>
 800c472:	2301      	movs	r3, #1
 800c474:	61a3      	str	r3, [r4, #24]
 800c476:	e7d1      	b.n	800c41c <__sinit+0xc>
 800c478:	0800dac0 	.word	0x0800dac0
 800c47c:	0800c3a9 	.word	0x0800c3a9

0800c480 <__sfp>:
 800c480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c482:	4607      	mov	r7, r0
 800c484:	f7ff ffac 	bl	800c3e0 <__sfp_lock_acquire>
 800c488:	4b1e      	ldr	r3, [pc, #120]	; (800c504 <__sfp+0x84>)
 800c48a:	681e      	ldr	r6, [r3, #0]
 800c48c:	69b3      	ldr	r3, [r6, #24]
 800c48e:	b913      	cbnz	r3, 800c496 <__sfp+0x16>
 800c490:	4630      	mov	r0, r6
 800c492:	f7ff ffbd 	bl	800c410 <__sinit>
 800c496:	3648      	adds	r6, #72	; 0x48
 800c498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	d503      	bpl.n	800c4a8 <__sfp+0x28>
 800c4a0:	6833      	ldr	r3, [r6, #0]
 800c4a2:	b30b      	cbz	r3, 800c4e8 <__sfp+0x68>
 800c4a4:	6836      	ldr	r6, [r6, #0]
 800c4a6:	e7f7      	b.n	800c498 <__sfp+0x18>
 800c4a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4ac:	b9d5      	cbnz	r5, 800c4e4 <__sfp+0x64>
 800c4ae:	4b16      	ldr	r3, [pc, #88]	; (800c508 <__sfp+0x88>)
 800c4b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4b4:	60e3      	str	r3, [r4, #12]
 800c4b6:	6665      	str	r5, [r4, #100]	; 0x64
 800c4b8:	f000 f859 	bl	800c56e <__retarget_lock_init_recursive>
 800c4bc:	f7ff ff96 	bl	800c3ec <__sfp_lock_release>
 800c4c0:	2208      	movs	r2, #8
 800c4c2:	4629      	mov	r1, r5
 800c4c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4cc:	6025      	str	r5, [r4, #0]
 800c4ce:	61a5      	str	r5, [r4, #24]
 800c4d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4d4:	f7fc fe96 	bl	8009204 <memset>
 800c4d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e4:	3468      	adds	r4, #104	; 0x68
 800c4e6:	e7d9      	b.n	800c49c <__sfp+0x1c>
 800c4e8:	2104      	movs	r1, #4
 800c4ea:	4638      	mov	r0, r7
 800c4ec:	f7ff ff62 	bl	800c3b4 <__sfmoreglue>
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	6030      	str	r0, [r6, #0]
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d1d5      	bne.n	800c4a4 <__sfp+0x24>
 800c4f8:	f7ff ff78 	bl	800c3ec <__sfp_lock_release>
 800c4fc:	230c      	movs	r3, #12
 800c4fe:	603b      	str	r3, [r7, #0]
 800c500:	e7ee      	b.n	800c4e0 <__sfp+0x60>
 800c502:	bf00      	nop
 800c504:	0800dac0 	.word	0x0800dac0
 800c508:	ffff0001 	.word	0xffff0001

0800c50c <fiprintf>:
 800c50c:	b40e      	push	{r1, r2, r3}
 800c50e:	b503      	push	{r0, r1, lr}
 800c510:	4601      	mov	r1, r0
 800c512:	ab03      	add	r3, sp, #12
 800c514:	4805      	ldr	r0, [pc, #20]	; (800c52c <fiprintf+0x20>)
 800c516:	f853 2b04 	ldr.w	r2, [r3], #4
 800c51a:	6800      	ldr	r0, [r0, #0]
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	f000 f8a7 	bl	800c670 <_vfiprintf_r>
 800c522:	b002      	add	sp, #8
 800c524:	f85d eb04 	ldr.w	lr, [sp], #4
 800c528:	b003      	add	sp, #12
 800c52a:	4770      	bx	lr
 800c52c:	20000018 	.word	0x20000018

0800c530 <_fwalk_reent>:
 800c530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c534:	4606      	mov	r6, r0
 800c536:	4688      	mov	r8, r1
 800c538:	2700      	movs	r7, #0
 800c53a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c53e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c542:	f1b9 0901 	subs.w	r9, r9, #1
 800c546:	d505      	bpl.n	800c554 <_fwalk_reent+0x24>
 800c548:	6824      	ldr	r4, [r4, #0]
 800c54a:	2c00      	cmp	r4, #0
 800c54c:	d1f7      	bne.n	800c53e <_fwalk_reent+0xe>
 800c54e:	4638      	mov	r0, r7
 800c550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c554:	89ab      	ldrh	r3, [r5, #12]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d907      	bls.n	800c56a <_fwalk_reent+0x3a>
 800c55a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c55e:	3301      	adds	r3, #1
 800c560:	d003      	beq.n	800c56a <_fwalk_reent+0x3a>
 800c562:	4629      	mov	r1, r5
 800c564:	4630      	mov	r0, r6
 800c566:	47c0      	blx	r8
 800c568:	4307      	orrs	r7, r0
 800c56a:	3568      	adds	r5, #104	; 0x68
 800c56c:	e7e9      	b.n	800c542 <_fwalk_reent+0x12>

0800c56e <__retarget_lock_init_recursive>:
 800c56e:	4770      	bx	lr

0800c570 <__retarget_lock_acquire_recursive>:
 800c570:	4770      	bx	lr

0800c572 <__retarget_lock_release_recursive>:
 800c572:	4770      	bx	lr

0800c574 <memchr>:
 800c574:	4603      	mov	r3, r0
 800c576:	b510      	push	{r4, lr}
 800c578:	b2c9      	uxtb	r1, r1
 800c57a:	4402      	add	r2, r0
 800c57c:	4293      	cmp	r3, r2
 800c57e:	4618      	mov	r0, r3
 800c580:	d101      	bne.n	800c586 <memchr+0x12>
 800c582:	2000      	movs	r0, #0
 800c584:	e003      	b.n	800c58e <memchr+0x1a>
 800c586:	7804      	ldrb	r4, [r0, #0]
 800c588:	3301      	adds	r3, #1
 800c58a:	428c      	cmp	r4, r1
 800c58c:	d1f6      	bne.n	800c57c <memchr+0x8>
 800c58e:	bd10      	pop	{r4, pc}

0800c590 <memmove>:
 800c590:	4288      	cmp	r0, r1
 800c592:	b510      	push	{r4, lr}
 800c594:	eb01 0402 	add.w	r4, r1, r2
 800c598:	d902      	bls.n	800c5a0 <memmove+0x10>
 800c59a:	4284      	cmp	r4, r0
 800c59c:	4623      	mov	r3, r4
 800c59e:	d807      	bhi.n	800c5b0 <memmove+0x20>
 800c5a0:	1e43      	subs	r3, r0, #1
 800c5a2:	42a1      	cmp	r1, r4
 800c5a4:	d008      	beq.n	800c5b8 <memmove+0x28>
 800c5a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ae:	e7f8      	b.n	800c5a2 <memmove+0x12>
 800c5b0:	4601      	mov	r1, r0
 800c5b2:	4402      	add	r2, r0
 800c5b4:	428a      	cmp	r2, r1
 800c5b6:	d100      	bne.n	800c5ba <memmove+0x2a>
 800c5b8:	bd10      	pop	{r4, pc}
 800c5ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5c2:	e7f7      	b.n	800c5b4 <memmove+0x24>

0800c5c4 <_realloc_r>:
 800c5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	4614      	mov	r4, r2
 800c5cc:	460e      	mov	r6, r1
 800c5ce:	b921      	cbnz	r1, 800c5da <_realloc_r+0x16>
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d6:	f7fc be99 	b.w	800930c <_malloc_r>
 800c5da:	b92a      	cbnz	r2, 800c5e8 <_realloc_r+0x24>
 800c5dc:	f7fc fe2e 	bl	800923c <_free_r>
 800c5e0:	4625      	mov	r5, r4
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	f000 fa9e 	bl	800cb28 <_malloc_usable_size_r>
 800c5ec:	4284      	cmp	r4, r0
 800c5ee:	4607      	mov	r7, r0
 800c5f0:	d802      	bhi.n	800c5f8 <_realloc_r+0x34>
 800c5f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c5f6:	d812      	bhi.n	800c61e <_realloc_r+0x5a>
 800c5f8:	4621      	mov	r1, r4
 800c5fa:	4640      	mov	r0, r8
 800c5fc:	f7fc fe86 	bl	800930c <_malloc_r>
 800c600:	4605      	mov	r5, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	d0ed      	beq.n	800c5e2 <_realloc_r+0x1e>
 800c606:	42bc      	cmp	r4, r7
 800c608:	4622      	mov	r2, r4
 800c60a:	4631      	mov	r1, r6
 800c60c:	bf28      	it	cs
 800c60e:	463a      	movcs	r2, r7
 800c610:	f7fc fdea 	bl	80091e8 <memcpy>
 800c614:	4631      	mov	r1, r6
 800c616:	4640      	mov	r0, r8
 800c618:	f7fc fe10 	bl	800923c <_free_r>
 800c61c:	e7e1      	b.n	800c5e2 <_realloc_r+0x1e>
 800c61e:	4635      	mov	r5, r6
 800c620:	e7df      	b.n	800c5e2 <_realloc_r+0x1e>

0800c622 <__sfputc_r>:
 800c622:	6893      	ldr	r3, [r2, #8]
 800c624:	b410      	push	{r4}
 800c626:	3b01      	subs	r3, #1
 800c628:	2b00      	cmp	r3, #0
 800c62a:	6093      	str	r3, [r2, #8]
 800c62c:	da07      	bge.n	800c63e <__sfputc_r+0x1c>
 800c62e:	6994      	ldr	r4, [r2, #24]
 800c630:	42a3      	cmp	r3, r4
 800c632:	db01      	blt.n	800c638 <__sfputc_r+0x16>
 800c634:	290a      	cmp	r1, #10
 800c636:	d102      	bne.n	800c63e <__sfputc_r+0x1c>
 800c638:	bc10      	pop	{r4}
 800c63a:	f000 b949 	b.w	800c8d0 <__swbuf_r>
 800c63e:	6813      	ldr	r3, [r2, #0]
 800c640:	1c58      	adds	r0, r3, #1
 800c642:	6010      	str	r0, [r2, #0]
 800c644:	7019      	strb	r1, [r3, #0]
 800c646:	4608      	mov	r0, r1
 800c648:	bc10      	pop	{r4}
 800c64a:	4770      	bx	lr

0800c64c <__sfputs_r>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	4606      	mov	r6, r0
 800c650:	460f      	mov	r7, r1
 800c652:	4614      	mov	r4, r2
 800c654:	18d5      	adds	r5, r2, r3
 800c656:	42ac      	cmp	r4, r5
 800c658:	d101      	bne.n	800c65e <__sfputs_r+0x12>
 800c65a:	2000      	movs	r0, #0
 800c65c:	e007      	b.n	800c66e <__sfputs_r+0x22>
 800c65e:	463a      	mov	r2, r7
 800c660:	4630      	mov	r0, r6
 800c662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c666:	f7ff ffdc 	bl	800c622 <__sfputc_r>
 800c66a:	1c43      	adds	r3, r0, #1
 800c66c:	d1f3      	bne.n	800c656 <__sfputs_r+0xa>
 800c66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c670 <_vfiprintf_r>:
 800c670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c674:	460d      	mov	r5, r1
 800c676:	4614      	mov	r4, r2
 800c678:	4698      	mov	r8, r3
 800c67a:	4606      	mov	r6, r0
 800c67c:	b09d      	sub	sp, #116	; 0x74
 800c67e:	b118      	cbz	r0, 800c688 <_vfiprintf_r+0x18>
 800c680:	6983      	ldr	r3, [r0, #24]
 800c682:	b90b      	cbnz	r3, 800c688 <_vfiprintf_r+0x18>
 800c684:	f7ff fec4 	bl	800c410 <__sinit>
 800c688:	4b89      	ldr	r3, [pc, #548]	; (800c8b0 <_vfiprintf_r+0x240>)
 800c68a:	429d      	cmp	r5, r3
 800c68c:	d11b      	bne.n	800c6c6 <_vfiprintf_r+0x56>
 800c68e:	6875      	ldr	r5, [r6, #4]
 800c690:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c692:	07d9      	lsls	r1, r3, #31
 800c694:	d405      	bmi.n	800c6a2 <_vfiprintf_r+0x32>
 800c696:	89ab      	ldrh	r3, [r5, #12]
 800c698:	059a      	lsls	r2, r3, #22
 800c69a:	d402      	bmi.n	800c6a2 <_vfiprintf_r+0x32>
 800c69c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c69e:	f7ff ff67 	bl	800c570 <__retarget_lock_acquire_recursive>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	071b      	lsls	r3, r3, #28
 800c6a6:	d501      	bpl.n	800c6ac <_vfiprintf_r+0x3c>
 800c6a8:	692b      	ldr	r3, [r5, #16]
 800c6aa:	b9eb      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x78>
 800c6ac:	4629      	mov	r1, r5
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f000 f960 	bl	800c974 <__swsetup_r>
 800c6b4:	b1c0      	cbz	r0, 800c6e8 <_vfiprintf_r+0x78>
 800c6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b8:	07dc      	lsls	r4, r3, #31
 800c6ba:	d50e      	bpl.n	800c6da <_vfiprintf_r+0x6a>
 800c6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c0:	b01d      	add	sp, #116	; 0x74
 800c6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6c6:	4b7b      	ldr	r3, [pc, #492]	; (800c8b4 <_vfiprintf_r+0x244>)
 800c6c8:	429d      	cmp	r5, r3
 800c6ca:	d101      	bne.n	800c6d0 <_vfiprintf_r+0x60>
 800c6cc:	68b5      	ldr	r5, [r6, #8]
 800c6ce:	e7df      	b.n	800c690 <_vfiprintf_r+0x20>
 800c6d0:	4b79      	ldr	r3, [pc, #484]	; (800c8b8 <_vfiprintf_r+0x248>)
 800c6d2:	429d      	cmp	r5, r3
 800c6d4:	bf08      	it	eq
 800c6d6:	68f5      	ldreq	r5, [r6, #12]
 800c6d8:	e7da      	b.n	800c690 <_vfiprintf_r+0x20>
 800c6da:	89ab      	ldrh	r3, [r5, #12]
 800c6dc:	0598      	lsls	r0, r3, #22
 800c6de:	d4ed      	bmi.n	800c6bc <_vfiprintf_r+0x4c>
 800c6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6e2:	f7ff ff46 	bl	800c572 <__retarget_lock_release_recursive>
 800c6e6:	e7e9      	b.n	800c6bc <_vfiprintf_r+0x4c>
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ec:	2320      	movs	r3, #32
 800c6ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6f2:	2330      	movs	r3, #48	; 0x30
 800c6f4:	f04f 0901 	mov.w	r9, #1
 800c6f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6fc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c8bc <_vfiprintf_r+0x24c>
 800c700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c704:	4623      	mov	r3, r4
 800c706:	469a      	mov	sl, r3
 800c708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c70c:	b10a      	cbz	r2, 800c712 <_vfiprintf_r+0xa2>
 800c70e:	2a25      	cmp	r2, #37	; 0x25
 800c710:	d1f9      	bne.n	800c706 <_vfiprintf_r+0x96>
 800c712:	ebba 0b04 	subs.w	fp, sl, r4
 800c716:	d00b      	beq.n	800c730 <_vfiprintf_r+0xc0>
 800c718:	465b      	mov	r3, fp
 800c71a:	4622      	mov	r2, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ff94 	bl	800c64c <__sfputs_r>
 800c724:	3001      	adds	r0, #1
 800c726:	f000 80aa 	beq.w	800c87e <_vfiprintf_r+0x20e>
 800c72a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c72c:	445a      	add	r2, fp
 800c72e:	9209      	str	r2, [sp, #36]	; 0x24
 800c730:	f89a 3000 	ldrb.w	r3, [sl]
 800c734:	2b00      	cmp	r3, #0
 800c736:	f000 80a2 	beq.w	800c87e <_vfiprintf_r+0x20e>
 800c73a:	2300      	movs	r3, #0
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c744:	f10a 0a01 	add.w	sl, sl, #1
 800c748:	9304      	str	r3, [sp, #16]
 800c74a:	9307      	str	r3, [sp, #28]
 800c74c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c750:	931a      	str	r3, [sp, #104]	; 0x68
 800c752:	4654      	mov	r4, sl
 800c754:	2205      	movs	r2, #5
 800c756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75a:	4858      	ldr	r0, [pc, #352]	; (800c8bc <_vfiprintf_r+0x24c>)
 800c75c:	f7ff ff0a 	bl	800c574 <memchr>
 800c760:	9a04      	ldr	r2, [sp, #16]
 800c762:	b9d8      	cbnz	r0, 800c79c <_vfiprintf_r+0x12c>
 800c764:	06d1      	lsls	r1, r2, #27
 800c766:	bf44      	itt	mi
 800c768:	2320      	movmi	r3, #32
 800c76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c76e:	0713      	lsls	r3, r2, #28
 800c770:	bf44      	itt	mi
 800c772:	232b      	movmi	r3, #43	; 0x2b
 800c774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c778:	f89a 3000 	ldrb.w	r3, [sl]
 800c77c:	2b2a      	cmp	r3, #42	; 0x2a
 800c77e:	d015      	beq.n	800c7ac <_vfiprintf_r+0x13c>
 800c780:	4654      	mov	r4, sl
 800c782:	2000      	movs	r0, #0
 800c784:	f04f 0c0a 	mov.w	ip, #10
 800c788:	9a07      	ldr	r2, [sp, #28]
 800c78a:	4621      	mov	r1, r4
 800c78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c790:	3b30      	subs	r3, #48	; 0x30
 800c792:	2b09      	cmp	r3, #9
 800c794:	d94e      	bls.n	800c834 <_vfiprintf_r+0x1c4>
 800c796:	b1b0      	cbz	r0, 800c7c6 <_vfiprintf_r+0x156>
 800c798:	9207      	str	r2, [sp, #28]
 800c79a:	e014      	b.n	800c7c6 <_vfiprintf_r+0x156>
 800c79c:	eba0 0308 	sub.w	r3, r0, r8
 800c7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	46a2      	mov	sl, r4
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	e7d2      	b.n	800c752 <_vfiprintf_r+0xe2>
 800c7ac:	9b03      	ldr	r3, [sp, #12]
 800c7ae:	1d19      	adds	r1, r3, #4
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	9103      	str	r1, [sp, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	bfbb      	ittet	lt
 800c7b8:	425b      	neglt	r3, r3
 800c7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c7be:	9307      	strge	r3, [sp, #28]
 800c7c0:	9307      	strlt	r3, [sp, #28]
 800c7c2:	bfb8      	it	lt
 800c7c4:	9204      	strlt	r2, [sp, #16]
 800c7c6:	7823      	ldrb	r3, [r4, #0]
 800c7c8:	2b2e      	cmp	r3, #46	; 0x2e
 800c7ca:	d10c      	bne.n	800c7e6 <_vfiprintf_r+0x176>
 800c7cc:	7863      	ldrb	r3, [r4, #1]
 800c7ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c7d0:	d135      	bne.n	800c83e <_vfiprintf_r+0x1ce>
 800c7d2:	9b03      	ldr	r3, [sp, #12]
 800c7d4:	3402      	adds	r4, #2
 800c7d6:	1d1a      	adds	r2, r3, #4
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	9203      	str	r2, [sp, #12]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bfb8      	it	lt
 800c7e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c8c0 <_vfiprintf_r+0x250>
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	4650      	mov	r0, sl
 800c7ee:	7821      	ldrb	r1, [r4, #0]
 800c7f0:	f7ff fec0 	bl	800c574 <memchr>
 800c7f4:	b140      	cbz	r0, 800c808 <_vfiprintf_r+0x198>
 800c7f6:	2340      	movs	r3, #64	; 0x40
 800c7f8:	eba0 000a 	sub.w	r0, r0, sl
 800c7fc:	fa03 f000 	lsl.w	r0, r3, r0
 800c800:	9b04      	ldr	r3, [sp, #16]
 800c802:	3401      	adds	r4, #1
 800c804:	4303      	orrs	r3, r0
 800c806:	9304      	str	r3, [sp, #16]
 800c808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c80c:	2206      	movs	r2, #6
 800c80e:	482d      	ldr	r0, [pc, #180]	; (800c8c4 <_vfiprintf_r+0x254>)
 800c810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c814:	f7ff feae 	bl	800c574 <memchr>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d03f      	beq.n	800c89c <_vfiprintf_r+0x22c>
 800c81c:	4b2a      	ldr	r3, [pc, #168]	; (800c8c8 <_vfiprintf_r+0x258>)
 800c81e:	bb1b      	cbnz	r3, 800c868 <_vfiprintf_r+0x1f8>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	3307      	adds	r3, #7
 800c824:	f023 0307 	bic.w	r3, r3, #7
 800c828:	3308      	adds	r3, #8
 800c82a:	9303      	str	r3, [sp, #12]
 800c82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c82e:	443b      	add	r3, r7
 800c830:	9309      	str	r3, [sp, #36]	; 0x24
 800c832:	e767      	b.n	800c704 <_vfiprintf_r+0x94>
 800c834:	460c      	mov	r4, r1
 800c836:	2001      	movs	r0, #1
 800c838:	fb0c 3202 	mla	r2, ip, r2, r3
 800c83c:	e7a5      	b.n	800c78a <_vfiprintf_r+0x11a>
 800c83e:	2300      	movs	r3, #0
 800c840:	f04f 0c0a 	mov.w	ip, #10
 800c844:	4619      	mov	r1, r3
 800c846:	3401      	adds	r4, #1
 800c848:	9305      	str	r3, [sp, #20]
 800c84a:	4620      	mov	r0, r4
 800c84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c850:	3a30      	subs	r2, #48	; 0x30
 800c852:	2a09      	cmp	r2, #9
 800c854:	d903      	bls.n	800c85e <_vfiprintf_r+0x1ee>
 800c856:	2b00      	cmp	r3, #0
 800c858:	d0c5      	beq.n	800c7e6 <_vfiprintf_r+0x176>
 800c85a:	9105      	str	r1, [sp, #20]
 800c85c:	e7c3      	b.n	800c7e6 <_vfiprintf_r+0x176>
 800c85e:	4604      	mov	r4, r0
 800c860:	2301      	movs	r3, #1
 800c862:	fb0c 2101 	mla	r1, ip, r1, r2
 800c866:	e7f0      	b.n	800c84a <_vfiprintf_r+0x1da>
 800c868:	ab03      	add	r3, sp, #12
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	462a      	mov	r2, r5
 800c86e:	4630      	mov	r0, r6
 800c870:	4b16      	ldr	r3, [pc, #88]	; (800c8cc <_vfiprintf_r+0x25c>)
 800c872:	a904      	add	r1, sp, #16
 800c874:	f3af 8000 	nop.w
 800c878:	4607      	mov	r7, r0
 800c87a:	1c78      	adds	r0, r7, #1
 800c87c:	d1d6      	bne.n	800c82c <_vfiprintf_r+0x1bc>
 800c87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c880:	07d9      	lsls	r1, r3, #31
 800c882:	d405      	bmi.n	800c890 <_vfiprintf_r+0x220>
 800c884:	89ab      	ldrh	r3, [r5, #12]
 800c886:	059a      	lsls	r2, r3, #22
 800c888:	d402      	bmi.n	800c890 <_vfiprintf_r+0x220>
 800c88a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c88c:	f7ff fe71 	bl	800c572 <__retarget_lock_release_recursive>
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	065b      	lsls	r3, r3, #25
 800c894:	f53f af12 	bmi.w	800c6bc <_vfiprintf_r+0x4c>
 800c898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c89a:	e711      	b.n	800c6c0 <_vfiprintf_r+0x50>
 800c89c:	ab03      	add	r3, sp, #12
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	462a      	mov	r2, r5
 800c8a2:	4630      	mov	r0, r6
 800c8a4:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <_vfiprintf_r+0x25c>)
 800c8a6:	a904      	add	r1, sp, #16
 800c8a8:	f7ff f86a 	bl	800b980 <_printf_i>
 800c8ac:	e7e4      	b.n	800c878 <_vfiprintf_r+0x208>
 800c8ae:	bf00      	nop
 800c8b0:	0800dec8 	.word	0x0800dec8
 800c8b4:	0800dee8 	.word	0x0800dee8
 800c8b8:	0800dea8 	.word	0x0800dea8
 800c8bc:	0800dd1c 	.word	0x0800dd1c
 800c8c0:	0800dd22 	.word	0x0800dd22
 800c8c4:	0800dd26 	.word	0x0800dd26
 800c8c8:	00000000 	.word	0x00000000
 800c8cc:	0800c64d 	.word	0x0800c64d

0800c8d0 <__swbuf_r>:
 800c8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d2:	460e      	mov	r6, r1
 800c8d4:	4614      	mov	r4, r2
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	b118      	cbz	r0, 800c8e2 <__swbuf_r+0x12>
 800c8da:	6983      	ldr	r3, [r0, #24]
 800c8dc:	b90b      	cbnz	r3, 800c8e2 <__swbuf_r+0x12>
 800c8de:	f7ff fd97 	bl	800c410 <__sinit>
 800c8e2:	4b21      	ldr	r3, [pc, #132]	; (800c968 <__swbuf_r+0x98>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	d12b      	bne.n	800c940 <__swbuf_r+0x70>
 800c8e8:	686c      	ldr	r4, [r5, #4]
 800c8ea:	69a3      	ldr	r3, [r4, #24]
 800c8ec:	60a3      	str	r3, [r4, #8]
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	071a      	lsls	r2, r3, #28
 800c8f2:	d52f      	bpl.n	800c954 <__swbuf_r+0x84>
 800c8f4:	6923      	ldr	r3, [r4, #16]
 800c8f6:	b36b      	cbz	r3, 800c954 <__swbuf_r+0x84>
 800c8f8:	6923      	ldr	r3, [r4, #16]
 800c8fa:	6820      	ldr	r0, [r4, #0]
 800c8fc:	b2f6      	uxtb	r6, r6
 800c8fe:	1ac0      	subs	r0, r0, r3
 800c900:	6963      	ldr	r3, [r4, #20]
 800c902:	4637      	mov	r7, r6
 800c904:	4283      	cmp	r3, r0
 800c906:	dc04      	bgt.n	800c912 <__swbuf_r+0x42>
 800c908:	4621      	mov	r1, r4
 800c90a:	4628      	mov	r0, r5
 800c90c:	f7ff fcec 	bl	800c2e8 <_fflush_r>
 800c910:	bb30      	cbnz	r0, 800c960 <__swbuf_r+0x90>
 800c912:	68a3      	ldr	r3, [r4, #8]
 800c914:	3001      	adds	r0, #1
 800c916:	3b01      	subs	r3, #1
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	1c5a      	adds	r2, r3, #1
 800c91e:	6022      	str	r2, [r4, #0]
 800c920:	701e      	strb	r6, [r3, #0]
 800c922:	6963      	ldr	r3, [r4, #20]
 800c924:	4283      	cmp	r3, r0
 800c926:	d004      	beq.n	800c932 <__swbuf_r+0x62>
 800c928:	89a3      	ldrh	r3, [r4, #12]
 800c92a:	07db      	lsls	r3, r3, #31
 800c92c:	d506      	bpl.n	800c93c <__swbuf_r+0x6c>
 800c92e:	2e0a      	cmp	r6, #10
 800c930:	d104      	bne.n	800c93c <__swbuf_r+0x6c>
 800c932:	4621      	mov	r1, r4
 800c934:	4628      	mov	r0, r5
 800c936:	f7ff fcd7 	bl	800c2e8 <_fflush_r>
 800c93a:	b988      	cbnz	r0, 800c960 <__swbuf_r+0x90>
 800c93c:	4638      	mov	r0, r7
 800c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c940:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <__swbuf_r+0x9c>)
 800c942:	429c      	cmp	r4, r3
 800c944:	d101      	bne.n	800c94a <__swbuf_r+0x7a>
 800c946:	68ac      	ldr	r4, [r5, #8]
 800c948:	e7cf      	b.n	800c8ea <__swbuf_r+0x1a>
 800c94a:	4b09      	ldr	r3, [pc, #36]	; (800c970 <__swbuf_r+0xa0>)
 800c94c:	429c      	cmp	r4, r3
 800c94e:	bf08      	it	eq
 800c950:	68ec      	ldreq	r4, [r5, #12]
 800c952:	e7ca      	b.n	800c8ea <__swbuf_r+0x1a>
 800c954:	4621      	mov	r1, r4
 800c956:	4628      	mov	r0, r5
 800c958:	f000 f80c 	bl	800c974 <__swsetup_r>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d0cb      	beq.n	800c8f8 <__swbuf_r+0x28>
 800c960:	f04f 37ff 	mov.w	r7, #4294967295
 800c964:	e7ea      	b.n	800c93c <__swbuf_r+0x6c>
 800c966:	bf00      	nop
 800c968:	0800dec8 	.word	0x0800dec8
 800c96c:	0800dee8 	.word	0x0800dee8
 800c970:	0800dea8 	.word	0x0800dea8

0800c974 <__swsetup_r>:
 800c974:	4b32      	ldr	r3, [pc, #200]	; (800ca40 <__swsetup_r+0xcc>)
 800c976:	b570      	push	{r4, r5, r6, lr}
 800c978:	681d      	ldr	r5, [r3, #0]
 800c97a:	4606      	mov	r6, r0
 800c97c:	460c      	mov	r4, r1
 800c97e:	b125      	cbz	r5, 800c98a <__swsetup_r+0x16>
 800c980:	69ab      	ldr	r3, [r5, #24]
 800c982:	b913      	cbnz	r3, 800c98a <__swsetup_r+0x16>
 800c984:	4628      	mov	r0, r5
 800c986:	f7ff fd43 	bl	800c410 <__sinit>
 800c98a:	4b2e      	ldr	r3, [pc, #184]	; (800ca44 <__swsetup_r+0xd0>)
 800c98c:	429c      	cmp	r4, r3
 800c98e:	d10f      	bne.n	800c9b0 <__swsetup_r+0x3c>
 800c990:	686c      	ldr	r4, [r5, #4]
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c998:	0719      	lsls	r1, r3, #28
 800c99a:	d42c      	bmi.n	800c9f6 <__swsetup_r+0x82>
 800c99c:	06dd      	lsls	r5, r3, #27
 800c99e:	d411      	bmi.n	800c9c4 <__swsetup_r+0x50>
 800c9a0:	2309      	movs	r3, #9
 800c9a2:	6033      	str	r3, [r6, #0]
 800c9a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ac:	81a3      	strh	r3, [r4, #12]
 800c9ae:	e03e      	b.n	800ca2e <__swsetup_r+0xba>
 800c9b0:	4b25      	ldr	r3, [pc, #148]	; (800ca48 <__swsetup_r+0xd4>)
 800c9b2:	429c      	cmp	r4, r3
 800c9b4:	d101      	bne.n	800c9ba <__swsetup_r+0x46>
 800c9b6:	68ac      	ldr	r4, [r5, #8]
 800c9b8:	e7eb      	b.n	800c992 <__swsetup_r+0x1e>
 800c9ba:	4b24      	ldr	r3, [pc, #144]	; (800ca4c <__swsetup_r+0xd8>)
 800c9bc:	429c      	cmp	r4, r3
 800c9be:	bf08      	it	eq
 800c9c0:	68ec      	ldreq	r4, [r5, #12]
 800c9c2:	e7e6      	b.n	800c992 <__swsetup_r+0x1e>
 800c9c4:	0758      	lsls	r0, r3, #29
 800c9c6:	d512      	bpl.n	800c9ee <__swsetup_r+0x7a>
 800c9c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9ca:	b141      	cbz	r1, 800c9de <__swsetup_r+0x6a>
 800c9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9d0:	4299      	cmp	r1, r3
 800c9d2:	d002      	beq.n	800c9da <__swsetup_r+0x66>
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	f7fc fc31 	bl	800923c <_free_r>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	6363      	str	r3, [r4, #52]	; 0x34
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	6063      	str	r3, [r4, #4]
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	89a3      	ldrh	r3, [r4, #12]
 800c9f0:	f043 0308 	orr.w	r3, r3, #8
 800c9f4:	81a3      	strh	r3, [r4, #12]
 800c9f6:	6923      	ldr	r3, [r4, #16]
 800c9f8:	b94b      	cbnz	r3, 800ca0e <__swsetup_r+0x9a>
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca04:	d003      	beq.n	800ca0e <__swsetup_r+0x9a>
 800ca06:	4621      	mov	r1, r4
 800ca08:	4630      	mov	r0, r6
 800ca0a:	f000 f84d 	bl	800caa8 <__smakebuf_r>
 800ca0e:	89a0      	ldrh	r0, [r4, #12]
 800ca10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca14:	f010 0301 	ands.w	r3, r0, #1
 800ca18:	d00a      	beq.n	800ca30 <__swsetup_r+0xbc>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60a3      	str	r3, [r4, #8]
 800ca1e:	6963      	ldr	r3, [r4, #20]
 800ca20:	425b      	negs	r3, r3
 800ca22:	61a3      	str	r3, [r4, #24]
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	b943      	cbnz	r3, 800ca3a <__swsetup_r+0xc6>
 800ca28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca2c:	d1ba      	bne.n	800c9a4 <__swsetup_r+0x30>
 800ca2e:	bd70      	pop	{r4, r5, r6, pc}
 800ca30:	0781      	lsls	r1, r0, #30
 800ca32:	bf58      	it	pl
 800ca34:	6963      	ldrpl	r3, [r4, #20]
 800ca36:	60a3      	str	r3, [r4, #8]
 800ca38:	e7f4      	b.n	800ca24 <__swsetup_r+0xb0>
 800ca3a:	2000      	movs	r0, #0
 800ca3c:	e7f7      	b.n	800ca2e <__swsetup_r+0xba>
 800ca3e:	bf00      	nop
 800ca40:	20000018 	.word	0x20000018
 800ca44:	0800dec8 	.word	0x0800dec8
 800ca48:	0800dee8 	.word	0x0800dee8
 800ca4c:	0800dea8 	.word	0x0800dea8

0800ca50 <abort>:
 800ca50:	2006      	movs	r0, #6
 800ca52:	b508      	push	{r3, lr}
 800ca54:	f000 f898 	bl	800cb88 <raise>
 800ca58:	2001      	movs	r0, #1
 800ca5a:	f7f5 fbe6 	bl	800222a <_exit>

0800ca5e <__swhatbuf_r>:
 800ca5e:	b570      	push	{r4, r5, r6, lr}
 800ca60:	460e      	mov	r6, r1
 800ca62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca66:	4614      	mov	r4, r2
 800ca68:	2900      	cmp	r1, #0
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	b096      	sub	sp, #88	; 0x58
 800ca6e:	da08      	bge.n	800ca82 <__swhatbuf_r+0x24>
 800ca70:	2200      	movs	r2, #0
 800ca72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ca76:	602a      	str	r2, [r5, #0]
 800ca78:	061a      	lsls	r2, r3, #24
 800ca7a:	d410      	bmi.n	800ca9e <__swhatbuf_r+0x40>
 800ca7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca80:	e00e      	b.n	800caa0 <__swhatbuf_r+0x42>
 800ca82:	466a      	mov	r2, sp
 800ca84:	f000 f89c 	bl	800cbc0 <_fstat_r>
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	dbf1      	blt.n	800ca70 <__swhatbuf_r+0x12>
 800ca8c:	9a01      	ldr	r2, [sp, #4]
 800ca8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca96:	425a      	negs	r2, r3
 800ca98:	415a      	adcs	r2, r3
 800ca9a:	602a      	str	r2, [r5, #0]
 800ca9c:	e7ee      	b.n	800ca7c <__swhatbuf_r+0x1e>
 800ca9e:	2340      	movs	r3, #64	; 0x40
 800caa0:	2000      	movs	r0, #0
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	b016      	add	sp, #88	; 0x58
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <__smakebuf_r>:
 800caa8:	898b      	ldrh	r3, [r1, #12]
 800caaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caac:	079d      	lsls	r5, r3, #30
 800caae:	4606      	mov	r6, r0
 800cab0:	460c      	mov	r4, r1
 800cab2:	d507      	bpl.n	800cac4 <__smakebuf_r+0x1c>
 800cab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	2301      	movs	r3, #1
 800cabe:	6163      	str	r3, [r4, #20]
 800cac0:	b002      	add	sp, #8
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	466a      	mov	r2, sp
 800cac6:	ab01      	add	r3, sp, #4
 800cac8:	f7ff ffc9 	bl	800ca5e <__swhatbuf_r>
 800cacc:	9900      	ldr	r1, [sp, #0]
 800cace:	4605      	mov	r5, r0
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7fc fc1b 	bl	800930c <_malloc_r>
 800cad6:	b948      	cbnz	r0, 800caec <__smakebuf_r+0x44>
 800cad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d4ef      	bmi.n	800cac0 <__smakebuf_r+0x18>
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	f043 0302 	orr.w	r3, r3, #2
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	e7e3      	b.n	800cab4 <__smakebuf_r+0xc>
 800caec:	4b0d      	ldr	r3, [pc, #52]	; (800cb24 <__smakebuf_r+0x7c>)
 800caee:	62b3      	str	r3, [r6, #40]	; 0x28
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	6020      	str	r0, [r4, #0]
 800caf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf8:	81a3      	strh	r3, [r4, #12]
 800cafa:	9b00      	ldr	r3, [sp, #0]
 800cafc:	6120      	str	r0, [r4, #16]
 800cafe:	6163      	str	r3, [r4, #20]
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	b15b      	cbz	r3, 800cb1c <__smakebuf_r+0x74>
 800cb04:	4630      	mov	r0, r6
 800cb06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb0a:	f000 f86b 	bl	800cbe4 <_isatty_r>
 800cb0e:	b128      	cbz	r0, 800cb1c <__smakebuf_r+0x74>
 800cb10:	89a3      	ldrh	r3, [r4, #12]
 800cb12:	f023 0303 	bic.w	r3, r3, #3
 800cb16:	f043 0301 	orr.w	r3, r3, #1
 800cb1a:	81a3      	strh	r3, [r4, #12]
 800cb1c:	89a0      	ldrh	r0, [r4, #12]
 800cb1e:	4305      	orrs	r5, r0
 800cb20:	81a5      	strh	r5, [r4, #12]
 800cb22:	e7cd      	b.n	800cac0 <__smakebuf_r+0x18>
 800cb24:	0800c3a9 	.word	0x0800c3a9

0800cb28 <_malloc_usable_size_r>:
 800cb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb2c:	1f18      	subs	r0, r3, #4
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	bfbc      	itt	lt
 800cb32:	580b      	ldrlt	r3, [r1, r0]
 800cb34:	18c0      	addlt	r0, r0, r3
 800cb36:	4770      	bx	lr

0800cb38 <_raise_r>:
 800cb38:	291f      	cmp	r1, #31
 800cb3a:	b538      	push	{r3, r4, r5, lr}
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	460d      	mov	r5, r1
 800cb40:	d904      	bls.n	800cb4c <_raise_r+0x14>
 800cb42:	2316      	movs	r3, #22
 800cb44:	6003      	str	r3, [r0, #0]
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295
 800cb4a:	bd38      	pop	{r3, r4, r5, pc}
 800cb4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb4e:	b112      	cbz	r2, 800cb56 <_raise_r+0x1e>
 800cb50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb54:	b94b      	cbnz	r3, 800cb6a <_raise_r+0x32>
 800cb56:	4620      	mov	r0, r4
 800cb58:	f000 f830 	bl	800cbbc <_getpid_r>
 800cb5c:	462a      	mov	r2, r5
 800cb5e:	4601      	mov	r1, r0
 800cb60:	4620      	mov	r0, r4
 800cb62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb66:	f000 b817 	b.w	800cb98 <_kill_r>
 800cb6a:	2b01      	cmp	r3, #1
 800cb6c:	d00a      	beq.n	800cb84 <_raise_r+0x4c>
 800cb6e:	1c59      	adds	r1, r3, #1
 800cb70:	d103      	bne.n	800cb7a <_raise_r+0x42>
 800cb72:	2316      	movs	r3, #22
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	2001      	movs	r0, #1
 800cb78:	e7e7      	b.n	800cb4a <_raise_r+0x12>
 800cb7a:	2400      	movs	r4, #0
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb82:	4798      	blx	r3
 800cb84:	2000      	movs	r0, #0
 800cb86:	e7e0      	b.n	800cb4a <_raise_r+0x12>

0800cb88 <raise>:
 800cb88:	4b02      	ldr	r3, [pc, #8]	; (800cb94 <raise+0xc>)
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	f7ff bfd3 	b.w	800cb38 <_raise_r>
 800cb92:	bf00      	nop
 800cb94:	20000018 	.word	0x20000018

0800cb98 <_kill_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	4d06      	ldr	r5, [pc, #24]	; (800cbb8 <_kill_r+0x20>)
 800cb9e:	4604      	mov	r4, r0
 800cba0:	4608      	mov	r0, r1
 800cba2:	4611      	mov	r1, r2
 800cba4:	602b      	str	r3, [r5, #0]
 800cba6:	f7f5 fb30 	bl	800220a <_kill>
 800cbaa:	1c43      	adds	r3, r0, #1
 800cbac:	d102      	bne.n	800cbb4 <_kill_r+0x1c>
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	b103      	cbz	r3, 800cbb4 <_kill_r+0x1c>
 800cbb2:	6023      	str	r3, [r4, #0]
 800cbb4:	bd38      	pop	{r3, r4, r5, pc}
 800cbb6:	bf00      	nop
 800cbb8:	200028ac 	.word	0x200028ac

0800cbbc <_getpid_r>:
 800cbbc:	f7f5 bb1e 	b.w	80021fc <_getpid>

0800cbc0 <_fstat_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4d06      	ldr	r5, [pc, #24]	; (800cbe0 <_fstat_r+0x20>)
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	4611      	mov	r1, r2
 800cbcc:	602b      	str	r3, [r5, #0]
 800cbce:	f7f5 fb7a 	bl	80022c6 <_fstat>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	d102      	bne.n	800cbdc <_fstat_r+0x1c>
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	b103      	cbz	r3, 800cbdc <_fstat_r+0x1c>
 800cbda:	6023      	str	r3, [r4, #0]
 800cbdc:	bd38      	pop	{r3, r4, r5, pc}
 800cbde:	bf00      	nop
 800cbe0:	200028ac 	.word	0x200028ac

0800cbe4 <_isatty_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	4d05      	ldr	r5, [pc, #20]	; (800cc00 <_isatty_r+0x1c>)
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	f7f5 fb78 	bl	80022e4 <_isatty>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_isatty_r+0x1a>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_isatty_r+0x1a>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	200028ac 	.word	0x200028ac

0800cc04 <pow>:
 800cc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc08:	4614      	mov	r4, r2
 800cc0a:	461d      	mov	r5, r3
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	4689      	mov	r9, r1
 800cc10:	f000 f862 	bl	800ccd8 <__ieee754_pow>
 800cc14:	4622      	mov	r2, r4
 800cc16:	4606      	mov	r6, r0
 800cc18:	460f      	mov	r7, r1
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f7f3 ff64 	bl	8000aec <__aeabi_dcmpun>
 800cc24:	bbc8      	cbnz	r0, 800cc9a <pow+0x96>
 800cc26:	2200      	movs	r2, #0
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4640      	mov	r0, r8
 800cc2c:	4649      	mov	r1, r9
 800cc2e:	f7f3 ff2b 	bl	8000a88 <__aeabi_dcmpeq>
 800cc32:	b1b8      	cbz	r0, 800cc64 <pow+0x60>
 800cc34:	2200      	movs	r2, #0
 800cc36:	2300      	movs	r3, #0
 800cc38:	4620      	mov	r0, r4
 800cc3a:	4629      	mov	r1, r5
 800cc3c:	f7f3 ff24 	bl	8000a88 <__aeabi_dcmpeq>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d141      	bne.n	800ccc8 <pow+0xc4>
 800cc44:	4620      	mov	r0, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	f000 fe3b 	bl	800d8c2 <finite>
 800cc4c:	b328      	cbz	r0, 800cc9a <pow+0x96>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2300      	movs	r3, #0
 800cc52:	4620      	mov	r0, r4
 800cc54:	4629      	mov	r1, r5
 800cc56:	f7f3 ff21 	bl	8000a9c <__aeabi_dcmplt>
 800cc5a:	b1f0      	cbz	r0, 800cc9a <pow+0x96>
 800cc5c:	f7fc fa8a 	bl	8009174 <__errno>
 800cc60:	2322      	movs	r3, #34	; 0x22
 800cc62:	e019      	b.n	800cc98 <pow+0x94>
 800cc64:	4630      	mov	r0, r6
 800cc66:	4639      	mov	r1, r7
 800cc68:	f000 fe2b 	bl	800d8c2 <finite>
 800cc6c:	b9c8      	cbnz	r0, 800cca2 <pow+0x9e>
 800cc6e:	4640      	mov	r0, r8
 800cc70:	4649      	mov	r1, r9
 800cc72:	f000 fe26 	bl	800d8c2 <finite>
 800cc76:	b1a0      	cbz	r0, 800cca2 <pow+0x9e>
 800cc78:	4620      	mov	r0, r4
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	f000 fe21 	bl	800d8c2 <finite>
 800cc80:	b178      	cbz	r0, 800cca2 <pow+0x9e>
 800cc82:	4632      	mov	r2, r6
 800cc84:	463b      	mov	r3, r7
 800cc86:	4630      	mov	r0, r6
 800cc88:	4639      	mov	r1, r7
 800cc8a:	f7f3 ff2f 	bl	8000aec <__aeabi_dcmpun>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d0e4      	beq.n	800cc5c <pow+0x58>
 800cc92:	f7fc fa6f 	bl	8009174 <__errno>
 800cc96:	2321      	movs	r3, #33	; 0x21
 800cc98:	6003      	str	r3, [r0, #0]
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cca2:	2200      	movs	r2, #0
 800cca4:	2300      	movs	r3, #0
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	f7f3 feed 	bl	8000a88 <__aeabi_dcmpeq>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d0f3      	beq.n	800cc9a <pow+0x96>
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	4649      	mov	r1, r9
 800ccb6:	f000 fe04 	bl	800d8c2 <finite>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d0ed      	beq.n	800cc9a <pow+0x96>
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f000 fdfe 	bl	800d8c2 <finite>
 800ccc6:	e7c8      	b.n	800cc5a <pow+0x56>
 800ccc8:	2600      	movs	r6, #0
 800ccca:	4f01      	ldr	r7, [pc, #4]	; (800ccd0 <pow+0xcc>)
 800cccc:	e7e5      	b.n	800cc9a <pow+0x96>
 800ccce:	bf00      	nop
 800ccd0:	3ff00000 	.word	0x3ff00000
 800ccd4:	00000000 	.word	0x00000000

0800ccd8 <__ieee754_pow>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	b093      	sub	sp, #76	; 0x4c
 800ccde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cce2:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 800cce6:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800ccea:	4689      	mov	r9, r1
 800ccec:	ea56 0102 	orrs.w	r1, r6, r2
 800ccf0:	4680      	mov	r8, r0
 800ccf2:	d111      	bne.n	800cd18 <__ieee754_pow+0x40>
 800ccf4:	1803      	adds	r3, r0, r0
 800ccf6:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800ccfa:	4152      	adcs	r2, r2
 800ccfc:	4299      	cmp	r1, r3
 800ccfe:	4b82      	ldr	r3, [pc, #520]	; (800cf08 <__ieee754_pow+0x230>)
 800cd00:	4193      	sbcs	r3, r2
 800cd02:	f080 84b9 	bcs.w	800d678 <__ieee754_pow+0x9a0>
 800cd06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	f7f3 fa9d 	bl	800024c <__adddf3>
 800cd12:	4683      	mov	fp, r0
 800cd14:	468c      	mov	ip, r1
 800cd16:	e06f      	b.n	800cdf8 <__ieee754_pow+0x120>
 800cd18:	4b7c      	ldr	r3, [pc, #496]	; (800cf0c <__ieee754_pow+0x234>)
 800cd1a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800cd1e:	429c      	cmp	r4, r3
 800cd20:	464d      	mov	r5, r9
 800cd22:	4682      	mov	sl, r0
 800cd24:	dc06      	bgt.n	800cd34 <__ieee754_pow+0x5c>
 800cd26:	d101      	bne.n	800cd2c <__ieee754_pow+0x54>
 800cd28:	2800      	cmp	r0, #0
 800cd2a:	d1ec      	bne.n	800cd06 <__ieee754_pow+0x2e>
 800cd2c:	429e      	cmp	r6, r3
 800cd2e:	dc01      	bgt.n	800cd34 <__ieee754_pow+0x5c>
 800cd30:	d10f      	bne.n	800cd52 <__ieee754_pow+0x7a>
 800cd32:	b172      	cbz	r2, 800cd52 <__ieee754_pow+0x7a>
 800cd34:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800cd38:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800cd3c:	ea55 050a 	orrs.w	r5, r5, sl
 800cd40:	d1e1      	bne.n	800cd06 <__ieee754_pow+0x2e>
 800cd42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800cd46:	18db      	adds	r3, r3, r3
 800cd48:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800cd4c:	4152      	adcs	r2, r2
 800cd4e:	429d      	cmp	r5, r3
 800cd50:	e7d5      	b.n	800ccfe <__ieee754_pow+0x26>
 800cd52:	2d00      	cmp	r5, #0
 800cd54:	da39      	bge.n	800cdca <__ieee754_pow+0xf2>
 800cd56:	4b6e      	ldr	r3, [pc, #440]	; (800cf10 <__ieee754_pow+0x238>)
 800cd58:	429e      	cmp	r6, r3
 800cd5a:	dc52      	bgt.n	800ce02 <__ieee754_pow+0x12a>
 800cd5c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800cd60:	429e      	cmp	r6, r3
 800cd62:	f340 849c 	ble.w	800d69e <__ieee754_pow+0x9c6>
 800cd66:	1533      	asrs	r3, r6, #20
 800cd68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cd6c:	2b14      	cmp	r3, #20
 800cd6e:	dd0f      	ble.n	800cd90 <__ieee754_pow+0xb8>
 800cd70:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800cd74:	fa22 f103 	lsr.w	r1, r2, r3
 800cd78:	fa01 f303 	lsl.w	r3, r1, r3
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	f040 848e 	bne.w	800d69e <__ieee754_pow+0x9c6>
 800cd82:	f001 0101 	and.w	r1, r1, #1
 800cd86:	f1c1 0302 	rsb	r3, r1, #2
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	b182      	cbz	r2, 800cdb0 <__ieee754_pow+0xd8>
 800cd8e:	e05d      	b.n	800ce4c <__ieee754_pow+0x174>
 800cd90:	2a00      	cmp	r2, #0
 800cd92:	d159      	bne.n	800ce48 <__ieee754_pow+0x170>
 800cd94:	f1c3 0314 	rsb	r3, r3, #20
 800cd98:	fa46 f103 	asr.w	r1, r6, r3
 800cd9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cda0:	42b3      	cmp	r3, r6
 800cda2:	f040 8479 	bne.w	800d698 <__ieee754_pow+0x9c0>
 800cda6:	f001 0101 	and.w	r1, r1, #1
 800cdaa:	f1c1 0302 	rsb	r3, r1, #2
 800cdae:	9300      	str	r3, [sp, #0]
 800cdb0:	4b58      	ldr	r3, [pc, #352]	; (800cf14 <__ieee754_pow+0x23c>)
 800cdb2:	429e      	cmp	r6, r3
 800cdb4:	d132      	bne.n	800ce1c <__ieee754_pow+0x144>
 800cdb6:	2f00      	cmp	r7, #0
 800cdb8:	f280 846a 	bge.w	800d690 <__ieee754_pow+0x9b8>
 800cdbc:	4642      	mov	r2, r8
 800cdbe:	464b      	mov	r3, r9
 800cdc0:	2000      	movs	r0, #0
 800cdc2:	4954      	ldr	r1, [pc, #336]	; (800cf14 <__ieee754_pow+0x23c>)
 800cdc4:	f7f3 fd22 	bl	800080c <__aeabi_ddiv>
 800cdc8:	e7a3      	b.n	800cd12 <__ieee754_pow+0x3a>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	2a00      	cmp	r2, #0
 800cdd0:	d13c      	bne.n	800ce4c <__ieee754_pow+0x174>
 800cdd2:	4b4e      	ldr	r3, [pc, #312]	; (800cf0c <__ieee754_pow+0x234>)
 800cdd4:	429e      	cmp	r6, r3
 800cdd6:	d1eb      	bne.n	800cdb0 <__ieee754_pow+0xd8>
 800cdd8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800cddc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800cde0:	ea53 030a 	orrs.w	r3, r3, sl
 800cde4:	f000 8448 	beq.w	800d678 <__ieee754_pow+0x9a0>
 800cde8:	4b4b      	ldr	r3, [pc, #300]	; (800cf18 <__ieee754_pow+0x240>)
 800cdea:	429c      	cmp	r4, r3
 800cdec:	dd0b      	ble.n	800ce06 <__ieee754_pow+0x12e>
 800cdee:	2f00      	cmp	r7, #0
 800cdf0:	f2c0 8448 	blt.w	800d684 <__ieee754_pow+0x9ac>
 800cdf4:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cdf8:	4658      	mov	r0, fp
 800cdfa:	4661      	mov	r1, ip
 800cdfc:	b013      	add	sp, #76	; 0x4c
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	2302      	movs	r3, #2
 800ce04:	e7e2      	b.n	800cdcc <__ieee754_pow+0xf4>
 800ce06:	2f00      	cmp	r7, #0
 800ce08:	f04f 0b00 	mov.w	fp, #0
 800ce0c:	f04f 0c00 	mov.w	ip, #0
 800ce10:	daf2      	bge.n	800cdf8 <__ieee754_pow+0x120>
 800ce12:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800ce16:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800ce1a:	e7ed      	b.n	800cdf8 <__ieee754_pow+0x120>
 800ce1c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800ce20:	d106      	bne.n	800ce30 <__ieee754_pow+0x158>
 800ce22:	4642      	mov	r2, r8
 800ce24:	464b      	mov	r3, r9
 800ce26:	4640      	mov	r0, r8
 800ce28:	4649      	mov	r1, r9
 800ce2a:	f7f3 fbc5 	bl	80005b8 <__aeabi_dmul>
 800ce2e:	e770      	b.n	800cd12 <__ieee754_pow+0x3a>
 800ce30:	4b3a      	ldr	r3, [pc, #232]	; (800cf1c <__ieee754_pow+0x244>)
 800ce32:	429f      	cmp	r7, r3
 800ce34:	d10a      	bne.n	800ce4c <__ieee754_pow+0x174>
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	db08      	blt.n	800ce4c <__ieee754_pow+0x174>
 800ce3a:	4640      	mov	r0, r8
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	b013      	add	sp, #76	; 0x4c
 800ce40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	f000 bc5e 	b.w	800d704 <__ieee754_sqrt>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	4640      	mov	r0, r8
 800ce4e:	4649      	mov	r1, r9
 800ce50:	f000 fd34 	bl	800d8bc <fabs>
 800ce54:	4683      	mov	fp, r0
 800ce56:	468c      	mov	ip, r1
 800ce58:	f1ba 0f00 	cmp.w	sl, #0
 800ce5c:	d128      	bne.n	800ceb0 <__ieee754_pow+0x1d8>
 800ce5e:	b124      	cbz	r4, 800ce6a <__ieee754_pow+0x192>
 800ce60:	4b2c      	ldr	r3, [pc, #176]	; (800cf14 <__ieee754_pow+0x23c>)
 800ce62:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d122      	bne.n	800ceb0 <__ieee754_pow+0x1d8>
 800ce6a:	2f00      	cmp	r7, #0
 800ce6c:	da07      	bge.n	800ce7e <__ieee754_pow+0x1a6>
 800ce6e:	465a      	mov	r2, fp
 800ce70:	4663      	mov	r3, ip
 800ce72:	2000      	movs	r0, #0
 800ce74:	4927      	ldr	r1, [pc, #156]	; (800cf14 <__ieee754_pow+0x23c>)
 800ce76:	f7f3 fcc9 	bl	800080c <__aeabi_ddiv>
 800ce7a:	4683      	mov	fp, r0
 800ce7c:	468c      	mov	ip, r1
 800ce7e:	2d00      	cmp	r5, #0
 800ce80:	daba      	bge.n	800cdf8 <__ieee754_pow+0x120>
 800ce82:	9b00      	ldr	r3, [sp, #0]
 800ce84:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ce88:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ce8c:	4323      	orrs	r3, r4
 800ce8e:	d108      	bne.n	800cea2 <__ieee754_pow+0x1ca>
 800ce90:	465a      	mov	r2, fp
 800ce92:	4663      	mov	r3, ip
 800ce94:	4658      	mov	r0, fp
 800ce96:	4661      	mov	r1, ip
 800ce98:	f7f3 f9d6 	bl	8000248 <__aeabi_dsub>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	460b      	mov	r3, r1
 800cea0:	e790      	b.n	800cdc4 <__ieee754_pow+0xec>
 800cea2:	9b00      	ldr	r3, [sp, #0]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d1a7      	bne.n	800cdf8 <__ieee754_pow+0x120>
 800cea8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800ceac:	469c      	mov	ip, r3
 800ceae:	e7a3      	b.n	800cdf8 <__ieee754_pow+0x120>
 800ceb0:	0feb      	lsrs	r3, r5, #31
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	930c      	str	r3, [sp, #48]	; 0x30
 800ceb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ceb8:	9b00      	ldr	r3, [sp, #0]
 800ceba:	4313      	orrs	r3, r2
 800cebc:	d104      	bne.n	800cec8 <__ieee754_pow+0x1f0>
 800cebe:	4642      	mov	r2, r8
 800cec0:	464b      	mov	r3, r9
 800cec2:	4640      	mov	r0, r8
 800cec4:	4649      	mov	r1, r9
 800cec6:	e7e7      	b.n	800ce98 <__ieee754_pow+0x1c0>
 800cec8:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <__ieee754_pow+0x248>)
 800ceca:	429e      	cmp	r6, r3
 800cecc:	f340 80f6 	ble.w	800d0bc <__ieee754_pow+0x3e4>
 800ced0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ced4:	429e      	cmp	r6, r3
 800ced6:	4b10      	ldr	r3, [pc, #64]	; (800cf18 <__ieee754_pow+0x240>)
 800ced8:	dd09      	ble.n	800ceee <__ieee754_pow+0x216>
 800ceda:	429c      	cmp	r4, r3
 800cedc:	dc0c      	bgt.n	800cef8 <__ieee754_pow+0x220>
 800cede:	2f00      	cmp	r7, #0
 800cee0:	da0c      	bge.n	800cefc <__ieee754_pow+0x224>
 800cee2:	2000      	movs	r0, #0
 800cee4:	b013      	add	sp, #76	; 0x4c
 800cee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceea:	f000 bce2 	b.w	800d8b2 <__math_oflow>
 800ceee:	429c      	cmp	r4, r3
 800cef0:	dbf5      	blt.n	800cede <__ieee754_pow+0x206>
 800cef2:	4b08      	ldr	r3, [pc, #32]	; (800cf14 <__ieee754_pow+0x23c>)
 800cef4:	429c      	cmp	r4, r3
 800cef6:	dd15      	ble.n	800cf24 <__ieee754_pow+0x24c>
 800cef8:	2f00      	cmp	r7, #0
 800cefa:	dcf2      	bgt.n	800cee2 <__ieee754_pow+0x20a>
 800cefc:	2000      	movs	r0, #0
 800cefe:	b013      	add	sp, #76	; 0x4c
 800cf00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	f000 bcd0 	b.w	800d8a8 <__math_uflow>
 800cf08:	fff00000 	.word	0xfff00000
 800cf0c:	7ff00000 	.word	0x7ff00000
 800cf10:	433fffff 	.word	0x433fffff
 800cf14:	3ff00000 	.word	0x3ff00000
 800cf18:	3fefffff 	.word	0x3fefffff
 800cf1c:	3fe00000 	.word	0x3fe00000
 800cf20:	41e00000 	.word	0x41e00000
 800cf24:	4661      	mov	r1, ip
 800cf26:	2200      	movs	r2, #0
 800cf28:	4658      	mov	r0, fp
 800cf2a:	4b5f      	ldr	r3, [pc, #380]	; (800d0a8 <__ieee754_pow+0x3d0>)
 800cf2c:	f7f3 f98c 	bl	8000248 <__aeabi_dsub>
 800cf30:	a355      	add	r3, pc, #340	; (adr r3, 800d088 <__ieee754_pow+0x3b0>)
 800cf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf36:	4604      	mov	r4, r0
 800cf38:	460d      	mov	r5, r1
 800cf3a:	f7f3 fb3d 	bl	80005b8 <__aeabi_dmul>
 800cf3e:	a354      	add	r3, pc, #336	; (adr r3, 800d090 <__ieee754_pow+0x3b8>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4606      	mov	r6, r0
 800cf46:	460f      	mov	r7, r1
 800cf48:	4620      	mov	r0, r4
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	f7f3 fb34 	bl	80005b8 <__aeabi_dmul>
 800cf50:	2200      	movs	r2, #0
 800cf52:	4682      	mov	sl, r0
 800cf54:	468b      	mov	fp, r1
 800cf56:	4620      	mov	r0, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4b54      	ldr	r3, [pc, #336]	; (800d0ac <__ieee754_pow+0x3d4>)
 800cf5c:	f7f3 fb2c 	bl	80005b8 <__aeabi_dmul>
 800cf60:	4602      	mov	r2, r0
 800cf62:	460b      	mov	r3, r1
 800cf64:	a14c      	add	r1, pc, #304	; (adr r1, 800d098 <__ieee754_pow+0x3c0>)
 800cf66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf6a:	f7f3 f96d 	bl	8000248 <__aeabi_dsub>
 800cf6e:	4622      	mov	r2, r4
 800cf70:	462b      	mov	r3, r5
 800cf72:	f7f3 fb21 	bl	80005b8 <__aeabi_dmul>
 800cf76:	4602      	mov	r2, r0
 800cf78:	460b      	mov	r3, r1
 800cf7a:	2000      	movs	r0, #0
 800cf7c:	494c      	ldr	r1, [pc, #304]	; (800d0b0 <__ieee754_pow+0x3d8>)
 800cf7e:	f7f3 f963 	bl	8000248 <__aeabi_dsub>
 800cf82:	4622      	mov	r2, r4
 800cf84:	462b      	mov	r3, r5
 800cf86:	4680      	mov	r8, r0
 800cf88:	4689      	mov	r9, r1
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	f7f3 fb13 	bl	80005b8 <__aeabi_dmul>
 800cf92:	4602      	mov	r2, r0
 800cf94:	460b      	mov	r3, r1
 800cf96:	4640      	mov	r0, r8
 800cf98:	4649      	mov	r1, r9
 800cf9a:	f7f3 fb0d 	bl	80005b8 <__aeabi_dmul>
 800cf9e:	a340      	add	r3, pc, #256	; (adr r3, 800d0a0 <__ieee754_pow+0x3c8>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 fb08 	bl	80005b8 <__aeabi_dmul>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4650      	mov	r0, sl
 800cfae:	4659      	mov	r1, fp
 800cfb0:	f7f3 f94a 	bl	8000248 <__aeabi_dsub>
 800cfb4:	f04f 0a00 	mov.w	sl, #0
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460d      	mov	r5, r1
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	f7f3 f942 	bl	800024c <__adddf3>
 800cfc8:	4632      	mov	r2, r6
 800cfca:	463b      	mov	r3, r7
 800cfcc:	4650      	mov	r0, sl
 800cfce:	468b      	mov	fp, r1
 800cfd0:	f7f3 f93a 	bl	8000248 <__aeabi_dsub>
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	460b      	mov	r3, r1
 800cfd8:	4620      	mov	r0, r4
 800cfda:	4629      	mov	r1, r5
 800cfdc:	f7f3 f934 	bl	8000248 <__aeabi_dsub>
 800cfe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cfe4:	9b00      	ldr	r3, [sp, #0]
 800cfe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	4313      	orrs	r3, r2
 800cfec:	f04f 0600 	mov.w	r6, #0
 800cff0:	f04f 0200 	mov.w	r2, #0
 800cff4:	bf0c      	ite	eq
 800cff6:	4b2f      	ldreq	r3, [pc, #188]	; (800d0b4 <__ieee754_pow+0x3dc>)
 800cff8:	4b2b      	ldrne	r3, [pc, #172]	; (800d0a8 <__ieee754_pow+0x3d0>)
 800cffa:	4604      	mov	r4, r0
 800cffc:	460d      	mov	r5, r1
 800cffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d002:	e9cd 2300 	strd	r2, r3, [sp]
 800d006:	4632      	mov	r2, r6
 800d008:	463b      	mov	r3, r7
 800d00a:	f7f3 f91d 	bl	8000248 <__aeabi_dsub>
 800d00e:	4652      	mov	r2, sl
 800d010:	465b      	mov	r3, fp
 800d012:	f7f3 fad1 	bl	80005b8 <__aeabi_dmul>
 800d016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d01a:	4680      	mov	r8, r0
 800d01c:	4689      	mov	r9, r1
 800d01e:	4620      	mov	r0, r4
 800d020:	4629      	mov	r1, r5
 800d022:	f7f3 fac9 	bl	80005b8 <__aeabi_dmul>
 800d026:	4602      	mov	r2, r0
 800d028:	460b      	mov	r3, r1
 800d02a:	4640      	mov	r0, r8
 800d02c:	4649      	mov	r1, r9
 800d02e:	f7f3 f90d 	bl	800024c <__adddf3>
 800d032:	4632      	mov	r2, r6
 800d034:	463b      	mov	r3, r7
 800d036:	4680      	mov	r8, r0
 800d038:	4689      	mov	r9, r1
 800d03a:	4650      	mov	r0, sl
 800d03c:	4659      	mov	r1, fp
 800d03e:	f7f3 fabb 	bl	80005b8 <__aeabi_dmul>
 800d042:	4604      	mov	r4, r0
 800d044:	460d      	mov	r5, r1
 800d046:	460b      	mov	r3, r1
 800d048:	4602      	mov	r2, r0
 800d04a:	4649      	mov	r1, r9
 800d04c:	4640      	mov	r0, r8
 800d04e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800d052:	f7f3 f8fb 	bl	800024c <__adddf3>
 800d056:	4b18      	ldr	r3, [pc, #96]	; (800d0b8 <__ieee754_pow+0x3e0>)
 800d058:	4682      	mov	sl, r0
 800d05a:	4299      	cmp	r1, r3
 800d05c:	460f      	mov	r7, r1
 800d05e:	460e      	mov	r6, r1
 800d060:	f340 82e5 	ble.w	800d62e <__ieee754_pow+0x956>
 800d064:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d068:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d06c:	4303      	orrs	r3, r0
 800d06e:	f000 81df 	beq.w	800d430 <__ieee754_pow+0x758>
 800d072:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d076:	2200      	movs	r2, #0
 800d078:	2300      	movs	r3, #0
 800d07a:	f7f3 fd0f 	bl	8000a9c <__aeabi_dcmplt>
 800d07e:	3800      	subs	r0, #0
 800d080:	bf18      	it	ne
 800d082:	2001      	movne	r0, #1
 800d084:	e72e      	b.n	800cee4 <__ieee754_pow+0x20c>
 800d086:	bf00      	nop
 800d088:	60000000 	.word	0x60000000
 800d08c:	3ff71547 	.word	0x3ff71547
 800d090:	f85ddf44 	.word	0xf85ddf44
 800d094:	3e54ae0b 	.word	0x3e54ae0b
 800d098:	55555555 	.word	0x55555555
 800d09c:	3fd55555 	.word	0x3fd55555
 800d0a0:	652b82fe 	.word	0x652b82fe
 800d0a4:	3ff71547 	.word	0x3ff71547
 800d0a8:	3ff00000 	.word	0x3ff00000
 800d0ac:	3fd00000 	.word	0x3fd00000
 800d0b0:	3fe00000 	.word	0x3fe00000
 800d0b4:	bff00000 	.word	0xbff00000
 800d0b8:	408fffff 	.word	0x408fffff
 800d0bc:	4bd2      	ldr	r3, [pc, #840]	; (800d408 <__ieee754_pow+0x730>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	402b      	ands	r3, r5
 800d0c2:	b943      	cbnz	r3, 800d0d6 <__ieee754_pow+0x3fe>
 800d0c4:	4658      	mov	r0, fp
 800d0c6:	4661      	mov	r1, ip
 800d0c8:	4bd0      	ldr	r3, [pc, #832]	; (800d40c <__ieee754_pow+0x734>)
 800d0ca:	f7f3 fa75 	bl	80005b8 <__aeabi_dmul>
 800d0ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d0d2:	4683      	mov	fp, r0
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	1523      	asrs	r3, r4, #20
 800d0d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d0dc:	4413      	add	r3, r2
 800d0de:	930b      	str	r3, [sp, #44]	; 0x2c
 800d0e0:	4bcb      	ldr	r3, [pc, #812]	; (800d410 <__ieee754_pow+0x738>)
 800d0e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d0e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d0ea:	429c      	cmp	r4, r3
 800d0ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d0f0:	dd08      	ble.n	800d104 <__ieee754_pow+0x42c>
 800d0f2:	4bc8      	ldr	r3, [pc, #800]	; (800d414 <__ieee754_pow+0x73c>)
 800d0f4:	429c      	cmp	r4, r3
 800d0f6:	f340 8199 	ble.w	800d42c <__ieee754_pow+0x754>
 800d0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0fc:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d100:	3301      	adds	r3, #1
 800d102:	930b      	str	r3, [sp, #44]	; 0x2c
 800d104:	2600      	movs	r6, #0
 800d106:	00f3      	lsls	r3, r6, #3
 800d108:	930d      	str	r3, [sp, #52]	; 0x34
 800d10a:	4bc3      	ldr	r3, [pc, #780]	; (800d418 <__ieee754_pow+0x740>)
 800d10c:	4658      	mov	r0, fp
 800d10e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d112:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d116:	4629      	mov	r1, r5
 800d118:	461a      	mov	r2, r3
 800d11a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800d11e:	4623      	mov	r3, r4
 800d120:	f7f3 f892 	bl	8000248 <__aeabi_dsub>
 800d124:	46da      	mov	sl, fp
 800d126:	462b      	mov	r3, r5
 800d128:	4652      	mov	r2, sl
 800d12a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800d12e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d132:	f7f3 f88b 	bl	800024c <__adddf3>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	2000      	movs	r0, #0
 800d13c:	49b7      	ldr	r1, [pc, #732]	; (800d41c <__ieee754_pow+0x744>)
 800d13e:	f7f3 fb65 	bl	800080c <__aeabi_ddiv>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d14a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d14e:	f7f3 fa33 	bl	80005b8 <__aeabi_dmul>
 800d152:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d156:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800d15a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d15e:	2300      	movs	r3, #0
 800d160:	2200      	movs	r2, #0
 800d162:	46ab      	mov	fp, r5
 800d164:	106d      	asrs	r5, r5, #1
 800d166:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d16a:	9304      	str	r3, [sp, #16]
 800d16c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d170:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d174:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800d178:	4640      	mov	r0, r8
 800d17a:	4649      	mov	r1, r9
 800d17c:	4614      	mov	r4, r2
 800d17e:	461d      	mov	r5, r3
 800d180:	f7f3 fa1a 	bl	80005b8 <__aeabi_dmul>
 800d184:	4602      	mov	r2, r0
 800d186:	460b      	mov	r3, r1
 800d188:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d18c:	f7f3 f85c 	bl	8000248 <__aeabi_dsub>
 800d190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d194:	4606      	mov	r6, r0
 800d196:	460f      	mov	r7, r1
 800d198:	4620      	mov	r0, r4
 800d19a:	4629      	mov	r1, r5
 800d19c:	f7f3 f854 	bl	8000248 <__aeabi_dsub>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	4659      	mov	r1, fp
 800d1a8:	f7f3 f84e 	bl	8000248 <__aeabi_dsub>
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	464b      	mov	r3, r9
 800d1b0:	f7f3 fa02 	bl	80005b8 <__aeabi_dmul>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4639      	mov	r1, r7
 800d1bc:	f7f3 f844 	bl	8000248 <__aeabi_dsub>
 800d1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1c4:	f7f3 f9f8 	bl	80005b8 <__aeabi_dmul>
 800d1c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d1cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1d0:	4610      	mov	r0, r2
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	f7f3 f9f0 	bl	80005b8 <__aeabi_dmul>
 800d1d8:	a379      	add	r3, pc, #484	; (adr r3, 800d3c0 <__ieee754_pow+0x6e8>)
 800d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1de:	4604      	mov	r4, r0
 800d1e0:	460d      	mov	r5, r1
 800d1e2:	f7f3 f9e9 	bl	80005b8 <__aeabi_dmul>
 800d1e6:	a378      	add	r3, pc, #480	; (adr r3, 800d3c8 <__ieee754_pow+0x6f0>)
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 f82e 	bl	800024c <__adddf3>
 800d1f0:	4622      	mov	r2, r4
 800d1f2:	462b      	mov	r3, r5
 800d1f4:	f7f3 f9e0 	bl	80005b8 <__aeabi_dmul>
 800d1f8:	a375      	add	r3, pc, #468	; (adr r3, 800d3d0 <__ieee754_pow+0x6f8>)
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	f7f3 f825 	bl	800024c <__adddf3>
 800d202:	4622      	mov	r2, r4
 800d204:	462b      	mov	r3, r5
 800d206:	f7f3 f9d7 	bl	80005b8 <__aeabi_dmul>
 800d20a:	a373      	add	r3, pc, #460	; (adr r3, 800d3d8 <__ieee754_pow+0x700>)
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f7f3 f81c 	bl	800024c <__adddf3>
 800d214:	4622      	mov	r2, r4
 800d216:	462b      	mov	r3, r5
 800d218:	f7f3 f9ce 	bl	80005b8 <__aeabi_dmul>
 800d21c:	a370      	add	r3, pc, #448	; (adr r3, 800d3e0 <__ieee754_pow+0x708>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	f7f3 f813 	bl	800024c <__adddf3>
 800d226:	4622      	mov	r2, r4
 800d228:	462b      	mov	r3, r5
 800d22a:	f7f3 f9c5 	bl	80005b8 <__aeabi_dmul>
 800d22e:	a36e      	add	r3, pc, #440	; (adr r3, 800d3e8 <__ieee754_pow+0x710>)
 800d230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d234:	f7f3 f80a 	bl	800024c <__adddf3>
 800d238:	4622      	mov	r2, r4
 800d23a:	4606      	mov	r6, r0
 800d23c:	460f      	mov	r7, r1
 800d23e:	462b      	mov	r3, r5
 800d240:	4620      	mov	r0, r4
 800d242:	4629      	mov	r1, r5
 800d244:	f7f3 f9b8 	bl	80005b8 <__aeabi_dmul>
 800d248:	4602      	mov	r2, r0
 800d24a:	460b      	mov	r3, r1
 800d24c:	4630      	mov	r0, r6
 800d24e:	4639      	mov	r1, r7
 800d250:	f7f3 f9b2 	bl	80005b8 <__aeabi_dmul>
 800d254:	4604      	mov	r4, r0
 800d256:	460d      	mov	r5, r1
 800d258:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d25c:	4642      	mov	r2, r8
 800d25e:	464b      	mov	r3, r9
 800d260:	f7f2 fff4 	bl	800024c <__adddf3>
 800d264:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d268:	f7f3 f9a6 	bl	80005b8 <__aeabi_dmul>
 800d26c:	4622      	mov	r2, r4
 800d26e:	462b      	mov	r3, r5
 800d270:	f7f2 ffec 	bl	800024c <__adddf3>
 800d274:	4642      	mov	r2, r8
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	464b      	mov	r3, r9
 800d27c:	4640      	mov	r0, r8
 800d27e:	4649      	mov	r1, r9
 800d280:	f7f3 f99a 	bl	80005b8 <__aeabi_dmul>
 800d284:	2200      	movs	r2, #0
 800d286:	4b66      	ldr	r3, [pc, #408]	; (800d420 <__ieee754_pow+0x748>)
 800d288:	4682      	mov	sl, r0
 800d28a:	468b      	mov	fp, r1
 800d28c:	f7f2 ffde 	bl	800024c <__adddf3>
 800d290:	4632      	mov	r2, r6
 800d292:	463b      	mov	r3, r7
 800d294:	f7f2 ffda 	bl	800024c <__adddf3>
 800d298:	2400      	movs	r4, #0
 800d29a:	460d      	mov	r5, r1
 800d29c:	4622      	mov	r2, r4
 800d29e:	460b      	mov	r3, r1
 800d2a0:	4640      	mov	r0, r8
 800d2a2:	4649      	mov	r1, r9
 800d2a4:	f7f3 f988 	bl	80005b8 <__aeabi_dmul>
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	4680      	mov	r8, r0
 800d2ac:	4689      	mov	r9, r1
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	4629      	mov	r1, r5
 800d2b2:	4b5b      	ldr	r3, [pc, #364]	; (800d420 <__ieee754_pow+0x748>)
 800d2b4:	f7f2 ffc8 	bl	8000248 <__aeabi_dsub>
 800d2b8:	4652      	mov	r2, sl
 800d2ba:	465b      	mov	r3, fp
 800d2bc:	f7f2 ffc4 	bl	8000248 <__aeabi_dsub>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	f7f2 ffbe 	bl	8000248 <__aeabi_dsub>
 800d2cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2d0:	f7f3 f972 	bl	80005b8 <__aeabi_dmul>
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4606      	mov	r6, r0
 800d2d8:	460f      	mov	r7, r1
 800d2da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d2de:	462b      	mov	r3, r5
 800d2e0:	f7f3 f96a 	bl	80005b8 <__aeabi_dmul>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	460b      	mov	r3, r1
 800d2e8:	4630      	mov	r0, r6
 800d2ea:	4639      	mov	r1, r7
 800d2ec:	f7f2 ffae 	bl	800024c <__adddf3>
 800d2f0:	2400      	movs	r4, #0
 800d2f2:	4606      	mov	r6, r0
 800d2f4:	460f      	mov	r7, r1
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	4649      	mov	r1, r9
 800d2fe:	f7f2 ffa5 	bl	800024c <__adddf3>
 800d302:	a33b      	add	r3, pc, #236	; (adr r3, 800d3f0 <__ieee754_pow+0x718>)
 800d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d308:	4620      	mov	r0, r4
 800d30a:	460d      	mov	r5, r1
 800d30c:	f7f3 f954 	bl	80005b8 <__aeabi_dmul>
 800d310:	4642      	mov	r2, r8
 800d312:	464b      	mov	r3, r9
 800d314:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d318:	4620      	mov	r0, r4
 800d31a:	4629      	mov	r1, r5
 800d31c:	f7f2 ff94 	bl	8000248 <__aeabi_dsub>
 800d320:	4602      	mov	r2, r0
 800d322:	460b      	mov	r3, r1
 800d324:	4630      	mov	r0, r6
 800d326:	4639      	mov	r1, r7
 800d328:	f7f2 ff8e 	bl	8000248 <__aeabi_dsub>
 800d32c:	a332      	add	r3, pc, #200	; (adr r3, 800d3f8 <__ieee754_pow+0x720>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	f7f3 f941 	bl	80005b8 <__aeabi_dmul>
 800d336:	a332      	add	r3, pc, #200	; (adr r3, 800d400 <__ieee754_pow+0x728>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f3 f938 	bl	80005b8 <__aeabi_dmul>
 800d348:	4602      	mov	r2, r0
 800d34a:	460b      	mov	r3, r1
 800d34c:	4630      	mov	r0, r6
 800d34e:	4639      	mov	r1, r7
 800d350:	f7f2 ff7c 	bl	800024c <__adddf3>
 800d354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d356:	4b33      	ldr	r3, [pc, #204]	; (800d424 <__ieee754_pow+0x74c>)
 800d358:	f04f 0a00 	mov.w	sl, #0
 800d35c:	4413      	add	r3, r2
 800d35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d362:	f7f2 ff73 	bl	800024c <__adddf3>
 800d366:	4680      	mov	r8, r0
 800d368:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d36a:	4689      	mov	r9, r1
 800d36c:	f7f3 f8ba 	bl	80004e4 <__aeabi_i2d>
 800d370:	4604      	mov	r4, r0
 800d372:	460d      	mov	r5, r1
 800d374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d376:	4b2c      	ldr	r3, [pc, #176]	; (800d428 <__ieee754_pow+0x750>)
 800d378:	4413      	add	r3, r2
 800d37a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d37e:	4642      	mov	r2, r8
 800d380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d384:	464b      	mov	r3, r9
 800d386:	f7f2 ff61 	bl	800024c <__adddf3>
 800d38a:	4632      	mov	r2, r6
 800d38c:	463b      	mov	r3, r7
 800d38e:	f7f2 ff5d 	bl	800024c <__adddf3>
 800d392:	4622      	mov	r2, r4
 800d394:	462b      	mov	r3, r5
 800d396:	f7f2 ff59 	bl	800024c <__adddf3>
 800d39a:	4622      	mov	r2, r4
 800d39c:	462b      	mov	r3, r5
 800d39e:	4650      	mov	r0, sl
 800d3a0:	468b      	mov	fp, r1
 800d3a2:	f7f2 ff51 	bl	8000248 <__aeabi_dsub>
 800d3a6:	4632      	mov	r2, r6
 800d3a8:	463b      	mov	r3, r7
 800d3aa:	f7f2 ff4d 	bl	8000248 <__aeabi_dsub>
 800d3ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3b2:	f7f2 ff49 	bl	8000248 <__aeabi_dsub>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	e60d      	b.n	800cfdc <__ieee754_pow+0x304>
 800d3c0:	4a454eef 	.word	0x4a454eef
 800d3c4:	3fca7e28 	.word	0x3fca7e28
 800d3c8:	93c9db65 	.word	0x93c9db65
 800d3cc:	3fcd864a 	.word	0x3fcd864a
 800d3d0:	a91d4101 	.word	0xa91d4101
 800d3d4:	3fd17460 	.word	0x3fd17460
 800d3d8:	518f264d 	.word	0x518f264d
 800d3dc:	3fd55555 	.word	0x3fd55555
 800d3e0:	db6fabff 	.word	0xdb6fabff
 800d3e4:	3fdb6db6 	.word	0x3fdb6db6
 800d3e8:	33333303 	.word	0x33333303
 800d3ec:	3fe33333 	.word	0x3fe33333
 800d3f0:	e0000000 	.word	0xe0000000
 800d3f4:	3feec709 	.word	0x3feec709
 800d3f8:	dc3a03fd 	.word	0xdc3a03fd
 800d3fc:	3feec709 	.word	0x3feec709
 800d400:	145b01f5 	.word	0x145b01f5
 800d404:	be3e2fe0 	.word	0xbe3e2fe0
 800d408:	7ff00000 	.word	0x7ff00000
 800d40c:	43400000 	.word	0x43400000
 800d410:	0003988e 	.word	0x0003988e
 800d414:	000bb679 	.word	0x000bb679
 800d418:	0800df08 	.word	0x0800df08
 800d41c:	3ff00000 	.word	0x3ff00000
 800d420:	40080000 	.word	0x40080000
 800d424:	0800df28 	.word	0x0800df28
 800d428:	0800df18 	.word	0x0800df18
 800d42c:	2601      	movs	r6, #1
 800d42e:	e66a      	b.n	800d106 <__ieee754_pow+0x42e>
 800d430:	a39d      	add	r3, pc, #628	; (adr r3, 800d6a8 <__ieee754_pow+0x9d0>)
 800d432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d436:	4640      	mov	r0, r8
 800d438:	4649      	mov	r1, r9
 800d43a:	f7f2 ff07 	bl	800024c <__adddf3>
 800d43e:	4622      	mov	r2, r4
 800d440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d444:	462b      	mov	r3, r5
 800d446:	4650      	mov	r0, sl
 800d448:	4639      	mov	r1, r7
 800d44a:	f7f2 fefd 	bl	8000248 <__aeabi_dsub>
 800d44e:	4602      	mov	r2, r0
 800d450:	460b      	mov	r3, r1
 800d452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d456:	f7f3 fb3f 	bl	8000ad8 <__aeabi_dcmpgt>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	f47f ae09 	bne.w	800d072 <__ieee754_pow+0x39a>
 800d460:	4aa3      	ldr	r2, [pc, #652]	; (800d6f0 <__ieee754_pow+0xa18>)
 800d462:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800d466:	4293      	cmp	r3, r2
 800d468:	f340 8101 	ble.w	800d66e <__ieee754_pow+0x996>
 800d46c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800d470:	2000      	movs	r0, #0
 800d472:	151b      	asrs	r3, r3, #20
 800d474:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800d478:	fa4a f303 	asr.w	r3, sl, r3
 800d47c:	4433      	add	r3, r6
 800d47e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d482:	4f9c      	ldr	r7, [pc, #624]	; (800d6f4 <__ieee754_pow+0xa1c>)
 800d484:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d488:	4117      	asrs	r7, r2
 800d48a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800d48e:	ea23 0107 	bic.w	r1, r3, r7
 800d492:	f1c2 0214 	rsb	r2, r2, #20
 800d496:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800d49a:	460b      	mov	r3, r1
 800d49c:	fa4a fa02 	asr.w	sl, sl, r2
 800d4a0:	2e00      	cmp	r6, #0
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	bfb8      	it	lt
 800d4aa:	f1ca 0a00 	rsblt	sl, sl, #0
 800d4ae:	f7f2 fecb 	bl	8000248 <__aeabi_dsub>
 800d4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4ba:	2400      	movs	r4, #0
 800d4bc:	4642      	mov	r2, r8
 800d4be:	464b      	mov	r3, r9
 800d4c0:	f7f2 fec4 	bl	800024c <__adddf3>
 800d4c4:	a37a      	add	r3, pc, #488	; (adr r3, 800d6b0 <__ieee754_pow+0x9d8>)
 800d4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	460d      	mov	r5, r1
 800d4ce:	f7f3 f873 	bl	80005b8 <__aeabi_dmul>
 800d4d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	460f      	mov	r7, r1
 800d4da:	4620      	mov	r0, r4
 800d4dc:	4629      	mov	r1, r5
 800d4de:	f7f2 feb3 	bl	8000248 <__aeabi_dsub>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	f7f2 fead 	bl	8000248 <__aeabi_dsub>
 800d4ee:	a372      	add	r3, pc, #456	; (adr r3, 800d6b8 <__ieee754_pow+0x9e0>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	f7f3 f860 	bl	80005b8 <__aeabi_dmul>
 800d4f8:	a371      	add	r3, pc, #452	; (adr r3, 800d6c0 <__ieee754_pow+0x9e8>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	4680      	mov	r8, r0
 800d500:	4689      	mov	r9, r1
 800d502:	4620      	mov	r0, r4
 800d504:	4629      	mov	r1, r5
 800d506:	f7f3 f857 	bl	80005b8 <__aeabi_dmul>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4640      	mov	r0, r8
 800d510:	4649      	mov	r1, r9
 800d512:	f7f2 fe9b 	bl	800024c <__adddf3>
 800d516:	4604      	mov	r4, r0
 800d518:	460d      	mov	r5, r1
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4630      	mov	r0, r6
 800d520:	4639      	mov	r1, r7
 800d522:	f7f2 fe93 	bl	800024c <__adddf3>
 800d526:	4632      	mov	r2, r6
 800d528:	463b      	mov	r3, r7
 800d52a:	4680      	mov	r8, r0
 800d52c:	4689      	mov	r9, r1
 800d52e:	f7f2 fe8b 	bl	8000248 <__aeabi_dsub>
 800d532:	4602      	mov	r2, r0
 800d534:	460b      	mov	r3, r1
 800d536:	4620      	mov	r0, r4
 800d538:	4629      	mov	r1, r5
 800d53a:	f7f2 fe85 	bl	8000248 <__aeabi_dsub>
 800d53e:	4642      	mov	r2, r8
 800d540:	4606      	mov	r6, r0
 800d542:	460f      	mov	r7, r1
 800d544:	464b      	mov	r3, r9
 800d546:	4640      	mov	r0, r8
 800d548:	4649      	mov	r1, r9
 800d54a:	f7f3 f835 	bl	80005b8 <__aeabi_dmul>
 800d54e:	a35e      	add	r3, pc, #376	; (adr r3, 800d6c8 <__ieee754_pow+0x9f0>)
 800d550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d554:	4604      	mov	r4, r0
 800d556:	460d      	mov	r5, r1
 800d558:	f7f3 f82e 	bl	80005b8 <__aeabi_dmul>
 800d55c:	a35c      	add	r3, pc, #368	; (adr r3, 800d6d0 <__ieee754_pow+0x9f8>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe71 	bl	8000248 <__aeabi_dsub>
 800d566:	4622      	mov	r2, r4
 800d568:	462b      	mov	r3, r5
 800d56a:	f7f3 f825 	bl	80005b8 <__aeabi_dmul>
 800d56e:	a35a      	add	r3, pc, #360	; (adr r3, 800d6d8 <__ieee754_pow+0xa00>)
 800d570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d574:	f7f2 fe6a 	bl	800024c <__adddf3>
 800d578:	4622      	mov	r2, r4
 800d57a:	462b      	mov	r3, r5
 800d57c:	f7f3 f81c 	bl	80005b8 <__aeabi_dmul>
 800d580:	a357      	add	r3, pc, #348	; (adr r3, 800d6e0 <__ieee754_pow+0xa08>)
 800d582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d586:	f7f2 fe5f 	bl	8000248 <__aeabi_dsub>
 800d58a:	4622      	mov	r2, r4
 800d58c:	462b      	mov	r3, r5
 800d58e:	f7f3 f813 	bl	80005b8 <__aeabi_dmul>
 800d592:	a355      	add	r3, pc, #340	; (adr r3, 800d6e8 <__ieee754_pow+0xa10>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f2 fe58 	bl	800024c <__adddf3>
 800d59c:	4622      	mov	r2, r4
 800d59e:	462b      	mov	r3, r5
 800d5a0:	f7f3 f80a 	bl	80005b8 <__aeabi_dmul>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	460b      	mov	r3, r1
 800d5a8:	4640      	mov	r0, r8
 800d5aa:	4649      	mov	r1, r9
 800d5ac:	f7f2 fe4c 	bl	8000248 <__aeabi_dsub>
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	460d      	mov	r5, r1
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	f7f2 fffc 	bl	80005b8 <__aeabi_dmul>
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d5c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	4629      	mov	r1, r5
 800d5ce:	f7f2 fe3b 	bl	8000248 <__aeabi_dsub>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5da:	f7f3 f917 	bl	800080c <__aeabi_ddiv>
 800d5de:	4632      	mov	r2, r6
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	460d      	mov	r5, r1
 800d5e4:	463b      	mov	r3, r7
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	f7f2 ffe5 	bl	80005b8 <__aeabi_dmul>
 800d5ee:	4632      	mov	r2, r6
 800d5f0:	463b      	mov	r3, r7
 800d5f2:	f7f2 fe2b 	bl	800024c <__adddf3>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	4629      	mov	r1, r5
 800d5fe:	f7f2 fe23 	bl	8000248 <__aeabi_dsub>
 800d602:	4642      	mov	r2, r8
 800d604:	464b      	mov	r3, r9
 800d606:	f7f2 fe1f 	bl	8000248 <__aeabi_dsub>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	2000      	movs	r0, #0
 800d610:	4939      	ldr	r1, [pc, #228]	; (800d6f8 <__ieee754_pow+0xa20>)
 800d612:	f7f2 fe19 	bl	8000248 <__aeabi_dsub>
 800d616:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800d61a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d61e:	da29      	bge.n	800d674 <__ieee754_pow+0x99c>
 800d620:	4652      	mov	r2, sl
 800d622:	f000 f955 	bl	800d8d0 <scalbn>
 800d626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d62a:	f7ff bbfe 	b.w	800ce2a <__ieee754_pow+0x152>
 800d62e:	4b33      	ldr	r3, [pc, #204]	; (800d6fc <__ieee754_pow+0xa24>)
 800d630:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800d634:	429f      	cmp	r7, r3
 800d636:	f77f af13 	ble.w	800d460 <__ieee754_pow+0x788>
 800d63a:	4b31      	ldr	r3, [pc, #196]	; (800d700 <__ieee754_pow+0xa28>)
 800d63c:	440b      	add	r3, r1
 800d63e:	4303      	orrs	r3, r0
 800d640:	d009      	beq.n	800d656 <__ieee754_pow+0x97e>
 800d642:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d646:	2200      	movs	r2, #0
 800d648:	2300      	movs	r3, #0
 800d64a:	f7f3 fa27 	bl	8000a9c <__aeabi_dcmplt>
 800d64e:	3800      	subs	r0, #0
 800d650:	bf18      	it	ne
 800d652:	2001      	movne	r0, #1
 800d654:	e453      	b.n	800cefe <__ieee754_pow+0x226>
 800d656:	4622      	mov	r2, r4
 800d658:	462b      	mov	r3, r5
 800d65a:	f7f2 fdf5 	bl	8000248 <__aeabi_dsub>
 800d65e:	4642      	mov	r2, r8
 800d660:	464b      	mov	r3, r9
 800d662:	f7f3 fa2f 	bl	8000ac4 <__aeabi_dcmpge>
 800d666:	2800      	cmp	r0, #0
 800d668:	f43f aefa 	beq.w	800d460 <__ieee754_pow+0x788>
 800d66c:	e7e9      	b.n	800d642 <__ieee754_pow+0x96a>
 800d66e:	f04f 0a00 	mov.w	sl, #0
 800d672:	e720      	b.n	800d4b6 <__ieee754_pow+0x7de>
 800d674:	4621      	mov	r1, r4
 800d676:	e7d6      	b.n	800d626 <__ieee754_pow+0x94e>
 800d678:	f04f 0b00 	mov.w	fp, #0
 800d67c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800d6f8 <__ieee754_pow+0xa20>
 800d680:	f7ff bbba 	b.w	800cdf8 <__ieee754_pow+0x120>
 800d684:	f04f 0b00 	mov.w	fp, #0
 800d688:	f04f 0c00 	mov.w	ip, #0
 800d68c:	f7ff bbb4 	b.w	800cdf8 <__ieee754_pow+0x120>
 800d690:	4640      	mov	r0, r8
 800d692:	4649      	mov	r1, r9
 800d694:	f7ff bb3d 	b.w	800cd12 <__ieee754_pow+0x3a>
 800d698:	9200      	str	r2, [sp, #0]
 800d69a:	f7ff bb89 	b.w	800cdb0 <__ieee754_pow+0xd8>
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f7ff bb73 	b.w	800cd8a <__ieee754_pow+0xb2>
 800d6a4:	f3af 8000 	nop.w
 800d6a8:	652b82fe 	.word	0x652b82fe
 800d6ac:	3c971547 	.word	0x3c971547
 800d6b0:	00000000 	.word	0x00000000
 800d6b4:	3fe62e43 	.word	0x3fe62e43
 800d6b8:	fefa39ef 	.word	0xfefa39ef
 800d6bc:	3fe62e42 	.word	0x3fe62e42
 800d6c0:	0ca86c39 	.word	0x0ca86c39
 800d6c4:	be205c61 	.word	0xbe205c61
 800d6c8:	72bea4d0 	.word	0x72bea4d0
 800d6cc:	3e663769 	.word	0x3e663769
 800d6d0:	c5d26bf1 	.word	0xc5d26bf1
 800d6d4:	3ebbbd41 	.word	0x3ebbbd41
 800d6d8:	af25de2c 	.word	0xaf25de2c
 800d6dc:	3f11566a 	.word	0x3f11566a
 800d6e0:	16bebd93 	.word	0x16bebd93
 800d6e4:	3f66c16c 	.word	0x3f66c16c
 800d6e8:	5555553e 	.word	0x5555553e
 800d6ec:	3fc55555 	.word	0x3fc55555
 800d6f0:	3fe00000 	.word	0x3fe00000
 800d6f4:	000fffff 	.word	0x000fffff
 800d6f8:	3ff00000 	.word	0x3ff00000
 800d6fc:	4090cbff 	.word	0x4090cbff
 800d700:	3f6f3400 	.word	0x3f6f3400

0800d704 <__ieee754_sqrt>:
 800d704:	f8df c158 	ldr.w	ip, [pc, #344]	; 800d860 <__ieee754_sqrt+0x15c>
 800d708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d70c:	ea3c 0c01 	bics.w	ip, ip, r1
 800d710:	4606      	mov	r6, r0
 800d712:	460d      	mov	r5, r1
 800d714:	460c      	mov	r4, r1
 800d716:	460a      	mov	r2, r1
 800d718:	4607      	mov	r7, r0
 800d71a:	4603      	mov	r3, r0
 800d71c:	d10f      	bne.n	800d73e <__ieee754_sqrt+0x3a>
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	f7f2 ff49 	bl	80005b8 <__aeabi_dmul>
 800d726:	4602      	mov	r2, r0
 800d728:	460b      	mov	r3, r1
 800d72a:	4630      	mov	r0, r6
 800d72c:	4629      	mov	r1, r5
 800d72e:	f7f2 fd8d 	bl	800024c <__adddf3>
 800d732:	4606      	mov	r6, r0
 800d734:	460d      	mov	r5, r1
 800d736:	4630      	mov	r0, r6
 800d738:	4629      	mov	r1, r5
 800d73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73e:	2900      	cmp	r1, #0
 800d740:	dc0e      	bgt.n	800d760 <__ieee754_sqrt+0x5c>
 800d742:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800d746:	ea5c 0707 	orrs.w	r7, ip, r7
 800d74a:	d0f4      	beq.n	800d736 <__ieee754_sqrt+0x32>
 800d74c:	b141      	cbz	r1, 800d760 <__ieee754_sqrt+0x5c>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	f7f2 fd79 	bl	8000248 <__aeabi_dsub>
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	f7f3 f857 	bl	800080c <__aeabi_ddiv>
 800d75e:	e7e8      	b.n	800d732 <__ieee754_sqrt+0x2e>
 800d760:	1521      	asrs	r1, r4, #20
 800d762:	d075      	beq.n	800d850 <__ieee754_sqrt+0x14c>
 800d764:	07cc      	lsls	r4, r1, #31
 800d766:	f04f 0400 	mov.w	r4, #0
 800d76a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d76e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800d772:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d776:	bf5e      	ittt	pl
 800d778:	0fd9      	lsrpl	r1, r3, #31
 800d77a:	005b      	lslpl	r3, r3, #1
 800d77c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800d780:	0fd9      	lsrs	r1, r3, #31
 800d782:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d786:	2516      	movs	r5, #22
 800d788:	4620      	mov	r0, r4
 800d78a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d78e:	107f      	asrs	r7, r7, #1
 800d790:	005b      	lsls	r3, r3, #1
 800d792:	1846      	adds	r6, r0, r1
 800d794:	4296      	cmp	r6, r2
 800d796:	bfde      	ittt	le
 800d798:	1b92      	suble	r2, r2, r6
 800d79a:	1870      	addle	r0, r6, r1
 800d79c:	1864      	addle	r4, r4, r1
 800d79e:	0052      	lsls	r2, r2, #1
 800d7a0:	3d01      	subs	r5, #1
 800d7a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800d7a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d7aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d7ae:	d1f0      	bne.n	800d792 <__ieee754_sqrt+0x8e>
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	f04f 0e20 	mov.w	lr, #32
 800d7b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d7ba:	4282      	cmp	r2, r0
 800d7bc:	eb06 0c05 	add.w	ip, r6, r5
 800d7c0:	dc02      	bgt.n	800d7c8 <__ieee754_sqrt+0xc4>
 800d7c2:	d113      	bne.n	800d7ec <__ieee754_sqrt+0xe8>
 800d7c4:	459c      	cmp	ip, r3
 800d7c6:	d811      	bhi.n	800d7ec <__ieee754_sqrt+0xe8>
 800d7c8:	f1bc 0f00 	cmp.w	ip, #0
 800d7cc:	eb0c 0506 	add.w	r5, ip, r6
 800d7d0:	da43      	bge.n	800d85a <__ieee754_sqrt+0x156>
 800d7d2:	2d00      	cmp	r5, #0
 800d7d4:	db41      	blt.n	800d85a <__ieee754_sqrt+0x156>
 800d7d6:	f100 0801 	add.w	r8, r0, #1
 800d7da:	1a12      	subs	r2, r2, r0
 800d7dc:	4640      	mov	r0, r8
 800d7de:	459c      	cmp	ip, r3
 800d7e0:	bf88      	it	hi
 800d7e2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800d7e6:	eba3 030c 	sub.w	r3, r3, ip
 800d7ea:	4431      	add	r1, r6
 800d7ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d7f0:	f1be 0e01 	subs.w	lr, lr, #1
 800d7f4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800d7f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d7fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d800:	d1db      	bne.n	800d7ba <__ieee754_sqrt+0xb6>
 800d802:	4313      	orrs	r3, r2
 800d804:	d006      	beq.n	800d814 <__ieee754_sqrt+0x110>
 800d806:	1c48      	adds	r0, r1, #1
 800d808:	bf0b      	itete	eq
 800d80a:	4671      	moveq	r1, lr
 800d80c:	3101      	addne	r1, #1
 800d80e:	3401      	addeq	r4, #1
 800d810:	f021 0101 	bicne.w	r1, r1, #1
 800d814:	1063      	asrs	r3, r4, #1
 800d816:	0849      	lsrs	r1, r1, #1
 800d818:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d81c:	07e2      	lsls	r2, r4, #31
 800d81e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d822:	bf48      	it	mi
 800d824:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800d828:	460e      	mov	r6, r1
 800d82a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d82e:	e782      	b.n	800d736 <__ieee754_sqrt+0x32>
 800d830:	0ada      	lsrs	r2, r3, #11
 800d832:	3815      	subs	r0, #21
 800d834:	055b      	lsls	r3, r3, #21
 800d836:	2a00      	cmp	r2, #0
 800d838:	d0fa      	beq.n	800d830 <__ieee754_sqrt+0x12c>
 800d83a:	02d5      	lsls	r5, r2, #11
 800d83c:	d50a      	bpl.n	800d854 <__ieee754_sqrt+0x150>
 800d83e:	f1c1 0420 	rsb	r4, r1, #32
 800d842:	fa23 f404 	lsr.w	r4, r3, r4
 800d846:	1e4d      	subs	r5, r1, #1
 800d848:	408b      	lsls	r3, r1
 800d84a:	4322      	orrs	r2, r4
 800d84c:	1b41      	subs	r1, r0, r5
 800d84e:	e789      	b.n	800d764 <__ieee754_sqrt+0x60>
 800d850:	4608      	mov	r0, r1
 800d852:	e7f0      	b.n	800d836 <__ieee754_sqrt+0x132>
 800d854:	0052      	lsls	r2, r2, #1
 800d856:	3101      	adds	r1, #1
 800d858:	e7ef      	b.n	800d83a <__ieee754_sqrt+0x136>
 800d85a:	4680      	mov	r8, r0
 800d85c:	e7bd      	b.n	800d7da <__ieee754_sqrt+0xd6>
 800d85e:	bf00      	nop
 800d860:	7ff00000 	.word	0x7ff00000

0800d864 <with_errno>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	4604      	mov	r4, r0
 800d868:	460d      	mov	r5, r1
 800d86a:	4616      	mov	r6, r2
 800d86c:	f7fb fc82 	bl	8009174 <__errno>
 800d870:	4629      	mov	r1, r5
 800d872:	6006      	str	r6, [r0, #0]
 800d874:	4620      	mov	r0, r4
 800d876:	bd70      	pop	{r4, r5, r6, pc}

0800d878 <xflow>:
 800d878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d87a:	4615      	mov	r5, r2
 800d87c:	461c      	mov	r4, r3
 800d87e:	b180      	cbz	r0, 800d8a2 <xflow+0x2a>
 800d880:	4610      	mov	r0, r2
 800d882:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d886:	e9cd 0100 	strd	r0, r1, [sp]
 800d88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d88e:	4628      	mov	r0, r5
 800d890:	4621      	mov	r1, r4
 800d892:	f7f2 fe91 	bl	80005b8 <__aeabi_dmul>
 800d896:	2222      	movs	r2, #34	; 0x22
 800d898:	b003      	add	sp, #12
 800d89a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d89e:	f7ff bfe1 	b.w	800d864 <with_errno>
 800d8a2:	4610      	mov	r0, r2
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	e7ee      	b.n	800d886 <xflow+0xe>

0800d8a8 <__math_uflow>:
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8ae:	f7ff bfe3 	b.w	800d878 <xflow>

0800d8b2 <__math_oflow>:
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d8b8:	f7ff bfde 	b.w	800d878 <xflow>

0800d8bc <fabs>:
 800d8bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800d8c0:	4770      	bx	lr

0800d8c2 <finite>:
 800d8c2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800d8c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d8ca:	0fc0      	lsrs	r0, r0, #31
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <scalbn>:
 800d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800d8d6:	4604      	mov	r4, r0
 800d8d8:	460d      	mov	r5, r1
 800d8da:	4617      	mov	r7, r2
 800d8dc:	460b      	mov	r3, r1
 800d8de:	b996      	cbnz	r6, 800d906 <scalbn+0x36>
 800d8e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d8e4:	4303      	orrs	r3, r0
 800d8e6:	d039      	beq.n	800d95c <scalbn+0x8c>
 800d8e8:	4b33      	ldr	r3, [pc, #204]	; (800d9b8 <scalbn+0xe8>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f7f2 fe64 	bl	80005b8 <__aeabi_dmul>
 800d8f0:	4b32      	ldr	r3, [pc, #200]	; (800d9bc <scalbn+0xec>)
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	429f      	cmp	r7, r3
 800d8f6:	460d      	mov	r5, r1
 800d8f8:	da0f      	bge.n	800d91a <scalbn+0x4a>
 800d8fa:	a32b      	add	r3, pc, #172	; (adr r3, 800d9a8 <scalbn+0xd8>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	f7f2 fe5a 	bl	80005b8 <__aeabi_dmul>
 800d904:	e006      	b.n	800d914 <scalbn+0x44>
 800d906:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d90a:	4296      	cmp	r6, r2
 800d90c:	d10a      	bne.n	800d924 <scalbn+0x54>
 800d90e:	4602      	mov	r2, r0
 800d910:	f7f2 fc9c 	bl	800024c <__adddf3>
 800d914:	4604      	mov	r4, r0
 800d916:	460d      	mov	r5, r1
 800d918:	e020      	b.n	800d95c <scalbn+0x8c>
 800d91a:	460b      	mov	r3, r1
 800d91c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d920:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800d924:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800d928:	19b9      	adds	r1, r7, r6
 800d92a:	4291      	cmp	r1, r2
 800d92c:	dd0e      	ble.n	800d94c <scalbn+0x7c>
 800d92e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800d932:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800d936:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800d93a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800d93e:	4820      	ldr	r0, [pc, #128]	; (800d9c0 <scalbn+0xf0>)
 800d940:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800d944:	a31a      	add	r3, pc, #104	; (adr r3, 800d9b0 <scalbn+0xe0>)
 800d946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d94a:	e7d9      	b.n	800d900 <scalbn+0x30>
 800d94c:	2900      	cmp	r1, #0
 800d94e:	dd08      	ble.n	800d962 <scalbn+0x92>
 800d950:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d954:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d958:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d95c:	4620      	mov	r0, r4
 800d95e:	4629      	mov	r1, r5
 800d960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d962:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800d966:	da12      	bge.n	800d98e <scalbn+0xbe>
 800d968:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d96c:	429f      	cmp	r7, r3
 800d96e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800d972:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800d976:	dcdc      	bgt.n	800d932 <scalbn+0x62>
 800d978:	a30b      	add	r3, pc, #44	; (adr r3, 800d9a8 <scalbn+0xd8>)
 800d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800d982:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800d986:	480f      	ldr	r0, [pc, #60]	; (800d9c4 <scalbn+0xf4>)
 800d988:	f041 011f 	orr.w	r1, r1, #31
 800d98c:	e7b8      	b.n	800d900 <scalbn+0x30>
 800d98e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d992:	3136      	adds	r1, #54	; 0x36
 800d994:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d998:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800d99c:	4620      	mov	r0, r4
 800d99e:	4629      	mov	r1, r5
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	4b09      	ldr	r3, [pc, #36]	; (800d9c8 <scalbn+0xf8>)
 800d9a4:	e7ac      	b.n	800d900 <scalbn+0x30>
 800d9a6:	bf00      	nop
 800d9a8:	c2f8f359 	.word	0xc2f8f359
 800d9ac:	01a56e1f 	.word	0x01a56e1f
 800d9b0:	8800759c 	.word	0x8800759c
 800d9b4:	7e37e43c 	.word	0x7e37e43c
 800d9b8:	43500000 	.word	0x43500000
 800d9bc:	ffff3cb0 	.word	0xffff3cb0
 800d9c0:	8800759c 	.word	0x8800759c
 800d9c4:	c2f8f359 	.word	0xc2f8f359
 800d9c8:	3c900000 	.word	0x3c900000

0800d9cc <_init>:
 800d9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9ce:	bf00      	nop
 800d9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d2:	bc08      	pop	{r3}
 800d9d4:	469e      	mov	lr, r3
 800d9d6:	4770      	bx	lr

0800d9d8 <_fini>:
 800d9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9da:	bf00      	nop
 800d9dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9de:	bc08      	pop	{r3}
 800d9e0:	469e      	mov	lr, r3
 800d9e2:	4770      	bx	lr
