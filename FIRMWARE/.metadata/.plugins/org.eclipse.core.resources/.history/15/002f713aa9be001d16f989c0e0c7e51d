/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>
#include <time.h>
#include "timers.h"
#include "event_groups.h"
#include "queue.h"
#include "semphr.h"
#include "i2c.h"
#include "usart.h"
#include "gpio.h"
#include "lcd.h"
#include "ads1115.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ADC_BIT (1 << 0)
#define BUT0_BIT (1 << 1)
#define BUT1_BIT (1 << 2)
#define BUT2_BIT (1 << 3)
#define BUT3_BIT (1 << 4)
#define START_BYTE 1
#define END_BYTE 2
#define ERROR_FRAME 3
#define UART_BUFFER_LEN 20
#define LED_ON 0
#define LED_OFF 1

#define VER_2
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
static const char *TAG = "FREERTOS.c";

xTaskHandle lcdTaskHandle;
xTaskHandle sensorTaskHandle;
xTaskHandle generalTaskHandle;
xQueueHandle sensorQueueHandle;
xQueueHandle genlcdQueueHandle;
xQueueHandle gensenQueueHandle;
EventGroupHandle_t evGroupHandle;
SemaphoreHandle_t i2cSemphrHandle;
extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart2;

typedef struct {
	double dbSensorStm;
	double dbSensorAds;
	uint8_t ucSensorStm[10];
	uint8_t ucSensorAds[10];
} sensorDisHandle_t;

typedef struct {
	uint8_t ucCursor;
	bool bCfg;
	double dbVal[2];
	uint8_t ucVal[2][10];
} cfgDisHandle_t;

typedef struct {
	uint8_t ucPage;
	sensorDisHandle_t sensorDis;
	cfgDisHandle_t cfgDis;
} lcdDisHandle_t;

typedef struct {
	uint8_t ucType;
	uint8_t ucVal[5];
} uartCfgHandle_t;

typedef struct {
	uint8_t ucPage;
	uint8_t ucCursor;
	bool bCfg;
	double dbVal[2];
	uint8_t ucVal[2][10];
} generalTestHandle_t;

typedef struct {
	uint8_t ucSensorStm[10];
	uint8_t ucSensorAds[10];
} sensorTestHandle_t;

lcdDisHandle_t lcdTest = {
	.ucPage = 0,
	.sensorDis = {0},
	.cfgDis = {
		.ucCursor = 0,
		.bCfg = false,
		.dbVal[0] = 1000,
		.dbVal[1] = 25.0,
	},
};

uint8_t ucRxData;
uint8_t ucRxBuffer[UART_BUFFER_LEN] = {0};
uint8_t ucRxFlag = START_BYTE;
uint8_t ucRxCnt = 0;
/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = {
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void lcd_task(void *param);
void sensor_task(void *param);
void general_task(void *param);

void reverse(char *str, int len)
{
    int i = 0, j = len - 1, temp;
    while (i < j)
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
}

int intToStr(int x, char str[], int d)
{
    int i = 0;
    if(x == 0)
        str[i++] = '0';

    while (x)
    {
        str[i++] = (x % 10) + '0';
        x = x / 10;
    }

    while (i < d)
        str[i++] = '0';

    reverse(str, i);
    str[i] = '\0';
    return i;
}

void ftoa(double n, char* res, int afterpoint)
{
    int ipart = (int)n;
    double fpart = n - (double)ipart;
    int i = intToStr(ipart, res, 0);
    if (afterpoint != 0)
    {
        res[i] = '.';
        fpart = fpart * pow(10, afterpoint);
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}

void LOG(const char *TAG, char *data)
{
	char data_log[100] = {0};
	sprintf(data_log, "\r\n%s: %s\r\n", TAG, data);
	HAL_UART_Transmit(&huart2, (uint8_t *)data_log, strlen(data_log), 1000);
}
/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	i2cSemphrHandle = xSemaphoreCreateMutex();
	if (i2cSemphrHandle == NULL)
	{

	}
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
	genlcdQueueHandle = xQueueCreate(5, sizeof(generalTestHandle_t));
	sensorQueueHandle = xQueueCreate(5, sizeof(sensorTestHandle_t));
	gensenQueueHandle = xQueueCreate(1, sizeof(generalTestHandle_t));
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	xTaskCreate(&general_task, "GEN", 256, NULL, 4, &generalTaskHandle);
	xTaskCreate(&lcd_task, "LCD", 256, NULL, 3, &lcdTaskHandle);
	xTaskCreate(&sensor_task, "SENSOR", 256, NULL, 2, &sensorTaskHandle);
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
	evGroupHandle = xEventGroupCreate();
	if (evGroupHandle == NULL)
	{

	}
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	if (hadc->Instance == ADC1)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, ADC_BIT, &xHigherPriorityTaskWoken);
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	if (GPIO_Pin == GPIO_PIN_12)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT0_BIT, &xHigherPriorityTaskWoken);
	}
	else if (GPIO_Pin == GPIO_PIN_13)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT1_BIT, &xHigherPriorityTaskWoken);
	}
	else if (GPIO_Pin == GPIO_PIN_14)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT2_BIT, &xHigherPriorityTaskWoken);
	}
	else if (GPIO_Pin == GPIO_PIN_15)
	{
		xEventGroupSetBitsFromISR(evGroupHandle, BUT3_BIT, &xHigherPriorityTaskWoken);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(ucRxData == '$')
	{
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
		ucRxBuffer[0] = ucRxData;
		ucRxFlag = START_BYTE;
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
	}
	else if (ucRxFlag == START_BYTE && ucRxCnt < 20)
	{
		ucRxBuffer[++ucRxCnt] = ucRxData;
		if (ucRxData == '*')
			ucRxFlag = END_BYTE;
		else
			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
	}
	else if (ucRxCnt == UART_BUFFER_LEN)
	{
		ucRxFlag = ERROR_FRAME;
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
		ucRxCnt = 0;
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
	}
}

//void lcd_task(void *param)
//{
//	char cVal[2][20];
//	TickType_t xWakeTick = xTaskGetTickCount();
//	lcd_init();
//	lcd_clear();
//	ftoa(lcdTest.cfgDis.dbVal[0] / 1000, (char *)lcdTest.cfgDis.ucVal[0], 1);
//	ftoa(lcdTest.cfgDis.dbVal[1], (char *)lcdTest.cfgDis.ucVal[1], 1);
//	while(1)
//	{
//		lcd_clear();
//		if (lcdTest.ucPage == 0)
//		{
//			for(int i = 0; i < 2; i++)
//			{
//				memset(cVal[i], 0, strlen(cVal[i]));
//				if (i == 0)
//				{
//					sprintf(cVal[i], "STM: %soC", (char *)lcdTest.sensorDis.ucSensorStm);
//				}
//				else
//					sprintf(cVal[i], "ADS: %soC", (char *)lcdTest.sensorDis.ucSensorAds);
//			}
//			lcd_send_cmd(0x80 | 0x00);
//			lcd_send_string(cVal[0]);
//			lcd_send_cmd(0x80 | 0x40);
//			lcd_send_string(cVal[1]);
//		}
//		else if (lcdTest.ucPage == 1)
//		{
//			lcd_send_cmd(0x80 | 0x00);
//			lcd_send_string((char *)"Chu ky:");
//			lcd_send_cmd(0x80 | 0x08);
//			lcd_send_string((char *)lcdTest.cfgDis.ucVal[0]);
//			lcd_send_cmd(0x80 | 0x40);
//			lcd_send_string((char *)"Nguong:");
//			lcd_send_cmd(0x80 | 0x48);
//			lcd_send_string((char *)lcdTest.cfgDis.ucVal[1]);
//			if (lcdTest.cfgDis.ucCursor == 0)
//			{
//				if (lcdTest.cfgDis.bCfg == true)
//				{
//					lcd_send_cmd(0x80 | 0x0F);
//					lcd_send_string((char *)"<");
//				}
//				else
//				{
//					lcd_send_cmd(0x80 | 0x0E);
//					lcd_send_string((char *)"<-");
//				}
//			}
//			else if (lcdTest.cfgDis.ucCursor == 1)
//			{
//				if (lcdTest.cfgDis.bCfg == true)
//				{
//					lcd_send_cmd(0x80 | 0x4F);
//					lcd_send_string((char *)"<");
//				}
//				else
//				{
//					lcd_send_cmd(0x80 | 0x4E);
//					lcd_send_string((char *)"<-");
//				}
//			}
//		}
//		vTaskDelayUntil(&xWakeTick, 200 / portTICK_RATE_MS);
//	}
//}

//void sensor_task(void *param)
//{
//	TickType_t xWakeTick = xTaskGetTickCount();
//	EventBits_t xEvBit;
//	uint8_t ucDataAds[3] = {0};
//	ads_init();
//	while (1)
//	{
//		HAL_ADC_Start_IT(&hadc1);
//		xEvBit = xEventGroupWaitBits(evGroupHandle, ADC_BIT , pdTRUE, pdFALSE, 200 / portTICK_RATE_MS);
//		if (xEvBit & ADC_BIT)
//			lcdTest.sensorDis.dbSensorStm = (double)HAL_ADC_GetValue(&hadc1) * 100 * 3.3 / 4095 ;
//		else
//			lcdTest.sensorDis.dbSensorStm = 0;
//		ftoa(lcdTest.sensorDis.dbSensorStm, (char *)lcdTest.sensorDis.ucSensorStm, 2);
//		memset((char *)ucDataAds, '\0', strlen((char *)ucDataAds));
//		ads_read(ADS1115_CONVERSION_REG, ucDataAds);
//		lcdTest.sensorDis.dbSensorAds = ((double)((((uint16_t)ucDataAds[0] << 8) & 0xFF00) | ((uint16_t)ucDataAds[1] & 0x00FF)) * 1.024 / 32767) * 100;
//		ftoa(lcdTest.sensorDis.dbSensorAds, (char *)lcdTest.sensorDis.ucSensorAds, 2);
//		if (lcdTest.sensorDis.dbSensorStm > lcdTest.cfgDis.dbVal[1])
//		{
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_ON);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_ON);
//		}
//		else
//		{
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_OFF);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_OFF);
//		}
//		if (lcdTest.sensorDis.dbSensorAds > lcdTest.cfgDis.dbVal[1])
//		{
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_ON);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_ON);
//		}
//		else
//		{
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_OFF);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_OFF);
//		}
//		vTaskDelayUntil(&xWakeTick, (TickType_t)lcdTest.cfgDis.dbVal[0] / portTICK_RATE_MS);
//	}
//}

//void general_task(void *param)
//{
//	EventBits_t xEvBit;
//	uartCfgHandle_t uartCfg = {0};
//	TickType_t xWakeTick = xTaskGetTickCount();
//	HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
//	while (1)
//	{
//		xEvBit = xEventGroupWaitBits(evGroupHandle, BUT0_BIT | BUT1_BIT | BUT2_BIT | BUT3_BIT, pdTRUE, pdFALSE, 10 / portTICK_RATE_MS);
//		if (xEvBit & BUT0_BIT)
//		{
//				lcdDis.cfgDis.bCfg = false;
//				lcdDis.cfgDis.ucCursor = 0;
//				lcdDis.ucPage = 1 - lcdDis.ucPage;
//		}
//		else if (xEvBit & BUT1_BIT)
//		{
//			if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == false)
//			{
//				lcdDis.cfgDis.ucCursor = 1 - lcdDis.cfgDis.ucCursor;
//			}
//			else if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == true)
//			{
//				if (lcdDis.cfgDis.ucCursor == 0)
//				{
//					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 9500)
//					{
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 500;
//					}
//					else
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] += 500;
//				}
//				else if(lcdDis.cfgDis.ucCursor == 1)
//				{
//					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 99)
//					{
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 1;
//					}
//					else
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] += 1;
//				}
//				ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
//				ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
//			}
//		}
//		else if (xEvBit & BUT2_BIT)
//		{
//			if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == false)
//			{
//				lcdDis.cfgDis.ucCursor = 1 - lcdDis.cfgDis.ucCursor;
//			}
//			else if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == true)
//			{
//				if (lcdDis.cfgDis.ucCursor == 0)
//				{
//					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 500)
//					{
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 9500;
//					}
//					else
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] -= 500;
//				}
//				else if(lcdDis.cfgDis.ucCursor == 1)
//				{
//					if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 1)
//					{
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 99;
//					}
//					else
//						lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] -= 1;
//				}
//				ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
//				ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
//			}
//		}
//		else if (xEvBit & BUT3_BIT)
//		{
//			if (lcdDis.ucPage == 1)
//			{
//				lcdDis.cfgDis.bCfg = !lcdDis.cfgDis.bCfg;
//			}
//		}
//		if (ucRxFlag == END_BYTE)
//		{
//			LOG(TAG, (char *)ucRxBuffer);
//			sscanf((char *)ucRxBuffer, "$,%c,%s,*", (char *)&uartCfg.ucType, (char *)uartCfg.ucVal);
//			if (uartCfg.ucType == 'P')
//			{
//				lcdDis.cfgDis.dbVal[0] = atof((char *)uartCfg.ucVal) * 1000;
//				if (lcdDis.cfgDis.dbVal[0] > 9500)
//					lcdDis.cfgDis.dbVal[0] = 9500;
//				else if (lcdDis.cfgDis.dbVal[0] < 500)
//					lcdDis.cfgDis.dbVal[0] = 500;
//				ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
//			}
//			else if (uartCfg.ucType == 'T')
//			{
//				lcdDis.cfgDis.dbVal[1] = atof((char *)uartCfg.ucVal);
//				if (lcdDis.cfgDis.dbVal[1] > 99)
//					lcdDis.cfgDis.dbVal[1] = 99;
//				else if (lcdDis.cfgDis.dbVal[1] < 1)
//					lcdDis.cfgDis.dbVal[1] = 1;
//				ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
//			}
//			ucRxCnt = 0;
//			ucRxFlag = START_BYTE;
//			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
//		}
//		vTaskDelayUntil(&xWakeTick, 50 / portTICK_RATE_MS);
//	}
//}

void sensor_task(void *param)
{
	TickType_t xWakeTick = xTaskGetTickCount();
	EventBits_t xEvBit;
	uint8_t ucDataAds[3] = {0};
	generalTestHandle_t generalTest;
	sensorTestHandle_t sensorTest;
	BaseType_t xGenRet;
	double dbSensorStm;
	double dbSensorAds;
	double dbVal[2];
	ads_init();
	while (1)
	{
		xGenRet = xQueueReceive(gensenQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
		if (xGenRet == pdTRUE)
		{
			dbVal[0] = generalTest.dbVal[0];
			dbVal[1] = generalTest.dbVal[1];
		}
		HAL_ADC_Start_IT(&hadc1);
		xEvBit = xEventGroupWaitBits(evGroupHandle, ADC_BIT , pdTRUE, pdFALSE, 200 / portTICK_RATE_MS);
		if (xEvBit & ADC_BIT)
			dbSensorStm = (double)HAL_ADC_GetValue(&hadc1) * 100 * 3.3 / 4095 ;
		else
			dbSensorStm = 0;
		ftoa(dbSensorStm, (char *)sensorTest.ucSensorStm, 2);
		memset((char *)ucDataAds, '\0', strlen((char *)ucDataAds));
		ads_read(ADS1115_CONVERSION_REG, ucDataAds);
		dbSensorAds = ((double)((((uint16_t)ucDataAds[0] << 8) & 0xFF00) | ((uint16_t)ucDataAds[1] & 0x00FF)) * 1.024 / 32767) * 100;
		ftoa(dbSensorAds, (char *)sensorTest.ucSensorAds, 2);
		if (dbSensorStm > dbVal[1])
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_ON);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_ON);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_OFF);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_OFF);
		}
		if (dbSensorAds > dbVal[1])
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_ON);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_ON);
		}
		else
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_OFF);
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_OFF);
		}
		xQueueSend(sensorQueueHandle, &sensorTest, 0 / portTICK_RATE_MS);
		vTaskDelayUntil(&xWakeTick, (TickType_t)dbVal[0] / portTICK_RATE_MS);
	}
}

void general_task(void *param)
{
	generalTestHandle_t generalTest = {
			.bCfg = false,
			.ucCursor = 0,
			.ucPage = 0,
			.dbVal[0] = 1000,
			.dbVal[1] = 25.0,
	};
	EventBits_t xEvBit;
	TickType_t xWakeTick = xTaskGetTickCount();
	while (1)
	{
		xEvBit = xEventGroupWaitBits(evGroupHandle, BUT0_BIT | BUT1_BIT | BUT2_BIT | BUT3_BIT, pdTRUE, pdFALSE, 0 / portTICK_RATE_MS);
		if (xEvBit & BUT0_BIT)
		{
				generalTest.bCfg = false;
				generalTest.ucCursor = 0;
				generalTest.ucPage = 1 - generalTest.ucPage;
		}
		else if (xEvBit & BUT1_BIT)
		{
			if (generalTest.ucPage == 1 && generalTest.bCfg == false)
			{
				generalTest.ucCursor = 1 - generalTest.ucCursor;
			}
			else if (generalTest.ucPage == 1 && generalTest.bCfg == true)
			{
				if (generalTest.ucCursor == 0)
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 9500)
					{
						generalTest.dbVal[generalTest.ucCursor] = 500;
					}
					else
						generalTest.dbVal[generalTest.ucCursor] += 500;
				}
				else if(generalTest.ucCursor == 1)
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 99)
					{
						generalTest.dbVal[generalTest.ucCursor] = 1;
					}
					else
						generalTest.dbVal[generalTest.ucCursor] += 1;
				}
				ftoa(generalTest.dbVal[0] / 1000, (char *)generalTest.ucVal[0], 1);
				ftoa(generalTest.dbVal[1], (char *)generalTest.ucVal[1], 1);
			}
		}
		else if (xEvBit & BUT2_BIT)
		{
			if (generalTest.ucPage == 1 && generalTest.bCfg == false)
			{
				generalTest.ucCursor = 1 - generalTest.ucCursor;
			}
			else if (generalTest.ucPage == 1 && generalTest.bCfg == true)
			{
				if (generalTest.ucCursor == 0)
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 500)
					{
						generalTest.dbVal[generalTest.ucCursor] = 9500;
					}
					else
						generalTest.dbVal[generalTest.ucCursor] -= 500;
				}
				else if(generalTest.ucCursor == 1)
				{
					if(generalTest.dbVal[generalTest.ucCursor] == 1)
					{
						generalTest.dbVal[generalTest.ucCursor] = 99;
					}
					else
						generalTest.dbVal[generalTest.ucCursor] -= 1;
				}
				ftoa(generalTest.dbVal[0] / 1000, (char *)generalTest.ucVal[0], 1);
				ftoa(generalTest.dbVal[1], (char *)generalTest.ucVal[1], 1);
			}
		}
		else if (xEvBit & BUT3_BIT)
		{
			if (generalTest.ucPage == 1)
			{
				generalTest.bCfg = !generalTest.bCfg;
			}
		}
		if (xEvBit & 0x1E)
		{
			xQueueSend(genlcdQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
			xQueueOverwrite(gensenQueueHandle, &generalTest);
		}
		vTaskDelayUntil(&xWakeTick, 50 / portTICK_RATE_MS);
	}
}

void lcd_task(void *param)
{
	char cVal[2][20];
	TickType_t xWakeTick = xTaskGetTickCount();
	lcd_init();
	lcd_clear();
	generalTestHandle_t generalTest;
	sensorTestHandle_t sensorTest;
	BaseType_t xGenRet;
	BaseType_t xSenRet;
	while(1)
	{
		xGenRet = xQueueReceive(genlcdQueueHandle, &generalTest, 0 / portTICK_RATE_MS);
		xSenRet = xQueueReceive(sensorQueueHandle, &sensorTest, 0 / portTICK_RATE_MS);
		if(xGenRet || xSenRet)
		{
			lcd_clear();
			if (generalTest.ucPage == 0)
			{
				for(int i = 0; i < 2; i++)
				{
					memset(cVal[i], 0, strlen(cVal[i]));
					if (i == 0)
					{
						sprintf(cVal[i], "STM: %soC", (char *)sensorTest.ucSensorStm);
					}
					else
						sprintf(cVal[i], "ADS: %soC", (char *)sensorTest.ucSensorAds);
				}
				lcd_send_cmd(0x80 | 0x00);
				lcd_send_string(cVal[0]);
				lcd_send_cmd(0x80 | 0x40);
				lcd_send_string(cVal[1]);
			}
			else if (generalTest.ucPage == 1)
			{
				lcd_send_cmd(0x80 | 0x00);
				lcd_send_string((char *)"Chu ky:");
				lcd_send_cmd(0x80 | 0x08);
				lcd_send_string((char *)generalTest.ucVal[0]);
				lcd_send_cmd(0x80 | 0x40);
				lcd_send_string((char *)"Nguong:");
				lcd_send_cmd(0x80 | 0x48);
				lcd_send_string((char *)generalTest.ucVal[1]);
				if (generalTest.ucCursor == 0)
				{
					if (generalTest.bCfg == true)
					{
						lcd_send_cmd(0x80 | 0x0F);
						lcd_send_string((char *)"<");
					}
					else
					{
						lcd_send_cmd(0x80 | 0x0E);
						lcd_send_string((char *)"<-");
					}
				}
				else if (generalTest.ucCursor == 1)
				{
					if (generalTest.bCfg == true)
					{
						lcd_send_cmd(0x80 | 0x4F);
						lcd_send_string((char *)"<");
					}
					else
					{
						lcd_send_cmd(0x80 | 0x4E);
						lcd_send_string((char *)"<-");
					}
				}
			}
		}
		vTaskDelayUntil(&xWakeTick, 200 / portTICK_RATE_MS);
	}
}

/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
