
code-quen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a71c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800a908  0800a908  0001a908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae70  0800ae70  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ae70  0800ae70  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ae70  0800ae70  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae70  0800ae70  0001ae70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae74  0800ae74  0001ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0800ae78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000024c  0800b0c4  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  0800b0c4  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124d2  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307c  00000000  00000000  00032747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  000357c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb53  00000000  00000000  00037a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016870  00000000  00000000  000545db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a28d5  00000000  00000000  0006ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d720  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c8  00000000  00000000  0010d770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000024c 	.word	0x2000024c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a8ec 	.word	0x0800a8ec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000250 	.word	0x20000250
 8000224:	0800a8ec 	.word	0x0800a8ec

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2lz>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2300      	movs	r3, #0
 8000baa:	4628      	mov	r0, r5
 8000bac:	4621      	mov	r1, r4
 8000bae:	f7ff ff71 	bl	8000a94 <__aeabi_dcmplt>
 8000bb2:	b928      	cbnz	r0, 8000bc0 <__aeabi_d2lz+0x20>
 8000bb4:	4628      	mov	r0, r5
 8000bb6:	4621      	mov	r1, r4
 8000bb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bbc:	f000 b80a 	b.w	8000bd4 <__aeabi_d2ulz>
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bc6:	f000 f805 	bl	8000bd4 <__aeabi_d2ulz>
 8000bca:	4240      	negs	r0, r0
 8000bcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_d2ulz>:
 8000bd4:	b5d0      	push	{r4, r6, r7, lr}
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <__aeabi_d2ulz+0x34>)
 8000bda:	4606      	mov	r6, r0
 8000bdc:	460f      	mov	r7, r1
 8000bde:	f7ff fce7 	bl	80005b0 <__aeabi_dmul>
 8000be2:	f7ff ffbd 	bl	8000b60 <__aeabi_d2uiz>
 8000be6:	4604      	mov	r4, r0
 8000be8:	f7ff fc68 	bl	80004bc <__aeabi_ui2d>
 8000bec:	2200      	movs	r2, #0
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <__aeabi_d2ulz+0x38>)
 8000bf0:	f7ff fcde 	bl	80005b0 <__aeabi_dmul>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	4639      	mov	r1, r7
 8000bfc:	f7ff fb20 	bl	8000240 <__aeabi_dsub>
 8000c00:	f7ff ffae 	bl	8000b60 <__aeabi_d2uiz>
 8000c04:	4621      	mov	r1, r4
 8000c06:	bdd0      	pop	{r4, r6, r7, pc}
 8000c08:	3df00000 	.word	0x3df00000
 8000c0c:	41f00000 	.word	0x41f00000

08000c10 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c22:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <MX_ADC1_Init+0x78>)
 8000c24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c3a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c4e:	f001 fc63 	bl	8002518 <HAL_ADC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c58:	f001 f92c 	bl	8001eb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c64:	2307      	movs	r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC1_Init+0x74>)
 8000c6e:	f001 fdff 	bl	8002870 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c78:	f001 f91c 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000268 	.word	0x20000268
 8000c88:	40012400 	.word	0x40012400

08000c8c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0x6c>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d121      	bne.n	8000cf0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <HAL_ADC_MspInit+0x70>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <HAL_ADC_MspInit+0x70>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_ADC_MspInit+0x70>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_ADC_MspInit+0x70>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_ADC_MspInit+0x70>)
 8000cca:	f043 0304 	orr.w	r3, r3, #4
 8000cce:	6193      	str	r3, [r2, #24]
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_ADC_MspInit+0x70>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_ADC_MspInit+0x74>)
 8000cec:	f002 f976 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40012400 	.word	0x40012400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010800 	.word	0x40010800

08000d04 <ads_write>:
#include "main.h"

extern I2C_HandleTypeDef hi2c2;

void ads_write(uint8_t reg_addr, uint8_t *data_send, int len)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	73fb      	strb	r3, [r7, #15]
	uint8_t *data = (uint8_t *)calloc(len + 2, sizeof(uint8_t));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3302      	adds	r3, #2
 8000d16:	2101      	movs	r1, #1
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f005 f95b 	bl	8005fd4 <calloc>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	617b      	str	r3, [r7, #20]
	data[0] = reg_addr;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	701a      	strb	r2, [r3, #0]
	memcpy((char *)&data[1], (char *)data_send, len);
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f005 f9ab 	bl	800608c <memcpy>
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_ADS1115, data, strlen((char *)data), 1000);
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff fa76 	bl	8000228 <strlen>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d44:	9200      	str	r2, [sp, #0]
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	2190      	movs	r1, #144	; 0x90
 8000d4a:	4805      	ldr	r0, [pc, #20]	; (8000d60 <ads_write+0x5c>)
 8000d4c:	f002 fc4e 	bl	80035ec <HAL_I2C_Master_Transmit>
//	xSemaphoreGive(i2cSemphrHandle);
	free(data);
 8000d50:	6978      	ldr	r0, [r7, #20]
 8000d52:	f005 f993 	bl	800607c <free>
}
 8000d56:	bf00      	nop
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000298 	.word	0x20000298

08000d64 <ads_read>:

void ads_read(uint8_t reg_addr, uint8_t *data_read)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
//	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_ADS1115, &reg_addr, 1, 1000);
 8000d70:	1dfa      	adds	r2, r7, #7
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2190      	movs	r1, #144	; 0x90
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <ads_read+0x38>)
 8000d7e:	f002 fc35 	bl	80035ec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, SLAVE_ADDRESS_ADS1115, data_read, 2, 1000);
 8000d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2302      	movs	r3, #2
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	2190      	movs	r1, #144	; 0x90
 8000d8e:	4803      	ldr	r0, [pc, #12]	; (8000d9c <ads_read+0x38>)
 8000d90:	f002 fd2a 	bl	80037e8 <HAL_I2C_Master_Receive>
//	xSemaphoreGive(i2cSemphrHandle);
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000298 	.word	0x20000298

08000da0 <ads_init>:

void ads_init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	uint8_t data_init[3] = {0x46, 0x20, 0x00};
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <ads_init+0x2c>)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	4611      	mov	r1, r2
 8000dae:	8019      	strh	r1, [r3, #0]
 8000db0:	3302      	adds	r3, #2
 8000db2:	0c12      	lsrs	r2, r2, #16
 8000db4:	701a      	strb	r2, [r3, #0]
	ads_write(ADS1115_CONFIG_REG, data_init, 2);
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2202      	movs	r2, #2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff ffa1 	bl	8000d04 <ads_write>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	0800a908 	.word	0x0800a908

08000dd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a27      	ldr	r2, [pc, #156]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000dea:	f043 0320 	orr.w	r3, r3, #32
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0320 	and.w	r3, r3, #32
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_GPIO_Init+0xb8>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 8000e32:	4816      	ldr	r0, [pc, #88]	; (8000e8c <MX_GPIO_Init+0xbc>)
 8000e34:	f002 fa66 	bl	8003304 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e38:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_GPIO_Init+0xc0>)
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_GPIO_Init+0xc4>)
 8000e4e:	f002 f8c5 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e52:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000e56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4808      	ldr	r0, [pc, #32]	; (8000e8c <MX_GPIO_Init+0xbc>)
 8000e6c:	f002 f8b6 	bl	8002fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f001 ff44 	bl	8002d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f001 ff5d 	bl	8002d3a <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	10210000 	.word	0x10210000
 8000e94:	40010c00 	.word	0x40010c00

08000e98 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000e9e:	4a13      	ldr	r2, [pc, #76]	; (8000eec <MX_I2C2_Init+0x54>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <MX_I2C2_Init+0x58>)
 8000ea6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000eba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ed4:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <MX_I2C2_Init+0x50>)
 8000ed6:	f002 fa45 	bl	8003364 <HAL_I2C_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ee0:	f000 ffe8 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000298 	.word	0x20000298
 8000eec:	40005800 	.word	0x40005800
 8000ef0:	000186a0 	.word	0x000186a0

08000ef4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a16      	ldr	r2, [pc, #88]	; (8000f68 <HAL_I2C_MspInit+0x74>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d124      	bne.n	8000f5e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_I2C_MspInit+0x78>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a14      	ldr	r2, [pc, #80]	; (8000f6c <HAL_I2C_MspInit+0x78>)
 8000f1a:	f043 0308 	orr.w	r3, r3, #8
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_I2C_MspInit+0x78>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0308 	and.w	r3, r3, #8
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f36:	2303      	movs	r3, #3
 8000f38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <HAL_I2C_MspInit+0x7c>)
 8000f42:	f002 f84b 	bl	8002fdc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_I2C_MspInit+0x78>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0x78>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f50:	61d3      	str	r3, [r2, #28]
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_I2C_MspInit+0x78>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40005800 	.word	0x40005800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010c00 	.word	0x40010c00

08000f74 <lcd_send_cmd>:

extern I2C_HandleTypeDef hi2c2;
//extern SemaphoreHandle_t i2cSemphrHandle;

void lcd_send_cmd (char cmd)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f023 030f 	bic.w	r3, r3, #15
 8000f84:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	f043 030c 	orr.w	r3, r3, #12
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f043 030c 	orr.w	r3, r3, #12
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8000faa:	7bbb      	ldrb	r3, [r7, #14]
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	72fb      	strb	r3, [r7, #11]
//	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000fb4:	f107 0208 	add.w	r2, r7, #8
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	214e      	movs	r1, #78	; 0x4e
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <lcd_send_cmd+0x5c>)
 8000fc2:	f002 fb13 	bl	80035ec <HAL_I2C_Master_Transmit>
//	xSemaphoreGive(i2cSemphrHandle);
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000298 	.word	0x20000298

08000fd4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xf0);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f023 030f 	bic.w	r3, r3, #15
 8000fe4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f043 030d 	orr.w	r3, r3, #13
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0309 	orr.w	r3, r3, #9
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	f043 030d 	orr.w	r3, r3, #13
 8001006:	b2db      	uxtb	r3, r3
 8001008:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	f043 0309 	orr.w	r3, r3, #9
 8001010:	b2db      	uxtb	r3, r3
 8001012:	72fb      	strb	r3, [r7, #11]
//	xSemaphoreTake(i2cSemphrHandle, portMAX_DELAY);
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8001014:	f107 0208 	add.w	r2, r7, #8
 8001018:	2364      	movs	r3, #100	; 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2304      	movs	r3, #4
 800101e:	214e      	movs	r1, #78	; 0x4e
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <lcd_send_data+0x5c>)
 8001022:	f002 fae3 	bl	80035ec <HAL_I2C_Master_Transmit>
//	xSemaphoreGive(i2cSemphrHandle);
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000298 	.word	0x20000298

08001034 <lcd_clear>:

void lcd_clear(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff ff9b 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(3 / portTICK_PERIOD_MS);
	HAL_Delay(3);
 800103e:	2003      	movs	r0, #3
 8001040:	f001 fa46 	bl	80024d0 <HAL_Delay>
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <lcd_init>:

void lcd_init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x33);
 800104c:	2033      	movs	r0, #51	; 0x33
 800104e:	f7ff ff91 	bl	8000f74 <lcd_send_cmd>
	lcd_send_cmd(0x32);
 8001052:	2032      	movs	r0, #50	; 0x32
 8001054:	f7ff ff8e 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 8001058:	2032      	movs	r0, #50	; 0x32
 800105a:	f001 fa39 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd(0x28);
 800105e:	2028      	movs	r0, #40	; 0x28
 8001060:	f7ff ff88 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f001 fa33 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd(0x01);
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff ff82 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 8001070:	2032      	movs	r0, #50	; 0x32
 8001072:	f001 fa2d 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd(0x06);
 8001076:	2006      	movs	r0, #6
 8001078:	f7ff ff7c 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 800107c:	2032      	movs	r0, #50	; 0x32
 800107e:	f001 fa27 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd(0x0C);
 8001082:	200c      	movs	r0, #12
 8001084:	f7ff ff76 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 8001088:	2032      	movs	r0, #50	; 0x32
 800108a:	f001 fa21 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd(0x02);
 800108e:	2002      	movs	r0, #2
 8001090:	f7ff ff70 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 8001094:	2032      	movs	r0, #50	; 0x32
 8001096:	f001 fa1b 	bl	80024d0 <HAL_Delay>
	lcd_send_cmd(0x80);
 800109a:	2080      	movs	r0, #128	; 0x80
 800109c:	f7ff ff6a 	bl	8000f74 <lcd_send_cmd>
//	vTaskDelay(50 / portTICK_PERIOD_MS);
	HAL_Delay(50);
 80010a0:	2032      	movs	r0, #50	; 0x32
 80010a2:	f001 fa15 	bl	80024d0 <HAL_Delay>
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}

080010aa <lcd_send_string>:

void lcd_send_string(char *str)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
	while(*str)
 80010b2:	e006      	b.n	80010c2 <lcd_send_string+0x18>
    {
        lcd_send_data(*str++);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff89 	bl	8000fd4 <lcd_send_data>
	while(*str)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f4      	bne.n	80010b4 <lcd_send_string+0xa>
    }
}
 80010ca:	bf00      	nop
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <reverse>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void reverse(char *str, int len)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
    while (i < j)
 80010e8:	e018      	b.n	800111c <reverse+0x48>
    {
        temp = str[i];
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	441a      	add	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	440b      	add	r3, r1
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	701a      	strb	r2, [r3, #0]
        i++;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3301      	adds	r3, #1
 8001114:	617b      	str	r3, [r7, #20]
        j--;
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	3b01      	subs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
    while (i < j)
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbe2      	blt.n	80010ea <reverse+0x16>
    }
}
 8001124:	bf00      	nop
 8001126:	bf00      	nop
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <intToStr>:

int intToStr(int x, char str[], int d)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
    if(x == 0)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d126      	bne.n	8001194 <intToStr+0x64>
        str[i++] = '0';
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	617a      	str	r2, [r7, #20]
 800114c:	461a      	mov	r2, r3
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	4413      	add	r3, r2
 8001152:	2230      	movs	r2, #48	; 0x30
 8001154:	701a      	strb	r2, [r3, #0]

    while (x)
 8001156:	e01d      	b.n	8001194 <intToStr+0x64>
    {
        str[i++] = (x % 10) + '0';
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <intToStr+0xa0>)
 800115c:	fb83 1302 	smull	r1, r3, r3, r2
 8001160:	1099      	asrs	r1, r3, #2
 8001162:	17d3      	asrs	r3, r2, #31
 8001164:	1ac9      	subs	r1, r1, r3
 8001166:	460b      	mov	r3, r1
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	1ad1      	subs	r1, r2, r3
 8001170:	b2ca      	uxtb	r2, r1
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	1c59      	adds	r1, r3, #1
 8001176:	6179      	str	r1, [r7, #20]
 8001178:	4619      	mov	r1, r3
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	440b      	add	r3, r1
 800117e:	3230      	adds	r2, #48	; 0x30
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <intToStr+0xa0>)
 8001188:	fb82 1203 	smull	r1, r2, r2, r3
 800118c:	1092      	asrs	r2, r2, #2
 800118e:	17db      	asrs	r3, r3, #31
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	60fb      	str	r3, [r7, #12]
    while (x)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1de      	bne.n	8001158 <intToStr+0x28>
    }

    while (i < d)
 800119a:	e007      	b.n	80011ac <intToStr+0x7c>
        str[i++] = '0';
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	617a      	str	r2, [r7, #20]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	4413      	add	r3, r2
 80011a8:	2230      	movs	r2, #48	; 0x30
 80011aa:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf3      	blt.n	800119c <intToStr+0x6c>

    reverse(str, i);
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	68b8      	ldr	r0, [r7, #8]
 80011b8:	f7ff ff8c 	bl	80010d4 <reverse>
    str[i] = '\0';
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	4413      	add	r3, r2
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    return i;
 80011c6:	697b      	ldr	r3, [r7, #20]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	66666667 	.word	0x66666667

080011d4 <ftoa>:

void ftoa(double n, char* res, int afterpoint)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	603b      	str	r3, [r7, #0]
    int ipart = (int)n;
 80011e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011e6:	f7ff fc93 	bl	8000b10 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    double fpart = n - (double)ipart;
 80011ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011f0:	f7ff f974 	bl	80004dc <__aeabi_i2d>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011fc:	f7ff f820 	bl	8000240 <__aeabi_dsub>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int i = intToStr(ipart, res, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800120e:	f7ff ff8f 	bl	8001130 <intToStr>
 8001212:	6178      	str	r0, [r7, #20]
    if (afterpoint != 0)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d024      	beq.n	8001264 <ftoa+0x90>
    {
        res[i] = '.';
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	4413      	add	r3, r2
 8001220:	222e      	movs	r2, #46	; 0x2e
 8001222:	701a      	strb	r2, [r3, #0]
        fpart = fpart * pow(10, afterpoint);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f959 	bl	80004dc <__aeabi_i2d>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <ftoa+0x98>)
 8001234:	f008 fc78 	bl	8009b28 <pow>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001240:	f7ff f9b6 	bl	80005b0 <__aeabi_dmul>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 2306 	strd	r2, r3, [r7, #24]
        intToStr((int)fpart, res + i + 1, afterpoint);
 800124c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001250:	f7ff fc5e 	bl	8000b10 <__aeabi_d2iz>
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	4413      	add	r3, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff ff66 	bl	8001130 <intToStr>
    }
}
 8001264:	bf00      	nop
 8001266:	3728      	adds	r7, #40	; 0x28
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40240000 	.word	0x40240000

08001270 <LOG>:

void LOG(const char *TAG, char *data)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b09c      	sub	sp, #112	; 0x70
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
	char data_log[100] = {0};
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	2260      	movs	r2, #96	; 0x60
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 ff0e 	bl	80060a8 <memset>
	sprintf(data_log, "\r\n%s: %s\r\n", TAG, data);
 800128c:	f107 000c 	add.w	r0, r7, #12
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	490a      	ldr	r1, [pc, #40]	; (80012c0 <LOG+0x50>)
 8001296:	f005 f80f 	bl	80062b8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)data_log, strlen(data_log), 1000);
 800129a:	f107 030c 	add.w	r3, r7, #12
 800129e:	4618      	mov	r0, r3
 80012a0:	f7fe ffc2 	bl	8000228 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f107 010c 	add.w	r1, r7, #12
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <LOG+0x54>)
 80012b2:	f004 f9a0 	bl	80055f6 <HAL_UART_Transmit>
}
 80012b6:	bf00      	nop
 80012b8:	3770      	adds	r7, #112	; 0x70
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800a918 	.word	0x0800a918
 80012c4:	200003e0 	.word	0x200003e0

080012c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	void (*stt_task_point_array[]) (void) = {sensor_task, general_task, lcd_task};
 80012ce:	4a55      	ldr	r2, [pc, #340]	; (8001424 <main+0x15c>)
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d8:	f001 f8c8 	bl	800246c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012dc:	f000 f8c4 	bl	8001468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e0:	f7ff fd76 	bl	8000dd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80012e4:	f7ff fc94 	bl	8000c10 <MX_ADC1_Init>
  MX_I2C2_Init();
 80012e8:	f7ff fdd6 	bl	8000e98 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80012ec:	f001 f81c 	bl	8002328 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80012f0:	f000 ffaa 	bl	8002248 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Setup Sensor Task */
  ads_init();
 80012f4:	f7ff fd54 	bl	8000da0 <ads_init>

  /* Setup LCD Task */
  lcd_init();
 80012f8:	f7ff fea6 	bl	8001048 <lcd_init>
  lcd_clear();
 80012fc:	f7ff fe9a 	bl	8001034 <lcd_clear>
  ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 8001300:	4b49      	ldr	r3, [pc, #292]	; (8001428 <main+0x160>)
 8001302:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b48      	ldr	r3, [pc, #288]	; (800142c <main+0x164>)
 800130c:	f7ff fa7a 	bl	8000804 <__aeabi_ddiv>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	4610      	mov	r0, r2
 8001316:	4619      	mov	r1, r3
 8001318:	2301      	movs	r3, #1
 800131a:	4a45      	ldr	r2, [pc, #276]	; (8001430 <main+0x168>)
 800131c:	f7ff ff5a 	bl	80011d4 <ftoa>
  ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <main+0x160>)
 8001322:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001326:	2301      	movs	r3, #1
 8001328:	4a42      	ldr	r2, [pc, #264]	; (8001434 <main+0x16c>)
 800132a:	f7ff ff53 	bl	80011d4 <ftoa>

  /* Setup General Task */
  HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	4941      	ldr	r1, [pc, #260]	; (8001438 <main+0x170>)
 8001332:	4842      	ldr	r0, [pc, #264]	; (800143c <main+0x174>)
 8001334:	f004 f9f1 	bl	800571a <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  previous_time_lcd_task = HAL_GetTick();
 8001338:	f001 f8c0 	bl	80024bc <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <main+0x178>)
 8001340:	6013      	str	r3, [r2, #0]
//  previous_time_sensor_task = HAL_GetTick();
  previous_time_general_task = HAL_GetTick();
 8001342:	f001 f8bb 	bl	80024bc <HAL_GetTick>
 8001346:	4603      	mov	r3, r0
 8001348:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <main+0x17c>)
 800134a:	6013      	str	r3, [r2, #0]
//	{
//		previous_time_lcd_task = HAL_GetTick();
//		lcd_task();
//	}

	if ((uwTick % 50) == 0)
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <main+0x180>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4b3e      	ldr	r3, [pc, #248]	; (800144c <main+0x184>)
 8001352:	fba3 1302 	umull	r1, r3, r3, r2
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	2132      	movs	r1, #50	; 0x32
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10c      	bne.n	800137e <main+0xb6>
	{
		itoa(uwTick, log_time, 10);
 8001364:	4b38      	ldr	r3, [pc, #224]	; (8001448 <main+0x180>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	220a      	movs	r2, #10
 800136a:	4939      	ldr	r1, [pc, #228]	; (8001450 <main+0x188>)
 800136c:	4618      	mov	r0, r3
 800136e:	f004 fe7b 	bl	8006068 <itoa>
		LOG("GeneralTask: ", log_time);
 8001372:	4937      	ldr	r1, [pc, #220]	; (8001450 <main+0x188>)
 8001374:	4837      	ldr	r0, [pc, #220]	; (8001454 <main+0x18c>)
 8001376:	f7ff ff7b 	bl	8001270 <LOG>
		stt_task_point_array[1]();
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	4798      	blx	r3
	}

	if ((uwTick % (int)lcdDis.cfgDis.dbVal[0]) == (n * 50 + 10))
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <main+0x180>)
 8001380:	681c      	ldr	r4, [r3, #0]
 8001382:	4b29      	ldr	r3, [pc, #164]	; (8001428 <main+0x160>)
 8001384:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fbc0 	bl	8000b10 <__aeabi_d2iz>
 8001390:	4603      	mov	r3, r0
 8001392:	fbb4 f2f3 	udiv	r2, r4, r3
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	1ae3      	subs	r3, r4, r3
 800139c:	4a2e      	ldr	r2, [pc, #184]	; (8001458 <main+0x190>)
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	4611      	mov	r1, r2
 80013a2:	2232      	movs	r2, #50	; 0x32
 80013a4:	fb01 f202 	mul.w	r2, r1, r2
 80013a8:	320a      	adds	r2, #10
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d11b      	bne.n	80013e6 <main+0x11e>
	{
		itoa(uwTick, log_time, 10);
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <main+0x180>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	220a      	movs	r2, #10
 80013b4:	4926      	ldr	r1, [pc, #152]	; (8001450 <main+0x188>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fe56 	bl	8006068 <itoa>
		LOG("LCDTask: ", log_time);
 80013bc:	4924      	ldr	r1, [pc, #144]	; (8001450 <main+0x188>)
 80013be:	4827      	ldr	r0, [pc, #156]	; (800145c <main+0x194>)
 80013c0:	f7ff ff56 	bl	8001270 <LOG>

		stt_task_point_array[2]();
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4798      	blx	r3
		n++;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <main+0x190>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <main+0x190>)
 80013d2:	701a      	strb	r2, [r3, #0]
		if (n >= max_n)
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <main+0x190>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <main+0x198>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d302      	bcc.n	80013e6 <main+0x11e>
		{
			n = 0;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <main+0x190>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if ((uwTick % (int)lcdDis.cfgDis.dbVal[0]) == 80)
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <main+0x180>)
 80013e8:	681c      	ldr	r4, [r3, #0]
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <main+0x160>)
 80013ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb8c 	bl	8000b10 <__aeabi_d2iz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	fbb4 f2f3 	udiv	r2, r4, r3
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	1ae3      	subs	r3, r4, r3
 8001404:	2b50      	cmp	r3, #80	; 0x50
 8001406:	d1a1      	bne.n	800134c <main+0x84>
	{
		itoa(uwTick, log_time, 10);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <main+0x180>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	220a      	movs	r2, #10
 800140e:	4910      	ldr	r1, [pc, #64]	; (8001450 <main+0x188>)
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fe29 	bl	8006068 <itoa>
		LOG("SensorTask: ", log_time);
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <main+0x188>)
 8001418:	4812      	ldr	r0, [pc, #72]	; (8001464 <main+0x19c>)
 800141a:	f7ff ff29 	bl	8001270 <LOG>
		stt_task_point_array[0]();
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4798      	blx	r3
	if ((uwTick % 50) == 0)
 8001422:	e793      	b.n	800134c <main+0x84>
 8001424:	0800a950 	.word	0x0800a950
 8001428:	20000008 	.word	0x20000008
 800142c:	408f4000 	.word	0x408f4000
 8001430:	20000050 	.word	0x20000050
 8001434:	2000005a 	.word	0x2000005a
 8001438:	20000332 	.word	0x20000332
 800143c:	200003e0 	.word	0x200003e0
 8001440:	20000318 	.word	0x20000318
 8001444:	2000031c 	.word	0x2000031c
 8001448:	20000424 	.word	0x20000424
 800144c:	51eb851f 	.word	0x51eb851f
 8001450:	20000320 	.word	0x20000320
 8001454:	0800a924 	.word	0x0800a924
 8001458:	20000069 	.word	0x20000069
 800145c:	0800a934 	.word	0x0800a934
 8001460:	2000006a 	.word	0x2000006a
 8001464:	0800a940 	.word	0x0800a940

08001468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001472:	2228      	movs	r2, #40	; 0x28
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f004 fe16 	bl	80060a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800149c:	2301      	movs	r3, #1
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014aa:	2301      	movs	r3, #1
 80014ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ae:	2302      	movs	r3, #2
 80014b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80014bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 ff1c 	bl	8004300 <HAL_RCC_OscConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80014ce:	f000 fcf1 	bl	8001eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d2:	230f      	movs	r3, #15
 80014d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d6:	2302      	movs	r3, #2
 80014d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e8:	f107 031c 	add.w	r3, r7, #28
 80014ec:	2102      	movs	r1, #2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 f988 	bl	8004804 <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80014fa:	f000 fcdb 	bl	8001eb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014fe:	2302      	movs	r3, #2
 8001500:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fb43 	bl	8004b94 <HAL_RCCEx_PeriphCLKConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001514:	f000 fcce 	bl	8001eb4 <Error_Handler>
  }
}
 8001518:	bf00      	nop
 800151a:	3758      	adds	r7, #88	; 0x58
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <lcd_task>:

/* USER CODE BEGIN 4 */
void lcd_task(void)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
	lcd_clear();
 8001526:	f7ff fd85 	bl	8001034 <lcd_clear>
	if (lcdDis.ucPage == 0)
 800152a:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <lcd_task+0x144>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d148      	bne.n	80015c4 <lcd_task+0xa4>
	{
		for(int i = 0; i < 2; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e035      	b.n	80015a4 <lcd_task+0x84>
		{
			memset(cVal[i], 0, strlen(cVal[i]));
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4a49      	ldr	r2, [pc, #292]	; (8001668 <lcd_task+0x148>)
 8001544:	189c      	adds	r4, r3, r2
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4a45      	ldr	r2, [pc, #276]	; (8001668 <lcd_task+0x148>)
 8001552:	4413      	add	r3, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fe67 	bl	8000228 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	2100      	movs	r1, #0
 8001560:	4620      	mov	r0, r4
 8001562:	f004 fda1 	bl	80060a8 <memset>
			if (i == 0)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10c      	bne.n	8001586 <lcd_task+0x66>
			{
				sprintf(cVal[i], "STM: %soC", (char *)lcdDis.sensorDis.ucSensorStm);
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4a3c      	ldr	r2, [pc, #240]	; (8001668 <lcd_task+0x148>)
 8001578:	4413      	add	r3, r2
 800157a:	4a3c      	ldr	r2, [pc, #240]	; (800166c <lcd_task+0x14c>)
 800157c:	493c      	ldr	r1, [pc, #240]	; (8001670 <lcd_task+0x150>)
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fe9a 	bl	80062b8 <siprintf>
 8001584:	e00b      	b.n	800159e <lcd_task+0x7e>
			}
			else
				sprintf(cVal[i], "ADS: %soC", (char *)lcdDis.sensorDis.ucSensorAds);
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4a35      	ldr	r2, [pc, #212]	; (8001668 <lcd_task+0x148>)
 8001592:	4413      	add	r3, r2
 8001594:	4a37      	ldr	r2, [pc, #220]	; (8001674 <lcd_task+0x154>)
 8001596:	4938      	ldr	r1, [pc, #224]	; (8001678 <lcd_task+0x158>)
 8001598:	4618      	mov	r0, r3
 800159a:	f004 fe8d 	bl	80062b8 <siprintf>
		for(int i = 0; i < 2; i++)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3301      	adds	r3, #1
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	ddc6      	ble.n	8001538 <lcd_task+0x18>
		}
		lcd_send_cmd(0x80 | 0x00);
 80015aa:	2080      	movs	r0, #128	; 0x80
 80015ac:	f7ff fce2 	bl	8000f74 <lcd_send_cmd>
		lcd_send_string(cVal[0]);
 80015b0:	482d      	ldr	r0, [pc, #180]	; (8001668 <lcd_task+0x148>)
 80015b2:	f7ff fd7a 	bl	80010aa <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80015b6:	20c0      	movs	r0, #192	; 0xc0
 80015b8:	f7ff fcdc 	bl	8000f74 <lcd_send_cmd>
		lcd_send_string(cVal[1]);
 80015bc:	482f      	ldr	r0, [pc, #188]	; (800167c <lcd_task+0x15c>)
 80015be:	f7ff fd74 	bl	80010aa <lcd_send_string>
				lcd_send_cmd(0x80 | 0x4E);
				lcd_send_string((char *)"<-");
			}
		}
	}
}
 80015c2:	e04a      	b.n	800165a <lcd_task+0x13a>
	else if (lcdDis.ucPage == 1)
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <lcd_task+0x144>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d146      	bne.n	800165a <lcd_task+0x13a>
		lcd_send_cmd(0x80 | 0x00);
 80015cc:	2080      	movs	r0, #128	; 0x80
 80015ce:	f7ff fcd1 	bl	8000f74 <lcd_send_cmd>
		lcd_send_string((char *)"Chu ky:");
 80015d2:	482b      	ldr	r0, [pc, #172]	; (8001680 <lcd_task+0x160>)
 80015d4:	f7ff fd69 	bl	80010aa <lcd_send_string>
		lcd_send_cmd(0x80 | 0x08);
 80015d8:	2088      	movs	r0, #136	; 0x88
 80015da:	f7ff fccb 	bl	8000f74 <lcd_send_cmd>
		lcd_send_string((char *)lcdDis.cfgDis.ucVal[0]);
 80015de:	4829      	ldr	r0, [pc, #164]	; (8001684 <lcd_task+0x164>)
 80015e0:	f7ff fd63 	bl	80010aa <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80015e4:	20c0      	movs	r0, #192	; 0xc0
 80015e6:	f7ff fcc5 	bl	8000f74 <lcd_send_cmd>
		lcd_send_string((char *)"Nguong:");
 80015ea:	4827      	ldr	r0, [pc, #156]	; (8001688 <lcd_task+0x168>)
 80015ec:	f7ff fd5d 	bl	80010aa <lcd_send_string>
		lcd_send_cmd(0x80 | 0x48);
 80015f0:	20c8      	movs	r0, #200	; 0xc8
 80015f2:	f7ff fcbf 	bl	8000f74 <lcd_send_cmd>
		lcd_send_string((char *)lcdDis.cfgDis.ucVal[1]);
 80015f6:	4825      	ldr	r0, [pc, #148]	; (800168c <lcd_task+0x16c>)
 80015f8:	f7ff fd57 	bl	80010aa <lcd_send_string>
		if (lcdDis.cfgDis.ucCursor == 0)
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <lcd_task+0x144>)
 80015fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001602:	2b00      	cmp	r3, #0
 8001604:	d112      	bne.n	800162c <lcd_task+0x10c>
			if (lcdDis.cfgDis.bCfg == true)
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <lcd_task+0x144>)
 8001608:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <lcd_task+0xfe>
				lcd_send_cmd(0x80 | 0x0F);
 8001610:	208f      	movs	r0, #143	; 0x8f
 8001612:	f7ff fcaf 	bl	8000f74 <lcd_send_cmd>
				lcd_send_string((char *)"<");
 8001616:	481e      	ldr	r0, [pc, #120]	; (8001690 <lcd_task+0x170>)
 8001618:	f7ff fd47 	bl	80010aa <lcd_send_string>
}
 800161c:	e01d      	b.n	800165a <lcd_task+0x13a>
				lcd_send_cmd(0x80 | 0x0E);
 800161e:	208e      	movs	r0, #142	; 0x8e
 8001620:	f7ff fca8 	bl	8000f74 <lcd_send_cmd>
				lcd_send_string((char *)"<-");
 8001624:	481b      	ldr	r0, [pc, #108]	; (8001694 <lcd_task+0x174>)
 8001626:	f7ff fd40 	bl	80010aa <lcd_send_string>
}
 800162a:	e016      	b.n	800165a <lcd_task+0x13a>
		else if (lcdDis.cfgDis.ucCursor == 1)
 800162c:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <lcd_task+0x144>)
 800162e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001632:	2b01      	cmp	r3, #1
 8001634:	d111      	bne.n	800165a <lcd_task+0x13a>
			if (lcdDis.cfgDis.bCfg == true)
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <lcd_task+0x144>)
 8001638:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800163c:	2b00      	cmp	r3, #0
 800163e:	d006      	beq.n	800164e <lcd_task+0x12e>
				lcd_send_cmd(0x80 | 0x4F);
 8001640:	20cf      	movs	r0, #207	; 0xcf
 8001642:	f7ff fc97 	bl	8000f74 <lcd_send_cmd>
				lcd_send_string((char *)"<");
 8001646:	4812      	ldr	r0, [pc, #72]	; (8001690 <lcd_task+0x170>)
 8001648:	f7ff fd2f 	bl	80010aa <lcd_send_string>
}
 800164c:	e005      	b.n	800165a <lcd_task+0x13a>
				lcd_send_cmd(0x80 | 0x4E);
 800164e:	20ce      	movs	r0, #206	; 0xce
 8001650:	f7ff fc90 	bl	8000f74 <lcd_send_cmd>
				lcd_send_string((char *)"<-");
 8001654:	480f      	ldr	r0, [pc, #60]	; (8001694 <lcd_task+0x174>)
 8001656:	f7ff fd28 	bl	80010aa <lcd_send_string>
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008
 8001668:	200002ec 	.word	0x200002ec
 800166c:	20000020 	.word	0x20000020
 8001670:	0800a95c 	.word	0x0800a95c
 8001674:	2000002a 	.word	0x2000002a
 8001678:	0800a968 	.word	0x0800a968
 800167c:	20000300 	.word	0x20000300
 8001680:	0800a974 	.word	0x0800a974
 8001684:	20000050 	.word	0x20000050
 8001688:	0800a97c 	.word	0x0800a97c
 800168c:	2000005a 	.word	0x2000005a
 8001690:	0800a984 	.word	0x0800a984
 8001694:	0800a988 	.word	0x0800a988

08001698 <sensor_task>:

void sensor_task(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 800169c:	4860      	ldr	r0, [pc, #384]	; (8001820 <sensor_task+0x188>)
 800169e:	f001 f825 	bl	80026ec <HAL_ADC_Start_IT>
	lcdDis.sensorDis.dbSensorStm = (double)HAL_ADC_GetValue(&hadc1) * 100 * 3.3 / 4095;
 80016a2:	485f      	ldr	r0, [pc, #380]	; (8001820 <sensor_task+0x188>)
 80016a4:	f001 f8d8 	bl	8002858 <HAL_ADC_GetValue>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff06 	bl	80004bc <__aeabi_ui2d>
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b5b      	ldr	r3, [pc, #364]	; (8001824 <sensor_task+0x18c>)
 80016b6:	f7fe ff7b 	bl	80005b0 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	a34f      	add	r3, pc, #316	; (adr r3, 8001800 <sensor_task+0x168>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe ff72 	bl	80005b0 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	a34c      	add	r3, pc, #304	; (adr r3, 8001808 <sensor_task+0x170>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7ff f893 	bl	8000804 <__aeabi_ddiv>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4951      	ldr	r1, [pc, #324]	; (8001828 <sensor_task+0x190>)
 80016e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	ftoa(lcdDis.sensorDis.dbSensorStm, (char *)lcdDis.sensorDis.ucSensorStm, 2);
 80016e8:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <sensor_task+0x190>)
 80016ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80016ee:	2302      	movs	r3, #2
 80016f0:	4a4e      	ldr	r2, [pc, #312]	; (800182c <sensor_task+0x194>)
 80016f2:	f7ff fd6f 	bl	80011d4 <ftoa>
	memset((char *)ucDataAds, '\0', strlen((char *)ucDataAds));
 80016f6:	484e      	ldr	r0, [pc, #312]	; (8001830 <sensor_task+0x198>)
 80016f8:	f7fe fd96 	bl	8000228 <strlen>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	484b      	ldr	r0, [pc, #300]	; (8001830 <sensor_task+0x198>)
 8001704:	f004 fcd0 	bl	80060a8 <memset>
	ads_read(ADS1115_CONVERSION_REG, ucDataAds);
 8001708:	4949      	ldr	r1, [pc, #292]	; (8001830 <sensor_task+0x198>)
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fb2a 	bl	8000d64 <ads_read>
	lcdDis.sensorDis.dbSensorAds = ((double)((((uint16_t)ucDataAds[0] << 8) & 0xFF00) | ((uint16_t)ucDataAds[1] & 0x00FF)) * 1.024 / 32767) * 100;
 8001710:	4b47      	ldr	r3, [pc, #284]	; (8001830 <sensor_task+0x198>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b29b      	uxth	r3, r3
 8001718:	4a45      	ldr	r2, [pc, #276]	; (8001830 <sensor_task+0x198>)
 800171a:	7852      	ldrb	r2, [r2, #1]
 800171c:	4313      	orrs	r3, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fedc 	bl	80004dc <__aeabi_i2d>
 8001724:	a33a      	add	r3, pc, #232	; (adr r3, 8001810 <sensor_task+0x178>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff41 	bl	80005b0 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	a338      	add	r3, pc, #224	; (adr r3, 8001818 <sensor_task+0x180>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7ff f862 	bl	8000804 <__aeabi_ddiv>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	4b35      	ldr	r3, [pc, #212]	; (8001824 <sensor_task+0x18c>)
 800174e:	f7fe ff2f 	bl	80005b0 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4934      	ldr	r1, [pc, #208]	; (8001828 <sensor_task+0x190>)
 8001758:	e9c1 2304 	strd	r2, r3, [r1, #16]
	ftoa(lcdDis.sensorDis.dbSensorAds, (char *)lcdDis.sensorDis.ucSensorAds, 2);
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <sensor_task+0x190>)
 800175e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001762:	2302      	movs	r3, #2
 8001764:	4a33      	ldr	r2, [pc, #204]	; (8001834 <sensor_task+0x19c>)
 8001766:	f7ff fd35 	bl	80011d4 <ftoa>
	if (lcdDis.sensorDis.dbSensorStm > lcdDis.cfgDis.dbVal[1])
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <sensor_task+0x190>)
 800176c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <sensor_task+0x190>)
 8001772:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001776:	f7ff f9ab 	bl	8000ad0 <__aeabi_dcmpgt>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d00c      	beq.n	800179a <sensor_task+0x102>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_ON);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001786:	482c      	ldr	r0, [pc, #176]	; (8001838 <sensor_task+0x1a0>)
 8001788:	f001 fdbc 	bl	8003304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_ON);
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <sensor_task+0x1a0>)
 8001794:	f001 fdb6 	bl	8003304 <HAL_GPIO_WritePin>
 8001798:	e00b      	b.n	80017b2 <sensor_task+0x11a>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, LED_OFF);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a0:	4825      	ldr	r0, [pc, #148]	; (8001838 <sensor_task+0x1a0>)
 80017a2:	f001 fdaf 	bl	8003304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, LED_OFF);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017ac:	4822      	ldr	r0, [pc, #136]	; (8001838 <sensor_task+0x1a0>)
 80017ae:	f001 fda9 	bl	8003304 <HAL_GPIO_WritePin>
	}
	if (lcdDis.sensorDis.dbSensorAds > lcdDis.cfgDis.dbVal[1])
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <sensor_task+0x190>)
 80017b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <sensor_task+0x190>)
 80017ba:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80017be:	f7ff f987 	bl	8000ad0 <__aeabi_dcmpgt>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00c      	beq.n	80017e2 <sensor_task+0x14a>
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_ON);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ce:	481a      	ldr	r0, [pc, #104]	; (8001838 <sensor_task+0x1a0>)
 80017d0:	f001 fd98 	bl	8003304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_ON);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017da:	4817      	ldr	r0, [pc, #92]	; (8001838 <sensor_task+0x1a0>)
 80017dc:	f001 fd92 	bl	8003304 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_OFF);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_OFF);
	}
}
 80017e0:	e00b      	b.n	80017fa <sensor_task+0x162>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, LED_OFF);
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <sensor_task+0x1a0>)
 80017ea:	f001 fd8b 	bl	8003304 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, LED_OFF);
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017f4:	4810      	ldr	r0, [pc, #64]	; (8001838 <sensor_task+0x1a0>)
 80017f6:	f001 fd85 	bl	8003304 <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	66666666 	.word	0x66666666
 8001804:	400a6666 	.word	0x400a6666
 8001808:	00000000 	.word	0x00000000
 800180c:	40affe00 	.word	0x40affe00
 8001810:	d2f1a9fc 	.word	0xd2f1a9fc
 8001814:	3ff0624d 	.word	0x3ff0624d
 8001818:	00000000 	.word	0x00000000
 800181c:	40dfffc0 	.word	0x40dfffc0
 8001820:	20000268 	.word	0x20000268
 8001824:	40590000 	.word	0x40590000
 8001828:	20000008 	.word	0x20000008
 800182c:	20000020 	.word	0x20000020
 8001830:	20000314 	.word	0x20000314
 8001834:	2000002a 	.word	0x2000002a
 8001838:	40010800 	.word	0x40010800
 800183c:	00000000 	.word	0x00000000

08001840 <general_task>:

void general_task(void)
{
 8001840:	b598      	push	{r3, r4, r7, lr}
 8001842:	af00      	add	r7, sp, #0
	if (push_button == BUT0_BIT)
 8001844:	4bae      	ldr	r3, [pc, #696]	; (8001b00 <general_task+0x2c0>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10f      	bne.n	800186c <general_task+0x2c>
	{
			lcdDis.cfgDis.bCfg = false;
 800184c:	4bad      	ldr	r3, [pc, #692]	; (8001b04 <general_task+0x2c4>)
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			lcdDis.cfgDis.ucCursor = 0;
 8001854:	4bab      	ldr	r3, [pc, #684]	; (8001b04 <general_task+0x2c4>)
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			lcdDis.ucPage = 1 - lcdDis.ucPage;
 800185c:	4ba9      	ldr	r3, [pc, #676]	; (8001b04 <general_task+0x2c4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	f1c3 0301 	rsb	r3, r3, #1
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4ba7      	ldr	r3, [pc, #668]	; (8001b04 <general_task+0x2c4>)
 8001868:	701a      	strb	r2, [r3, #0]
 800186a:	e1a2      	b.n	8001bb2 <general_task+0x372>
	}
	else if (push_button == BUT1_BIT)
 800186c:	4ba4      	ldr	r3, [pc, #656]	; (8001b00 <general_task+0x2c0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 80b4 	bne.w	80019de <general_task+0x19e>
	{
		if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == false)
 8001876:	4ba3      	ldr	r3, [pc, #652]	; (8001b04 <general_task+0x2c4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d111      	bne.n	80018a2 <general_task+0x62>
 800187e:	4ba1      	ldr	r3, [pc, #644]	; (8001b04 <general_task+0x2c4>)
 8001880:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <general_task+0x62>
		{
			lcdDis.cfgDis.ucCursor = 1 - lcdDis.cfgDis.ucCursor;
 800188e:	4b9d      	ldr	r3, [pc, #628]	; (8001b04 <general_task+0x2c4>)
 8001890:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001894:	f1c3 0301 	rsb	r3, r3, #1
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b9a      	ldr	r3, [pc, #616]	; (8001b04 <general_task+0x2c4>)
 800189c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80018a0:	e187      	b.n	8001bb2 <general_task+0x372>
		}
		else if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == true)
 80018a2:	4b98      	ldr	r3, [pc, #608]	; (8001b04 <general_task+0x2c4>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	f040 8183 	bne.w	8001bb2 <general_task+0x372>
 80018ac:	4b95      	ldr	r3, [pc, #596]	; (8001b04 <general_task+0x2c4>)
 80018ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 817d 	beq.w	8001bb2 <general_task+0x372>
		{
			if (lcdDis.cfgDis.ucCursor == 0)
 80018b8:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <general_task+0x2c4>)
 80018ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d138      	bne.n	8001934 <general_task+0xf4>
			{
				if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 9500)
 80018c2:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <general_task+0x2c4>)
 80018c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018c8:	4a8e      	ldr	r2, [pc, #568]	; (8001b04 <general_task+0x2c4>)
 80018ca:	3307      	adds	r3, #7
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d4:	a386      	add	r3, pc, #536	; (adr r3, 8001af0 <general_task+0x2b0>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7ff f8d1 	bl	8000a80 <__aeabi_dcmpeq>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00c      	beq.n	80018fe <general_task+0xbe>
				{
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 500;
 80018e4:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <general_task+0x2c4>)
 80018e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ea:	4a86      	ldr	r2, [pc, #536]	; (8001b04 <general_task+0x2c4>)
 80018ec:	3307      	adds	r3, #7
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	18d1      	adds	r1, r2, r3
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	4b84      	ldr	r3, [pc, #528]	; (8001b08 <general_task+0x2c8>)
 80018f8:	e9c1 2300 	strd	r2, r3, [r1]
 80018fc:	e057      	b.n	80019ae <general_task+0x16e>
				}
				else
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] += 500;
 80018fe:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <general_task+0x2c4>)
 8001900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001904:	4a7f      	ldr	r2, [pc, #508]	; (8001b04 <general_task+0x2c4>)
 8001906:	3307      	adds	r3, #7
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4413      	add	r3, r2
 800190c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001910:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <general_task+0x2c4>)
 8001912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001916:	461c      	mov	r4, r3
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	4b7a      	ldr	r3, [pc, #488]	; (8001b08 <general_task+0x2c8>)
 800191e:	f7fe fc91 	bl	8000244 <__adddf3>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4877      	ldr	r0, [pc, #476]	; (8001b04 <general_task+0x2c4>)
 8001928:	1de1      	adds	r1, r4, #7
 800192a:	00c9      	lsls	r1, r1, #3
 800192c:	4401      	add	r1, r0
 800192e:	e9c1 2300 	strd	r2, r3, [r1]
 8001932:	e03c      	b.n	80019ae <general_task+0x16e>
			}
			else if(lcdDis.cfgDis.ucCursor == 1)
 8001934:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <general_task+0x2c4>)
 8001936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800193a:	2b01      	cmp	r3, #1
 800193c:	d137      	bne.n	80019ae <general_task+0x16e>
			{
				if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 99)
 800193e:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <general_task+0x2c4>)
 8001940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001944:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <general_task+0x2c4>)
 8001946:	3307      	adds	r3, #7
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4413      	add	r3, r2
 800194c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001950:	a369      	add	r3, pc, #420	; (adr r3, 8001af8 <general_task+0x2b8>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7ff f893 	bl	8000a80 <__aeabi_dcmpeq>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00c      	beq.n	800197a <general_task+0x13a>
				{
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 1;
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <general_task+0x2c4>)
 8001962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001966:	4a67      	ldr	r2, [pc, #412]	; (8001b04 <general_task+0x2c4>)
 8001968:	3307      	adds	r3, #7
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	18d1      	adds	r1, r2, r3
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	4b66      	ldr	r3, [pc, #408]	; (8001b0c <general_task+0x2cc>)
 8001974:	e9c1 2300 	strd	r2, r3, [r1]
 8001978:	e019      	b.n	80019ae <general_task+0x16e>
				}
				else
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] += 1;
 800197a:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <general_task+0x2c4>)
 800197c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001980:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <general_task+0x2c4>)
 8001982:	3307      	adds	r3, #7
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	4413      	add	r3, r2
 8001988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198c:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <general_task+0x2c4>)
 800198e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001992:	461c      	mov	r4, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b5c      	ldr	r3, [pc, #368]	; (8001b0c <general_task+0x2cc>)
 800199a:	f7fe fc53 	bl	8000244 <__adddf3>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4858      	ldr	r0, [pc, #352]	; (8001b04 <general_task+0x2c4>)
 80019a4:	1de1      	adds	r1, r4, #7
 80019a6:	00c9      	lsls	r1, r1, #3
 80019a8:	4401      	add	r1, r0
 80019aa:	e9c1 2300 	strd	r2, r3, [r1]
			}
			ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 80019ae:	4b55      	ldr	r3, [pc, #340]	; (8001b04 <general_task+0x2c4>)
 80019b0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b55      	ldr	r3, [pc, #340]	; (8001b10 <general_task+0x2d0>)
 80019ba:	f7fe ff23 	bl	8000804 <__aeabi_ddiv>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	2301      	movs	r3, #1
 80019c8:	4a52      	ldr	r2, [pc, #328]	; (8001b14 <general_task+0x2d4>)
 80019ca:	f7ff fc03 	bl	80011d4 <ftoa>
			ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <general_task+0x2c4>)
 80019d0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80019d4:	2301      	movs	r3, #1
 80019d6:	4a50      	ldr	r2, [pc, #320]	; (8001b18 <general_task+0x2d8>)
 80019d8:	f7ff fbfc 	bl	80011d4 <ftoa>
 80019dc:	e0e9      	b.n	8001bb2 <general_task+0x372>
		}
	}
	else if (push_button == BUT2_BIT)
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <general_task+0x2c0>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	f040 80cc 	bne.w	8001b80 <general_task+0x340>
	{
		if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == false)
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <general_task+0x2c4>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d111      	bne.n	8001a14 <general_task+0x1d4>
 80019f0:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <general_task+0x2c4>)
 80019f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <general_task+0x1d4>
		{
			lcdDis.cfgDis.ucCursor = 1 - lcdDis.cfgDis.ucCursor;
 8001a00:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <general_task+0x2c4>)
 8001a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a06:	f1c3 0301 	rsb	r3, r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <general_task+0x2c4>)
 8001a0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8001a12:	e0ce      	b.n	8001bb2 <general_task+0x372>
		}
		else if (lcdDis.ucPage == 1 && lcdDis.cfgDis.bCfg == true)
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <general_task+0x2c4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	f040 80ca 	bne.w	8001bb2 <general_task+0x372>
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <general_task+0x2c4>)
 8001a20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80c4 	beq.w	8001bb2 <general_task+0x372>
		{
			if (lcdDis.cfgDis.ucCursor == 0)
 8001a2a:	4b36      	ldr	r3, [pc, #216]	; (8001b04 <general_task+0x2c4>)
 8001a2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d138      	bne.n	8001aa6 <general_task+0x266>
			{
				if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 500)
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <general_task+0x2c4>)
 8001a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a3a:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <general_task+0x2c4>)
 8001a3c:	3307      	adds	r3, #7
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4413      	add	r3, r2
 8001a42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <general_task+0x2c8>)
 8001a4c:	f7ff f818 	bl	8000a80 <__aeabi_dcmpeq>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00c      	beq.n	8001a70 <general_task+0x230>
				{
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 9500;
 8001a56:	4b2b      	ldr	r3, [pc, #172]	; (8001b04 <general_task+0x2c4>)
 8001a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a5c:	4a29      	ldr	r2, [pc, #164]	; (8001b04 <general_task+0x2c4>)
 8001a5e:	3307      	adds	r3, #7
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	18d1      	adds	r1, r2, r3
 8001a64:	a322      	add	r3, pc, #136	; (adr r3, 8001af0 <general_task+0x2b0>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
 8001a6e:	e06f      	b.n	8001b50 <general_task+0x310>
				}
				else
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] -= 500;
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <general_task+0x2c4>)
 8001a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a76:	4a23      	ldr	r2, [pc, #140]	; (8001b04 <general_task+0x2c4>)
 8001a78:	3307      	adds	r3, #7
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <general_task+0x2c4>)
 8001a84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a88:	461c      	mov	r4, r3
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <general_task+0x2c8>)
 8001a90:	f7fe fbd6 	bl	8000240 <__aeabi_dsub>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	481a      	ldr	r0, [pc, #104]	; (8001b04 <general_task+0x2c4>)
 8001a9a:	1de1      	adds	r1, r4, #7
 8001a9c:	00c9      	lsls	r1, r1, #3
 8001a9e:	4401      	add	r1, r0
 8001aa0:	e9c1 2300 	strd	r2, r3, [r1]
 8001aa4:	e054      	b.n	8001b50 <general_task+0x310>
			}
			else if(lcdDis.cfgDis.ucCursor == 1)
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <general_task+0x2c4>)
 8001aa8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d14f      	bne.n	8001b50 <general_task+0x310>
			{
				if(lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] == 1)
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <general_task+0x2c4>)
 8001ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <general_task+0x2c4>)
 8001ab8:	3307      	adds	r3, #7
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	4413      	add	r3, r2
 8001abe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <general_task+0x2cc>)
 8001ac8:	f7fe ffda 	bl	8000a80 <__aeabi_dcmpeq>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d024      	beq.n	8001b1c <general_task+0x2dc>
				{
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] = 99;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <general_task+0x2c4>)
 8001ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad8:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <general_task+0x2c4>)
 8001ada:	3307      	adds	r3, #7
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	18d1      	adds	r1, r2, r3
 8001ae0:	a305      	add	r3, pc, #20	; (adr r3, 8001af8 <general_task+0x2b8>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	e9c1 2300 	strd	r2, r3, [r1]
 8001aea:	e031      	b.n	8001b50 <general_task+0x310>
 8001aec:	f3af 8000 	nop.w
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40c28e00 	.word	0x40c28e00
 8001af8:	00000000 	.word	0x00000000
 8001afc:	4058c000 	.word	0x4058c000
 8001b00:	20000068 	.word	0x20000068
 8001b04:	20000008 	.word	0x20000008
 8001b08:	407f4000 	.word	0x407f4000
 8001b0c:	3ff00000 	.word	0x3ff00000
 8001b10:	408f4000 	.word	0x408f4000
 8001b14:	20000050 	.word	0x20000050
 8001b18:	2000005a 	.word	0x2000005a
				}
				else
					lcdDis.cfgDis.dbVal[lcdDis.cfgDis.ucCursor] -= 1;
 8001b1c:	4b80      	ldr	r3, [pc, #512]	; (8001d20 <general_task+0x4e0>)
 8001b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b22:	4a7f      	ldr	r2, [pc, #508]	; (8001d20 <general_task+0x4e0>)
 8001b24:	3307      	adds	r3, #7
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b2e:	4b7c      	ldr	r3, [pc, #496]	; (8001d20 <general_task+0x4e0>)
 8001b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b34:	461c      	mov	r4, r3
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	4b7a      	ldr	r3, [pc, #488]	; (8001d24 <general_task+0x4e4>)
 8001b3c:	f7fe fb80 	bl	8000240 <__aeabi_dsub>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4876      	ldr	r0, [pc, #472]	; (8001d20 <general_task+0x4e0>)
 8001b46:	1de1      	adds	r1, r4, #7
 8001b48:	00c9      	lsls	r1, r1, #3
 8001b4a:	4401      	add	r1, r0
 8001b4c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 8001b50:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <general_task+0x4e0>)
 8001b52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <general_task+0x4e8>)
 8001b5c:	f7fe fe52 	bl	8000804 <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	2301      	movs	r3, #1
 8001b6a:	4a70      	ldr	r2, [pc, #448]	; (8001d2c <general_task+0x4ec>)
 8001b6c:	f7ff fb32 	bl	80011d4 <ftoa>
			ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 8001b70:	4b6b      	ldr	r3, [pc, #428]	; (8001d20 <general_task+0x4e0>)
 8001b72:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b76:	2301      	movs	r3, #1
 8001b78:	4a6d      	ldr	r2, [pc, #436]	; (8001d30 <general_task+0x4f0>)
 8001b7a:	f7ff fb2b 	bl	80011d4 <ftoa>
 8001b7e:	e018      	b.n	8001bb2 <general_task+0x372>
		}
	}
	else if (push_button == BUT3_BIT)
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <general_task+0x4f4>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d114      	bne.n	8001bb2 <general_task+0x372>
	{
		if (lcdDis.ucPage == 1)
 8001b88:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <general_task+0x4e0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d110      	bne.n	8001bb2 <general_task+0x372>
		{
			lcdDis.cfgDis.bCfg = !lcdDis.cfgDis.bCfg;
 8001b90:	4b63      	ldr	r3, [pc, #396]	; (8001d20 <general_task+0x4e0>)
 8001b92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b5c      	ldr	r3, [pc, #368]	; (8001d20 <general_task+0x4e0>)
 8001bae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		}
	}

	if (ucRxFlag == END_BYTE)
 8001bb2:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <general_task+0x4f8>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	f040 8092 	bne.w	8001ce0 <general_task+0x4a0>
	{
		LOG(TAG, (char *)ucRxBuffer);
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	; (8001d3c <general_task+0x4fc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	495f      	ldr	r1, [pc, #380]	; (8001d40 <general_task+0x500>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fb54 	bl	8001270 <LOG>
		sscanf((char *)ucRxBuffer, "$,%c,%s,*", (char *)&uartCfg.ucType, (char *)uartCfg.ucVal);
 8001bc8:	4b5e      	ldr	r3, [pc, #376]	; (8001d44 <general_task+0x504>)
 8001bca:	4a5f      	ldr	r2, [pc, #380]	; (8001d48 <general_task+0x508>)
 8001bcc:	495f      	ldr	r1, [pc, #380]	; (8001d4c <general_task+0x50c>)
 8001bce:	485c      	ldr	r0, [pc, #368]	; (8001d40 <general_task+0x500>)
 8001bd0:	f004 fb92 	bl	80062f8 <siscanf>
		if (uartCfg.ucType == 'P')
 8001bd4:	4b5c      	ldr	r3, [pc, #368]	; (8001d48 <general_task+0x508>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b50      	cmp	r3, #80	; 0x50
 8001bda:	d140      	bne.n	8001c5e <general_task+0x41e>
		{
			lcdDis.cfgDis.dbVal[0] = atof((char *)uartCfg.ucVal) * 1000;
 8001bdc:	4859      	ldr	r0, [pc, #356]	; (8001d44 <general_task+0x504>)
 8001bde:	f004 f9f5 	bl	8005fcc <atof>
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <general_task+0x4e8>)
 8001be8:	f7fe fce2 	bl	80005b0 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	494b      	ldr	r1, [pc, #300]	; (8001d20 <general_task+0x4e0>)
 8001bf2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			if (lcdDis.cfgDis.dbVal[0] > 9500)
 8001bf6:	4b4a      	ldr	r3, [pc, #296]	; (8001d20 <general_task+0x4e0>)
 8001bf8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bfc:	a344      	add	r3, pc, #272	; (adr r3, 8001d10 <general_task+0x4d0>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe ff65 	bl	8000ad0 <__aeabi_dcmpgt>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <general_task+0x3da>
				lcdDis.cfgDis.dbVal[0] = 9500;
 8001c0c:	4944      	ldr	r1, [pc, #272]	; (8001d20 <general_task+0x4e0>)
 8001c0e:	a340      	add	r3, pc, #256	; (adr r3, 8001d10 <general_task+0x4d0>)
 8001c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c14:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8001c18:	e010      	b.n	8001c3c <general_task+0x3fc>
			else if (lcdDis.cfgDis.dbVal[0] < 500)
 8001c1a:	4b41      	ldr	r3, [pc, #260]	; (8001d20 <general_task+0x4e0>)
 8001c1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <general_task+0x510>)
 8001c26:	f7fe ff35 	bl	8000a94 <__aeabi_dcmplt>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <general_task+0x3fc>
				lcdDis.cfgDis.dbVal[0] = 500;
 8001c30:	493b      	ldr	r1, [pc, #236]	; (8001d20 <general_task+0x4e0>)
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b46      	ldr	r3, [pc, #280]	; (8001d50 <general_task+0x510>)
 8001c38:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			ftoa(lcdDis.cfgDis.dbVal[0] / 1000, (char *)lcdDis.cfgDis.ucVal[0], 1);
 8001c3c:	4b38      	ldr	r3, [pc, #224]	; (8001d20 <general_task+0x4e0>)
 8001c3e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <general_task+0x4e8>)
 8001c48:	f7fe fddc 	bl	8000804 <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	4a35      	ldr	r2, [pc, #212]	; (8001d2c <general_task+0x4ec>)
 8001c58:	f7ff fabc 	bl	80011d4 <ftoa>
 8001c5c:	e035      	b.n	8001cca <general_task+0x48a>
		}
		else if (uartCfg.ucType == 'T')
 8001c5e:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <general_task+0x508>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b54      	cmp	r3, #84	; 0x54
 8001c64:	d131      	bne.n	8001cca <general_task+0x48a>
		{
			lcdDis.cfgDis.dbVal[1] = atof((char *)uartCfg.ucVal);
 8001c66:	4837      	ldr	r0, [pc, #220]	; (8001d44 <general_task+0x504>)
 8001c68:	f004 f9b0 	bl	8005fcc <atof>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	492b      	ldr	r1, [pc, #172]	; (8001d20 <general_task+0x4e0>)
 8001c72:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			if (lcdDis.cfgDis.dbVal[1] > 99)
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <general_task+0x4e0>)
 8001c78:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c7c:	a326      	add	r3, pc, #152	; (adr r3, 8001d18 <general_task+0x4d8>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe ff25 	bl	8000ad0 <__aeabi_dcmpgt>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d006      	beq.n	8001c9a <general_task+0x45a>
				lcdDis.cfgDis.dbVal[1] = 99;
 8001c8c:	4924      	ldr	r1, [pc, #144]	; (8001d20 <general_task+0x4e0>)
 8001c8e:	a322      	add	r3, pc, #136	; (adr r3, 8001d18 <general_task+0x4d8>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8001c98:	e010      	b.n	8001cbc <general_task+0x47c>
			else if (lcdDis.cfgDis.dbVal[1] < 1)
 8001c9a:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <general_task+0x4e0>)
 8001c9c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001ca0:	f04f 0200 	mov.w	r2, #0
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <general_task+0x4e4>)
 8001ca6:	f7fe fef5 	bl	8000a94 <__aeabi_dcmplt>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <general_task+0x47c>
				lcdDis.cfgDis.dbVal[1] = 1;
 8001cb0:	491b      	ldr	r1, [pc, #108]	; (8001d20 <general_task+0x4e0>)
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <general_task+0x4e4>)
 8001cb8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			ftoa(lcdDis.cfgDis.dbVal[1], (char *)lcdDis.cfgDis.ucVal[1], 1);
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <general_task+0x4e0>)
 8001cbe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <general_task+0x4f0>)
 8001cc6:	f7ff fa85 	bl	80011d4 <ftoa>
		}
		ucRxCnt = 0;
 8001cca:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <general_task+0x514>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
		ucRxFlag = START_BYTE;
 8001cd0:	4b19      	ldr	r3, [pc, #100]	; (8001d38 <general_task+0x4f8>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	491f      	ldr	r1, [pc, #124]	; (8001d58 <general_task+0x518>)
 8001cda:	4820      	ldr	r0, [pc, #128]	; (8001d5c <general_task+0x51c>)
 8001cdc:	f003 fd1d 	bl	800571a <HAL_UART_Receive_IT>
	}

	max_n = lcdDis.cfgDis.dbVal[0] / 50;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <general_task+0x4e0>)
 8001ce2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <general_task+0x520>)
 8001cec:	f7fe fd8a 	bl	8000804 <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe ff32 	bl	8000b60 <__aeabi_d2uiz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <general_task+0x524>)
 8001d02:	701a      	strb	r2, [r3, #0]
	push_button = NONE;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <general_task+0x4f4>)
 8001d06:	2204      	movs	r2, #4
 8001d08:	701a      	strb	r2, [r3, #0]

}
 8001d0a:	bf00      	nop
 8001d0c:	bd98      	pop	{r3, r4, r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40c28e00 	.word	0x40c28e00
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	4058c000 	.word	0x4058c000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	3ff00000 	.word	0x3ff00000
 8001d28:	408f4000 	.word	0x408f4000
 8001d2c:	20000050 	.word	0x20000050
 8001d30:	2000005a 	.word	0x2000005a
 8001d34:	20000068 	.word	0x20000068
 8001d38:	2000006b 	.word	0x2000006b
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000334 	.word	0x20000334
 8001d44:	2000032d 	.word	0x2000032d
 8001d48:	2000032c 	.word	0x2000032c
 8001d4c:	0800a98c 	.word	0x0800a98c
 8001d50:	407f4000 	.word	0x407f4000
 8001d54:	20000348 	.word	0x20000348
 8001d58:	20000332 	.word	0x20000332
 8001d5c:	200003e0 	.word	0x200003e0
 8001d60:	40490000 	.word	0x40490000
 8001d64:	2000006a 	.word	0x2000006a

08001d68 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_12)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d78:	d103      	bne.n	8001d82 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		push_button = BUT0_BIT;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_GPIO_EXTI_Callback+0x54>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == GPIO_PIN_15)
	{
		push_button = BUT3_BIT;
	}
}
 8001d80:	e016      	b.n	8001db0 <HAL_GPIO_EXTI_Callback+0x48>
	else if (GPIO_Pin == GPIO_PIN_13)
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d88:	d103      	bne.n	8001d92 <HAL_GPIO_EXTI_Callback+0x2a>
		push_button = BUT1_BIT;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_GPIO_EXTI_Callback+0x54>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
}
 8001d90:	e00e      	b.n	8001db0 <HAL_GPIO_EXTI_Callback+0x48>
	else if (GPIO_Pin == GPIO_PIN_14)
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d98:	d103      	bne.n	8001da2 <HAL_GPIO_EXTI_Callback+0x3a>
		push_button = BUT2_BIT;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_GPIO_EXTI_Callback+0x54>)
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	701a      	strb	r2, [r3, #0]
}
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_EXTI_Callback+0x48>
	else if (GPIO_Pin == GPIO_PIN_15)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da8:	d102      	bne.n	8001db0 <HAL_GPIO_EXTI_Callback+0x48>
		push_button = BUT3_BIT;
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_GPIO_EXTI_Callback+0x54>)
 8001dac:	2203      	movs	r2, #3
 8001dae:	701a      	strb	r2, [r3, #0]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000068 	.word	0x20000068

08001dc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	if(ucRxData == '$')
 8001dc8:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b24      	cmp	r3, #36	; 0x24
 8001dce:	d115      	bne.n	8001dfc <HAL_UART_RxCpltCallback+0x3c>
	{
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
 8001dd0:	482b      	ldr	r0, [pc, #172]	; (8001e80 <HAL_UART_RxCpltCallback+0xc0>)
 8001dd2:	f7fe fa29 	bl	8000228 <strlen>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4828      	ldr	r0, [pc, #160]	; (8001e80 <HAL_UART_RxCpltCallback+0xc0>)
 8001dde:	f004 f963 	bl	80060a8 <memset>
		ucRxBuffer[0] = ucRxData;
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_UART_RxCpltCallback+0xc0>)
 8001de8:	701a      	strb	r2, [r3, #0]
		ucRxFlag = START_BYTE;
 8001dea:	4b26      	ldr	r3, [pc, #152]	; (8001e84 <HAL_UART_RxCpltCallback+0xc4>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001df0:	2201      	movs	r2, #1
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001df4:	4824      	ldr	r0, [pc, #144]	; (8001e88 <HAL_UART_RxCpltCallback+0xc8>)
 8001df6:	f003 fc90 	bl	800571a <HAL_UART_Receive_IT>
		ucRxFlag = ERROR_FRAME;
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
		ucRxCnt = 0;
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
	}
}
 8001dfa:	e03b      	b.n	8001e74 <HAL_UART_RxCpltCallback+0xb4>
	else if (ucRxFlag == START_BYTE && ucRxCnt < 20)
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_UART_RxCpltCallback+0xc4>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d11e      	bne.n	8001e42 <HAL_UART_RxCpltCallback+0x82>
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_UART_RxCpltCallback+0xcc>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b13      	cmp	r3, #19
 8001e0a:	d81a      	bhi.n	8001e42 <HAL_UART_RxCpltCallback+0x82>
		ucRxBuffer[++ucRxCnt] = ucRxData;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_UART_RxCpltCallback+0xcc>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_UART_RxCpltCallback+0xcc>)
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_UART_RxCpltCallback+0xcc>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001e20:	7819      	ldrb	r1, [r3, #0]
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_UART_RxCpltCallback+0xc0>)
 8001e24:	5499      	strb	r1, [r3, r2]
		if (ucRxData == '*')
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8001e2c:	d103      	bne.n	8001e36 <HAL_UART_RxCpltCallback+0x76>
			ucRxFlag = END_BYTE;
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <HAL_UART_RxCpltCallback+0xc4>)
 8001e30:	2202      	movs	r2, #2
 8001e32:	701a      	strb	r2, [r3, #0]
		if (ucRxData == '*')
 8001e34:	e01e      	b.n	8001e74 <HAL_UART_RxCpltCallback+0xb4>
			HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001e36:	2201      	movs	r2, #1
 8001e38:	4910      	ldr	r1, [pc, #64]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001e3a:	4813      	ldr	r0, [pc, #76]	; (8001e88 <HAL_UART_RxCpltCallback+0xc8>)
 8001e3c:	f003 fc6d 	bl	800571a <HAL_UART_Receive_IT>
		if (ucRxData == '*')
 8001e40:	e018      	b.n	8001e74 <HAL_UART_RxCpltCallback+0xb4>
	else if (ucRxCnt == UART_BUFFER_LEN)
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_UART_RxCpltCallback+0xcc>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b14      	cmp	r3, #20
 8001e48:	d114      	bne.n	8001e74 <HAL_UART_RxCpltCallback+0xb4>
		ucRxFlag = ERROR_FRAME;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_UART_RxCpltCallback+0xc4>)
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	701a      	strb	r2, [r3, #0]
		memset((char *)ucRxBuffer, 0, strlen((char *)ucRxBuffer));
 8001e50:	480b      	ldr	r0, [pc, #44]	; (8001e80 <HAL_UART_RxCpltCallback+0xc0>)
 8001e52:	f7fe f9e9 	bl	8000228 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4808      	ldr	r0, [pc, #32]	; (8001e80 <HAL_UART_RxCpltCallback+0xc0>)
 8001e5e:	f004 f923 	bl	80060a8 <memset>
		ucRxCnt = 0;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_UART_RxCpltCallback+0xcc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &ucRxData, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4904      	ldr	r1, [pc, #16]	; (8001e7c <HAL_UART_RxCpltCallback+0xbc>)
 8001e6c:	4806      	ldr	r0, [pc, #24]	; (8001e88 <HAL_UART_RxCpltCallback+0xc8>)
 8001e6e:	f003 fc54 	bl	800571a <HAL_UART_Receive_IT>
}
 8001e72:	e7ff      	b.n	8001e74 <HAL_UART_RxCpltCallback+0xb4>
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000332 	.word	0x20000332
 8001e80:	20000334 	.word	0x20000334
 8001e84:	2000006b 	.word	0x2000006b
 8001e88:	200003e0 	.word	0x200003e0
 8001e8c:	20000348 	.word	0x20000348

08001e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a04      	ldr	r2, [pc, #16]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ea2:	f000 faf9 	bl	8002498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <Error_Handler+0x8>
	...

08001ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	4a14      	ldr	r2, [pc, #80]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6193      	str	r3, [r2, #24]
 8001ed2:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <HAL_MspInit+0x5c>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	61d3      	str	r3, [r2, #28]
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_MspInit+0x5c>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_MspInit+0x60>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_MspInit+0x60>)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010000 	.word	0x40010000

08001f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_InitTick+0xd0>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <HAL_InitTick+0xd0>)
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f44:	6193      	str	r3, [r2, #24]
 8001f46:	4b2b      	ldr	r3, [pc, #172]	; (8001ff4 <HAL_InitTick+0xd0>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f52:	f107 020c 	add.w	r2, r7, #12
 8001f56:	f107 0310 	add.w	r3, r7, #16
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f002 fdcb 	bl	8004af8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001f62:	f002 fdb5 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8001f66:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	4a23      	ldr	r2, [pc, #140]	; (8001ff8 <HAL_InitTick+0xd4>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	3b01      	subs	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f78:	4a21      	ldr	r2, [pc, #132]	; (8002000 <HAL_InitTick+0xdc>)
 8001f7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f82:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f84:	4a1d      	ldr	r2, [pc, #116]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f96:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f9c:	4817      	ldr	r0, [pc, #92]	; (8001ffc <HAL_InitTick+0xd8>)
 8001f9e:	f002 feaf 	bl	8004d00 <HAL_TIM_Base_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11b      	bne.n	8001fe8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fb0:	4812      	ldr	r0, [pc, #72]	; (8001ffc <HAL_InitTick+0xd8>)
 8001fb2:	f002 fef5 	bl	8004da0 <HAL_TIM_Base_Start_IT>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d111      	bne.n	8001fe8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001fc4:	2019      	movs	r0, #25
 8001fc6:	f000 feb8 	bl	8002d3a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d808      	bhi.n	8001fe2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	2019      	movs	r0, #25
 8001fd6:	f000 fe94 	bl	8002d02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fda:	4a0a      	ldr	r2, [pc, #40]	; (8002004 <HAL_InitTick+0xe0>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e002      	b.n	8001fe8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3730      	adds	r7, #48	; 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	431bde83 	.word	0x431bde83
 8001ffc:	2000034c 	.word	0x2000034c
 8002000:	40012c00 	.word	0x40012c00
 8002004:	20000070 	.word	0x20000070

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800200c:	e7fe      	b.n	800200c <NMI_Handler+0x4>

0800200e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <HardFault_Handler+0x4>

08002014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <MemManage_Handler+0x4>

0800201a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201e:	e7fe      	b.n	800201e <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <UsageFault_Handler+0x4>

08002026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
	...

08002058 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <TIM1_UP_IRQHandler+0x10>)
 800205e:	f002 feff 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000034c 	.word	0x2000034c

0800206c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <TIM2_IRQHandler+0x10>)
 8002072:	f002 fef5 	bl	8004e60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000398 	.word	0x20000398

08002080 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002084:	4802      	ldr	r0, [pc, #8]	; (8002090 <USART2_IRQHandler+0x10>)
 8002086:	f003 fb79 	bl	800577c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200003e0 	.word	0x200003e0

08002094 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002098:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800209c:	f001 f94a 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020a4:	f001 f946 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80020a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020ac:	f001 f942 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80020b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020b4:	f001 f93e 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <_kill>:

int _kill(int pid, int sig)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d4:	f003 ff86 	bl	8005fe4 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	2216      	movs	r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
  return -1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_exit>:

void _exit (int status)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b082      	sub	sp, #8
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f2:	f04f 31ff 	mov.w	r1, #4294967295
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffe7 	bl	80020ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fc:	e7fe      	b.n	80020fc <_exit+0x12>

080020fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e00a      	b.n	8002126 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002110:	f3af 8000 	nop.w
 8002114:	4601      	mov	r1, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	60ba      	str	r2, [r7, #8]
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbf0      	blt.n	8002110 <_read+0x12>
  }

  return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e009      	b.n	800215e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf1      	blt.n	800214a <_write+0x12>
  }
  return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_close>:

int _close(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002196:	605a      	str	r2, [r3, #4]
  return 0;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <_isatty>:

int _isatty(int file)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr

080021b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002200:	f003 fef0 	bl	8005fe4 <__errno>
 8002204:	4603      	mov	r3, r0
 8002206:	220c      	movs	r2, #12
 8002208:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	2000c000 	.word	0x2000c000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000394 	.word	0x20000394
 8002238:	20000438 	.word	0x20000438

0800223c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002264:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <MX_TIM2_Init+0x94>)
 8002266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800226a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <MX_TIM2_Init+0x94>)
 800226e:	2200      	movs	r2, #0
 8002270:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_TIM2_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_TIM2_Init+0x94>)
 800227a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_TIM2_Init+0x94>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_TIM2_Init+0x94>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800228c:	4813      	ldr	r0, [pc, #76]	; (80022dc <MX_TIM2_Init+0x94>)
 800228e:	f002 fd37 	bl	8004d00 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002298:	f7ff fe0c 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <MX_TIM2_Init+0x94>)
 80022aa:	f002 fee1 	bl	8005070 <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022b4:	f7ff fdfe 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_TIM2_Init+0x94>)
 80022c6:	f003 f8cb 	bl	8005460 <HAL_TIMEx_MasterConfigSynchronization>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80022d0:	f7ff fdf0 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000398 	.word	0x20000398

080022e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d113      	bne.n	800231a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_TIM_Base_MspInit+0x44>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_TIM_Base_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_TIM_Base_MspInit+0x44>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	201c      	movs	r0, #28
 8002310:	f000 fcf7 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002314:	201c      	movs	r0, #28
 8002316:	f000 fd10 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000

08002328 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <MX_USART2_UART_Init+0x50>)
 8002330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 8002334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 8002342:	2200      	movs	r2, #0
 8002344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 800234e:	220c      	movs	r2, #12
 8002350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_USART2_UART_Init+0x4c>)
 8002360:	f003 f8fc 	bl	800555c <HAL_UART_Init>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800236a:	f7ff fda3 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200003e0 	.word	0x200003e0
 8002378:	40004400 	.word	0x40004400

0800237c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <HAL_UART_MspInit+0x98>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d137      	bne.n	800240c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_UART_MspInit+0x9c>)
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_UART_MspInit+0x9c>)
 80023a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a6:	61d3      	str	r3, [r2, #28]
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_UART_MspInit+0x9c>)
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_UART_MspInit+0x9c>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_UART_MspInit+0x9c>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6193      	str	r3, [r2, #24]
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_UART_MspInit+0x9c>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023cc:	2304      	movs	r3, #4
 80023ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d0:	2302      	movs	r3, #2
 80023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d8:	f107 0310 	add.w	r3, r7, #16
 80023dc:	4619      	mov	r1, r3
 80023de:	480f      	ldr	r0, [pc, #60]	; (800241c <HAL_UART_MspInit+0xa0>)
 80023e0:	f000 fdfc 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023e4:	2308      	movs	r3, #8
 80023e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	4619      	mov	r1, r3
 80023f6:	4809      	ldr	r0, [pc, #36]	; (800241c <HAL_UART_MspInit+0xa0>)
 80023f8:	f000 fdf0 	bl	8002fdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	2026      	movs	r0, #38	; 0x26
 8002402:	f000 fc7e 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002406:	2026      	movs	r0, #38	; 0x26
 8002408:	f000 fc97 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40004400 	.word	0x40004400
 8002418:	40021000 	.word	0x40021000
 800241c:	40010800 	.word	0x40010800

08002420 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002438:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002446:	f7ff fef9 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f003 fdd1 	bl	8005ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244e:	f7fe ff3b 	bl	80012c8 <main>
  bx lr
 8002452:	4770      	bx	lr
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 800245c:	0800ae78 	.word	0x0800ae78
  ldr r2, =_sbss
 8002460:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 8002464:	20000438 	.word	0x20000438

08002468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_2_IRQHandler>
	...

0800246c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_Init+0x28>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <HAL_Init+0x28>)
 8002476:	f043 0310 	orr.w	r3, r3, #16
 800247a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247c:	2003      	movs	r0, #3
 800247e:	f000 fc35 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002482:	200f      	movs	r0, #15
 8002484:	f7ff fd4e 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002488:	f7ff fd1a 	bl	8001ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000

08002498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_IncTick+0x1c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b05      	ldr	r3, [pc, #20]	; (80024b8 <HAL_IncTick+0x20>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a03      	ldr	r2, [pc, #12]	; (80024b8 <HAL_IncTick+0x20>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	20000074 	.word	0x20000074
 80024b8:	20000424 	.word	0x20000424

080024bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return uwTick;
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <HAL_GetTick+0x10>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	20000424 	.word	0x20000424

080024d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d8:	f7ff fff0 	bl	80024bc <HAL_GetTick>
 80024dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e8:	d005      	beq.n	80024f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_Delay+0x44>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f6:	bf00      	nop
 80024f8:	f7ff ffe0 	bl	80024bc <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	429a      	cmp	r2, r3
 8002506:	d8f7      	bhi.n	80024f8 <HAL_Delay+0x28>
  {
  }
}
 8002508:	bf00      	nop
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000074 	.word	0x20000074

08002518 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0ce      	b.n	80026d8 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7fe fb98 	bl	8000c8c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fad9 	bl	8002b14 <ADC_ConversionStop_Disable>
 8002562:	4603      	mov	r3, r0
 8002564:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 80a9 	bne.w	80026c6 <HAL_ADC_Init+0x1ae>
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80a5 	bne.w	80026c6 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002584:	f023 0302 	bic.w	r3, r3, #2
 8002588:	f043 0202 	orr.w	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4951      	ldr	r1, [pc, #324]	; (80026e0 <HAL_ADC_Init+0x1c8>)
 800259a:	428b      	cmp	r3, r1
 800259c:	d10a      	bne.n	80025b4 <HAL_ADC_Init+0x9c>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80025a6:	d002      	beq.n	80025ae <HAL_ADC_Init+0x96>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	e004      	b.n	80025b8 <HAL_ADC_Init+0xa0>
 80025ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80025b2:	e001      	b.n	80025b8 <HAL_ADC_Init+0xa0>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	7b1b      	ldrb	r3, [r3, #12]
 80025be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	d003      	beq.n	80025da <HAL_ADC_Init+0xc2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d102      	bne.n	80025e0 <HAL_ADC_Init+0xc8>
 80025da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025de:	e000      	b.n	80025e2 <HAL_ADC_Init+0xca>
 80025e0:	2300      	movs	r3, #0
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	7d1b      	ldrb	r3, [r3, #20]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d119      	bne.n	8002624 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7b1b      	ldrb	r3, [r3, #12]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	035a      	lsls	r2, r3, #13
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	e00b      	b.n	8002624 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f043 0220 	orr.w	r2, r3, #32
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	430a      	orrs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	4b29      	ldr	r3, [pc, #164]	; (80026e4 <HAL_ADC_Init+0x1cc>)
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	430b      	orrs	r3, r1
 800264a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002654:	d003      	beq.n	800265e <HAL_ADC_Init+0x146>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d104      	bne.n	8002668 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	3b01      	subs	r3, #1
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	430a      	orrs	r2, r1
 800267a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_ADC_Init+0x1d0>)
 8002684:	4013      	ands	r3, r2
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	429a      	cmp	r2, r3
 800268a:	d10b      	bne.n	80026a4 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	f023 0303 	bic.w	r3, r3, #3
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026a2:	e018      	b.n	80026d6 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	f023 0312 	bic.w	r3, r3, #18
 80026ac:	f043 0210 	orr.w	r2, r3, #16
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026c4:	e007      	b.n	80026d6 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f043 0210 	orr.w	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3718      	adds	r7, #24
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40013c00 	.word	0x40013c00
 80026e4:	ffe1f7fd 	.word	0xffe1f7fd
 80026e8:	ff1f0efe 	.word	0xff1f0efe

080026ec <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_ADC_Start_IT+0x1a>
 8002702:	2302      	movs	r3, #2
 8002704:	e0a0      	b.n	8002848 <HAL_ADC_Start_IT+0x15c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9a6 	bl	8002a60 <ADC_Enable>
 8002714:	4603      	mov	r3, r0
 8002716:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 808f 	bne.w	800283e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a45      	ldr	r2, [pc, #276]	; (8002850 <HAL_ADC_Start_IT+0x164>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d105      	bne.n	800274a <HAL_ADC_Start_IT+0x5e>
 800273e:	4b45      	ldr	r3, [pc, #276]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d026      	beq.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800276c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002774:	e01d      	b.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a33      	ldr	r2, [pc, #204]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_ADC_Start_IT+0xaa>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2f      	ldr	r2, [pc, #188]	; (8002850 <HAL_ADC_Start_IT+0x164>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10d      	bne.n	80027b2 <HAL_ADC_Start_IT+0xc6>
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f023 0206 	bic.w	r2, r3, #6
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80027ca:	e002      	b.n	80027d2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f06f 0202 	mvn.w	r2, #2
 80027e2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0220 	orr.w	r2, r2, #32
 80027f2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80027fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002802:	d113      	bne.n	800282c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002808:	4a11      	ldr	r2, [pc, #68]	; (8002850 <HAL_ADC_Start_IT+0x164>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d105      	bne.n	800281a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800280e:	4b11      	ldr	r3, [pc, #68]	; (8002854 <HAL_ADC_Start_IT+0x168>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d108      	bne.n	800282c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00c      	b.n	8002846 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e003      	b.n	8002846 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40012800 	.word	0x40012800
 8002854:	40012400 	.word	0x40012400

08002858 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x20>
 800288c:	2302      	movs	r3, #2
 800288e:	e0dc      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x1da>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b06      	cmp	r3, #6
 800289e:	d81c      	bhi.n	80028da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	3b05      	subs	r3, #5
 80028b2:	221f      	movs	r2, #31
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	4019      	ands	r1, r3
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	3b05      	subs	r3, #5
 80028cc:	fa00 f203 	lsl.w	r2, r0, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
 80028d8:	e03c      	b.n	8002954 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b0c      	cmp	r3, #12
 80028e0:	d81c      	bhi.n	800291c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b23      	subs	r3, #35	; 0x23
 80028f4:	221f      	movs	r2, #31
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	4019      	ands	r1, r3
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	3b23      	subs	r3, #35	; 0x23
 800290e:	fa00 f203 	lsl.w	r2, r0, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
 800291a:	e01b      	b.n	8002954 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	3b41      	subs	r3, #65	; 0x41
 800292e:	221f      	movs	r2, #31
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	4019      	ands	r1, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b41      	subs	r3, #65	; 0x41
 8002948:	fa00 f203 	lsl.w	r2, r0, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b09      	cmp	r3, #9
 800295a:	d91c      	bls.n	8002996 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	3b1e      	subs	r3, #30
 800296e:	2207      	movs	r2, #7
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	4019      	ands	r1, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6898      	ldr	r0, [r3, #8]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	3b1e      	subs	r3, #30
 8002988:	fa00 f203 	lsl.w	r2, r0, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	e019      	b.n	80029ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	6919      	ldr	r1, [r3, #16]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	2207      	movs	r2, #7
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	4019      	ands	r1, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	6898      	ldr	r0, [r3, #8]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	fa00 f203 	lsl.w	r2, r0, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d003      	beq.n	80029da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80029d6:	2b11      	cmp	r3, #17
 80029d8:	d132      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_ADC_ConfigChannel+0x1e4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d125      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d126      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b10      	cmp	r3, #16
 8002a08:	d11a      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a13      	ldr	r2, [pc, #76]	; (8002a5c <HAL_ADC_ConfigChannel+0x1ec>)
 8002a10:	fba2 2303 	umull	r2, r3, r2, r3
 8002a14:	0c9a      	lsrs	r2, r3, #18
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a20:	e002      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f9      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x1b2>
 8002a2e:	e007      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f043 0220 	orr.w	r2, r3, #32
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012400 	.word	0x40012400
 8002a58:	2000006c 	.word	0x2000006c
 8002a5c:	431bde83 	.word	0x431bde83

08002a60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d040      	beq.n	8002b00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0201 	orr.w	r2, r2, #1
 8002a8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <ADC_Enable+0xac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1f      	ldr	r2, [pc, #124]	; (8002b10 <ADC_Enable+0xb0>)
 8002a94:	fba2 2303 	umull	r2, r3, r2, r3
 8002a98:	0c9b      	lsrs	r3, r3, #18
 8002a9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002a9c:	e002      	b.n	8002aa4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aaa:	f7ff fd07 	bl	80024bc <HAL_GetTick>
 8002aae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ab0:	e01f      	b.n	8002af2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ab2:	f7ff fd03 	bl	80024bc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d918      	bls.n	8002af2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d011      	beq.n	8002af2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e007      	b.n	8002b02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d1d8      	bne.n	8002ab2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000006c 	.word	0x2000006c
 8002b10:	431bde83 	.word	0x431bde83

08002b14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d12e      	bne.n	8002b8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b3e:	f7ff fcbd 	bl	80024bc <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b44:	e01b      	b.n	8002b7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b46:	f7ff fcb9 	bl	80024bc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d914      	bls.n	8002b7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d10d      	bne.n	8002b7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d0dc      	beq.n	8002b46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	; (8002bdc <__NVIC_SetPriorityGrouping+0x44>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	0a1b      	lsrs	r3, r3, #8
 8002bea:	f003 0307 	and.w	r3, r3, #7
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	db0b      	blt.n	8002c26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	f003 021f 	and.w	r2, r3, #31
 8002c14:	4906      	ldr	r1, [pc, #24]	; (8002c30 <__NVIC_EnableIRQ+0x34>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff4f 	bl	8002b98 <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff64 	bl	8002be0 <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ffb2 	bl	8002c88 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff81 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff57 	bl	8002bfc <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b085      	sub	sp, #20
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d008      	beq.n	8002d7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2204      	movs	r2, #4
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e020      	b.n	8002dc0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 020e 	bic.w	r2, r2, #14
 8002d8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f022 0201 	bic.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d005      	beq.n	8002dee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e0d6      	b.n	8002f9c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 020e 	bic.w	r2, r2, #14
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b64      	ldr	r3, [pc, #400]	; (8002fa8 <HAL_DMA_Abort_IT+0x1dc>)
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d958      	bls.n	8002ecc <HAL_DMA_Abort_IT+0x100>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <HAL_DMA_Abort_IT+0x1e0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04f      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0xf8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <HAL_DMA_Abort_IT+0x1e4>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d048      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0xf4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a60      	ldr	r2, [pc, #384]	; (8002fb4 <HAL_DMA_Abort_IT+0x1e8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d040      	beq.n	8002eba <HAL_DMA_Abort_IT+0xee>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5e      	ldr	r2, [pc, #376]	; (8002fb8 <HAL_DMA_Abort_IT+0x1ec>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d038      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0xe8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5d      	ldr	r2, [pc, #372]	; (8002fbc <HAL_DMA_Abort_IT+0x1f0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d030      	beq.n	8002eae <HAL_DMA_Abort_IT+0xe2>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5b      	ldr	r2, [pc, #364]	; (8002fc0 <HAL_DMA_Abort_IT+0x1f4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d028      	beq.n	8002ea8 <HAL_DMA_Abort_IT+0xdc>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a53      	ldr	r2, [pc, #332]	; (8002fa8 <HAL_DMA_Abort_IT+0x1dc>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d020      	beq.n	8002ea2 <HAL_DMA_Abort_IT+0xd6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_DMA_Abort_IT+0x1f8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d019      	beq.n	8002e9e <HAL_DMA_Abort_IT+0xd2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a56      	ldr	r2, [pc, #344]	; (8002fc8 <HAL_DMA_Abort_IT+0x1fc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d012      	beq.n	8002e9a <HAL_DMA_Abort_IT+0xce>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a54      	ldr	r2, [pc, #336]	; (8002fcc <HAL_DMA_Abort_IT+0x200>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00a      	beq.n	8002e94 <HAL_DMA_Abort_IT+0xc8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a53      	ldr	r2, [pc, #332]	; (8002fd0 <HAL_DMA_Abort_IT+0x204>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d102      	bne.n	8002e8e <HAL_DMA_Abort_IT+0xc2>
 8002e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8c:	e01b      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e92:	e018      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e98:	e015      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002e9a:	2310      	movs	r3, #16
 8002e9c:	e013      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e011      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea6:	e00e      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002ea8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002eac:	e00b      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002eae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb2:	e008      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb8:	e005      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebe:	e002      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002ec0:	2310      	movs	r3, #16
 8002ec2:	e000      	b.n	8002ec6 <HAL_DMA_Abort_IT+0xfa>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	4a43      	ldr	r2, [pc, #268]	; (8002fd4 <HAL_DMA_Abort_IT+0x208>)
 8002ec8:	6053      	str	r3, [r2, #4]
 8002eca:	e057      	b.n	8002f7c <HAL_DMA_Abort_IT+0x1b0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a36      	ldr	r2, [pc, #216]	; (8002fac <HAL_DMA_Abort_IT+0x1e0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04f      	beq.n	8002f76 <HAL_DMA_Abort_IT+0x1aa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a35      	ldr	r2, [pc, #212]	; (8002fb0 <HAL_DMA_Abort_IT+0x1e4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d048      	beq.n	8002f72 <HAL_DMA_Abort_IT+0x1a6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a33      	ldr	r2, [pc, #204]	; (8002fb4 <HAL_DMA_Abort_IT+0x1e8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d040      	beq.n	8002f6c <HAL_DMA_Abort_IT+0x1a0>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a32      	ldr	r2, [pc, #200]	; (8002fb8 <HAL_DMA_Abort_IT+0x1ec>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d038      	beq.n	8002f66 <HAL_DMA_Abort_IT+0x19a>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a30      	ldr	r2, [pc, #192]	; (8002fbc <HAL_DMA_Abort_IT+0x1f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d030      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x194>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2f      	ldr	r2, [pc, #188]	; (8002fc0 <HAL_DMA_Abort_IT+0x1f4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d028      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x18e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a26      	ldr	r2, [pc, #152]	; (8002fa8 <HAL_DMA_Abort_IT+0x1dc>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d020      	beq.n	8002f54 <HAL_DMA_Abort_IT+0x188>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2b      	ldr	r2, [pc, #172]	; (8002fc4 <HAL_DMA_Abort_IT+0x1f8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d019      	beq.n	8002f50 <HAL_DMA_Abort_IT+0x184>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_DMA_Abort_IT+0x1fc>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d012      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x180>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a28      	ldr	r2, [pc, #160]	; (8002fcc <HAL_DMA_Abort_IT+0x200>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d00a      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x17a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a26      	ldr	r2, [pc, #152]	; (8002fd0 <HAL_DMA_Abort_IT+0x204>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d102      	bne.n	8002f40 <HAL_DMA_Abort_IT+0x174>
 8002f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3e:	e01b      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f44:	e018      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f4a:	e015      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f4c:	2310      	movs	r3, #16
 8002f4e:	e013      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e011      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f58:	e00e      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f5a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f5e:	e00b      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f64:	e008      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f6a:	e005      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f70:	e002      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f72:	2310      	movs	r3, #16
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_Abort_IT+0x1ac>
 8002f76:	2301      	movs	r3, #1
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_DMA_Abort_IT+0x20c>)
 8002f7a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
    } 
  }
  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40020080 	.word	0x40020080
 8002fac:	40020008 	.word	0x40020008
 8002fb0:	4002001c 	.word	0x4002001c
 8002fb4:	40020030 	.word	0x40020030
 8002fb8:	40020044 	.word	0x40020044
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	4002006c 	.word	0x4002006c
 8002fc4:	40020408 	.word	0x40020408
 8002fc8:	4002041c 	.word	0x4002041c
 8002fcc:	40020430 	.word	0x40020430
 8002fd0:	40020444 	.word	0x40020444
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020000 	.word	0x40020000

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b08b      	sub	sp, #44	; 0x2c
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fea:	2300      	movs	r3, #0
 8002fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	e179      	b.n	80032e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	429a      	cmp	r2, r3
 800300a:	f040 8168 	bne.w	80032de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a96      	ldr	r2, [pc, #600]	; (800326c <HAL_GPIO_Init+0x290>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d05e      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003018:	4a94      	ldr	r2, [pc, #592]	; (800326c <HAL_GPIO_Init+0x290>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d875      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800301e:	4a94      	ldr	r2, [pc, #592]	; (8003270 <HAL_GPIO_Init+0x294>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d058      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003024:	4a92      	ldr	r2, [pc, #584]	; (8003270 <HAL_GPIO_Init+0x294>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d86f      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800302a:	4a92      	ldr	r2, [pc, #584]	; (8003274 <HAL_GPIO_Init+0x298>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d052      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003030:	4a90      	ldr	r2, [pc, #576]	; (8003274 <HAL_GPIO_Init+0x298>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d869      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003036:	4a90      	ldr	r2, [pc, #576]	; (8003278 <HAL_GPIO_Init+0x29c>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d04c      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 800303c:	4a8e      	ldr	r2, [pc, #568]	; (8003278 <HAL_GPIO_Init+0x29c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d863      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003042:	4a8e      	ldr	r2, [pc, #568]	; (800327c <HAL_GPIO_Init+0x2a0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d046      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
 8003048:	4a8c      	ldr	r2, [pc, #560]	; (800327c <HAL_GPIO_Init+0x2a0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d85d      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 800304e:	2b12      	cmp	r3, #18
 8003050:	d82a      	bhi.n	80030a8 <HAL_GPIO_Init+0xcc>
 8003052:	2b12      	cmp	r3, #18
 8003054:	d859      	bhi.n	800310a <HAL_GPIO_Init+0x12e>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <HAL_GPIO_Init+0x80>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	080030d7 	.word	0x080030d7
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030c3 	.word	0x080030c3
 8003068:	08003105 	.word	0x08003105
 800306c:	0800310b 	.word	0x0800310b
 8003070:	0800310b 	.word	0x0800310b
 8003074:	0800310b 	.word	0x0800310b
 8003078:	0800310b 	.word	0x0800310b
 800307c:	0800310b 	.word	0x0800310b
 8003080:	0800310b 	.word	0x0800310b
 8003084:	0800310b 	.word	0x0800310b
 8003088:	0800310b 	.word	0x0800310b
 800308c:	0800310b 	.word	0x0800310b
 8003090:	0800310b 	.word	0x0800310b
 8003094:	0800310b 	.word	0x0800310b
 8003098:	0800310b 	.word	0x0800310b
 800309c:	0800310b 	.word	0x0800310b
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	4a75      	ldr	r2, [pc, #468]	; (8003280 <HAL_GPIO_Init+0x2a4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ae:	e02c      	b.n	800310a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e029      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	3304      	adds	r3, #4
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e024      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	3308      	adds	r3, #8
 80030c8:	623b      	str	r3, [r7, #32]
          break;
 80030ca:	e01f      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	330c      	adds	r3, #12
 80030d2:	623b      	str	r3, [r7, #32]
          break;
 80030d4:	e01a      	b.n	800310c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030de:	2304      	movs	r3, #4
 80030e0:	623b      	str	r3, [r7, #32]
          break;
 80030e2:	e013      	b.n	800310c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030ec:	2308      	movs	r3, #8
 80030ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	611a      	str	r2, [r3, #16]
          break;
 80030f6:	e009      	b.n	800310c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	615a      	str	r2, [r3, #20]
          break;
 8003102:	e003      	b.n	800310c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003104:	2300      	movs	r3, #0
 8003106:	623b      	str	r3, [r7, #32]
          break;
 8003108:	e000      	b.n	800310c <HAL_GPIO_Init+0x130>
          break;
 800310a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2bff      	cmp	r3, #255	; 0xff
 8003110:	d801      	bhi.n	8003116 <HAL_GPIO_Init+0x13a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	e001      	b.n	800311a <HAL_GPIO_Init+0x13e>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3304      	adds	r3, #4
 800311a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2bff      	cmp	r3, #255	; 0xff
 8003120:	d802      	bhi.n	8003128 <HAL_GPIO_Init+0x14c>
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x152>
 8003128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312a:	3b08      	subs	r3, #8
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	210f      	movs	r1, #15
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	401a      	ands	r2, r3
 8003140:	6a39      	ldr	r1, [r7, #32]
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	431a      	orrs	r2, r3
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80c1 	beq.w	80032de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6193      	str	r3, [r2, #24]
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_GPIO_Init+0x2a8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003174:	4a44      	ldr	r2, [pc, #272]	; (8003288 <HAL_GPIO_Init+0x2ac>)
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	220f      	movs	r2, #15
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <HAL_GPIO_Init+0x2b0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d01f      	beq.n	80031e0 <HAL_GPIO_Init+0x204>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a3b      	ldr	r2, [pc, #236]	; (8003290 <HAL_GPIO_Init+0x2b4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d019      	beq.n	80031dc <HAL_GPIO_Init+0x200>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <HAL_GPIO_Init+0x2b8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d013      	beq.n	80031d8 <HAL_GPIO_Init+0x1fc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a39      	ldr	r2, [pc, #228]	; (8003298 <HAL_GPIO_Init+0x2bc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00d      	beq.n	80031d4 <HAL_GPIO_Init+0x1f8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a38      	ldr	r2, [pc, #224]	; (800329c <HAL_GPIO_Init+0x2c0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <HAL_GPIO_Init+0x1f4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_GPIO_Init+0x2c4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_GPIO_Init+0x1f0>
 80031c8:	2305      	movs	r3, #5
 80031ca:	e00a      	b.n	80031e2 <HAL_GPIO_Init+0x206>
 80031cc:	2306      	movs	r3, #6
 80031ce:	e008      	b.n	80031e2 <HAL_GPIO_Init+0x206>
 80031d0:	2304      	movs	r3, #4
 80031d2:	e006      	b.n	80031e2 <HAL_GPIO_Init+0x206>
 80031d4:	2303      	movs	r3, #3
 80031d6:	e004      	b.n	80031e2 <HAL_GPIO_Init+0x206>
 80031d8:	2302      	movs	r3, #2
 80031da:	e002      	b.n	80031e2 <HAL_GPIO_Init+0x206>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_GPIO_Init+0x206>
 80031e0:	2300      	movs	r3, #0
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	f002 0203 	and.w	r2, r2, #3
 80031e8:	0092      	lsls	r2, r2, #2
 80031ea:	4093      	lsls	r3, r2
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031f2:	4925      	ldr	r1, [pc, #148]	; (8003288 <HAL_GPIO_Init+0x2ac>)
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	089b      	lsrs	r3, r3, #2
 80031f8:	3302      	adds	r3, #2
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d006      	beq.n	800321a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4924      	ldr	r1, [pc, #144]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	43db      	mvns	r3, r3
 8003222:	4920      	ldr	r1, [pc, #128]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 8003224:	4013      	ands	r3, r2
 8003226:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d006      	beq.n	8003242 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	491a      	ldr	r1, [pc, #104]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4313      	orrs	r3, r2
 800323e:	604b      	str	r3, [r1, #4]
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	43db      	mvns	r3, r3
 800324a:	4916      	ldr	r1, [pc, #88]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 800324c:	4013      	ands	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d025      	beq.n	80032a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800325c:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4910      	ldr	r1, [pc, #64]	; (80032a4 <HAL_GPIO_Init+0x2c8>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]
 8003268:	e025      	b.n	80032b6 <HAL_GPIO_Init+0x2da>
 800326a:	bf00      	nop
 800326c:	10320000 	.word	0x10320000
 8003270:	10310000 	.word	0x10310000
 8003274:	10220000 	.word	0x10220000
 8003278:	10210000 	.word	0x10210000
 800327c:	10120000 	.word	0x10120000
 8003280:	10110000 	.word	0x10110000
 8003284:	40021000 	.word	0x40021000
 8003288:	40010000 	.word	0x40010000
 800328c:	40010800 	.word	0x40010800
 8003290:	40010c00 	.word	0x40010c00
 8003294:	40011000 	.word	0x40011000
 8003298:	40011400 	.word	0x40011400
 800329c:	40011800 	.word	0x40011800
 80032a0:	40011c00 	.word	0x40011c00
 80032a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_GPIO_Init+0x324>)
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	4913      	ldr	r1, [pc, #76]	; (8003300 <HAL_GPIO_Init+0x324>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c2:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_GPIO_Init+0x324>)
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_GPIO_Init+0x324>)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60cb      	str	r3, [r1, #12]
 80032ce:	e006      	b.n	80032de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_GPIO_Init+0x324>)
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	4909      	ldr	r1, [pc, #36]	; (8003300 <HAL_GPIO_Init+0x324>)
 80032da:	4013      	ands	r3, r2
 80032dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	fa22 f303 	lsr.w	r3, r2, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f47f ae7e 	bne.w	8002ff0 <HAL_GPIO_Init+0x14>
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	372c      	adds	r7, #44	; 0x2c
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
 8003310:	4613      	mov	r3, r2
 8003312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003314:	787b      	ldrb	r3, [r7, #1]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331a:	887a      	ldrh	r2, [r7, #2]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003320:	e003      	b.n	800332a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003322:	887b      	ldrh	r3, [r7, #2]
 8003324:	041a      	lsls	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	611a      	str	r2, [r3, #16]
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334a:	4a05      	ldr	r2, [pc, #20]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fd08 	bl	8001d68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e12b      	b.n	80035ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fdb2 	bl	8000ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033c8:	f001 fb6e 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 80033cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4a81      	ldr	r2, [pc, #516]	; (80035d8 <HAL_I2C_Init+0x274>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d807      	bhi.n	80033e8 <HAL_I2C_Init+0x84>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4a80      	ldr	r2, [pc, #512]	; (80035dc <HAL_I2C_Init+0x278>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	bf94      	ite	ls
 80033e0:	2301      	movls	r3, #1
 80033e2:	2300      	movhi	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	e006      	b.n	80033f6 <HAL_I2C_Init+0x92>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a7d      	ldr	r2, [pc, #500]	; (80035e0 <HAL_I2C_Init+0x27c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0e7      	b.n	80035ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	4a78      	ldr	r2, [pc, #480]	; (80035e4 <HAL_I2C_Init+0x280>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	0c9b      	lsrs	r3, r3, #18
 8003408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a6a      	ldr	r2, [pc, #424]	; (80035d8 <HAL_I2C_Init+0x274>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d802      	bhi.n	8003438 <HAL_I2C_Init+0xd4>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3301      	adds	r3, #1
 8003436:	e009      	b.n	800344c <HAL_I2C_Init+0xe8>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	4a69      	ldr	r2, [pc, #420]	; (80035e8 <HAL_I2C_Init+0x284>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	3301      	adds	r3, #1
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800345e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	495c      	ldr	r1, [pc, #368]	; (80035d8 <HAL_I2C_Init+0x274>)
 8003468:	428b      	cmp	r3, r1
 800346a:	d819      	bhi.n	80034a0 <HAL_I2C_Init+0x13c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e59      	subs	r1, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fbb1 f3f3 	udiv	r3, r1, r3
 800347a:	1c59      	adds	r1, r3, #1
 800347c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003480:	400b      	ands	r3, r1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_I2C_Init+0x138>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e59      	subs	r1, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	fbb1 f3f3 	udiv	r3, r1, r3
 8003494:	3301      	adds	r3, #1
 8003496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349a:	e051      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 800349c:	2304      	movs	r3, #4
 800349e:	e04f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d111      	bne.n	80034cc <HAL_I2C_Init+0x168>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e58      	subs	r0, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6859      	ldr	r1, [r3, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	e012      	b.n	80034f2 <HAL_I2C_Init+0x18e>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1e58      	subs	r0, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	0099      	lsls	r1, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e2:	3301      	adds	r3, #1
 80034e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Init+0x196>
 80034f6:	2301      	movs	r3, #1
 80034f8:	e022      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10e      	bne.n	8003520 <HAL_I2C_Init+0x1bc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1e58      	subs	r0, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6859      	ldr	r1, [r3, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	440b      	add	r3, r1
 8003510:	fbb0 f3f3 	udiv	r3, r0, r3
 8003514:	3301      	adds	r3, #1
 8003516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Init+0x1dc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	1e58      	subs	r0, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	0099      	lsls	r1, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	fbb0 f3f3 	udiv	r3, r0, r3
 8003536:	3301      	adds	r3, #1
 8003538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800353c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	6809      	ldr	r1, [r1, #0]
 8003544:	4313      	orrs	r3, r2
 8003546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69da      	ldr	r2, [r3, #28]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800356e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6911      	ldr	r1, [r2, #16]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	4311      	orrs	r1, r2
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	430b      	orrs	r3, r1
 8003582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	000186a0 	.word	0x000186a0
 80035dc:	001e847f 	.word	0x001e847f
 80035e0:	003d08ff 	.word	0x003d08ff
 80035e4:	431bde83 	.word	0x431bde83
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	460b      	mov	r3, r1
 80035fa:	817b      	strh	r3, [r7, #10]
 80035fc:	4613      	mov	r3, r2
 80035fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003600:	f7fe ff5c 	bl	80024bc <HAL_GetTick>
 8003604:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b20      	cmp	r3, #32
 8003610:	f040 80e0 	bne.w	80037d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	2319      	movs	r3, #25
 800361a:	2201      	movs	r2, #1
 800361c:	4970      	ldr	r1, [pc, #448]	; (80037e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fc92 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800362a:	2302      	movs	r3, #2
 800362c:	e0d3      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_I2C_Master_Transmit+0x50>
 8003638:	2302      	movs	r3, #2
 800363a:	e0cc      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d007      	beq.n	8003662 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2210      	movs	r2, #16
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	893a      	ldrh	r2, [r7, #8]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80036a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036a4:	8979      	ldrh	r1, [r7, #10]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	6a3a      	ldr	r2, [r7, #32]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fafc 	bl	8003ca8 <I2C_MasterRequestWrite>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e08d      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	613b      	str	r3, [r7, #16]
 80036ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036d0:	e066      	b.n	80037a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	6a39      	ldr	r1, [r7, #32]
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 fd0c 	bl	80040f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00d      	beq.n	80036fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d107      	bne.n	80036fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06b      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003702:	781a      	ldrb	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b04      	cmp	r3, #4
 800373a:	d11b      	bne.n	8003774 <HAL_I2C_Master_Transmit+0x188>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6a39      	ldr	r1, [r7, #32]
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 fcfc 	bl	8004176 <I2C_WaitOnBTFFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00d      	beq.n	80037a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b04      	cmp	r3, #4
 800378a:	d107      	bne.n	800379c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e01a      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d194      	bne.n	80036d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	00100002 	.word	0x00100002
 80037e4:	ffff0000 	.word	0xffff0000

080037e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b08c      	sub	sp, #48	; 0x30
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	461a      	mov	r2, r3
 80037f4:	460b      	mov	r3, r1
 80037f6:	817b      	strh	r3, [r7, #10]
 80037f8:	4613      	mov	r3, r2
 80037fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7fe fe5c 	bl	80024bc <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b20      	cmp	r3, #32
 8003810:	f040 823f 	bne.w	8003c92 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	2319      	movs	r3, #25
 800381a:	2201      	movs	r2, #1
 800381c:	497f      	ldr	r1, [pc, #508]	; (8003a1c <HAL_I2C_Master_Receive+0x234>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fb92 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800382a:	2302      	movs	r3, #2
 800382c:	e232      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_I2C_Master_Receive+0x54>
 8003838:	2302      	movs	r3, #2
 800383a:	e22b      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d007      	beq.n	8003862 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0201 	orr.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2222      	movs	r2, #34	; 0x22
 8003876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2210      	movs	r2, #16
 800387e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	893a      	ldrh	r2, [r7, #8]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4a5f      	ldr	r2, [pc, #380]	; (8003a20 <HAL_I2C_Master_Receive+0x238>)
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a4:	8979      	ldrh	r1, [r7, #10]
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fa7e 	bl	8003dac <I2C_MasterRequestRead>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e1ec      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e1c0      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d11e      	bne.n	8003930 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003900:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003902:	b672      	cpsid	i
}
 8003904:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003906:	2300      	movs	r3, #0
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800392c:	b662      	cpsie	i
}
 800392e:	e035      	b.n	800399c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003934:	2b02      	cmp	r3, #2
 8003936:	d11e      	bne.n	8003976 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003946:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003948:	b672      	cpsid	i
}
 800394a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003972:	b662      	cpsie	i
}
 8003974:	e012      	b.n	800399c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800399c:	e166      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	f200 811f 	bhi.w	8003be6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d123      	bne.n	80039f8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fc1f 	bl	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e167      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039f6:	e139      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d152      	bne.n	8003aa6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	2200      	movs	r2, #0
 8003a08:	4906      	ldr	r1, [pc, #24]	; (8003a24 <HAL_I2C_Master_Receive+0x23c>)
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fa9c 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e13c      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
 8003a1a:	bf00      	nop
 8003a1c:	00100002 	.word	0x00100002
 8003a20:	ffff0000 	.word	0xffff0000
 8003a24:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a6e:	b662      	cpsie	i
}
 8003a70:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa4:	e0e2      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	2200      	movs	r2, #0
 8003aae:	497b      	ldr	r1, [pc, #492]	; (8003c9c <HAL_I2C_Master_Receive+0x4b4>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fa49 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0e9      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ace:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ad0:	b672      	cpsid	i
}
 8003ad2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b06:	4b66      	ldr	r3, [pc, #408]	; (8003ca0 <HAL_I2C_Master_Receive+0x4b8>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	4a65      	ldr	r2, [pc, #404]	; (8003ca4 <HAL_I2C_Master_Receive+0x4bc>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	0a1a      	lsrs	r2, r3, #8
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00da      	lsls	r2, r3, #3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d118      	bne.n	8003b5e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2220      	movs	r2, #32
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b4e:	b662      	cpsie	i
}
 8003b50:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e09a      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d1d9      	bne.n	8003b20 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691a      	ldr	r2, [r3, #16]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bae:	b662      	cpsie	i
}
 8003bb0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691a      	ldr	r2, [r3, #16]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003be4:	e042      	b.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fb04 	bl	80041f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e04c      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d118      	bne.n	8003c6c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f ae94 	bne.w	800399e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	; 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00010004 	.word	0x00010004
 8003ca0:	2000006c 	.word	0x2000006c
 8003ca4:	14f8b589 	.word	0x14f8b589

08003ca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d006      	beq.n	8003cd2 <I2C_MasterRequestWrite+0x2a>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d003      	beq.n	8003cd2 <I2C_MasterRequestWrite+0x2a>
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd0:	d108      	bne.n	8003ce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e00b      	b.n	8003cfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b12      	cmp	r3, #18
 8003cea:	d107      	bne.n	8003cfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f91d 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00d      	beq.n	8003d30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d103      	bne.n	8003d2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e035      	b.n	8003d9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d38:	d108      	bne.n	8003d4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d48:	611a      	str	r2, [r3, #16]
 8003d4a:	e01b      	b.n	8003d84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d4c:	897b      	ldrh	r3, [r7, #10]
 8003d4e:	11db      	asrs	r3, r3, #7
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	f003 0306 	and.w	r3, r3, #6
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	f063 030f 	orn	r3, r3, #15
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	490e      	ldr	r1, [pc, #56]	; (8003da4 <I2C_MasterRequestWrite+0xfc>)
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f943 	bl	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e010      	b.n	8003d9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d7a:	897b      	ldrh	r3, [r7, #10]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	4907      	ldr	r1, [pc, #28]	; (8003da8 <I2C_MasterRequestWrite+0x100>)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f933 	bl	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e000      	b.n	8003d9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	00010008 	.word	0x00010008
 8003da8:	00010002 	.word	0x00010002

08003dac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	607a      	str	r2, [r7, #4]
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	460b      	mov	r3, r1
 8003dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d006      	beq.n	8003de6 <I2C_MasterRequestRead+0x3a>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d003      	beq.n	8003de6 <I2C_MasterRequestRead+0x3a>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003de4:	d108      	bne.n	8003df8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e00b      	b.n	8003e10 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	2b11      	cmp	r3, #17
 8003dfe:	d107      	bne.n	8003e10 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f893 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00d      	beq.n	8003e44 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d103      	bne.n	8003e40 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e079      	b.n	8003f38 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e4c:	d108      	bne.n	8003e60 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e4e:	897b      	ldrh	r3, [r7, #10]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	611a      	str	r2, [r3, #16]
 8003e5e:	e05f      	b.n	8003f20 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003e60:	897b      	ldrh	r3, [r7, #10]
 8003e62:	11db      	asrs	r3, r3, #7
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	f003 0306 	and.w	r3, r3, #6
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	f063 030f 	orn	r3, r3, #15
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4930      	ldr	r1, [pc, #192]	; (8003f40 <I2C_MasterRequestRead+0x194>)
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f8b9 	bl	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e054      	b.n	8003f38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4929      	ldr	r1, [pc, #164]	; (8003f44 <I2C_MasterRequestRead+0x198>)
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 f8a9 	bl	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e044      	b.n	8003f38 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f831 	bl	8003f48 <I2C_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00d      	beq.n	8003f08 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003efa:	d103      	bne.n	8003f04 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e017      	b.n	8003f38 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	11db      	asrs	r3, r3, #7
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f063 030e 	orn	r3, r3, #14
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4907      	ldr	r1, [pc, #28]	; (8003f44 <I2C_MasterRequestRead+0x198>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f865 	bl	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	00010008 	.word	0x00010008
 8003f44:	00010002 	.word	0x00010002

08003f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	603b      	str	r3, [r7, #0]
 8003f54:	4613      	mov	r3, r2
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f58:	e025      	b.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d021      	beq.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fe faab 	bl	80024bc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d116      	bne.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f92:	f043 0220 	orr.w	r2, r3, #32
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e023      	b.n	8003fee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	0c1b      	lsrs	r3, r3, #16
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10d      	bne.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	461a      	mov	r2, r3
 8003fca:	e00c      	b.n	8003fe6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf0c      	ite	eq
 8003fde:	2301      	moveq	r3, #1
 8003fe0:	2300      	movne	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d0b6      	beq.n	8003f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004004:	e051      	b.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d123      	bne.n	800405e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800402e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0204 	orr.w	r2, r3, #4
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e046      	b.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d021      	beq.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fe fa29 	bl	80024bc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d116      	bne.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e020      	b.n	80040ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d10c      	bne.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	43da      	mvns	r2, r3
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e00b      	b.n	80040e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	43da      	mvns	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	4013      	ands	r3, r2
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d18d      	bne.n	8004006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004100:	e02d      	b.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f8ce 	bl	80042a4 <I2C_IsAcknowledgeFailed>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e02d      	b.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004118:	d021      	beq.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800411a:	f7fe f9cf 	bl	80024bc <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	d302      	bcc.n	8004130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d116      	bne.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f043 0220 	orr.w	r2, r3, #32
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e007      	b.n	800416e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d1ca      	bne.n	8004102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004182:	e02d      	b.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f88d 	bl	80042a4 <I2C_IsAcknowledgeFailed>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e02d      	b.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419a:	d021      	beq.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800419c:	f7fe f98e 	bl	80024bc <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d302      	bcc.n	80041b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d116      	bne.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	f043 0220 	orr.w	r2, r3, #32
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e007      	b.n	80041f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d1ca      	bne.n	8004184 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004204:	e042      	b.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d119      	bne.n	8004248 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e029      	b.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004248:	f7fe f938 	bl	80024bc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	429a      	cmp	r2, r3
 8004256:	d302      	bcc.n	800425e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d116      	bne.n	800428c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0220 	orr.w	r2, r3, #32
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e007      	b.n	800429c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004296:	2b40      	cmp	r3, #64	; 0x40
 8004298:	d1b5      	bne.n	8004206 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ba:	d11b      	bne.n	80042f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	f043 0204 	orr.w	r2, r3, #4
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e272      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 8087 	beq.w	800442e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004320:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b04      	cmp	r3, #4
 800432a:	d00c      	beq.n	8004346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800432c:	4b8f      	ldr	r3, [pc, #572]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b08      	cmp	r3, #8
 8004336:	d112      	bne.n	800435e <HAL_RCC_OscConfig+0x5e>
 8004338:	4b8c      	ldr	r3, [pc, #560]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d10b      	bne.n	800435e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004346:	4b89      	ldr	r3, [pc, #548]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d06c      	beq.n	800442c <HAL_RCC_OscConfig+0x12c>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d168      	bne.n	800442c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e24c      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004366:	d106      	bne.n	8004376 <HAL_RCC_OscConfig+0x76>
 8004368:	4b80      	ldr	r3, [pc, #512]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7f      	ldr	r2, [pc, #508]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800436e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e02e      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_RCC_OscConfig+0x98>
 800437e:	4b7b      	ldr	r3, [pc, #492]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a7a      	ldr	r2, [pc, #488]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	4b78      	ldr	r3, [pc, #480]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a77      	ldr	r2, [pc, #476]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0xbc>
 80043a2:	4b72      	ldr	r3, [pc, #456]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6e      	ldr	r2, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xd4>
 80043bc:	4b6b      	ldr	r3, [pc, #428]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a6a      	ldr	r2, [pc, #424]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a67      	ldr	r2, [pc, #412]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe f86e 	bl	80024bc <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe f86a 	bl	80024bc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e200      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b5d      	ldr	r3, [pc, #372]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xe4>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe f85a 	bl	80024bc <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe f856 	bl	80024bc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1ec      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0x10c>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800443a:	4b4c      	ldr	r3, [pc, #304]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004446:	4b49      	ldr	r3, [pc, #292]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x18c>
 8004452:	4b46      	ldr	r3, [pc, #280]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b43      	ldr	r3, [pc, #268]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x176>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1c0      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4939      	ldr	r1, [pc, #228]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCC_OscConfig+0x270>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe f80f 	bl	80024bc <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fe f80b 	bl	80024bc <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a1      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2d      	ldr	r3, [pc, #180]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4927      	ldr	r1, [pc, #156]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b26      	ldr	r3, [pc, #152]	; (8004570 <HAL_RCC_OscConfig+0x270>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044dc:	f7fd ffee 	bl	80024bc <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fd ffea 	bl	80024bc <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e180      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d03a      	beq.n	8004584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d019      	beq.n	800454a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b17      	ldr	r3, [pc, #92]	; (8004574 <HAL_RCC_OscConfig+0x274>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fd ffce 	bl	80024bc <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004524:	f7fd ffca 	bl	80024bc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e160      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <HAL_RCC_OscConfig+0x26c>)
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004542:	2001      	movs	r0, #1
 8004544:	f000 fb08 	bl	8004b58 <RCC_Delay>
 8004548:	e01c      	b.n	8004584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_RCC_OscConfig+0x274>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004550:	f7fd ffb4 	bl	80024bc <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004556:	e00f      	b.n	8004578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004558:	f7fd ffb0 	bl	80024bc <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d908      	bls.n	8004578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e146      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	42420000 	.word	0x42420000
 8004574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004578:	4b92      	ldr	r3, [pc, #584]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e9      	bne.n	8004558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80a6 	beq.w	80046de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004596:	4b8b      	ldr	r3, [pc, #556]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10d      	bne.n	80045be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a2:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4a87      	ldr	r2, [pc, #540]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ac:	61d3      	str	r3, [r2, #28]
 80045ae:	4b85      	ldr	r3, [pc, #532]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	60bb      	str	r3, [r7, #8]
 80045b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ba:	2301      	movs	r3, #1
 80045bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d118      	bne.n	80045fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ca:	4b7f      	ldr	r3, [pc, #508]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7e      	ldr	r2, [pc, #504]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d6:	f7fd ff71 	bl	80024bc <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045de:	f7fd ff6d 	bl	80024bc <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b64      	cmp	r3, #100	; 0x64
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e103      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f0:	4b75      	ldr	r3, [pc, #468]	; (80047c8 <HAL_RCC_OscConfig+0x4c8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d106      	bne.n	8004612 <HAL_RCC_OscConfig+0x312>
 8004604:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a6e      	ldr	r2, [pc, #440]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6213      	str	r3, [r2, #32]
 8004610:	e02d      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10c      	bne.n	8004634 <HAL_RCC_OscConfig+0x334>
 800461a:	4b6a      	ldr	r3, [pc, #424]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	4a69      	ldr	r2, [pc, #420]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	6213      	str	r3, [r2, #32]
 8004626:	4b67      	ldr	r3, [pc, #412]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4a66      	ldr	r2, [pc, #408]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	f023 0304 	bic.w	r3, r3, #4
 8004630:	6213      	str	r3, [r2, #32]
 8004632:	e01c      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d10c      	bne.n	8004656 <HAL_RCC_OscConfig+0x356>
 800463c:	4b61      	ldr	r3, [pc, #388]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a60      	ldr	r2, [pc, #384]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	6213      	str	r3, [r2, #32]
 8004648:	4b5e      	ldr	r3, [pc, #376]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	4a5d      	ldr	r2, [pc, #372]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	f043 0301 	orr.w	r3, r3, #1
 8004652:	6213      	str	r3, [r2, #32]
 8004654:	e00b      	b.n	800466e <HAL_RCC_OscConfig+0x36e>
 8004656:	4b5b      	ldr	r3, [pc, #364]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4a5a      	ldr	r2, [pc, #360]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	f023 0301 	bic.w	r3, r3, #1
 8004660:	6213      	str	r3, [r2, #32]
 8004662:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	4a57      	ldr	r2, [pc, #348]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d015      	beq.n	80046a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004676:	f7fd ff21 	bl	80024bc <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467e:	f7fd ff1d 	bl	80024bc <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f241 3288 	movw	r2, #5000	; 0x1388
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0b1      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ee      	beq.n	800467e <HAL_RCC_OscConfig+0x37e>
 80046a0:	e014      	b.n	80046cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a2:	f7fd ff0b 	bl	80024bc <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a8:	e00a      	b.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd ff07 	bl	80024bc <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e09b      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c0:	4b40      	ldr	r3, [pc, #256]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f003 0302 	and.w	r3, r3, #2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ee      	bne.n	80046aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d105      	bne.n	80046de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d2:	4b3c      	ldr	r3, [pc, #240]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a3b      	ldr	r2, [pc, #236]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8087 	beq.w	80047f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046e8:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d061      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d146      	bne.n	800478a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046fc:	4b33      	ldr	r3, [pc, #204]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fd fedb 	bl	80024bc <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fd fed7 	bl	80024bc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e06d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004730:	d108      	bne.n	8004744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004732:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4921      	ldr	r1, [pc, #132]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	4313      	orrs	r3, r2
 8004742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a19      	ldr	r1, [r3, #32]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	430b      	orrs	r3, r1
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	4313      	orrs	r3, r2
 800475a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fd feab 	bl	80024bc <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7fd fea7 	bl	80024bc <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e03d      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x46a>
 8004788:	e035      	b.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCC_OscConfig+0x4cc>)
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fd fe94 	bl	80024bc <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004798:	f7fd fe90 	bl	80024bc <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e026      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <HAL_RCC_OscConfig+0x4c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x498>
 80047b6:	e01e      	b.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e019      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
 80047c4:	40021000 	.word	0x40021000
 80047c8:	40007000 	.word	0x40007000
 80047cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d0:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_RCC_OscConfig+0x500>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d106      	bne.n	80047f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000

08004804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0d0      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004818:	4b6a      	ldr	r3, [pc, #424]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0307 	and.w	r3, r3, #7
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d910      	bls.n	8004848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004826:	4b67      	ldr	r3, [pc, #412]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0207 	bic.w	r2, r3, #7
 800482e:	4965      	ldr	r1, [pc, #404]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	4313      	orrs	r3, r2
 8004834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	4a58      	ldr	r2, [pc, #352]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	4a52      	ldr	r2, [pc, #328]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d040      	beq.n	8004924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d115      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c2:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e073      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06b      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e2:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f023 0203 	bic.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4936      	ldr	r1, [pc, #216]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f4:	f7fd fde2 	bl	80024bc <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fa:	e00a      	b.n	8004912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fc:	f7fd fdde 	bl	80024bc <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	f241 3288 	movw	r2, #5000	; 0x1388
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e053      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004912:	4b2d      	ldr	r3, [pc, #180]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f003 020c 	and.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	429a      	cmp	r2, r3
 8004922:	d1eb      	bne.n	80048fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d210      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004932:	4b24      	ldr	r3, [pc, #144]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 0207 	bic.w	r2, r3, #7
 800493a:	4922      	ldr	r1, [pc, #136]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	4313      	orrs	r3, r2
 8004940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497e:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	4313      	orrs	r3, r2
 8004990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f821 	bl	80049d8 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490a      	ldr	r1, [pc, #40]	; (80049cc <HAL_RCC_ClockConfig+0x1c8>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	; (80049d0 <HAL_RCC_ClockConfig+0x1cc>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1d0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd fab6 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40022000 	.word	0x40022000
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800a9b4 	.word	0x0800a9b4
 80049d0:	2000006c 	.word	0x2000006c
 80049d4:	20000070 	.word	0x20000070

080049d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d8:	b490      	push	{r4, r7}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049de:	4b29      	ldr	r3, [pc, #164]	; (8004a84 <HAL_RCC_GetSysClockFreq+0xac>)
 80049e0:	1d3c      	adds	r4, r7, #4
 80049e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049e8:	f240 2301 	movw	r3, #513	; 0x201
 80049ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a02:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d002      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x40>
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d003      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x46>
 8004a16:	e02b      	b.n	8004a70 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a1a:	623b      	str	r3, [r7, #32]
      break;
 8004a1c:	e02b      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	0c9b      	lsrs	r3, r3, #18
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	3328      	adds	r3, #40	; 0x28
 8004a28:	443b      	add	r3, r7
 8004a2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a2e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d012      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	0c5b      	lsrs	r3, r3, #17
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	3328      	adds	r3, #40	; 0x28
 8004a46:	443b      	add	r3, r7
 8004a48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	4a0e      	ldr	r2, [pc, #56]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a52:	fb03 f202 	mul.w	r2, r3, r2
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a5e:	e004      	b.n	8004a6a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	4a0b      	ldr	r2, [pc, #44]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	623b      	str	r3, [r7, #32]
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b06      	ldr	r3, [pc, #24]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a72:	623b      	str	r3, [r7, #32]
      break;
 8004a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a76:	6a3b      	ldr	r3, [r7, #32]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3728      	adds	r7, #40	; 0x28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bc90      	pop	{r4, r7}
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	0800a998 	.word	0x0800a998
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	007a1200 	.word	0x007a1200
 8004a90:	003d0900 	.word	0x003d0900

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a98:	4b02      	ldr	r3, [pc, #8]	; (8004aa4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr
 8004aa4:	2000006c 	.word	0x2000006c

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aac:	f7ff fff2 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	0a1b      	lsrs	r3, r3, #8
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4903      	ldr	r1, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	0800a9c4 	.word	0x0800a9c4

08004ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ad4:	f7ff ffde 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	0adb      	lsrs	r3, r3, #11
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	4903      	ldr	r1, [pc, #12]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae6:	5ccb      	ldrb	r3, [r1, r3]
 8004ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40021000 	.word	0x40021000
 8004af4:	0800a9c4 	.word	0x0800a9c4

08004af8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	220f      	movs	r2, #15
 8004b06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <HAL_RCC_GetClockConfig+0x58>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 0203 	and.w	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_RCC_GetClockConfig+0x58>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_GetClockConfig+0x58>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b2c:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_GetClockConfig+0x58>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	08db      	lsrs	r3, r3, #3
 8004b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <HAL_RCC_GetClockConfig+0x5c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0207 	and.w	r2, r3, #7
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40022000 	.word	0x40022000

08004b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b60:	4b0a      	ldr	r3, [pc, #40]	; (8004b8c <RCC_Delay+0x34>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a0a      	ldr	r2, [pc, #40]	; (8004b90 <RCC_Delay+0x38>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0a5b      	lsrs	r3, r3, #9
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	fb02 f303 	mul.w	r3, r2, r3
 8004b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b74:	bf00      	nop
  }
  while (Delay --);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1e5a      	subs	r2, r3, #1
 8004b7a:	60fa      	str	r2, [r7, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f9      	bne.n	8004b74 <RCC_Delay+0x1c>
}
 8004b80:	bf00      	nop
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr
 8004b8c:	2000006c 	.word	0x2000006c
 8004b90:	10624dd3 	.word	0x10624dd3

08004b94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d07d      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bb4:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc0:	4b4c      	ldr	r3, [pc, #304]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	4a4b      	ldr	r2, [pc, #300]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bca:	61d3      	str	r3, [r2, #28]
 8004bcc:	4b49      	ldr	r3, [pc, #292]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bdc:	4b46      	ldr	r3, [pc, #280]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d118      	bne.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a42      	ldr	r2, [pc, #264]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf4:	f7fd fc62 	bl	80024bc <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfa:	e008      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfc:	f7fd fc5e 	bl	80024bc <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e06d      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0e:	4b3a      	ldr	r3, [pc, #232]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f0      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c1a:	4b36      	ldr	r3, [pc, #216]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02e      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d027      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c38:	4b2e      	ldr	r3, [pc, #184]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c40:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c42:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c48:	4b2c      	ldr	r3, [pc, #176]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c4e:	4a29      	ldr	r2, [pc, #164]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d014      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fd fc2d 	bl	80024bc <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fd fc29 	bl	80024bc <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e036      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ee      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c88:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4917      	ldr	r1, [pc, #92]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d105      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	69db      	ldr	r3, [r3, #28]
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004caa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	490b      	ldr	r1, [pc, #44]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d008      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40007000 	.word	0x40007000
 8004cfc:	42420440 	.word	0x42420440

08004d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e041      	b.n	8004d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fd fada 	bl	80022e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 fa7e 	bl	8005240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d001      	beq.n	8004db8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e044      	b.n	8004e42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1d      	ldr	r2, [pc, #116]	; (8004e4c <HAL_TIM_Base_Start_IT+0xac>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d018      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x6c>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_TIM_Base_Start_IT+0xb0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x6c>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dec:	d00e      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x6c>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a18      	ldr	r2, [pc, #96]	; (8004e54 <HAL_TIM_Base_Start_IT+0xb4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d009      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x6c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a16      	ldr	r2, [pc, #88]	; (8004e58 <HAL_TIM_Base_Start_IT+0xb8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d004      	beq.n	8004e0c <HAL_TIM_Base_Start_IT+0x6c>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <HAL_TIM_Base_Start_IT+0xbc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d111      	bne.n	8004e30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d010      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0201 	orr.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2e:	e007      	b.n	8004e40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00

08004e60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0202 	mvn.w	r2, #2
 8004e8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9b1 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f9a4 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9b3 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0204 	mvn.w	r2, #4
 8004ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f987 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f97a 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f989 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b08      	cmp	r3, #8
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0208 	mvn.w	r2, #8
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2204      	movs	r2, #4
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f95d 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f950 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f95f 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b10      	cmp	r3, #16
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0210 	mvn.w	r2, #16
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2208      	movs	r2, #8
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f933 	bl	800520a <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f926 	bl	80051f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f935 	bl	800521c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d107      	bne.n	8004fe4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0201 	mvn.w	r2, #1
 8004fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7fc ff56 	bl	8001e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d10e      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffc:	2b80      	cmp	r3, #128	; 0x80
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa9d 	bl	800554a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d10e      	bne.n	800503c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d107      	bne.n	800503c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f8f9 	bl	800522e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d10e      	bne.n	8005068 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b20      	cmp	r3, #32
 8005056:	d107      	bne.n	8005068 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0220 	mvn.w	r2, #32
 8005060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa68 	bl	8005538 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005068:	bf00      	nop
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIM_ConfigClockSource+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e0b3      	b.n	80051f0 <HAL_TIM_ConfigClockSource+0x180>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c0:	d03e      	beq.n	8005140 <HAL_TIM_ConfigClockSource+0xd0>
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	f200 8087 	bhi.w	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 80050ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ce:	f000 8085 	beq.w	80051dc <HAL_TIM_ConfigClockSource+0x16c>
 80050d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d6:	d87f      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 80050d8:	2b70      	cmp	r3, #112	; 0x70
 80050da:	d01a      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0xa2>
 80050dc:	2b70      	cmp	r3, #112	; 0x70
 80050de:	d87b      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 80050e0:	2b60      	cmp	r3, #96	; 0x60
 80050e2:	d050      	beq.n	8005186 <HAL_TIM_ConfigClockSource+0x116>
 80050e4:	2b60      	cmp	r3, #96	; 0x60
 80050e6:	d877      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 80050e8:	2b50      	cmp	r3, #80	; 0x50
 80050ea:	d03c      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xf6>
 80050ec:	2b50      	cmp	r3, #80	; 0x50
 80050ee:	d873      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d058      	beq.n	80051a6 <HAL_TIM_ConfigClockSource+0x136>
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d86f      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 80050f8:	2b30      	cmp	r3, #48	; 0x30
 80050fa:	d064      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x156>
 80050fc:	2b30      	cmp	r3, #48	; 0x30
 80050fe:	d86b      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 8005100:	2b20      	cmp	r3, #32
 8005102:	d060      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x156>
 8005104:	2b20      	cmp	r3, #32
 8005106:	d867      	bhi.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d05c      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x156>
 800510c:	2b10      	cmp	r3, #16
 800510e:	d05a      	beq.n	80051c6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005110:	e062      	b.n	80051d8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6899      	ldr	r1, [r3, #8]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f000 f97e 	bl	8005422 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005134:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	609a      	str	r2, [r3, #8]
      break;
 800513e:	e04e      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f000 f967 	bl	8005422 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005162:	609a      	str	r2, [r3, #8]
      break;
 8005164:	e03b      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6859      	ldr	r1, [r3, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	461a      	mov	r2, r3
 8005174:	f000 f8de 	bl	8005334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2150      	movs	r1, #80	; 0x50
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f935 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 8005184:	e02b      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	461a      	mov	r2, r3
 8005194:	f000 f8fc 	bl	8005390 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2160      	movs	r1, #96	; 0x60
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f925 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 80051a4:	e01b      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	6859      	ldr	r1, [r3, #4]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f000 f8be 	bl	8005334 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2140      	movs	r1, #64	; 0x40
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f915 	bl	80053ee <TIM_ITRx_SetConfig>
      break;
 80051c4:	e00b      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f000 f90c 	bl	80053ee <TIM_ITRx_SetConfig>
        break;
 80051d6:	e002      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051d8:	bf00      	nop
 80051da:	e000      	b.n	80051de <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051dc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bc80      	pop	{r7}
 8005208:	4770      	bx	lr

0800520a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800520a:	b480      	push	{r7}
 800520c:	b083      	sub	sp, #12
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	bc80      	pop	{r7}
 800521a:	4770      	bx	lr

0800521c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr

08005240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a33      	ldr	r2, [pc, #204]	; (8005320 <TIM_Base_SetConfig+0xe0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a32      	ldr	r2, [pc, #200]	; (8005324 <TIM_Base_SetConfig+0xe4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00f      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d00b      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a2f      	ldr	r2, [pc, #188]	; (8005328 <TIM_Base_SetConfig+0xe8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a2e      	ldr	r2, [pc, #184]	; (800532c <TIM_Base_SetConfig+0xec>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a2d      	ldr	r2, [pc, #180]	; (8005330 <TIM_Base_SetConfig+0xf0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d108      	bne.n	8005292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a22      	ldr	r2, [pc, #136]	; (8005320 <TIM_Base_SetConfig+0xe0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0x82>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a21      	ldr	r2, [pc, #132]	; (8005324 <TIM_Base_SetConfig+0xe4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x82>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <TIM_Base_SetConfig+0xe8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x82>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1d      	ldr	r2, [pc, #116]	; (800532c <TIM_Base_SetConfig+0xec>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x82>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <TIM_Base_SetConfig+0xf0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <TIM_Base_SetConfig+0xe0>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d003      	beq.n	8005308 <TIM_Base_SetConfig+0xc8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a08      	ldr	r2, [pc, #32]	; (8005324 <TIM_Base_SetConfig+0xe4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d103      	bne.n	8005310 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	615a      	str	r2, [r3, #20]
}
 8005316:	bf00      	nop
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40013400 	.word	0x40013400
 8005328:	40000400 	.word	0x40000400
 800532c:	40000800 	.word	0x40000800
 8005330:	40000c00 	.word	0x40000c00

08005334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005334:	b480      	push	{r7}
 8005336:	b087      	sub	sp, #28
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800535e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f023 030a 	bic.w	r3, r3, #10
 8005370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4313      	orrs	r3, r2
 8005378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f023 0210 	bic.w	r2, r3, #16
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	031b      	lsls	r3, r3, #12
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	621a      	str	r2, [r3, #32]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bc80      	pop	{r7}
 80053ec:	4770      	bx	lr

080053ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	f043 0307 	orr.w	r3, r3, #7
 8005410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005422:	b480      	push	{r7}
 8005424:	b087      	sub	sp, #28
 8005426:	af00      	add	r7, sp, #0
 8005428:	60f8      	str	r0, [r7, #12]
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	607a      	str	r2, [r7, #4]
 800542e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	021a      	lsls	r2, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	431a      	orrs	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4313      	orrs	r3, r2
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	609a      	str	r2, [r3, #8]
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005474:	2302      	movs	r3, #2
 8005476:	e050      	b.n	800551a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a19      	ldr	r2, [pc, #100]	; (8005528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ce:	d00e      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a15      	ldr	r2, [pc, #84]	; (800552c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a14      	ldr	r2, [pc, #80]	; (8005530 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a12      	ldr	r2, [pc, #72]	; (8005534 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d10c      	bne.n	8005508 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40013400 	.word	0x40013400
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00

08005538 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e03f      	b.n	80055ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fefa 	bl	800237c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800559e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fc85 	bl	8005eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691a      	ldr	r2, [r3, #16]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68da      	ldr	r2, [r3, #12]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f6:	b580      	push	{r7, lr}
 80055f8:	b08a      	sub	sp, #40	; 0x28
 80055fa:	af02      	add	r7, sp, #8
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	4613      	mov	r3, r2
 8005604:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b20      	cmp	r3, #32
 8005614:	d17c      	bne.n	8005710 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_UART_Transmit+0x2c>
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e075      	b.n	8005712 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UART_Transmit+0x3e>
 8005630:	2302      	movs	r3, #2
 8005632:	e06e      	b.n	8005712 <HAL_UART_Transmit+0x11c>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2221      	movs	r2, #33	; 0x21
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800564a:	f7fc ff37 	bl	80024bc <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d108      	bne.n	8005678 <HAL_UART_Transmit+0x82>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800566e:	2300      	movs	r3, #0
 8005670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	e003      	b.n	8005680 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005688:	e02a      	b.n	80056e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fa38 	bl	8005b0a <UART_WaitOnFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e036      	b.n	8005712 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10b      	bne.n	80056c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	3302      	adds	r3, #2
 80056be:	61bb      	str	r3, [r7, #24]
 80056c0:	e007      	b.n	80056d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3301      	adds	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1cf      	bne.n	800568a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2140      	movs	r1, #64	; 0x40
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fa08 	bl	8005b0a <UART_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e006      	b.n	8005712 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3720      	adds	r7, #32
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b20      	cmp	r3, #32
 8005732:	d11d      	bne.n	8005770 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_UART_Receive_IT+0x26>
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e016      	b.n	8005772 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800574a:	2b01      	cmp	r3, #1
 800574c:	d101      	bne.n	8005752 <HAL_UART_Receive_IT+0x38>
 800574e:	2302      	movs	r3, #2
 8005750:	e00f      	b.n	8005772 <HAL_UART_Receive_IT+0x58>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	461a      	mov	r2, r3
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f000 fa19 	bl	8005b9e <UART_Start_Receive_IT>
 800576c:	4603      	mov	r3, r0
 800576e:	e000      	b.n	8005772 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005770:	2302      	movs	r3, #2
  }
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
	...

0800577c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	; 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800579c:	2300      	movs	r3, #0
 800579e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10d      	bne.n	80057ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_UART_IRQHandler+0x52>
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fac9 	bl	8005d5e <UART_Receive_IT>
      return;
 80057cc:	e17b      	b.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80b1 	beq.w	8005938 <HAL_UART_IRQHandler+0x1bc>
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <HAL_UART_IRQHandler+0x70>
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80a6 	beq.w	8005938 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_UART_IRQHandler+0x90>
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f043 0201 	orr.w	r2, r3, #1
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <HAL_UART_IRQHandler+0xb0>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d005      	beq.n	800582c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0202 	orr.w	r2, r3, #2
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_UART_IRQHandler+0xd0>
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d005      	beq.n	800584c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00f      	beq.n	8005876 <HAL_UART_IRQHandler+0xfa>
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_UART_IRQHandler+0xee>
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d005      	beq.n	8005876 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	f043 0208 	orr.w	r2, r3, #8
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 811e 	beq.w	8005abc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	f003 0320 	and.w	r3, r3, #32
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_UART_IRQHandler+0x11e>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f003 0320 	and.w	r3, r3, #32
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa62 	bl	8005d5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b4:	f003 0308 	and.w	r3, r3, #8
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d102      	bne.n	80058c2 <HAL_UART_IRQHandler+0x146>
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d031      	beq.n	8005926 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9a4 	bl	8005c10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d023      	beq.n	800591e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695a      	ldr	r2, [r3, #20]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d013      	beq.n	8005916 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f2:	4a76      	ldr	r2, [pc, #472]	; (8005acc <HAL_UART_IRQHandler+0x350>)
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fd fa66 	bl	8002dcc <HAL_DMA_Abort_IT>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e00e      	b.n	8005934 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f8e3 	bl	8005ae2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	e00a      	b.n	8005934 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 f8df 	bl	8005ae2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	e006      	b.n	8005934 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8db 	bl	8005ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005932:	e0c3      	b.n	8005abc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	bf00      	nop
    return;
 8005936:	e0c1      	b.n	8005abc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 80a1 	bne.w	8005a84 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 809b 	beq.w	8005a84 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f003 0310 	and.w	r3, r3, #16
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8095 	beq.w	8005a84 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597a:	2b00      	cmp	r3, #0
 800597c:	d04e      	beq.n	8005a1c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005988:	8a3b      	ldrh	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8098 	beq.w	8005ac0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005994:	8a3a      	ldrh	r2, [r7, #16]
 8005996:	429a      	cmp	r2, r3
 8005998:	f080 8092 	bcs.w	8005ac0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8a3a      	ldrh	r2, [r7, #16]
 80059a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d02b      	beq.n	8005a04 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	695a      	ldr	r2, [r3, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0210 	bic.w	r2, r2, #16
 80059f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fd f9a9 	bl	8002d56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f86d 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a1a:	e051      	b.n	8005ac0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d047      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005a34:	8a7b      	ldrh	r3, [r7, #18]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d044      	beq.n	8005ac4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68da      	ldr	r2, [r3, #12]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0201 	bic.w	r2, r2, #1
 8005a58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0210 	bic.w	r2, r2, #16
 8005a76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a78:	8a7b      	ldrh	r3, [r7, #18]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f839 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a82:	e01f      	b.n	8005ac4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x324>
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f8f9 	bl	8005c90 <UART_Transmit_IT>
    return;
 8005a9e:	e012      	b.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d008      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f93a 	bl	8005d2e <UART_EndTransmit_IT>
    return;
 8005aba:	e004      	b.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
    return;
 8005abc:	bf00      	nop
 8005abe:	e002      	b.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ac0:	bf00      	nop
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ac4:	bf00      	nop
  }
}
 8005ac6:	3728      	adds	r7, #40	; 0x28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	08005c69 	.word	0x08005c69

08005ad0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	603b      	str	r3, [r7, #0]
 8005b16:	4613      	mov	r3, r2
 8005b18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1a:	e02c      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d028      	beq.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b2a:	f7fc fcc7 	bl	80024bc <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d21d      	bcs.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	695a      	ldr	r2, [r3, #20]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0201 	bic.w	r2, r2, #1
 8005b58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e00f      	b.n	8005b96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	bf0c      	ite	eq
 8005b86:	2301      	moveq	r3, #1
 8005b88:	2300      	movne	r3, #0
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d0c3      	beq.n	8005b1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	60f8      	str	r0, [r7, #12]
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2222      	movs	r2, #34	; 0x22
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005be2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0220 	orr.w	r2, r2, #32
 8005c02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0201 	bic.w	r2, r2, #1
 8005c36:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0210 	bic.w	r2, r2, #16
 8005c4e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr

08005c68 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f7ff ff2d 	bl	8005ae2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b21      	cmp	r3, #33	; 0x21
 8005ca2:	d13e      	bne.n	8005d22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cac:	d114      	bne.n	8005cd8 <UART_Transmit_IT+0x48>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d110      	bne.n	8005cd8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	1c9a      	adds	r2, r3, #2
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]
 8005cd6:	e008      	b.n	8005cea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6211      	str	r1, [r2, #32]
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68da      	ldr	r2, [r3, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e000      	b.n	8005d24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d22:	2302      	movs	r3, #2
  }
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68da      	ldr	r2, [r3, #12]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff febe 	bl	8005ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b22      	cmp	r3, #34	; 0x22
 8005d70:	f040 8099 	bne.w	8005ea6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7c:	d117      	bne.n	8005dae <UART_Receive_IT+0x50>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d113      	bne.n	8005dae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	1c9a      	adds	r2, r3, #2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28
 8005dac:	e026      	b.n	8005dfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d007      	beq.n	8005dd2 <UART_Receive_IT+0x74>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <UART_Receive_IT+0x82>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e008      	b.n	8005df2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	4619      	mov	r1, r3
 8005e0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d148      	bne.n	8005ea2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0220 	bic.w	r2, r2, #32
 8005e1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d123      	bne.n	8005e98 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0210 	bic.w	r2, r2, #16
 8005e64:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b10      	cmp	r3, #16
 8005e72:	d10a      	bne.n	8005e8a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff fe2f 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
 8005e96:	e002      	b.n	8005e9e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7fb ff91 	bl	8001dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e002      	b.n	8005ea8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e000      	b.n	8005ea8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
  }
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005eea:	f023 030c 	bic.w	r3, r3, #12
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6812      	ldr	r2, [r2, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699a      	ldr	r2, [r3, #24]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <UART_SetConfig+0x114>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d103      	bne.n	8005f20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f18:	f7fe fdda 	bl	8004ad0 <HAL_RCC_GetPCLK2Freq>
 8005f1c:	60f8      	str	r0, [r7, #12]
 8005f1e:	e002      	b.n	8005f26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f20:	f7fe fdc2 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 8005f24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009a      	lsls	r2, r3, #2
 8005f30:	441a      	add	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	4a22      	ldr	r2, [pc, #136]	; (8005fc8 <UART_SetConfig+0x118>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	0119      	lsls	r1, r3, #4
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009a      	lsls	r2, r3, #2
 8005f50:	441a      	add	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f5c:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <UART_SetConfig+0x118>)
 8005f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005f62:	095b      	lsrs	r3, r3, #5
 8005f64:	2064      	movs	r0, #100	; 0x64
 8005f66:	fb00 f303 	mul.w	r3, r0, r3
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	3332      	adds	r3, #50	; 0x32
 8005f70:	4a15      	ldr	r2, [pc, #84]	; (8005fc8 <UART_SetConfig+0x118>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f7c:	4419      	add	r1, r3
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	009a      	lsls	r2, r3, #2
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f94:	4b0c      	ldr	r3, [pc, #48]	; (8005fc8 <UART_SetConfig+0x118>)
 8005f96:	fba3 0302 	umull	r0, r3, r3, r2
 8005f9a:	095b      	lsrs	r3, r3, #5
 8005f9c:	2064      	movs	r0, #100	; 0x64
 8005f9e:	fb00 f303 	mul.w	r3, r0, r3
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	3332      	adds	r3, #50	; 0x32
 8005fa8:	4a07      	ldr	r2, [pc, #28]	; (8005fc8 <UART_SetConfig+0x118>)
 8005faa:	fba2 2303 	umull	r2, r3, r2, r3
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	f003 020f 	and.w	r2, r3, #15
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	440a      	add	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40013800 	.word	0x40013800
 8005fc8:	51eb851f 	.word	0x51eb851f

08005fcc <atof>:
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f001 b80b 	b.w	8006fe8 <strtod>
	...

08005fd4 <calloc>:
 8005fd4:	4b02      	ldr	r3, [pc, #8]	; (8005fe0 <calloc+0xc>)
 8005fd6:	460a      	mov	r2, r1
 8005fd8:	4601      	mov	r1, r0
 8005fda:	6818      	ldr	r0, [r3, #0]
 8005fdc:	f000 b86c 	b.w	80060b8 <_calloc_r>
 8005fe0:	20000078 	.word	0x20000078

08005fe4 <__errno>:
 8005fe4:	4b01      	ldr	r3, [pc, #4]	; (8005fec <__errno+0x8>)
 8005fe6:	6818      	ldr	r0, [r3, #0]
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000078 	.word	0x20000078

08005ff0 <__libc_init_array>:
 8005ff0:	b570      	push	{r4, r5, r6, lr}
 8005ff2:	2600      	movs	r6, #0
 8005ff4:	4d0c      	ldr	r5, [pc, #48]	; (8006028 <__libc_init_array+0x38>)
 8005ff6:	4c0d      	ldr	r4, [pc, #52]	; (800602c <__libc_init_array+0x3c>)
 8005ff8:	1b64      	subs	r4, r4, r5
 8005ffa:	10a4      	asrs	r4, r4, #2
 8005ffc:	42a6      	cmp	r6, r4
 8005ffe:	d109      	bne.n	8006014 <__libc_init_array+0x24>
 8006000:	f004 fc74 	bl	800a8ec <_init>
 8006004:	2600      	movs	r6, #0
 8006006:	4d0a      	ldr	r5, [pc, #40]	; (8006030 <__libc_init_array+0x40>)
 8006008:	4c0a      	ldr	r4, [pc, #40]	; (8006034 <__libc_init_array+0x44>)
 800600a:	1b64      	subs	r4, r4, r5
 800600c:	10a4      	asrs	r4, r4, #2
 800600e:	42a6      	cmp	r6, r4
 8006010:	d105      	bne.n	800601e <__libc_init_array+0x2e>
 8006012:	bd70      	pop	{r4, r5, r6, pc}
 8006014:	f855 3b04 	ldr.w	r3, [r5], #4
 8006018:	4798      	blx	r3
 800601a:	3601      	adds	r6, #1
 800601c:	e7ee      	b.n	8005ffc <__libc_init_array+0xc>
 800601e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006022:	4798      	blx	r3
 8006024:	3601      	adds	r6, #1
 8006026:	e7f2      	b.n	800600e <__libc_init_array+0x1e>
 8006028:	0800ae70 	.word	0x0800ae70
 800602c:	0800ae70 	.word	0x0800ae70
 8006030:	0800ae70 	.word	0x0800ae70
 8006034:	0800ae74 	.word	0x0800ae74

08006038 <__itoa>:
 8006038:	1e93      	subs	r3, r2, #2
 800603a:	2b22      	cmp	r3, #34	; 0x22
 800603c:	b510      	push	{r4, lr}
 800603e:	460c      	mov	r4, r1
 8006040:	d904      	bls.n	800604c <__itoa+0x14>
 8006042:	2300      	movs	r3, #0
 8006044:	461c      	mov	r4, r3
 8006046:	700b      	strb	r3, [r1, #0]
 8006048:	4620      	mov	r0, r4
 800604a:	bd10      	pop	{r4, pc}
 800604c:	2a0a      	cmp	r2, #10
 800604e:	d109      	bne.n	8006064 <__itoa+0x2c>
 8006050:	2800      	cmp	r0, #0
 8006052:	da07      	bge.n	8006064 <__itoa+0x2c>
 8006054:	232d      	movs	r3, #45	; 0x2d
 8006056:	700b      	strb	r3, [r1, #0]
 8006058:	2101      	movs	r1, #1
 800605a:	4240      	negs	r0, r0
 800605c:	4421      	add	r1, r4
 800605e:	f000 ffcf 	bl	8007000 <__utoa>
 8006062:	e7f1      	b.n	8006048 <__itoa+0x10>
 8006064:	2100      	movs	r1, #0
 8006066:	e7f9      	b.n	800605c <__itoa+0x24>

08006068 <itoa>:
 8006068:	f7ff bfe6 	b.w	8006038 <__itoa>

0800606c <malloc>:
 800606c:	4b02      	ldr	r3, [pc, #8]	; (8006078 <malloc+0xc>)
 800606e:	4601      	mov	r1, r0
 8006070:	6818      	ldr	r0, [r3, #0]
 8006072:	f000 b89d 	b.w	80061b0 <_malloc_r>
 8006076:	bf00      	nop
 8006078:	20000078 	.word	0x20000078

0800607c <free>:
 800607c:	4b02      	ldr	r3, [pc, #8]	; (8006088 <free+0xc>)
 800607e:	4601      	mov	r1, r0
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	f000 b82d 	b.w	80060e0 <_free_r>
 8006086:	bf00      	nop
 8006088:	20000078 	.word	0x20000078

0800608c <memcpy>:
 800608c:	440a      	add	r2, r1
 800608e:	4291      	cmp	r1, r2
 8006090:	f100 33ff 	add.w	r3, r0, #4294967295
 8006094:	d100      	bne.n	8006098 <memcpy+0xc>
 8006096:	4770      	bx	lr
 8006098:	b510      	push	{r4, lr}
 800609a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800609e:	4291      	cmp	r1, r2
 80060a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a4:	d1f9      	bne.n	800609a <memcpy+0xe>
 80060a6:	bd10      	pop	{r4, pc}

080060a8 <memset>:
 80060a8:	4603      	mov	r3, r0
 80060aa:	4402      	add	r2, r0
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d100      	bne.n	80060b2 <memset+0xa>
 80060b0:	4770      	bx	lr
 80060b2:	f803 1b01 	strb.w	r1, [r3], #1
 80060b6:	e7f9      	b.n	80060ac <memset+0x4>

080060b8 <_calloc_r>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	fba1 5402 	umull	r5, r4, r1, r2
 80060be:	b934      	cbnz	r4, 80060ce <_calloc_r+0x16>
 80060c0:	4629      	mov	r1, r5
 80060c2:	f000 f875 	bl	80061b0 <_malloc_r>
 80060c6:	4606      	mov	r6, r0
 80060c8:	b928      	cbnz	r0, 80060d6 <_calloc_r+0x1e>
 80060ca:	4630      	mov	r0, r6
 80060cc:	bd70      	pop	{r4, r5, r6, pc}
 80060ce:	220c      	movs	r2, #12
 80060d0:	2600      	movs	r6, #0
 80060d2:	6002      	str	r2, [r0, #0]
 80060d4:	e7f9      	b.n	80060ca <_calloc_r+0x12>
 80060d6:	462a      	mov	r2, r5
 80060d8:	4621      	mov	r1, r4
 80060da:	f7ff ffe5 	bl	80060a8 <memset>
 80060de:	e7f4      	b.n	80060ca <_calloc_r+0x12>

080060e0 <_free_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4605      	mov	r5, r0
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d040      	beq.n	800616a <_free_r+0x8a>
 80060e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ec:	1f0c      	subs	r4, r1, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bfb8      	it	lt
 80060f2:	18e4      	addlt	r4, r4, r3
 80060f4:	f001 fb72 	bl	80077dc <__malloc_lock>
 80060f8:	4a1c      	ldr	r2, [pc, #112]	; (800616c <_free_r+0x8c>)
 80060fa:	6813      	ldr	r3, [r2, #0]
 80060fc:	b933      	cbnz	r3, 800610c <_free_r+0x2c>
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	6014      	str	r4, [r2, #0]
 8006102:	4628      	mov	r0, r5
 8006104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006108:	f001 bb6e 	b.w	80077e8 <__malloc_unlock>
 800610c:	42a3      	cmp	r3, r4
 800610e:	d908      	bls.n	8006122 <_free_r+0x42>
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	1821      	adds	r1, r4, r0
 8006114:	428b      	cmp	r3, r1
 8006116:	bf01      	itttt	eq
 8006118:	6819      	ldreq	r1, [r3, #0]
 800611a:	685b      	ldreq	r3, [r3, #4]
 800611c:	1809      	addeq	r1, r1, r0
 800611e:	6021      	streq	r1, [r4, #0]
 8006120:	e7ed      	b.n	80060fe <_free_r+0x1e>
 8006122:	461a      	mov	r2, r3
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b10b      	cbz	r3, 800612c <_free_r+0x4c>
 8006128:	42a3      	cmp	r3, r4
 800612a:	d9fa      	bls.n	8006122 <_free_r+0x42>
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	1850      	adds	r0, r2, r1
 8006130:	42a0      	cmp	r0, r4
 8006132:	d10b      	bne.n	800614c <_free_r+0x6c>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	4401      	add	r1, r0
 8006138:	1850      	adds	r0, r2, r1
 800613a:	4283      	cmp	r3, r0
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	d1e0      	bne.n	8006102 <_free_r+0x22>
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4401      	add	r1, r0
 8006146:	6011      	str	r1, [r2, #0]
 8006148:	6053      	str	r3, [r2, #4]
 800614a:	e7da      	b.n	8006102 <_free_r+0x22>
 800614c:	d902      	bls.n	8006154 <_free_r+0x74>
 800614e:	230c      	movs	r3, #12
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	e7d6      	b.n	8006102 <_free_r+0x22>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	1821      	adds	r1, r4, r0
 8006158:	428b      	cmp	r3, r1
 800615a:	bf01      	itttt	eq
 800615c:	6819      	ldreq	r1, [r3, #0]
 800615e:	685b      	ldreq	r3, [r3, #4]
 8006160:	1809      	addeq	r1, r1, r0
 8006162:	6021      	streq	r1, [r4, #0]
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6054      	str	r4, [r2, #4]
 8006168:	e7cb      	b.n	8006102 <_free_r+0x22>
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000428 	.word	0x20000428

08006170 <sbrk_aligned>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4e0e      	ldr	r6, [pc, #56]	; (80061ac <sbrk_aligned+0x3c>)
 8006174:	460c      	mov	r4, r1
 8006176:	6831      	ldr	r1, [r6, #0]
 8006178:	4605      	mov	r5, r0
 800617a:	b911      	cbnz	r1, 8006182 <sbrk_aligned+0x12>
 800617c:	f000 f88c 	bl	8006298 <_sbrk_r>
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f000 f887 	bl	8006298 <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d00a      	beq.n	80061a4 <sbrk_aligned+0x34>
 800618e:	1cc4      	adds	r4, r0, #3
 8006190:	f024 0403 	bic.w	r4, r4, #3
 8006194:	42a0      	cmp	r0, r4
 8006196:	d007      	beq.n	80061a8 <sbrk_aligned+0x38>
 8006198:	1a21      	subs	r1, r4, r0
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f87c 	bl	8006298 <_sbrk_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d101      	bne.n	80061a8 <sbrk_aligned+0x38>
 80061a4:	f04f 34ff 	mov.w	r4, #4294967295
 80061a8:	4620      	mov	r0, r4
 80061aa:	bd70      	pop	{r4, r5, r6, pc}
 80061ac:	2000042c 	.word	0x2000042c

080061b0 <_malloc_r>:
 80061b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b4:	1ccd      	adds	r5, r1, #3
 80061b6:	f025 0503 	bic.w	r5, r5, #3
 80061ba:	3508      	adds	r5, #8
 80061bc:	2d0c      	cmp	r5, #12
 80061be:	bf38      	it	cc
 80061c0:	250c      	movcc	r5, #12
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	4607      	mov	r7, r0
 80061c6:	db01      	blt.n	80061cc <_malloc_r+0x1c>
 80061c8:	42a9      	cmp	r1, r5
 80061ca:	d905      	bls.n	80061d8 <_malloc_r+0x28>
 80061cc:	230c      	movs	r3, #12
 80061ce:	2600      	movs	r6, #0
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4630      	mov	r0, r6
 80061d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d8:	4e2e      	ldr	r6, [pc, #184]	; (8006294 <_malloc_r+0xe4>)
 80061da:	f001 faff 	bl	80077dc <__malloc_lock>
 80061de:	6833      	ldr	r3, [r6, #0]
 80061e0:	461c      	mov	r4, r3
 80061e2:	bb34      	cbnz	r4, 8006232 <_malloc_r+0x82>
 80061e4:	4629      	mov	r1, r5
 80061e6:	4638      	mov	r0, r7
 80061e8:	f7ff ffc2 	bl	8006170 <sbrk_aligned>
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	4604      	mov	r4, r0
 80061f0:	d14d      	bne.n	800628e <_malloc_r+0xde>
 80061f2:	6834      	ldr	r4, [r6, #0]
 80061f4:	4626      	mov	r6, r4
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	d140      	bne.n	800627c <_malloc_r+0xcc>
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	4631      	mov	r1, r6
 80061fe:	4638      	mov	r0, r7
 8006200:	eb04 0803 	add.w	r8, r4, r3
 8006204:	f000 f848 	bl	8006298 <_sbrk_r>
 8006208:	4580      	cmp	r8, r0
 800620a:	d13a      	bne.n	8006282 <_malloc_r+0xd2>
 800620c:	6821      	ldr	r1, [r4, #0]
 800620e:	3503      	adds	r5, #3
 8006210:	1a6d      	subs	r5, r5, r1
 8006212:	f025 0503 	bic.w	r5, r5, #3
 8006216:	3508      	adds	r5, #8
 8006218:	2d0c      	cmp	r5, #12
 800621a:	bf38      	it	cc
 800621c:	250c      	movcc	r5, #12
 800621e:	4638      	mov	r0, r7
 8006220:	4629      	mov	r1, r5
 8006222:	f7ff ffa5 	bl	8006170 <sbrk_aligned>
 8006226:	3001      	adds	r0, #1
 8006228:	d02b      	beq.n	8006282 <_malloc_r+0xd2>
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	442b      	add	r3, r5
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	e00e      	b.n	8006250 <_malloc_r+0xa0>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	1b52      	subs	r2, r2, r5
 8006236:	d41e      	bmi.n	8006276 <_malloc_r+0xc6>
 8006238:	2a0b      	cmp	r2, #11
 800623a:	d916      	bls.n	800626a <_malloc_r+0xba>
 800623c:	1961      	adds	r1, r4, r5
 800623e:	42a3      	cmp	r3, r4
 8006240:	6025      	str	r5, [r4, #0]
 8006242:	bf18      	it	ne
 8006244:	6059      	strne	r1, [r3, #4]
 8006246:	6863      	ldr	r3, [r4, #4]
 8006248:	bf08      	it	eq
 800624a:	6031      	streq	r1, [r6, #0]
 800624c:	5162      	str	r2, [r4, r5]
 800624e:	604b      	str	r3, [r1, #4]
 8006250:	4638      	mov	r0, r7
 8006252:	f104 060b 	add.w	r6, r4, #11
 8006256:	f001 fac7 	bl	80077e8 <__malloc_unlock>
 800625a:	f026 0607 	bic.w	r6, r6, #7
 800625e:	1d23      	adds	r3, r4, #4
 8006260:	1af2      	subs	r2, r6, r3
 8006262:	d0b6      	beq.n	80061d2 <_malloc_r+0x22>
 8006264:	1b9b      	subs	r3, r3, r6
 8006266:	50a3      	str	r3, [r4, r2]
 8006268:	e7b3      	b.n	80061d2 <_malloc_r+0x22>
 800626a:	6862      	ldr	r2, [r4, #4]
 800626c:	42a3      	cmp	r3, r4
 800626e:	bf0c      	ite	eq
 8006270:	6032      	streq	r2, [r6, #0]
 8006272:	605a      	strne	r2, [r3, #4]
 8006274:	e7ec      	b.n	8006250 <_malloc_r+0xa0>
 8006276:	4623      	mov	r3, r4
 8006278:	6864      	ldr	r4, [r4, #4]
 800627a:	e7b2      	b.n	80061e2 <_malloc_r+0x32>
 800627c:	4634      	mov	r4, r6
 800627e:	6876      	ldr	r6, [r6, #4]
 8006280:	e7b9      	b.n	80061f6 <_malloc_r+0x46>
 8006282:	230c      	movs	r3, #12
 8006284:	4638      	mov	r0, r7
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	f001 faae 	bl	80077e8 <__malloc_unlock>
 800628c:	e7a1      	b.n	80061d2 <_malloc_r+0x22>
 800628e:	6025      	str	r5, [r4, #0]
 8006290:	e7de      	b.n	8006250 <_malloc_r+0xa0>
 8006292:	bf00      	nop
 8006294:	20000428 	.word	0x20000428

08006298 <_sbrk_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	2300      	movs	r3, #0
 800629c:	4d05      	ldr	r5, [pc, #20]	; (80062b4 <_sbrk_r+0x1c>)
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fb ff94 	bl	80021d0 <_sbrk>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_sbrk_r+0x1a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_sbrk_r+0x1a>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	20000430 	.word	0x20000430

080062b8 <siprintf>:
 80062b8:	b40e      	push	{r1, r2, r3}
 80062ba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062be:	b500      	push	{lr}
 80062c0:	b09c      	sub	sp, #112	; 0x70
 80062c2:	ab1d      	add	r3, sp, #116	; 0x74
 80062c4:	9002      	str	r0, [sp, #8]
 80062c6:	9006      	str	r0, [sp, #24]
 80062c8:	9107      	str	r1, [sp, #28]
 80062ca:	9104      	str	r1, [sp, #16]
 80062cc:	4808      	ldr	r0, [pc, #32]	; (80062f0 <siprintf+0x38>)
 80062ce:	4909      	ldr	r1, [pc, #36]	; (80062f4 <siprintf+0x3c>)
 80062d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d4:	9105      	str	r1, [sp, #20]
 80062d6:	6800      	ldr	r0, [r0, #0]
 80062d8:	a902      	add	r1, sp, #8
 80062da:	9301      	str	r3, [sp, #4]
 80062dc:	f001 ff9e 	bl	800821c <_svfiprintf_r>
 80062e0:	2200      	movs	r2, #0
 80062e2:	9b02      	ldr	r3, [sp, #8]
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	b01c      	add	sp, #112	; 0x70
 80062e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80062ec:	b003      	add	sp, #12
 80062ee:	4770      	bx	lr
 80062f0:	20000078 	.word	0x20000078
 80062f4:	ffff0208 	.word	0xffff0208

080062f8 <siscanf>:
 80062f8:	b40e      	push	{r1, r2, r3}
 80062fa:	f44f 7201 	mov.w	r2, #516	; 0x204
 80062fe:	b530      	push	{r4, r5, lr}
 8006300:	b09c      	sub	sp, #112	; 0x70
 8006302:	ac1f      	add	r4, sp, #124	; 0x7c
 8006304:	f854 5b04 	ldr.w	r5, [r4], #4
 8006308:	f8ad 2014 	strh.w	r2, [sp, #20]
 800630c:	9002      	str	r0, [sp, #8]
 800630e:	9006      	str	r0, [sp, #24]
 8006310:	f7f9 ff8a 	bl	8000228 <strlen>
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <siscanf+0x4c>)
 8006316:	9003      	str	r0, [sp, #12]
 8006318:	930b      	str	r3, [sp, #44]	; 0x2c
 800631a:	2300      	movs	r3, #0
 800631c:	930f      	str	r3, [sp, #60]	; 0x3c
 800631e:	9314      	str	r3, [sp, #80]	; 0x50
 8006320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006324:	9007      	str	r0, [sp, #28]
 8006326:	4808      	ldr	r0, [pc, #32]	; (8006348 <siscanf+0x50>)
 8006328:	f8ad 3016 	strh.w	r3, [sp, #22]
 800632c:	462a      	mov	r2, r5
 800632e:	4623      	mov	r3, r4
 8006330:	a902      	add	r1, sp, #8
 8006332:	6800      	ldr	r0, [r0, #0]
 8006334:	9401      	str	r4, [sp, #4]
 8006336:	f002 f8cb 	bl	80084d0 <__ssvfiscanf_r>
 800633a:	b01c      	add	sp, #112	; 0x70
 800633c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006340:	b003      	add	sp, #12
 8006342:	4770      	bx	lr
 8006344:	0800636f 	.word	0x0800636f
 8006348:	20000078 	.word	0x20000078

0800634c <__sread>:
 800634c:	b510      	push	{r4, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	f002 fd1e 	bl	8008d94 <_read_r>
 8006358:	2800      	cmp	r0, #0
 800635a:	bfab      	itete	ge
 800635c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800635e:	89a3      	ldrhlt	r3, [r4, #12]
 8006360:	181b      	addge	r3, r3, r0
 8006362:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006366:	bfac      	ite	ge
 8006368:	6563      	strge	r3, [r4, #84]	; 0x54
 800636a:	81a3      	strhlt	r3, [r4, #12]
 800636c:	bd10      	pop	{r4, pc}

0800636e <__seofread>:
 800636e:	2000      	movs	r0, #0
 8006370:	4770      	bx	lr

08006372 <__swrite>:
 8006372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006376:	461f      	mov	r7, r3
 8006378:	898b      	ldrh	r3, [r1, #12]
 800637a:	4605      	mov	r5, r0
 800637c:	05db      	lsls	r3, r3, #23
 800637e:	460c      	mov	r4, r1
 8006380:	4616      	mov	r6, r2
 8006382:	d505      	bpl.n	8006390 <__swrite+0x1e>
 8006384:	2302      	movs	r3, #2
 8006386:	2200      	movs	r2, #0
 8006388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800638c:	f001 fa02 	bl	8007794 <_lseek_r>
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	4632      	mov	r2, r6
 8006394:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006398:	81a3      	strh	r3, [r4, #12]
 800639a:	4628      	mov	r0, r5
 800639c:	463b      	mov	r3, r7
 800639e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a6:	f000 be6d 	b.w	8007084 <_write_r>

080063aa <__sseek>:
 80063aa:	b510      	push	{r4, lr}
 80063ac:	460c      	mov	r4, r1
 80063ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b2:	f001 f9ef 	bl	8007794 <_lseek_r>
 80063b6:	1c43      	adds	r3, r0, #1
 80063b8:	89a3      	ldrh	r3, [r4, #12]
 80063ba:	bf15      	itete	ne
 80063bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80063be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063c6:	81a3      	strheq	r3, [r4, #12]
 80063c8:	bf18      	it	ne
 80063ca:	81a3      	strhne	r3, [r4, #12]
 80063cc:	bd10      	pop	{r4, pc}

080063ce <__sclose>:
 80063ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d2:	f000 be69 	b.w	80070a8 <_close_r>

080063d6 <sulp>:
 80063d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	460f      	mov	r7, r1
 80063dc:	4690      	mov	r8, r2
 80063de:	f001 fd79 	bl	8007ed4 <__ulp>
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	f1b8 0f00 	cmp.w	r8, #0
 80063ea:	d011      	beq.n	8006410 <sulp+0x3a>
 80063ec:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80063f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dd0b      	ble.n	8006410 <sulp+0x3a>
 80063f8:	2400      	movs	r4, #0
 80063fa:	051b      	lsls	r3, r3, #20
 80063fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006400:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006404:	4622      	mov	r2, r4
 8006406:	462b      	mov	r3, r5
 8006408:	f7fa f8d2 	bl	80005b0 <__aeabi_dmul>
 800640c:	4604      	mov	r4, r0
 800640e:	460d      	mov	r5, r1
 8006410:	4620      	mov	r0, r4
 8006412:	4629      	mov	r1, r5
 8006414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006418 <_strtod_l>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	469b      	mov	fp, r3
 800641e:	2300      	movs	r3, #0
 8006420:	b09f      	sub	sp, #124	; 0x7c
 8006422:	931a      	str	r3, [sp, #104]	; 0x68
 8006424:	4b9e      	ldr	r3, [pc, #632]	; (80066a0 <_strtod_l+0x288>)
 8006426:	4682      	mov	sl, r0
 8006428:	681f      	ldr	r7, [r3, #0]
 800642a:	460e      	mov	r6, r1
 800642c:	4638      	mov	r0, r7
 800642e:	9215      	str	r2, [sp, #84]	; 0x54
 8006430:	f7f9 fefa 	bl	8000228 <strlen>
 8006434:	f04f 0800 	mov.w	r8, #0
 8006438:	4604      	mov	r4, r0
 800643a:	f04f 0900 	mov.w	r9, #0
 800643e:	9619      	str	r6, [sp, #100]	; 0x64
 8006440:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	2a2b      	cmp	r2, #43	; 0x2b
 8006446:	d04c      	beq.n	80064e2 <_strtod_l+0xca>
 8006448:	d83a      	bhi.n	80064c0 <_strtod_l+0xa8>
 800644a:	2a0d      	cmp	r2, #13
 800644c:	d833      	bhi.n	80064b6 <_strtod_l+0x9e>
 800644e:	2a08      	cmp	r2, #8
 8006450:	d833      	bhi.n	80064ba <_strtod_l+0xa2>
 8006452:	2a00      	cmp	r2, #0
 8006454:	d03d      	beq.n	80064d2 <_strtod_l+0xba>
 8006456:	2300      	movs	r3, #0
 8006458:	930a      	str	r3, [sp, #40]	; 0x28
 800645a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800645c:	782b      	ldrb	r3, [r5, #0]
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	f040 80aa 	bne.w	80065b8 <_strtod_l+0x1a0>
 8006464:	786b      	ldrb	r3, [r5, #1]
 8006466:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800646a:	2b58      	cmp	r3, #88	; 0x58
 800646c:	d166      	bne.n	800653c <_strtod_l+0x124>
 800646e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006470:	4650      	mov	r0, sl
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	ab1a      	add	r3, sp, #104	; 0x68
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4a8a      	ldr	r2, [pc, #552]	; (80066a4 <_strtod_l+0x28c>)
 800647a:	f8cd b008 	str.w	fp, [sp, #8]
 800647e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006480:	a919      	add	r1, sp, #100	; 0x64
 8006482:	f000 fe89 	bl	8007198 <__gethex>
 8006486:	f010 0607 	ands.w	r6, r0, #7
 800648a:	4604      	mov	r4, r0
 800648c:	d005      	beq.n	800649a <_strtod_l+0x82>
 800648e:	2e06      	cmp	r6, #6
 8006490:	d129      	bne.n	80064e6 <_strtod_l+0xce>
 8006492:	2300      	movs	r3, #0
 8006494:	3501      	adds	r5, #1
 8006496:	9519      	str	r5, [sp, #100]	; 0x64
 8006498:	930a      	str	r3, [sp, #40]	; 0x28
 800649a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800649c:	2b00      	cmp	r3, #0
 800649e:	f040 858a 	bne.w	8006fb6 <_strtod_l+0xb9e>
 80064a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a4:	b1d3      	cbz	r3, 80064dc <_strtod_l+0xc4>
 80064a6:	4642      	mov	r2, r8
 80064a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	b01f      	add	sp, #124	; 0x7c
 80064b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b6:	2a20      	cmp	r2, #32
 80064b8:	d1cd      	bne.n	8006456 <_strtod_l+0x3e>
 80064ba:	3301      	adds	r3, #1
 80064bc:	9319      	str	r3, [sp, #100]	; 0x64
 80064be:	e7bf      	b.n	8006440 <_strtod_l+0x28>
 80064c0:	2a2d      	cmp	r2, #45	; 0x2d
 80064c2:	d1c8      	bne.n	8006456 <_strtod_l+0x3e>
 80064c4:	2201      	movs	r2, #1
 80064c6:	920a      	str	r2, [sp, #40]	; 0x28
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	9219      	str	r2, [sp, #100]	; 0x64
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1c3      	bne.n	800645a <_strtod_l+0x42>
 80064d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064d4:	9619      	str	r6, [sp, #100]	; 0x64
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f040 856b 	bne.w	8006fb2 <_strtod_l+0xb9a>
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	e7e4      	b.n	80064ac <_strtod_l+0x94>
 80064e2:	2200      	movs	r2, #0
 80064e4:	e7ef      	b.n	80064c6 <_strtod_l+0xae>
 80064e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80064e8:	b13a      	cbz	r2, 80064fa <_strtod_l+0xe2>
 80064ea:	2135      	movs	r1, #53	; 0x35
 80064ec:	a81c      	add	r0, sp, #112	; 0x70
 80064ee:	f001 fdf5 	bl	80080dc <__copybits>
 80064f2:	4650      	mov	r0, sl
 80064f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80064f6:	f001 f9bd 	bl	8007874 <_Bfree>
 80064fa:	3e01      	subs	r6, #1
 80064fc:	2e04      	cmp	r6, #4
 80064fe:	d806      	bhi.n	800650e <_strtod_l+0xf6>
 8006500:	e8df f006 	tbb	[pc, r6]
 8006504:	1714030a 	.word	0x1714030a
 8006508:	0a          	.byte	0x0a
 8006509:	00          	.byte	0x00
 800650a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800650e:	0721      	lsls	r1, r4, #28
 8006510:	d5c3      	bpl.n	800649a <_strtod_l+0x82>
 8006512:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006516:	e7c0      	b.n	800649a <_strtod_l+0x82>
 8006518:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800651a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800651e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006522:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006526:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800652a:	e7f0      	b.n	800650e <_strtod_l+0xf6>
 800652c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80066a8 <_strtod_l+0x290>
 8006530:	e7ed      	b.n	800650e <_strtod_l+0xf6>
 8006532:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006536:	f04f 38ff 	mov.w	r8, #4294967295
 800653a:	e7e8      	b.n	800650e <_strtod_l+0xf6>
 800653c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	9219      	str	r2, [sp, #100]	; 0x64
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d0f9      	beq.n	800653c <_strtod_l+0x124>
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0a6      	beq.n	800649a <_strtod_l+0x82>
 800654c:	2301      	movs	r3, #1
 800654e:	9307      	str	r3, [sp, #28]
 8006550:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006552:	220a      	movs	r2, #10
 8006554:	9308      	str	r3, [sp, #32]
 8006556:	2300      	movs	r3, #0
 8006558:	469b      	mov	fp, r3
 800655a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800655e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006560:	7805      	ldrb	r5, [r0, #0]
 8006562:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006566:	b2d9      	uxtb	r1, r3
 8006568:	2909      	cmp	r1, #9
 800656a:	d927      	bls.n	80065bc <_strtod_l+0x1a4>
 800656c:	4622      	mov	r2, r4
 800656e:	4639      	mov	r1, r7
 8006570:	f002 fc60 	bl	8008e34 <strncmp>
 8006574:	2800      	cmp	r0, #0
 8006576:	d033      	beq.n	80065e0 <_strtod_l+0x1c8>
 8006578:	2000      	movs	r0, #0
 800657a:	462a      	mov	r2, r5
 800657c:	465c      	mov	r4, fp
 800657e:	4603      	mov	r3, r0
 8006580:	9004      	str	r0, [sp, #16]
 8006582:	2a65      	cmp	r2, #101	; 0x65
 8006584:	d001      	beq.n	800658a <_strtod_l+0x172>
 8006586:	2a45      	cmp	r2, #69	; 0x45
 8006588:	d114      	bne.n	80065b4 <_strtod_l+0x19c>
 800658a:	b91c      	cbnz	r4, 8006594 <_strtod_l+0x17c>
 800658c:	9a07      	ldr	r2, [sp, #28]
 800658e:	4302      	orrs	r2, r0
 8006590:	d09f      	beq.n	80064d2 <_strtod_l+0xba>
 8006592:	2400      	movs	r4, #0
 8006594:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006596:	1c72      	adds	r2, r6, #1
 8006598:	9219      	str	r2, [sp, #100]	; 0x64
 800659a:	7872      	ldrb	r2, [r6, #1]
 800659c:	2a2b      	cmp	r2, #43	; 0x2b
 800659e:	d079      	beq.n	8006694 <_strtod_l+0x27c>
 80065a0:	2a2d      	cmp	r2, #45	; 0x2d
 80065a2:	f000 8083 	beq.w	80066ac <_strtod_l+0x294>
 80065a6:	2700      	movs	r7, #0
 80065a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80065ac:	2909      	cmp	r1, #9
 80065ae:	f240 8083 	bls.w	80066b8 <_strtod_l+0x2a0>
 80065b2:	9619      	str	r6, [sp, #100]	; 0x64
 80065b4:	2500      	movs	r5, #0
 80065b6:	e09f      	b.n	80066f8 <_strtod_l+0x2e0>
 80065b8:	2300      	movs	r3, #0
 80065ba:	e7c8      	b.n	800654e <_strtod_l+0x136>
 80065bc:	f1bb 0f08 	cmp.w	fp, #8
 80065c0:	bfd5      	itete	le
 80065c2:	9906      	ldrle	r1, [sp, #24]
 80065c4:	9905      	ldrgt	r1, [sp, #20]
 80065c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80065ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 80065ce:	f100 0001 	add.w	r0, r0, #1
 80065d2:	bfd4      	ite	le
 80065d4:	9306      	strle	r3, [sp, #24]
 80065d6:	9305      	strgt	r3, [sp, #20]
 80065d8:	f10b 0b01 	add.w	fp, fp, #1
 80065dc:	9019      	str	r0, [sp, #100]	; 0x64
 80065de:	e7be      	b.n	800655e <_strtod_l+0x146>
 80065e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065e2:	191a      	adds	r2, r3, r4
 80065e4:	9219      	str	r2, [sp, #100]	; 0x64
 80065e6:	5d1a      	ldrb	r2, [r3, r4]
 80065e8:	f1bb 0f00 	cmp.w	fp, #0
 80065ec:	d036      	beq.n	800665c <_strtod_l+0x244>
 80065ee:	465c      	mov	r4, fp
 80065f0:	9004      	str	r0, [sp, #16]
 80065f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80065f6:	2b09      	cmp	r3, #9
 80065f8:	d912      	bls.n	8006620 <_strtod_l+0x208>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e7c1      	b.n	8006582 <_strtod_l+0x16a>
 80065fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006600:	3001      	adds	r0, #1
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	9219      	str	r2, [sp, #100]	; 0x64
 8006606:	785a      	ldrb	r2, [r3, #1]
 8006608:	2a30      	cmp	r2, #48	; 0x30
 800660a:	d0f8      	beq.n	80065fe <_strtod_l+0x1e6>
 800660c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006610:	2b08      	cmp	r3, #8
 8006612:	f200 84d5 	bhi.w	8006fc0 <_strtod_l+0xba8>
 8006616:	9004      	str	r0, [sp, #16]
 8006618:	2000      	movs	r0, #0
 800661a:	4604      	mov	r4, r0
 800661c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800661e:	9308      	str	r3, [sp, #32]
 8006620:	3a30      	subs	r2, #48	; 0x30
 8006622:	f100 0301 	add.w	r3, r0, #1
 8006626:	d013      	beq.n	8006650 <_strtod_l+0x238>
 8006628:	9904      	ldr	r1, [sp, #16]
 800662a:	1905      	adds	r5, r0, r4
 800662c:	4419      	add	r1, r3
 800662e:	9104      	str	r1, [sp, #16]
 8006630:	4623      	mov	r3, r4
 8006632:	210a      	movs	r1, #10
 8006634:	42ab      	cmp	r3, r5
 8006636:	d113      	bne.n	8006660 <_strtod_l+0x248>
 8006638:	1823      	adds	r3, r4, r0
 800663a:	2b08      	cmp	r3, #8
 800663c:	f104 0401 	add.w	r4, r4, #1
 8006640:	4404      	add	r4, r0
 8006642:	dc1b      	bgt.n	800667c <_strtod_l+0x264>
 8006644:	230a      	movs	r3, #10
 8006646:	9906      	ldr	r1, [sp, #24]
 8006648:	fb03 2301 	mla	r3, r3, r1, r2
 800664c:	9306      	str	r3, [sp, #24]
 800664e:	2300      	movs	r3, #0
 8006650:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006652:	4618      	mov	r0, r3
 8006654:	1c51      	adds	r1, r2, #1
 8006656:	9119      	str	r1, [sp, #100]	; 0x64
 8006658:	7852      	ldrb	r2, [r2, #1]
 800665a:	e7ca      	b.n	80065f2 <_strtod_l+0x1da>
 800665c:	4658      	mov	r0, fp
 800665e:	e7d3      	b.n	8006608 <_strtod_l+0x1f0>
 8006660:	2b08      	cmp	r3, #8
 8006662:	dc04      	bgt.n	800666e <_strtod_l+0x256>
 8006664:	9f06      	ldr	r7, [sp, #24]
 8006666:	434f      	muls	r7, r1
 8006668:	9706      	str	r7, [sp, #24]
 800666a:	3301      	adds	r3, #1
 800666c:	e7e2      	b.n	8006634 <_strtod_l+0x21c>
 800666e:	1c5f      	adds	r7, r3, #1
 8006670:	2f10      	cmp	r7, #16
 8006672:	bfde      	ittt	le
 8006674:	9f05      	ldrle	r7, [sp, #20]
 8006676:	434f      	mulle	r7, r1
 8006678:	9705      	strle	r7, [sp, #20]
 800667a:	e7f6      	b.n	800666a <_strtod_l+0x252>
 800667c:	2c10      	cmp	r4, #16
 800667e:	bfdf      	itttt	le
 8006680:	230a      	movle	r3, #10
 8006682:	9905      	ldrle	r1, [sp, #20]
 8006684:	fb03 2301 	mlale	r3, r3, r1, r2
 8006688:	9305      	strle	r3, [sp, #20]
 800668a:	e7e0      	b.n	800664e <_strtod_l+0x236>
 800668c:	2300      	movs	r3, #0
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	2301      	movs	r3, #1
 8006692:	e77b      	b.n	800658c <_strtod_l+0x174>
 8006694:	2700      	movs	r7, #0
 8006696:	1cb2      	adds	r2, r6, #2
 8006698:	9219      	str	r2, [sp, #100]	; 0x64
 800669a:	78b2      	ldrb	r2, [r6, #2]
 800669c:	e784      	b.n	80065a8 <_strtod_l+0x190>
 800669e:	bf00      	nop
 80066a0:	0800aacc 	.word	0x0800aacc
 80066a4:	0800a9dc 	.word	0x0800a9dc
 80066a8:	7ff00000 	.word	0x7ff00000
 80066ac:	2701      	movs	r7, #1
 80066ae:	e7f2      	b.n	8006696 <_strtod_l+0x27e>
 80066b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80066b2:	1c51      	adds	r1, r2, #1
 80066b4:	9119      	str	r1, [sp, #100]	; 0x64
 80066b6:	7852      	ldrb	r2, [r2, #1]
 80066b8:	2a30      	cmp	r2, #48	; 0x30
 80066ba:	d0f9      	beq.n	80066b0 <_strtod_l+0x298>
 80066bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80066c0:	2908      	cmp	r1, #8
 80066c2:	f63f af77 	bhi.w	80065b4 <_strtod_l+0x19c>
 80066c6:	f04f 0e0a 	mov.w	lr, #10
 80066ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80066ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80066d0:	9209      	str	r2, [sp, #36]	; 0x24
 80066d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80066d4:	1c51      	adds	r1, r2, #1
 80066d6:	9119      	str	r1, [sp, #100]	; 0x64
 80066d8:	7852      	ldrb	r2, [r2, #1]
 80066da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80066de:	2d09      	cmp	r5, #9
 80066e0:	d935      	bls.n	800674e <_strtod_l+0x336>
 80066e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80066e4:	1b49      	subs	r1, r1, r5
 80066e6:	2908      	cmp	r1, #8
 80066e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80066ec:	dc02      	bgt.n	80066f4 <_strtod_l+0x2dc>
 80066ee:	4565      	cmp	r5, ip
 80066f0:	bfa8      	it	ge
 80066f2:	4665      	movge	r5, ip
 80066f4:	b107      	cbz	r7, 80066f8 <_strtod_l+0x2e0>
 80066f6:	426d      	negs	r5, r5
 80066f8:	2c00      	cmp	r4, #0
 80066fa:	d14c      	bne.n	8006796 <_strtod_l+0x37e>
 80066fc:	9907      	ldr	r1, [sp, #28]
 80066fe:	4301      	orrs	r1, r0
 8006700:	f47f aecb 	bne.w	800649a <_strtod_l+0x82>
 8006704:	2b00      	cmp	r3, #0
 8006706:	f47f aee4 	bne.w	80064d2 <_strtod_l+0xba>
 800670a:	2a69      	cmp	r2, #105	; 0x69
 800670c:	d026      	beq.n	800675c <_strtod_l+0x344>
 800670e:	dc23      	bgt.n	8006758 <_strtod_l+0x340>
 8006710:	2a49      	cmp	r2, #73	; 0x49
 8006712:	d023      	beq.n	800675c <_strtod_l+0x344>
 8006714:	2a4e      	cmp	r2, #78	; 0x4e
 8006716:	f47f aedc 	bne.w	80064d2 <_strtod_l+0xba>
 800671a:	499d      	ldr	r1, [pc, #628]	; (8006990 <_strtod_l+0x578>)
 800671c:	a819      	add	r0, sp, #100	; 0x64
 800671e:	f000 ff89 	bl	8007634 <__match>
 8006722:	2800      	cmp	r0, #0
 8006724:	f43f aed5 	beq.w	80064d2 <_strtod_l+0xba>
 8006728:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b28      	cmp	r3, #40	; 0x28
 800672e:	d12c      	bne.n	800678a <_strtod_l+0x372>
 8006730:	4998      	ldr	r1, [pc, #608]	; (8006994 <_strtod_l+0x57c>)
 8006732:	aa1c      	add	r2, sp, #112	; 0x70
 8006734:	a819      	add	r0, sp, #100	; 0x64
 8006736:	f000 ff91 	bl	800765c <__hexnan>
 800673a:	2805      	cmp	r0, #5
 800673c:	d125      	bne.n	800678a <_strtod_l+0x372>
 800673e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006740:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8006744:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006748:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800674c:	e6a5      	b.n	800649a <_strtod_l+0x82>
 800674e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8006752:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8006756:	e7bc      	b.n	80066d2 <_strtod_l+0x2ba>
 8006758:	2a6e      	cmp	r2, #110	; 0x6e
 800675a:	e7dc      	b.n	8006716 <_strtod_l+0x2fe>
 800675c:	498e      	ldr	r1, [pc, #568]	; (8006998 <_strtod_l+0x580>)
 800675e:	a819      	add	r0, sp, #100	; 0x64
 8006760:	f000 ff68 	bl	8007634 <__match>
 8006764:	2800      	cmp	r0, #0
 8006766:	f43f aeb4 	beq.w	80064d2 <_strtod_l+0xba>
 800676a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800676c:	498b      	ldr	r1, [pc, #556]	; (800699c <_strtod_l+0x584>)
 800676e:	3b01      	subs	r3, #1
 8006770:	a819      	add	r0, sp, #100	; 0x64
 8006772:	9319      	str	r3, [sp, #100]	; 0x64
 8006774:	f000 ff5e 	bl	8007634 <__match>
 8006778:	b910      	cbnz	r0, 8006780 <_strtod_l+0x368>
 800677a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800677c:	3301      	adds	r3, #1
 800677e:	9319      	str	r3, [sp, #100]	; 0x64
 8006780:	f04f 0800 	mov.w	r8, #0
 8006784:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80069a0 <_strtod_l+0x588>
 8006788:	e687      	b.n	800649a <_strtod_l+0x82>
 800678a:	4886      	ldr	r0, [pc, #536]	; (80069a4 <_strtod_l+0x58c>)
 800678c:	f002 fb14 	bl	8008db8 <nan>
 8006790:	4680      	mov	r8, r0
 8006792:	4689      	mov	r9, r1
 8006794:	e681      	b.n	800649a <_strtod_l+0x82>
 8006796:	9b04      	ldr	r3, [sp, #16]
 8006798:	f1bb 0f00 	cmp.w	fp, #0
 800679c:	bf08      	it	eq
 800679e:	46a3      	moveq	fp, r4
 80067a0:	1aeb      	subs	r3, r5, r3
 80067a2:	2c10      	cmp	r4, #16
 80067a4:	9806      	ldr	r0, [sp, #24]
 80067a6:	4626      	mov	r6, r4
 80067a8:	9307      	str	r3, [sp, #28]
 80067aa:	bfa8      	it	ge
 80067ac:	2610      	movge	r6, #16
 80067ae:	f7f9 fe85 	bl	80004bc <__aeabi_ui2d>
 80067b2:	2c09      	cmp	r4, #9
 80067b4:	4680      	mov	r8, r0
 80067b6:	4689      	mov	r9, r1
 80067b8:	dd13      	ble.n	80067e2 <_strtod_l+0x3ca>
 80067ba:	4b7b      	ldr	r3, [pc, #492]	; (80069a8 <_strtod_l+0x590>)
 80067bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80067c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80067c4:	f7f9 fef4 	bl	80005b0 <__aeabi_dmul>
 80067c8:	4680      	mov	r8, r0
 80067ca:	9805      	ldr	r0, [sp, #20]
 80067cc:	4689      	mov	r9, r1
 80067ce:	f7f9 fe75 	bl	80004bc <__aeabi_ui2d>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4640      	mov	r0, r8
 80067d8:	4649      	mov	r1, r9
 80067da:	f7f9 fd33 	bl	8000244 <__adddf3>
 80067de:	4680      	mov	r8, r0
 80067e0:	4689      	mov	r9, r1
 80067e2:	2c0f      	cmp	r4, #15
 80067e4:	dc36      	bgt.n	8006854 <_strtod_l+0x43c>
 80067e6:	9b07      	ldr	r3, [sp, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f43f ae56 	beq.w	800649a <_strtod_l+0x82>
 80067ee:	dd22      	ble.n	8006836 <_strtod_l+0x41e>
 80067f0:	2b16      	cmp	r3, #22
 80067f2:	dc09      	bgt.n	8006808 <_strtod_l+0x3f0>
 80067f4:	496c      	ldr	r1, [pc, #432]	; (80069a8 <_strtod_l+0x590>)
 80067f6:	4642      	mov	r2, r8
 80067f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80067fc:	464b      	mov	r3, r9
 80067fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006802:	f7f9 fed5 	bl	80005b0 <__aeabi_dmul>
 8006806:	e7c3      	b.n	8006790 <_strtod_l+0x378>
 8006808:	9a07      	ldr	r2, [sp, #28]
 800680a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800680e:	4293      	cmp	r3, r2
 8006810:	db20      	blt.n	8006854 <_strtod_l+0x43c>
 8006812:	4d65      	ldr	r5, [pc, #404]	; (80069a8 <_strtod_l+0x590>)
 8006814:	f1c4 040f 	rsb	r4, r4, #15
 8006818:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800681c:	4642      	mov	r2, r8
 800681e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006822:	464b      	mov	r3, r9
 8006824:	f7f9 fec4 	bl	80005b0 <__aeabi_dmul>
 8006828:	9b07      	ldr	r3, [sp, #28]
 800682a:	1b1c      	subs	r4, r3, r4
 800682c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006830:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006834:	e7e5      	b.n	8006802 <_strtod_l+0x3ea>
 8006836:	9b07      	ldr	r3, [sp, #28]
 8006838:	3316      	adds	r3, #22
 800683a:	db0b      	blt.n	8006854 <_strtod_l+0x43c>
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	4640      	mov	r0, r8
 8006840:	1b5d      	subs	r5, r3, r5
 8006842:	4b59      	ldr	r3, [pc, #356]	; (80069a8 <_strtod_l+0x590>)
 8006844:	4649      	mov	r1, r9
 8006846:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800684a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800684e:	f7f9 ffd9 	bl	8000804 <__aeabi_ddiv>
 8006852:	e79d      	b.n	8006790 <_strtod_l+0x378>
 8006854:	9b07      	ldr	r3, [sp, #28]
 8006856:	1ba6      	subs	r6, r4, r6
 8006858:	441e      	add	r6, r3
 800685a:	2e00      	cmp	r6, #0
 800685c:	dd74      	ble.n	8006948 <_strtod_l+0x530>
 800685e:	f016 030f 	ands.w	r3, r6, #15
 8006862:	d00a      	beq.n	800687a <_strtod_l+0x462>
 8006864:	4950      	ldr	r1, [pc, #320]	; (80069a8 <_strtod_l+0x590>)
 8006866:	4642      	mov	r2, r8
 8006868:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800686c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006870:	464b      	mov	r3, r9
 8006872:	f7f9 fe9d 	bl	80005b0 <__aeabi_dmul>
 8006876:	4680      	mov	r8, r0
 8006878:	4689      	mov	r9, r1
 800687a:	f036 060f 	bics.w	r6, r6, #15
 800687e:	d052      	beq.n	8006926 <_strtod_l+0x50e>
 8006880:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8006884:	dd27      	ble.n	80068d6 <_strtod_l+0x4be>
 8006886:	f04f 0b00 	mov.w	fp, #0
 800688a:	f8cd b010 	str.w	fp, [sp, #16]
 800688e:	f8cd b020 	str.w	fp, [sp, #32]
 8006892:	f8cd b018 	str.w	fp, [sp, #24]
 8006896:	2322      	movs	r3, #34	; 0x22
 8006898:	f04f 0800 	mov.w	r8, #0
 800689c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80069a0 <_strtod_l+0x588>
 80068a0:	f8ca 3000 	str.w	r3, [sl]
 80068a4:	9b08      	ldr	r3, [sp, #32]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f43f adf7 	beq.w	800649a <_strtod_l+0x82>
 80068ac:	4650      	mov	r0, sl
 80068ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80068b0:	f000 ffe0 	bl	8007874 <_Bfree>
 80068b4:	4650      	mov	r0, sl
 80068b6:	9906      	ldr	r1, [sp, #24]
 80068b8:	f000 ffdc 	bl	8007874 <_Bfree>
 80068bc:	4650      	mov	r0, sl
 80068be:	9904      	ldr	r1, [sp, #16]
 80068c0:	f000 ffd8 	bl	8007874 <_Bfree>
 80068c4:	4650      	mov	r0, sl
 80068c6:	9908      	ldr	r1, [sp, #32]
 80068c8:	f000 ffd4 	bl	8007874 <_Bfree>
 80068cc:	4659      	mov	r1, fp
 80068ce:	4650      	mov	r0, sl
 80068d0:	f000 ffd0 	bl	8007874 <_Bfree>
 80068d4:	e5e1      	b.n	800649a <_strtod_l+0x82>
 80068d6:	4b35      	ldr	r3, [pc, #212]	; (80069ac <_strtod_l+0x594>)
 80068d8:	4640      	mov	r0, r8
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	2300      	movs	r3, #0
 80068de:	4649      	mov	r1, r9
 80068e0:	461f      	mov	r7, r3
 80068e2:	1136      	asrs	r6, r6, #4
 80068e4:	2e01      	cmp	r6, #1
 80068e6:	dc21      	bgt.n	800692c <_strtod_l+0x514>
 80068e8:	b10b      	cbz	r3, 80068ee <_strtod_l+0x4d6>
 80068ea:	4680      	mov	r8, r0
 80068ec:	4689      	mov	r9, r1
 80068ee:	4b2f      	ldr	r3, [pc, #188]	; (80069ac <_strtod_l+0x594>)
 80068f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80068f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80068f8:	4642      	mov	r2, r8
 80068fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068fe:	464b      	mov	r3, r9
 8006900:	f7f9 fe56 	bl	80005b0 <__aeabi_dmul>
 8006904:	4b26      	ldr	r3, [pc, #152]	; (80069a0 <_strtod_l+0x588>)
 8006906:	460a      	mov	r2, r1
 8006908:	400b      	ands	r3, r1
 800690a:	4929      	ldr	r1, [pc, #164]	; (80069b0 <_strtod_l+0x598>)
 800690c:	4680      	mov	r8, r0
 800690e:	428b      	cmp	r3, r1
 8006910:	d8b9      	bhi.n	8006886 <_strtod_l+0x46e>
 8006912:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006916:	428b      	cmp	r3, r1
 8006918:	bf86      	itte	hi
 800691a:	f04f 38ff 	movhi.w	r8, #4294967295
 800691e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80069b4 <_strtod_l+0x59c>
 8006922:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006926:	2300      	movs	r3, #0
 8006928:	9305      	str	r3, [sp, #20]
 800692a:	e07f      	b.n	8006a2c <_strtod_l+0x614>
 800692c:	07f2      	lsls	r2, r6, #31
 800692e:	d505      	bpl.n	800693c <_strtod_l+0x524>
 8006930:	9b05      	ldr	r3, [sp, #20]
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f7f9 fe3b 	bl	80005b0 <__aeabi_dmul>
 800693a:	2301      	movs	r3, #1
 800693c:	9a05      	ldr	r2, [sp, #20]
 800693e:	3701      	adds	r7, #1
 8006940:	3208      	adds	r2, #8
 8006942:	1076      	asrs	r6, r6, #1
 8006944:	9205      	str	r2, [sp, #20]
 8006946:	e7cd      	b.n	80068e4 <_strtod_l+0x4cc>
 8006948:	d0ed      	beq.n	8006926 <_strtod_l+0x50e>
 800694a:	4276      	negs	r6, r6
 800694c:	f016 020f 	ands.w	r2, r6, #15
 8006950:	d00a      	beq.n	8006968 <_strtod_l+0x550>
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <_strtod_l+0x590>)
 8006954:	4640      	mov	r0, r8
 8006956:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800695a:	4649      	mov	r1, r9
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	f7f9 ff50 	bl	8000804 <__aeabi_ddiv>
 8006964:	4680      	mov	r8, r0
 8006966:	4689      	mov	r9, r1
 8006968:	1136      	asrs	r6, r6, #4
 800696a:	d0dc      	beq.n	8006926 <_strtod_l+0x50e>
 800696c:	2e1f      	cmp	r6, #31
 800696e:	dd23      	ble.n	80069b8 <_strtod_l+0x5a0>
 8006970:	f04f 0b00 	mov.w	fp, #0
 8006974:	f8cd b010 	str.w	fp, [sp, #16]
 8006978:	f8cd b020 	str.w	fp, [sp, #32]
 800697c:	f8cd b018 	str.w	fp, [sp, #24]
 8006980:	2322      	movs	r3, #34	; 0x22
 8006982:	f04f 0800 	mov.w	r8, #0
 8006986:	f04f 0900 	mov.w	r9, #0
 800698a:	f8ca 3000 	str.w	r3, [sl]
 800698e:	e789      	b.n	80068a4 <_strtod_l+0x48c>
 8006990:	0800a9d9 	.word	0x0800a9d9
 8006994:	0800a9f0 	.word	0x0800a9f0
 8006998:	0800a9d0 	.word	0x0800a9d0
 800699c:	0800a9d3 	.word	0x0800a9d3
 80069a0:	7ff00000 	.word	0x7ff00000
 80069a4:	0800acdd 	.word	0x0800acdd
 80069a8:	0800ab80 	.word	0x0800ab80
 80069ac:	0800ab58 	.word	0x0800ab58
 80069b0:	7ca00000 	.word	0x7ca00000
 80069b4:	7fefffff 	.word	0x7fefffff
 80069b8:	f016 0310 	ands.w	r3, r6, #16
 80069bc:	bf18      	it	ne
 80069be:	236a      	movne	r3, #106	; 0x6a
 80069c0:	4640      	mov	r0, r8
 80069c2:	9305      	str	r3, [sp, #20]
 80069c4:	4649      	mov	r1, r9
 80069c6:	2300      	movs	r3, #0
 80069c8:	4fb0      	ldr	r7, [pc, #704]	; (8006c8c <_strtod_l+0x874>)
 80069ca:	07f2      	lsls	r2, r6, #31
 80069cc:	d504      	bpl.n	80069d8 <_strtod_l+0x5c0>
 80069ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069d2:	f7f9 fded 	bl	80005b0 <__aeabi_dmul>
 80069d6:	2301      	movs	r3, #1
 80069d8:	1076      	asrs	r6, r6, #1
 80069da:	f107 0708 	add.w	r7, r7, #8
 80069de:	d1f4      	bne.n	80069ca <_strtod_l+0x5b2>
 80069e0:	b10b      	cbz	r3, 80069e6 <_strtod_l+0x5ce>
 80069e2:	4680      	mov	r8, r0
 80069e4:	4689      	mov	r9, r1
 80069e6:	9b05      	ldr	r3, [sp, #20]
 80069e8:	b1c3      	cbz	r3, 8006a1c <_strtod_l+0x604>
 80069ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80069ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	4649      	mov	r1, r9
 80069f6:	dd11      	ble.n	8006a1c <_strtod_l+0x604>
 80069f8:	2b1f      	cmp	r3, #31
 80069fa:	f340 8127 	ble.w	8006c4c <_strtod_l+0x834>
 80069fe:	2b34      	cmp	r3, #52	; 0x34
 8006a00:	bfd8      	it	le
 8006a02:	f04f 33ff 	movle.w	r3, #4294967295
 8006a06:	f04f 0800 	mov.w	r8, #0
 8006a0a:	bfcf      	iteee	gt
 8006a0c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006a10:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006a14:	fa03 f202 	lslle.w	r2, r3, r2
 8006a18:	ea02 0901 	andle.w	r9, r2, r1
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4640      	mov	r0, r8
 8006a22:	4649      	mov	r1, r9
 8006a24:	f7fa f82c 	bl	8000a80 <__aeabi_dcmpeq>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1a1      	bne.n	8006970 <_strtod_l+0x558>
 8006a2c:	9b06      	ldr	r3, [sp, #24]
 8006a2e:	465a      	mov	r2, fp
 8006a30:	9300      	str	r3, [sp, #0]
 8006a32:	4650      	mov	r0, sl
 8006a34:	4623      	mov	r3, r4
 8006a36:	9908      	ldr	r1, [sp, #32]
 8006a38:	f000 ff84 	bl	8007944 <__s2b>
 8006a3c:	9008      	str	r0, [sp, #32]
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f43f af21 	beq.w	8006886 <_strtod_l+0x46e>
 8006a44:	9b04      	ldr	r3, [sp, #16]
 8006a46:	f04f 0b00 	mov.w	fp, #0
 8006a4a:	1b5d      	subs	r5, r3, r5
 8006a4c:	9b07      	ldr	r3, [sp, #28]
 8006a4e:	f8cd b010 	str.w	fp, [sp, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfb4      	ite	lt
 8006a56:	462b      	movlt	r3, r5
 8006a58:	2300      	movge	r3, #0
 8006a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a5c:	9b07      	ldr	r3, [sp, #28]
 8006a5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006a62:	9314      	str	r3, [sp, #80]	; 0x50
 8006a64:	9b08      	ldr	r3, [sp, #32]
 8006a66:	4650      	mov	r0, sl
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	f000 fec3 	bl	80077f4 <_Balloc>
 8006a6e:	9006      	str	r0, [sp, #24]
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f43f af10 	beq.w	8006896 <_strtod_l+0x47e>
 8006a76:	9b08      	ldr	r3, [sp, #32]
 8006a78:	300c      	adds	r0, #12
 8006a7a:	691a      	ldr	r2, [r3, #16]
 8006a7c:	f103 010c 	add.w	r1, r3, #12
 8006a80:	3202      	adds	r2, #2
 8006a82:	0092      	lsls	r2, r2, #2
 8006a84:	f7ff fb02 	bl	800608c <memcpy>
 8006a88:	ab1c      	add	r3, sp, #112	; 0x70
 8006a8a:	9301      	str	r3, [sp, #4]
 8006a8c:	ab1b      	add	r3, sp, #108	; 0x6c
 8006a8e:	9300      	str	r3, [sp, #0]
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	4650      	mov	r0, sl
 8006a96:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006a9a:	f001 fa95 	bl	8007fc8 <__d2b>
 8006a9e:	901a      	str	r0, [sp, #104]	; 0x68
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	f43f aef8 	beq.w	8006896 <_strtod_l+0x47e>
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4650      	mov	r0, sl
 8006aaa:	f000 ffe3 	bl	8007a74 <__i2b>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	9004      	str	r0, [sp, #16]
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f43f aeef 	beq.w	8006896 <_strtod_l+0x47e>
 8006ab8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006aba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	bfab      	itete	ge
 8006ac0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006ac2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8006ac4:	18ee      	addge	r6, r5, r3
 8006ac6:	1b5c      	sublt	r4, r3, r5
 8006ac8:	9b05      	ldr	r3, [sp, #20]
 8006aca:	bfa8      	it	ge
 8006acc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8006ace:	eba5 0503 	sub.w	r5, r5, r3
 8006ad2:	4415      	add	r5, r2
 8006ad4:	4b6e      	ldr	r3, [pc, #440]	; (8006c90 <_strtod_l+0x878>)
 8006ad6:	f105 35ff 	add.w	r5, r5, #4294967295
 8006ada:	bfb8      	it	lt
 8006adc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8006ade:	429d      	cmp	r5, r3
 8006ae0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ae4:	f280 80c4 	bge.w	8006c70 <_strtod_l+0x858>
 8006ae8:	1b5b      	subs	r3, r3, r5
 8006aea:	2b1f      	cmp	r3, #31
 8006aec:	f04f 0701 	mov.w	r7, #1
 8006af0:	eba2 0203 	sub.w	r2, r2, r3
 8006af4:	f300 80b1 	bgt.w	8006c5a <_strtod_l+0x842>
 8006af8:	2500      	movs	r5, #0
 8006afa:	fa07 f303 	lsl.w	r3, r7, r3
 8006afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b00:	18b7      	adds	r7, r6, r2
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	42be      	cmp	r6, r7
 8006b06:	4414      	add	r4, r2
 8006b08:	441c      	add	r4, r3
 8006b0a:	4633      	mov	r3, r6
 8006b0c:	bfa8      	it	ge
 8006b0e:	463b      	movge	r3, r7
 8006b10:	42a3      	cmp	r3, r4
 8006b12:	bfa8      	it	ge
 8006b14:	4623      	movge	r3, r4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfc2      	ittt	gt
 8006b1a:	1aff      	subgt	r7, r7, r3
 8006b1c:	1ae4      	subgt	r4, r4, r3
 8006b1e:	1af6      	subgt	r6, r6, r3
 8006b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	dd17      	ble.n	8006b56 <_strtod_l+0x73e>
 8006b26:	461a      	mov	r2, r3
 8006b28:	4650      	mov	r0, sl
 8006b2a:	9904      	ldr	r1, [sp, #16]
 8006b2c:	f001 f860 	bl	8007bf0 <__pow5mult>
 8006b30:	9004      	str	r0, [sp, #16]
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f43f aeaf 	beq.w	8006896 <_strtod_l+0x47e>
 8006b38:	4601      	mov	r1, r0
 8006b3a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	f000 ffaf 	bl	8007aa0 <__multiply>
 8006b42:	9009      	str	r0, [sp, #36]	; 0x24
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f43f aea6 	beq.w	8006896 <_strtod_l+0x47e>
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006b4e:	f000 fe91 	bl	8007874 <_Bfree>
 8006b52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b54:	931a      	str	r3, [sp, #104]	; 0x68
 8006b56:	2f00      	cmp	r7, #0
 8006b58:	f300 808e 	bgt.w	8006c78 <_strtod_l+0x860>
 8006b5c:	9b07      	ldr	r3, [sp, #28]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd08      	ble.n	8006b74 <_strtod_l+0x75c>
 8006b62:	4650      	mov	r0, sl
 8006b64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b66:	9906      	ldr	r1, [sp, #24]
 8006b68:	f001 f842 	bl	8007bf0 <__pow5mult>
 8006b6c:	9006      	str	r0, [sp, #24]
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	f43f ae91 	beq.w	8006896 <_strtod_l+0x47e>
 8006b74:	2c00      	cmp	r4, #0
 8006b76:	dd08      	ble.n	8006b8a <_strtod_l+0x772>
 8006b78:	4622      	mov	r2, r4
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	9906      	ldr	r1, [sp, #24]
 8006b7e:	f001 f891 	bl	8007ca4 <__lshift>
 8006b82:	9006      	str	r0, [sp, #24]
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f43f ae86 	beq.w	8006896 <_strtod_l+0x47e>
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	dd08      	ble.n	8006ba0 <_strtod_l+0x788>
 8006b8e:	4632      	mov	r2, r6
 8006b90:	4650      	mov	r0, sl
 8006b92:	9904      	ldr	r1, [sp, #16]
 8006b94:	f001 f886 	bl	8007ca4 <__lshift>
 8006b98:	9004      	str	r0, [sp, #16]
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	f43f ae7b 	beq.w	8006896 <_strtod_l+0x47e>
 8006ba0:	4650      	mov	r0, sl
 8006ba2:	9a06      	ldr	r2, [sp, #24]
 8006ba4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006ba6:	f001 f909 	bl	8007dbc <__mdiff>
 8006baa:	4683      	mov	fp, r0
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f43f ae72 	beq.w	8006896 <_strtod_l+0x47e>
 8006bb2:	2400      	movs	r4, #0
 8006bb4:	68c3      	ldr	r3, [r0, #12]
 8006bb6:	9904      	ldr	r1, [sp, #16]
 8006bb8:	60c4      	str	r4, [r0, #12]
 8006bba:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bbc:	f001 f8e2 	bl	8007d84 <__mcmp>
 8006bc0:	42a0      	cmp	r0, r4
 8006bc2:	da6b      	bge.n	8006c9c <_strtod_l+0x884>
 8006bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bc6:	ea53 0308 	orrs.w	r3, r3, r8
 8006bca:	f040 8091 	bne.w	8006cf0 <_strtod_l+0x8d8>
 8006bce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 808c 	bne.w	8006cf0 <_strtod_l+0x8d8>
 8006bd8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006bdc:	0d1b      	lsrs	r3, r3, #20
 8006bde:	051b      	lsls	r3, r3, #20
 8006be0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006be4:	f240 8084 	bls.w	8006cf0 <_strtod_l+0x8d8>
 8006be8:	f8db 3014 	ldr.w	r3, [fp, #20]
 8006bec:	b91b      	cbnz	r3, 8006bf6 <_strtod_l+0x7de>
 8006bee:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	dd7c      	ble.n	8006cf0 <_strtod_l+0x8d8>
 8006bf6:	4659      	mov	r1, fp
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	f001 f852 	bl	8007ca4 <__lshift>
 8006c00:	9904      	ldr	r1, [sp, #16]
 8006c02:	4683      	mov	fp, r0
 8006c04:	f001 f8be 	bl	8007d84 <__mcmp>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	dd71      	ble.n	8006cf0 <_strtod_l+0x8d8>
 8006c0c:	9905      	ldr	r1, [sp, #20]
 8006c0e:	464b      	mov	r3, r9
 8006c10:	4a20      	ldr	r2, [pc, #128]	; (8006c94 <_strtod_l+0x87c>)
 8006c12:	2900      	cmp	r1, #0
 8006c14:	f000 808c 	beq.w	8006d30 <_strtod_l+0x918>
 8006c18:	ea02 0109 	and.w	r1, r2, r9
 8006c1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006c20:	f300 8086 	bgt.w	8006d30 <_strtod_l+0x918>
 8006c24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006c28:	f77f aeaa 	ble.w	8006980 <_strtod_l+0x568>
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	4649      	mov	r1, r9
 8006c30:	4b19      	ldr	r3, [pc, #100]	; (8006c98 <_strtod_l+0x880>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	f7f9 fcbc 	bl	80005b0 <__aeabi_dmul>
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4303      	orrs	r3, r0
 8006c3c:	bf08      	it	eq
 8006c3e:	2322      	moveq	r3, #34	; 0x22
 8006c40:	4680      	mov	r8, r0
 8006c42:	4689      	mov	r9, r1
 8006c44:	bf08      	it	eq
 8006c46:	f8ca 3000 	streq.w	r3, [sl]
 8006c4a:	e62f      	b.n	80068ac <_strtod_l+0x494>
 8006c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	ea03 0808 	and.w	r8, r3, r8
 8006c58:	e6e0      	b.n	8006a1c <_strtod_l+0x604>
 8006c5a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006c5e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8006c62:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8006c66:	35e2      	adds	r5, #226	; 0xe2
 8006c68:	fa07 f505 	lsl.w	r5, r7, r5
 8006c6c:	970f      	str	r7, [sp, #60]	; 0x3c
 8006c6e:	e747      	b.n	8006b00 <_strtod_l+0x6e8>
 8006c70:	2301      	movs	r3, #1
 8006c72:	2500      	movs	r5, #0
 8006c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c76:	e743      	b.n	8006b00 <_strtod_l+0x6e8>
 8006c78:	463a      	mov	r2, r7
 8006c7a:	4650      	mov	r0, sl
 8006c7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006c7e:	f001 f811 	bl	8007ca4 <__lshift>
 8006c82:	901a      	str	r0, [sp, #104]	; 0x68
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f47f af69 	bne.w	8006b5c <_strtod_l+0x744>
 8006c8a:	e604      	b.n	8006896 <_strtod_l+0x47e>
 8006c8c:	0800aa08 	.word	0x0800aa08
 8006c90:	fffffc02 	.word	0xfffffc02
 8006c94:	7ff00000 	.word	0x7ff00000
 8006c98:	39500000 	.word	0x39500000
 8006c9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ca0:	d165      	bne.n	8006d6e <_strtod_l+0x956>
 8006ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ca4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ca8:	b35a      	cbz	r2, 8006d02 <_strtod_l+0x8ea>
 8006caa:	4a99      	ldr	r2, [pc, #612]	; (8006f10 <_strtod_l+0xaf8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d12b      	bne.n	8006d08 <_strtod_l+0x8f0>
 8006cb0:	9b05      	ldr	r3, [sp, #20]
 8006cb2:	4641      	mov	r1, r8
 8006cb4:	b303      	cbz	r3, 8006cf8 <_strtod_l+0x8e0>
 8006cb6:	464a      	mov	r2, r9
 8006cb8:	4b96      	ldr	r3, [pc, #600]	; (8006f14 <_strtod_l+0xafc>)
 8006cba:	4013      	ands	r3, r2
 8006cbc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc4:	d81b      	bhi.n	8006cfe <_strtod_l+0x8e6>
 8006cc6:	0d1b      	lsrs	r3, r3, #20
 8006cc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	d119      	bne.n	8006d08 <_strtod_l+0x8f0>
 8006cd4:	4b90      	ldr	r3, [pc, #576]	; (8006f18 <_strtod_l+0xb00>)
 8006cd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d102      	bne.n	8006ce2 <_strtod_l+0x8ca>
 8006cdc:	3101      	adds	r1, #1
 8006cde:	f43f adda 	beq.w	8006896 <_strtod_l+0x47e>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	4b8b      	ldr	r3, [pc, #556]	; (8006f14 <_strtod_l+0xafc>)
 8006ce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cea:	401a      	ands	r2, r3
 8006cec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8006cf0:	9b05      	ldr	r3, [sp, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d19a      	bne.n	8006c2c <_strtod_l+0x814>
 8006cf6:	e5d9      	b.n	80068ac <_strtod_l+0x494>
 8006cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfc:	e7e8      	b.n	8006cd0 <_strtod_l+0x8b8>
 8006cfe:	4613      	mov	r3, r2
 8006d00:	e7e6      	b.n	8006cd0 <_strtod_l+0x8b8>
 8006d02:	ea53 0308 	orrs.w	r3, r3, r8
 8006d06:	d081      	beq.n	8006c0c <_strtod_l+0x7f4>
 8006d08:	b1e5      	cbz	r5, 8006d44 <_strtod_l+0x92c>
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0c:	421d      	tst	r5, r3
 8006d0e:	d0ef      	beq.n	8006cf0 <_strtod_l+0x8d8>
 8006d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d12:	4640      	mov	r0, r8
 8006d14:	4649      	mov	r1, r9
 8006d16:	9a05      	ldr	r2, [sp, #20]
 8006d18:	b1c3      	cbz	r3, 8006d4c <_strtod_l+0x934>
 8006d1a:	f7ff fb5c 	bl	80063d6 <sulp>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d26:	f7f9 fa8d 	bl	8000244 <__adddf3>
 8006d2a:	4680      	mov	r8, r0
 8006d2c:	4689      	mov	r9, r1
 8006d2e:	e7df      	b.n	8006cf0 <_strtod_l+0x8d8>
 8006d30:	4013      	ands	r3, r2
 8006d32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006d36:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006d3a:	f04f 38ff 	mov.w	r8, #4294967295
 8006d3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8006d42:	e7d5      	b.n	8006cf0 <_strtod_l+0x8d8>
 8006d44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d46:	ea13 0f08 	tst.w	r3, r8
 8006d4a:	e7e0      	b.n	8006d0e <_strtod_l+0x8f6>
 8006d4c:	f7ff fb43 	bl	80063d6 <sulp>
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d58:	f7f9 fa72 	bl	8000240 <__aeabi_dsub>
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4680      	mov	r8, r0
 8006d62:	4689      	mov	r9, r1
 8006d64:	f7f9 fe8c 	bl	8000a80 <__aeabi_dcmpeq>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0c1      	beq.n	8006cf0 <_strtod_l+0x8d8>
 8006d6c:	e608      	b.n	8006980 <_strtod_l+0x568>
 8006d6e:	4658      	mov	r0, fp
 8006d70:	9904      	ldr	r1, [sp, #16]
 8006d72:	f001 f985 	bl	8008080 <__ratio>
 8006d76:	2200      	movs	r2, #0
 8006d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006d7c:	4606      	mov	r6, r0
 8006d7e:	460f      	mov	r7, r1
 8006d80:	f7f9 fe92 	bl	8000aa8 <__aeabi_dcmple>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d070      	beq.n	8006e6a <_strtod_l+0xa52>
 8006d88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d042      	beq.n	8006e14 <_strtod_l+0x9fc>
 8006d8e:	2600      	movs	r6, #0
 8006d90:	4f62      	ldr	r7, [pc, #392]	; (8006f1c <_strtod_l+0xb04>)
 8006d92:	4d62      	ldr	r5, [pc, #392]	; (8006f1c <_strtod_l+0xb04>)
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d9a:	0d1b      	lsrs	r3, r3, #20
 8006d9c:	051b      	lsls	r3, r3, #20
 8006d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006da0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006da2:	4b5f      	ldr	r3, [pc, #380]	; (8006f20 <_strtod_l+0xb08>)
 8006da4:	429a      	cmp	r2, r3
 8006da6:	f040 80c3 	bne.w	8006f30 <_strtod_l+0xb18>
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	4640      	mov	r0, r8
 8006dae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8006db2:	4649      	mov	r1, r9
 8006db4:	f001 f88e 	bl	8007ed4 <__ulp>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	4639      	mov	r1, r7
 8006dc0:	f7f9 fbf6 	bl	80005b0 <__aeabi_dmul>
 8006dc4:	4642      	mov	r2, r8
 8006dc6:	464b      	mov	r3, r9
 8006dc8:	f7f9 fa3c 	bl	8000244 <__adddf3>
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4951      	ldr	r1, [pc, #324]	; (8006f14 <_strtod_l+0xafc>)
 8006dd0:	4a54      	ldr	r2, [pc, #336]	; (8006f24 <_strtod_l+0xb0c>)
 8006dd2:	4019      	ands	r1, r3
 8006dd4:	4291      	cmp	r1, r2
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	d95d      	bls.n	8006e96 <_strtod_l+0xa7e>
 8006dda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ddc:	4b4e      	ldr	r3, [pc, #312]	; (8006f18 <_strtod_l+0xb00>)
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d103      	bne.n	8006dea <_strtod_l+0x9d2>
 8006de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006de4:	3301      	adds	r3, #1
 8006de6:	f43f ad56 	beq.w	8006896 <_strtod_l+0x47e>
 8006dea:	f04f 38ff 	mov.w	r8, #4294967295
 8006dee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006f18 <_strtod_l+0xb00>
 8006df2:	4650      	mov	r0, sl
 8006df4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006df6:	f000 fd3d 	bl	8007874 <_Bfree>
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	9906      	ldr	r1, [sp, #24]
 8006dfe:	f000 fd39 	bl	8007874 <_Bfree>
 8006e02:	4650      	mov	r0, sl
 8006e04:	9904      	ldr	r1, [sp, #16]
 8006e06:	f000 fd35 	bl	8007874 <_Bfree>
 8006e0a:	4659      	mov	r1, fp
 8006e0c:	4650      	mov	r0, sl
 8006e0e:	f000 fd31 	bl	8007874 <_Bfree>
 8006e12:	e627      	b.n	8006a64 <_strtod_l+0x64c>
 8006e14:	f1b8 0f00 	cmp.w	r8, #0
 8006e18:	d119      	bne.n	8006e4e <_strtod_l+0xa36>
 8006e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e20:	b9e3      	cbnz	r3, 8006e5c <_strtod_l+0xa44>
 8006e22:	2200      	movs	r2, #0
 8006e24:	4630      	mov	r0, r6
 8006e26:	4639      	mov	r1, r7
 8006e28:	4b3c      	ldr	r3, [pc, #240]	; (8006f1c <_strtod_l+0xb04>)
 8006e2a:	f7f9 fe33 	bl	8000a94 <__aeabi_dcmplt>
 8006e2e:	b9c8      	cbnz	r0, 8006e64 <_strtod_l+0xa4c>
 8006e30:	2200      	movs	r2, #0
 8006e32:	4630      	mov	r0, r6
 8006e34:	4639      	mov	r1, r7
 8006e36:	4b3c      	ldr	r3, [pc, #240]	; (8006f28 <_strtod_l+0xb10>)
 8006e38:	f7f9 fbba 	bl	80005b0 <__aeabi_dmul>
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	460d      	mov	r5, r1
 8006e40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e44:	9416      	str	r4, [sp, #88]	; 0x58
 8006e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8006e48:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006e4c:	e7a2      	b.n	8006d94 <_strtod_l+0x97c>
 8006e4e:	f1b8 0f01 	cmp.w	r8, #1
 8006e52:	d103      	bne.n	8006e5c <_strtod_l+0xa44>
 8006e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f43f ad92 	beq.w	8006980 <_strtod_l+0x568>
 8006e5c:	2600      	movs	r6, #0
 8006e5e:	2400      	movs	r4, #0
 8006e60:	4f32      	ldr	r7, [pc, #200]	; (8006f2c <_strtod_l+0xb14>)
 8006e62:	e796      	b.n	8006d92 <_strtod_l+0x97a>
 8006e64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8006e66:	4d30      	ldr	r5, [pc, #192]	; (8006f28 <_strtod_l+0xb10>)
 8006e68:	e7ea      	b.n	8006e40 <_strtod_l+0xa28>
 8006e6a:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <_strtod_l+0xb10>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fb9d 	bl	80005b0 <__aeabi_dmul>
 8006e76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e78:	4604      	mov	r4, r0
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	b933      	cbnz	r3, 8006e8c <_strtod_l+0xa74>
 8006e7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e82:	9010      	str	r0, [sp, #64]	; 0x40
 8006e84:	9311      	str	r3, [sp, #68]	; 0x44
 8006e86:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006e8a:	e783      	b.n	8006d94 <_strtod_l+0x97c>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8006e94:	e7f7      	b.n	8006e86 <_strtod_l+0xa6e>
 8006e96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006e9a:	9b05      	ldr	r3, [sp, #20]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1a8      	bne.n	8006df2 <_strtod_l+0x9da>
 8006ea0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ea6:	0d1b      	lsrs	r3, r3, #20
 8006ea8:	051b      	lsls	r3, r3, #20
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d1a1      	bne.n	8006df2 <_strtod_l+0x9da>
 8006eae:	4620      	mov	r0, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7f9 fe75 	bl	8000ba0 <__aeabi_d2lz>
 8006eb6:	f7f9 fb4d 	bl	8000554 <__aeabi_l2d>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	f7f9 f9bd 	bl	8000240 <__aeabi_dsub>
 8006ec6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ecc:	ea43 0308 	orr.w	r3, r3, r8
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	d066      	beq.n	8006fa6 <_strtod_l+0xb8e>
 8006ed8:	a309      	add	r3, pc, #36	; (adr r3, 8006f00 <_strtod_l+0xae8>)
 8006eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ede:	f7f9 fdd9 	bl	8000a94 <__aeabi_dcmplt>
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f47f ace2 	bne.w	80068ac <_strtod_l+0x494>
 8006ee8:	a307      	add	r3, pc, #28	; (adr r3, 8006f08 <_strtod_l+0xaf0>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4629      	mov	r1, r5
 8006ef2:	f7f9 fded 	bl	8000ad0 <__aeabi_dcmpgt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f af7b 	beq.w	8006df2 <_strtod_l+0x9da>
 8006efc:	e4d6      	b.n	80068ac <_strtod_l+0x494>
 8006efe:	bf00      	nop
 8006f00:	94a03595 	.word	0x94a03595
 8006f04:	3fdfffff 	.word	0x3fdfffff
 8006f08:	35afe535 	.word	0x35afe535
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	000fffff 	.word	0x000fffff
 8006f14:	7ff00000 	.word	0x7ff00000
 8006f18:	7fefffff 	.word	0x7fefffff
 8006f1c:	3ff00000 	.word	0x3ff00000
 8006f20:	7fe00000 	.word	0x7fe00000
 8006f24:	7c9fffff 	.word	0x7c9fffff
 8006f28:	3fe00000 	.word	0x3fe00000
 8006f2c:	bff00000 	.word	0xbff00000
 8006f30:	9b05      	ldr	r3, [sp, #20]
 8006f32:	b313      	cbz	r3, 8006f7a <_strtod_l+0xb62>
 8006f34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006f3a:	d81e      	bhi.n	8006f7a <_strtod_l+0xb62>
 8006f3c:	a326      	add	r3, pc, #152	; (adr r3, 8006fd8 <_strtod_l+0xbc0>)
 8006f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f7f9 fdaf 	bl	8000aa8 <__aeabi_dcmple>
 8006f4a:	b190      	cbz	r0, 8006f72 <_strtod_l+0xb5a>
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7f9 fe06 	bl	8000b60 <__aeabi_d2uiz>
 8006f54:	2801      	cmp	r0, #1
 8006f56:	bf38      	it	cc
 8006f58:	2001      	movcc	r0, #1
 8006f5a:	f7f9 faaf 	bl	80004bc <__aeabi_ui2d>
 8006f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	b9d3      	cbnz	r3, 8006f9c <_strtod_l+0xb84>
 8006f66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f6a:	9012      	str	r0, [sp, #72]	; 0x48
 8006f6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006f6e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8006f72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006f74:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006f78:	1a9f      	subs	r7, r3, r2
 8006f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f7e:	f000 ffa9 	bl	8007ed4 <__ulp>
 8006f82:	4602      	mov	r2, r0
 8006f84:	460b      	mov	r3, r1
 8006f86:	4630      	mov	r0, r6
 8006f88:	4639      	mov	r1, r7
 8006f8a:	f7f9 fb11 	bl	80005b0 <__aeabi_dmul>
 8006f8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f92:	f7f9 f957 	bl	8000244 <__adddf3>
 8006f96:	4680      	mov	r8, r0
 8006f98:	4689      	mov	r9, r1
 8006f9a:	e77e      	b.n	8006e9a <_strtod_l+0xa82>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8006fa4:	e7e3      	b.n	8006f6e <_strtod_l+0xb56>
 8006fa6:	a30e      	add	r3, pc, #56	; (adr r3, 8006fe0 <_strtod_l+0xbc8>)
 8006fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fac:	f7f9 fd72 	bl	8000a94 <__aeabi_dcmplt>
 8006fb0:	e7a1      	b.n	8006ef6 <_strtod_l+0xade>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8006fb6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	f7ff ba71 	b.w	80064a2 <_strtod_l+0x8a>
 8006fc0:	2a65      	cmp	r2, #101	; 0x65
 8006fc2:	f43f ab63 	beq.w	800668c <_strtod_l+0x274>
 8006fc6:	2a45      	cmp	r2, #69	; 0x45
 8006fc8:	f43f ab60 	beq.w	800668c <_strtod_l+0x274>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f7ff bb95 	b.w	80066fc <_strtod_l+0x2e4>
 8006fd2:	bf00      	nop
 8006fd4:	f3af 8000 	nop.w
 8006fd8:	ffc00000 	.word	0xffc00000
 8006fdc:	41dfffff 	.word	0x41dfffff
 8006fe0:	94a03595 	.word	0x94a03595
 8006fe4:	3fcfffff 	.word	0x3fcfffff

08006fe8 <strtod>:
 8006fe8:	460a      	mov	r2, r1
 8006fea:	4601      	mov	r1, r0
 8006fec:	4802      	ldr	r0, [pc, #8]	; (8006ff8 <strtod+0x10>)
 8006fee:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <strtod+0x14>)
 8006ff0:	6800      	ldr	r0, [r0, #0]
 8006ff2:	f7ff ba11 	b.w	8006418 <_strtod_l>
 8006ff6:	bf00      	nop
 8006ff8:	20000078 	.word	0x20000078
 8006ffc:	200000e0 	.word	0x200000e0

08007000 <__utoa>:
 8007000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007002:	b08b      	sub	sp, #44	; 0x2c
 8007004:	4605      	mov	r5, r0
 8007006:	460b      	mov	r3, r1
 8007008:	466e      	mov	r6, sp
 800700a:	4c1d      	ldr	r4, [pc, #116]	; (8007080 <__utoa+0x80>)
 800700c:	f104 0c20 	add.w	ip, r4, #32
 8007010:	4637      	mov	r7, r6
 8007012:	6820      	ldr	r0, [r4, #0]
 8007014:	6861      	ldr	r1, [r4, #4]
 8007016:	3408      	adds	r4, #8
 8007018:	c703      	stmia	r7!, {r0, r1}
 800701a:	4564      	cmp	r4, ip
 800701c:	463e      	mov	r6, r7
 800701e:	d1f7      	bne.n	8007010 <__utoa+0x10>
 8007020:	7921      	ldrb	r1, [r4, #4]
 8007022:	6820      	ldr	r0, [r4, #0]
 8007024:	7139      	strb	r1, [r7, #4]
 8007026:	1e91      	subs	r1, r2, #2
 8007028:	2922      	cmp	r1, #34	; 0x22
 800702a:	6038      	str	r0, [r7, #0]
 800702c:	f04f 0100 	mov.w	r1, #0
 8007030:	d904      	bls.n	800703c <__utoa+0x3c>
 8007032:	7019      	strb	r1, [r3, #0]
 8007034:	460b      	mov	r3, r1
 8007036:	4618      	mov	r0, r3
 8007038:	b00b      	add	sp, #44	; 0x2c
 800703a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800703c:	1e58      	subs	r0, r3, #1
 800703e:	4684      	mov	ip, r0
 8007040:	fbb5 f7f2 	udiv	r7, r5, r2
 8007044:	fb02 5617 	mls	r6, r2, r7, r5
 8007048:	3628      	adds	r6, #40	; 0x28
 800704a:	446e      	add	r6, sp
 800704c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007050:	460c      	mov	r4, r1
 8007052:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007056:	462e      	mov	r6, r5
 8007058:	42b2      	cmp	r2, r6
 800705a:	463d      	mov	r5, r7
 800705c:	f101 0101 	add.w	r1, r1, #1
 8007060:	d9ee      	bls.n	8007040 <__utoa+0x40>
 8007062:	2200      	movs	r2, #0
 8007064:	545a      	strb	r2, [r3, r1]
 8007066:	1919      	adds	r1, r3, r4
 8007068:	1aa5      	subs	r5, r4, r2
 800706a:	42aa      	cmp	r2, r5
 800706c:	dae3      	bge.n	8007036 <__utoa+0x36>
 800706e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007072:	780e      	ldrb	r6, [r1, #0]
 8007074:	3201      	adds	r2, #1
 8007076:	7006      	strb	r6, [r0, #0]
 8007078:	f801 5901 	strb.w	r5, [r1], #-1
 800707c:	e7f4      	b.n	8007068 <__utoa+0x68>
 800707e:	bf00      	nop
 8007080:	0800aa30 	.word	0x0800aa30

08007084 <_write_r>:
 8007084:	b538      	push	{r3, r4, r5, lr}
 8007086:	4604      	mov	r4, r0
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	2200      	movs	r2, #0
 800708e:	4d05      	ldr	r5, [pc, #20]	; (80070a4 <_write_r+0x20>)
 8007090:	602a      	str	r2, [r5, #0]
 8007092:	461a      	mov	r2, r3
 8007094:	f7fb f850 	bl	8002138 <_write>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_write_r+0x1e>
 800709c:	682b      	ldr	r3, [r5, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_write_r+0x1e>
 80070a0:	6023      	str	r3, [r4, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	20000430 	.word	0x20000430

080070a8 <_close_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	2300      	movs	r3, #0
 80070ac:	4d05      	ldr	r5, [pc, #20]	; (80070c4 <_close_r+0x1c>)
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fb f85c 	bl	8002170 <_close>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_close_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_close_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000430 	.word	0x20000430

080070c8 <rshift>:
 80070c8:	6903      	ldr	r3, [r0, #16]
 80070ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80070d2:	f100 0414 	add.w	r4, r0, #20
 80070d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80070da:	dd46      	ble.n	800716a <rshift+0xa2>
 80070dc:	f011 011f 	ands.w	r1, r1, #31
 80070e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80070e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80070e8:	d10c      	bne.n	8007104 <rshift+0x3c>
 80070ea:	4629      	mov	r1, r5
 80070ec:	f100 0710 	add.w	r7, r0, #16
 80070f0:	42b1      	cmp	r1, r6
 80070f2:	d335      	bcc.n	8007160 <rshift+0x98>
 80070f4:	1a9b      	subs	r3, r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	1eea      	subs	r2, r5, #3
 80070fa:	4296      	cmp	r6, r2
 80070fc:	bf38      	it	cc
 80070fe:	2300      	movcc	r3, #0
 8007100:	4423      	add	r3, r4
 8007102:	e015      	b.n	8007130 <rshift+0x68>
 8007104:	46a1      	mov	r9, r4
 8007106:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800710a:	f1c1 0820 	rsb	r8, r1, #32
 800710e:	40cf      	lsrs	r7, r1
 8007110:	f105 0e04 	add.w	lr, r5, #4
 8007114:	4576      	cmp	r6, lr
 8007116:	46f4      	mov	ip, lr
 8007118:	d816      	bhi.n	8007148 <rshift+0x80>
 800711a:	1a9a      	subs	r2, r3, r2
 800711c:	0092      	lsls	r2, r2, #2
 800711e:	3a04      	subs	r2, #4
 8007120:	3501      	adds	r5, #1
 8007122:	42ae      	cmp	r6, r5
 8007124:	bf38      	it	cc
 8007126:	2200      	movcc	r2, #0
 8007128:	18a3      	adds	r3, r4, r2
 800712a:	50a7      	str	r7, [r4, r2]
 800712c:	b107      	cbz	r7, 8007130 <rshift+0x68>
 800712e:	3304      	adds	r3, #4
 8007130:	42a3      	cmp	r3, r4
 8007132:	eba3 0204 	sub.w	r2, r3, r4
 8007136:	bf08      	it	eq
 8007138:	2300      	moveq	r3, #0
 800713a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800713e:	6102      	str	r2, [r0, #16]
 8007140:	bf08      	it	eq
 8007142:	6143      	streq	r3, [r0, #20]
 8007144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007148:	f8dc c000 	ldr.w	ip, [ip]
 800714c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007150:	ea4c 0707 	orr.w	r7, ip, r7
 8007154:	f849 7b04 	str.w	r7, [r9], #4
 8007158:	f85e 7b04 	ldr.w	r7, [lr], #4
 800715c:	40cf      	lsrs	r7, r1
 800715e:	e7d9      	b.n	8007114 <rshift+0x4c>
 8007160:	f851 cb04 	ldr.w	ip, [r1], #4
 8007164:	f847 cf04 	str.w	ip, [r7, #4]!
 8007168:	e7c2      	b.n	80070f0 <rshift+0x28>
 800716a:	4623      	mov	r3, r4
 800716c:	e7e0      	b.n	8007130 <rshift+0x68>

0800716e <__hexdig_fun>:
 800716e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007172:	2b09      	cmp	r3, #9
 8007174:	d802      	bhi.n	800717c <__hexdig_fun+0xe>
 8007176:	3820      	subs	r0, #32
 8007178:	b2c0      	uxtb	r0, r0
 800717a:	4770      	bx	lr
 800717c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007180:	2b05      	cmp	r3, #5
 8007182:	d801      	bhi.n	8007188 <__hexdig_fun+0x1a>
 8007184:	3847      	subs	r0, #71	; 0x47
 8007186:	e7f7      	b.n	8007178 <__hexdig_fun+0xa>
 8007188:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800718c:	2b05      	cmp	r3, #5
 800718e:	d801      	bhi.n	8007194 <__hexdig_fun+0x26>
 8007190:	3827      	subs	r0, #39	; 0x27
 8007192:	e7f1      	b.n	8007178 <__hexdig_fun+0xa>
 8007194:	2000      	movs	r0, #0
 8007196:	4770      	bx	lr

08007198 <__gethex>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	b08b      	sub	sp, #44	; 0x2c
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	4bb2      	ldr	r3, [pc, #712]	; (800746c <__gethex+0x2d4>)
 80071a2:	9002      	str	r0, [sp, #8]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	468b      	mov	fp, r1
 80071a8:	4618      	mov	r0, r3
 80071aa:	4690      	mov	r8, r2
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	f7f9 f83b 	bl	8000228 <strlen>
 80071b2:	4682      	mov	sl, r0
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	f8db 2000 	ldr.w	r2, [fp]
 80071ba:	4403      	add	r3, r0
 80071bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80071c0:	9306      	str	r3, [sp, #24]
 80071c2:	1c93      	adds	r3, r2, #2
 80071c4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80071c8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80071cc:	32fe      	adds	r2, #254	; 0xfe
 80071ce:	18d1      	adds	r1, r2, r3
 80071d0:	461f      	mov	r7, r3
 80071d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80071d6:	9101      	str	r1, [sp, #4]
 80071d8:	2830      	cmp	r0, #48	; 0x30
 80071da:	d0f8      	beq.n	80071ce <__gethex+0x36>
 80071dc:	f7ff ffc7 	bl	800716e <__hexdig_fun>
 80071e0:	4604      	mov	r4, r0
 80071e2:	2800      	cmp	r0, #0
 80071e4:	d13a      	bne.n	800725c <__gethex+0xc4>
 80071e6:	4652      	mov	r2, sl
 80071e8:	4638      	mov	r0, r7
 80071ea:	9903      	ldr	r1, [sp, #12]
 80071ec:	f001 fe22 	bl	8008e34 <strncmp>
 80071f0:	4605      	mov	r5, r0
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d166      	bne.n	80072c4 <__gethex+0x12c>
 80071f6:	f817 000a 	ldrb.w	r0, [r7, sl]
 80071fa:	eb07 060a 	add.w	r6, r7, sl
 80071fe:	f7ff ffb6 	bl	800716e <__hexdig_fun>
 8007202:	2800      	cmp	r0, #0
 8007204:	d060      	beq.n	80072c8 <__gethex+0x130>
 8007206:	4633      	mov	r3, r6
 8007208:	7818      	ldrb	r0, [r3, #0]
 800720a:	461f      	mov	r7, r3
 800720c:	2830      	cmp	r0, #48	; 0x30
 800720e:	f103 0301 	add.w	r3, r3, #1
 8007212:	d0f9      	beq.n	8007208 <__gethex+0x70>
 8007214:	f7ff ffab 	bl	800716e <__hexdig_fun>
 8007218:	2301      	movs	r3, #1
 800721a:	fab0 f480 	clz	r4, r0
 800721e:	4635      	mov	r5, r6
 8007220:	0964      	lsrs	r4, r4, #5
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	463a      	mov	r2, r7
 8007226:	4616      	mov	r6, r2
 8007228:	7830      	ldrb	r0, [r6, #0]
 800722a:	3201      	adds	r2, #1
 800722c:	f7ff ff9f 	bl	800716e <__hexdig_fun>
 8007230:	2800      	cmp	r0, #0
 8007232:	d1f8      	bne.n	8007226 <__gethex+0x8e>
 8007234:	4652      	mov	r2, sl
 8007236:	4630      	mov	r0, r6
 8007238:	9903      	ldr	r1, [sp, #12]
 800723a:	f001 fdfb 	bl	8008e34 <strncmp>
 800723e:	b980      	cbnz	r0, 8007262 <__gethex+0xca>
 8007240:	b94d      	cbnz	r5, 8007256 <__gethex+0xbe>
 8007242:	eb06 050a 	add.w	r5, r6, sl
 8007246:	462a      	mov	r2, r5
 8007248:	4616      	mov	r6, r2
 800724a:	7830      	ldrb	r0, [r6, #0]
 800724c:	3201      	adds	r2, #1
 800724e:	f7ff ff8e 	bl	800716e <__hexdig_fun>
 8007252:	2800      	cmp	r0, #0
 8007254:	d1f8      	bne.n	8007248 <__gethex+0xb0>
 8007256:	1bad      	subs	r5, r5, r6
 8007258:	00ad      	lsls	r5, r5, #2
 800725a:	e004      	b.n	8007266 <__gethex+0xce>
 800725c:	2400      	movs	r4, #0
 800725e:	4625      	mov	r5, r4
 8007260:	e7e0      	b.n	8007224 <__gethex+0x8c>
 8007262:	2d00      	cmp	r5, #0
 8007264:	d1f7      	bne.n	8007256 <__gethex+0xbe>
 8007266:	7833      	ldrb	r3, [r6, #0]
 8007268:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800726c:	2b50      	cmp	r3, #80	; 0x50
 800726e:	d139      	bne.n	80072e4 <__gethex+0x14c>
 8007270:	7873      	ldrb	r3, [r6, #1]
 8007272:	2b2b      	cmp	r3, #43	; 0x2b
 8007274:	d02a      	beq.n	80072cc <__gethex+0x134>
 8007276:	2b2d      	cmp	r3, #45	; 0x2d
 8007278:	d02c      	beq.n	80072d4 <__gethex+0x13c>
 800727a:	f04f 0900 	mov.w	r9, #0
 800727e:	1c71      	adds	r1, r6, #1
 8007280:	7808      	ldrb	r0, [r1, #0]
 8007282:	f7ff ff74 	bl	800716e <__hexdig_fun>
 8007286:	1e43      	subs	r3, r0, #1
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b18      	cmp	r3, #24
 800728c:	d82a      	bhi.n	80072e4 <__gethex+0x14c>
 800728e:	f1a0 0210 	sub.w	r2, r0, #16
 8007292:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007296:	f7ff ff6a 	bl	800716e <__hexdig_fun>
 800729a:	1e43      	subs	r3, r0, #1
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b18      	cmp	r3, #24
 80072a0:	d91b      	bls.n	80072da <__gethex+0x142>
 80072a2:	f1b9 0f00 	cmp.w	r9, #0
 80072a6:	d000      	beq.n	80072aa <__gethex+0x112>
 80072a8:	4252      	negs	r2, r2
 80072aa:	4415      	add	r5, r2
 80072ac:	f8cb 1000 	str.w	r1, [fp]
 80072b0:	b1d4      	cbz	r4, 80072e8 <__gethex+0x150>
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2700      	movne	r7, #0
 80072ba:	2706      	moveq	r7, #6
 80072bc:	4638      	mov	r0, r7
 80072be:	b00b      	add	sp, #44	; 0x2c
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	463e      	mov	r6, r7
 80072c6:	4625      	mov	r5, r4
 80072c8:	2401      	movs	r4, #1
 80072ca:	e7cc      	b.n	8007266 <__gethex+0xce>
 80072cc:	f04f 0900 	mov.w	r9, #0
 80072d0:	1cb1      	adds	r1, r6, #2
 80072d2:	e7d5      	b.n	8007280 <__gethex+0xe8>
 80072d4:	f04f 0901 	mov.w	r9, #1
 80072d8:	e7fa      	b.n	80072d0 <__gethex+0x138>
 80072da:	230a      	movs	r3, #10
 80072dc:	fb03 0202 	mla	r2, r3, r2, r0
 80072e0:	3a10      	subs	r2, #16
 80072e2:	e7d6      	b.n	8007292 <__gethex+0xfa>
 80072e4:	4631      	mov	r1, r6
 80072e6:	e7e1      	b.n	80072ac <__gethex+0x114>
 80072e8:	4621      	mov	r1, r4
 80072ea:	1bf3      	subs	r3, r6, r7
 80072ec:	3b01      	subs	r3, #1
 80072ee:	2b07      	cmp	r3, #7
 80072f0:	dc0a      	bgt.n	8007308 <__gethex+0x170>
 80072f2:	9802      	ldr	r0, [sp, #8]
 80072f4:	f000 fa7e 	bl	80077f4 <_Balloc>
 80072f8:	4604      	mov	r4, r0
 80072fa:	b940      	cbnz	r0, 800730e <__gethex+0x176>
 80072fc:	4602      	mov	r2, r0
 80072fe:	21de      	movs	r1, #222	; 0xde
 8007300:	4b5b      	ldr	r3, [pc, #364]	; (8007470 <__gethex+0x2d8>)
 8007302:	485c      	ldr	r0, [pc, #368]	; (8007474 <__gethex+0x2dc>)
 8007304:	f001 fee2 	bl	80090cc <__assert_func>
 8007308:	3101      	adds	r1, #1
 800730a:	105b      	asrs	r3, r3, #1
 800730c:	e7ef      	b.n	80072ee <__gethex+0x156>
 800730e:	f04f 0b00 	mov.w	fp, #0
 8007312:	f100 0914 	add.w	r9, r0, #20
 8007316:	f1ca 0301 	rsb	r3, sl, #1
 800731a:	f8cd 9010 	str.w	r9, [sp, #16]
 800731e:	f8cd b004 	str.w	fp, [sp, #4]
 8007322:	9308      	str	r3, [sp, #32]
 8007324:	42b7      	cmp	r7, r6
 8007326:	d33f      	bcc.n	80073a8 <__gethex+0x210>
 8007328:	9f04      	ldr	r7, [sp, #16]
 800732a:	9b01      	ldr	r3, [sp, #4]
 800732c:	f847 3b04 	str.w	r3, [r7], #4
 8007330:	eba7 0709 	sub.w	r7, r7, r9
 8007334:	10bf      	asrs	r7, r7, #2
 8007336:	6127      	str	r7, [r4, #16]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fb4d 	bl	80079d8 <__hi0bits>
 800733e:	017f      	lsls	r7, r7, #5
 8007340:	f8d8 6000 	ldr.w	r6, [r8]
 8007344:	1a3f      	subs	r7, r7, r0
 8007346:	42b7      	cmp	r7, r6
 8007348:	dd62      	ble.n	8007410 <__gethex+0x278>
 800734a:	1bbf      	subs	r7, r7, r6
 800734c:	4639      	mov	r1, r7
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fee7 	bl	8008122 <__any_on>
 8007354:	4682      	mov	sl, r0
 8007356:	b1a8      	cbz	r0, 8007384 <__gethex+0x1ec>
 8007358:	f04f 0a01 	mov.w	sl, #1
 800735c:	1e7b      	subs	r3, r7, #1
 800735e:	1159      	asrs	r1, r3, #5
 8007360:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007364:	f003 021f 	and.w	r2, r3, #31
 8007368:	fa0a f202 	lsl.w	r2, sl, r2
 800736c:	420a      	tst	r2, r1
 800736e:	d009      	beq.n	8007384 <__gethex+0x1ec>
 8007370:	4553      	cmp	r3, sl
 8007372:	dd05      	ble.n	8007380 <__gethex+0x1e8>
 8007374:	4620      	mov	r0, r4
 8007376:	1eb9      	subs	r1, r7, #2
 8007378:	f000 fed3 	bl	8008122 <__any_on>
 800737c:	2800      	cmp	r0, #0
 800737e:	d144      	bne.n	800740a <__gethex+0x272>
 8007380:	f04f 0a02 	mov.w	sl, #2
 8007384:	4639      	mov	r1, r7
 8007386:	4620      	mov	r0, r4
 8007388:	f7ff fe9e 	bl	80070c8 <rshift>
 800738c:	443d      	add	r5, r7
 800738e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007392:	42ab      	cmp	r3, r5
 8007394:	da4a      	bge.n	800742c <__gethex+0x294>
 8007396:	4621      	mov	r1, r4
 8007398:	9802      	ldr	r0, [sp, #8]
 800739a:	f000 fa6b 	bl	8007874 <_Bfree>
 800739e:	2300      	movs	r3, #0
 80073a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80073a2:	27a3      	movs	r7, #163	; 0xa3
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	e789      	b.n	80072bc <__gethex+0x124>
 80073a8:	1e73      	subs	r3, r6, #1
 80073aa:	9a06      	ldr	r2, [sp, #24]
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d019      	beq.n	80073ea <__gethex+0x252>
 80073b6:	f1bb 0f20 	cmp.w	fp, #32
 80073ba:	d107      	bne.n	80073cc <__gethex+0x234>
 80073bc:	9b04      	ldr	r3, [sp, #16]
 80073be:	9a01      	ldr	r2, [sp, #4]
 80073c0:	f843 2b04 	str.w	r2, [r3], #4
 80073c4:	9304      	str	r3, [sp, #16]
 80073c6:	2300      	movs	r3, #0
 80073c8:	469b      	mov	fp, r3
 80073ca:	9301      	str	r3, [sp, #4]
 80073cc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80073d0:	f7ff fecd 	bl	800716e <__hexdig_fun>
 80073d4:	9b01      	ldr	r3, [sp, #4]
 80073d6:	f000 000f 	and.w	r0, r0, #15
 80073da:	fa00 f00b 	lsl.w	r0, r0, fp
 80073de:	4303      	orrs	r3, r0
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	f10b 0b04 	add.w	fp, fp, #4
 80073e6:	9b07      	ldr	r3, [sp, #28]
 80073e8:	e00d      	b.n	8007406 <__gethex+0x26e>
 80073ea:	9a08      	ldr	r2, [sp, #32]
 80073ec:	1e73      	subs	r3, r6, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	42bb      	cmp	r3, r7
 80073f2:	d3e0      	bcc.n	80073b6 <__gethex+0x21e>
 80073f4:	4618      	mov	r0, r3
 80073f6:	4652      	mov	r2, sl
 80073f8:	9903      	ldr	r1, [sp, #12]
 80073fa:	9309      	str	r3, [sp, #36]	; 0x24
 80073fc:	f001 fd1a 	bl	8008e34 <strncmp>
 8007400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007402:	2800      	cmp	r0, #0
 8007404:	d1d7      	bne.n	80073b6 <__gethex+0x21e>
 8007406:	461e      	mov	r6, r3
 8007408:	e78c      	b.n	8007324 <__gethex+0x18c>
 800740a:	f04f 0a03 	mov.w	sl, #3
 800740e:	e7b9      	b.n	8007384 <__gethex+0x1ec>
 8007410:	da09      	bge.n	8007426 <__gethex+0x28e>
 8007412:	1bf7      	subs	r7, r6, r7
 8007414:	4621      	mov	r1, r4
 8007416:	463a      	mov	r2, r7
 8007418:	9802      	ldr	r0, [sp, #8]
 800741a:	f000 fc43 	bl	8007ca4 <__lshift>
 800741e:	4604      	mov	r4, r0
 8007420:	1bed      	subs	r5, r5, r7
 8007422:	f100 0914 	add.w	r9, r0, #20
 8007426:	f04f 0a00 	mov.w	sl, #0
 800742a:	e7b0      	b.n	800738e <__gethex+0x1f6>
 800742c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007430:	42a8      	cmp	r0, r5
 8007432:	dd72      	ble.n	800751a <__gethex+0x382>
 8007434:	1b45      	subs	r5, r0, r5
 8007436:	42ae      	cmp	r6, r5
 8007438:	dc35      	bgt.n	80074a6 <__gethex+0x30e>
 800743a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800743e:	2b02      	cmp	r3, #2
 8007440:	d029      	beq.n	8007496 <__gethex+0x2fe>
 8007442:	2b03      	cmp	r3, #3
 8007444:	d02b      	beq.n	800749e <__gethex+0x306>
 8007446:	2b01      	cmp	r3, #1
 8007448:	d11c      	bne.n	8007484 <__gethex+0x2ec>
 800744a:	42ae      	cmp	r6, r5
 800744c:	d11a      	bne.n	8007484 <__gethex+0x2ec>
 800744e:	2e01      	cmp	r6, #1
 8007450:	d112      	bne.n	8007478 <__gethex+0x2e0>
 8007452:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007456:	9a05      	ldr	r2, [sp, #20]
 8007458:	2762      	movs	r7, #98	; 0x62
 800745a:	6013      	str	r3, [r2, #0]
 800745c:	2301      	movs	r3, #1
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f8c9 3000 	str.w	r3, [r9]
 8007464:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007466:	601c      	str	r4, [r3, #0]
 8007468:	e728      	b.n	80072bc <__gethex+0x124>
 800746a:	bf00      	nop
 800746c:	0800aacc 	.word	0x0800aacc
 8007470:	0800aa55 	.word	0x0800aa55
 8007474:	0800aa66 	.word	0x0800aa66
 8007478:	4620      	mov	r0, r4
 800747a:	1e71      	subs	r1, r6, #1
 800747c:	f000 fe51 	bl	8008122 <__any_on>
 8007480:	2800      	cmp	r0, #0
 8007482:	d1e6      	bne.n	8007452 <__gethex+0x2ba>
 8007484:	4621      	mov	r1, r4
 8007486:	9802      	ldr	r0, [sp, #8]
 8007488:	f000 f9f4 	bl	8007874 <_Bfree>
 800748c:	2300      	movs	r3, #0
 800748e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007490:	2750      	movs	r7, #80	; 0x50
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	e712      	b.n	80072bc <__gethex+0x124>
 8007496:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f3      	bne.n	8007484 <__gethex+0x2ec>
 800749c:	e7d9      	b.n	8007452 <__gethex+0x2ba>
 800749e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1d6      	bne.n	8007452 <__gethex+0x2ba>
 80074a4:	e7ee      	b.n	8007484 <__gethex+0x2ec>
 80074a6:	1e6f      	subs	r7, r5, #1
 80074a8:	f1ba 0f00 	cmp.w	sl, #0
 80074ac:	d132      	bne.n	8007514 <__gethex+0x37c>
 80074ae:	b127      	cbz	r7, 80074ba <__gethex+0x322>
 80074b0:	4639      	mov	r1, r7
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 fe35 	bl	8008122 <__any_on>
 80074b8:	4682      	mov	sl, r0
 80074ba:	2101      	movs	r1, #1
 80074bc:	117b      	asrs	r3, r7, #5
 80074be:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80074c2:	f007 071f 	and.w	r7, r7, #31
 80074c6:	fa01 f707 	lsl.w	r7, r1, r7
 80074ca:	421f      	tst	r7, r3
 80074cc:	f04f 0702 	mov.w	r7, #2
 80074d0:	4629      	mov	r1, r5
 80074d2:	4620      	mov	r0, r4
 80074d4:	bf18      	it	ne
 80074d6:	f04a 0a02 	orrne.w	sl, sl, #2
 80074da:	1b76      	subs	r6, r6, r5
 80074dc:	f7ff fdf4 	bl	80070c8 <rshift>
 80074e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80074e4:	f1ba 0f00 	cmp.w	sl, #0
 80074e8:	d048      	beq.n	800757c <__gethex+0x3e4>
 80074ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d015      	beq.n	800751e <__gethex+0x386>
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d017      	beq.n	8007526 <__gethex+0x38e>
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d109      	bne.n	800750e <__gethex+0x376>
 80074fa:	f01a 0f02 	tst.w	sl, #2
 80074fe:	d006      	beq.n	800750e <__gethex+0x376>
 8007500:	f8d9 0000 	ldr.w	r0, [r9]
 8007504:	ea4a 0a00 	orr.w	sl, sl, r0
 8007508:	f01a 0f01 	tst.w	sl, #1
 800750c:	d10e      	bne.n	800752c <__gethex+0x394>
 800750e:	f047 0710 	orr.w	r7, r7, #16
 8007512:	e033      	b.n	800757c <__gethex+0x3e4>
 8007514:	f04f 0a01 	mov.w	sl, #1
 8007518:	e7cf      	b.n	80074ba <__gethex+0x322>
 800751a:	2701      	movs	r7, #1
 800751c:	e7e2      	b.n	80074e4 <__gethex+0x34c>
 800751e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007520:	f1c3 0301 	rsb	r3, r3, #1
 8007524:	9315      	str	r3, [sp, #84]	; 0x54
 8007526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007528:	2b00      	cmp	r3, #0
 800752a:	d0f0      	beq.n	800750e <__gethex+0x376>
 800752c:	f04f 0c00 	mov.w	ip, #0
 8007530:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007534:	f104 0314 	add.w	r3, r4, #20
 8007538:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800753c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007540:	4618      	mov	r0, r3
 8007542:	f853 2b04 	ldr.w	r2, [r3], #4
 8007546:	f1b2 3fff 	cmp.w	r2, #4294967295
 800754a:	d01c      	beq.n	8007586 <__gethex+0x3ee>
 800754c:	3201      	adds	r2, #1
 800754e:	6002      	str	r2, [r0, #0]
 8007550:	2f02      	cmp	r7, #2
 8007552:	f104 0314 	add.w	r3, r4, #20
 8007556:	d13d      	bne.n	80075d4 <__gethex+0x43c>
 8007558:	f8d8 2000 	ldr.w	r2, [r8]
 800755c:	3a01      	subs	r2, #1
 800755e:	42b2      	cmp	r2, r6
 8007560:	d10a      	bne.n	8007578 <__gethex+0x3e0>
 8007562:	2201      	movs	r2, #1
 8007564:	1171      	asrs	r1, r6, #5
 8007566:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800756a:	f006 061f 	and.w	r6, r6, #31
 800756e:	fa02 f606 	lsl.w	r6, r2, r6
 8007572:	421e      	tst	r6, r3
 8007574:	bf18      	it	ne
 8007576:	4617      	movne	r7, r2
 8007578:	f047 0720 	orr.w	r7, r7, #32
 800757c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800757e:	601c      	str	r4, [r3, #0]
 8007580:	9b05      	ldr	r3, [sp, #20]
 8007582:	601d      	str	r5, [r3, #0]
 8007584:	e69a      	b.n	80072bc <__gethex+0x124>
 8007586:	4299      	cmp	r1, r3
 8007588:	f843 cc04 	str.w	ip, [r3, #-4]
 800758c:	d8d8      	bhi.n	8007540 <__gethex+0x3a8>
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	459b      	cmp	fp, r3
 8007592:	db17      	blt.n	80075c4 <__gethex+0x42c>
 8007594:	6861      	ldr	r1, [r4, #4]
 8007596:	9802      	ldr	r0, [sp, #8]
 8007598:	3101      	adds	r1, #1
 800759a:	f000 f92b 	bl	80077f4 <_Balloc>
 800759e:	4681      	mov	r9, r0
 80075a0:	b918      	cbnz	r0, 80075aa <__gethex+0x412>
 80075a2:	4602      	mov	r2, r0
 80075a4:	2184      	movs	r1, #132	; 0x84
 80075a6:	4b19      	ldr	r3, [pc, #100]	; (800760c <__gethex+0x474>)
 80075a8:	e6ab      	b.n	8007302 <__gethex+0x16a>
 80075aa:	6922      	ldr	r2, [r4, #16]
 80075ac:	f104 010c 	add.w	r1, r4, #12
 80075b0:	3202      	adds	r2, #2
 80075b2:	0092      	lsls	r2, r2, #2
 80075b4:	300c      	adds	r0, #12
 80075b6:	f7fe fd69 	bl	800608c <memcpy>
 80075ba:	4621      	mov	r1, r4
 80075bc:	9802      	ldr	r0, [sp, #8]
 80075be:	f000 f959 	bl	8007874 <_Bfree>
 80075c2:	464c      	mov	r4, r9
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	6122      	str	r2, [r4, #16]
 80075ca:	2201      	movs	r2, #1
 80075cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075d0:	615a      	str	r2, [r3, #20]
 80075d2:	e7bd      	b.n	8007550 <__gethex+0x3b8>
 80075d4:	6922      	ldr	r2, [r4, #16]
 80075d6:	455a      	cmp	r2, fp
 80075d8:	dd0b      	ble.n	80075f2 <__gethex+0x45a>
 80075da:	2101      	movs	r1, #1
 80075dc:	4620      	mov	r0, r4
 80075de:	f7ff fd73 	bl	80070c8 <rshift>
 80075e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075e6:	3501      	adds	r5, #1
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	f6ff aed4 	blt.w	8007396 <__gethex+0x1fe>
 80075ee:	2701      	movs	r7, #1
 80075f0:	e7c2      	b.n	8007578 <__gethex+0x3e0>
 80075f2:	f016 061f 	ands.w	r6, r6, #31
 80075f6:	d0fa      	beq.n	80075ee <__gethex+0x456>
 80075f8:	4453      	add	r3, sl
 80075fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80075fe:	f000 f9eb 	bl	80079d8 <__hi0bits>
 8007602:	f1c6 0620 	rsb	r6, r6, #32
 8007606:	42b0      	cmp	r0, r6
 8007608:	dbe7      	blt.n	80075da <__gethex+0x442>
 800760a:	e7f0      	b.n	80075ee <__gethex+0x456>
 800760c:	0800aa55 	.word	0x0800aa55

08007610 <L_shift>:
 8007610:	f1c2 0208 	rsb	r2, r2, #8
 8007614:	0092      	lsls	r2, r2, #2
 8007616:	b570      	push	{r4, r5, r6, lr}
 8007618:	f1c2 0620 	rsb	r6, r2, #32
 800761c:	6843      	ldr	r3, [r0, #4]
 800761e:	6804      	ldr	r4, [r0, #0]
 8007620:	fa03 f506 	lsl.w	r5, r3, r6
 8007624:	432c      	orrs	r4, r5
 8007626:	40d3      	lsrs	r3, r2
 8007628:	6004      	str	r4, [r0, #0]
 800762a:	f840 3f04 	str.w	r3, [r0, #4]!
 800762e:	4288      	cmp	r0, r1
 8007630:	d3f4      	bcc.n	800761c <L_shift+0xc>
 8007632:	bd70      	pop	{r4, r5, r6, pc}

08007634 <__match>:
 8007634:	b530      	push	{r4, r5, lr}
 8007636:	6803      	ldr	r3, [r0, #0]
 8007638:	3301      	adds	r3, #1
 800763a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800763e:	b914      	cbnz	r4, 8007646 <__match+0x12>
 8007640:	6003      	str	r3, [r0, #0]
 8007642:	2001      	movs	r0, #1
 8007644:	bd30      	pop	{r4, r5, pc}
 8007646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800764a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800764e:	2d19      	cmp	r5, #25
 8007650:	bf98      	it	ls
 8007652:	3220      	addls	r2, #32
 8007654:	42a2      	cmp	r2, r4
 8007656:	d0f0      	beq.n	800763a <__match+0x6>
 8007658:	2000      	movs	r0, #0
 800765a:	e7f3      	b.n	8007644 <__match+0x10>

0800765c <__hexnan>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	2500      	movs	r5, #0
 8007662:	680b      	ldr	r3, [r1, #0]
 8007664:	4682      	mov	sl, r0
 8007666:	115e      	asrs	r6, r3, #5
 8007668:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800766c:	f013 031f 	ands.w	r3, r3, #31
 8007670:	bf18      	it	ne
 8007672:	3604      	addne	r6, #4
 8007674:	1f37      	subs	r7, r6, #4
 8007676:	46b9      	mov	r9, r7
 8007678:	463c      	mov	r4, r7
 800767a:	46ab      	mov	fp, r5
 800767c:	b087      	sub	sp, #28
 800767e:	4690      	mov	r8, r2
 8007680:	6802      	ldr	r2, [r0, #0]
 8007682:	9301      	str	r3, [sp, #4]
 8007684:	f846 5c04 	str.w	r5, [r6, #-4]
 8007688:	9502      	str	r5, [sp, #8]
 800768a:	7851      	ldrb	r1, [r2, #1]
 800768c:	1c53      	adds	r3, r2, #1
 800768e:	9303      	str	r3, [sp, #12]
 8007690:	b341      	cbz	r1, 80076e4 <__hexnan+0x88>
 8007692:	4608      	mov	r0, r1
 8007694:	9205      	str	r2, [sp, #20]
 8007696:	9104      	str	r1, [sp, #16]
 8007698:	f7ff fd69 	bl	800716e <__hexdig_fun>
 800769c:	2800      	cmp	r0, #0
 800769e:	d14f      	bne.n	8007740 <__hexnan+0xe4>
 80076a0:	9904      	ldr	r1, [sp, #16]
 80076a2:	9a05      	ldr	r2, [sp, #20]
 80076a4:	2920      	cmp	r1, #32
 80076a6:	d818      	bhi.n	80076da <__hexnan+0x7e>
 80076a8:	9b02      	ldr	r3, [sp, #8]
 80076aa:	459b      	cmp	fp, r3
 80076ac:	dd13      	ble.n	80076d6 <__hexnan+0x7a>
 80076ae:	454c      	cmp	r4, r9
 80076b0:	d206      	bcs.n	80076c0 <__hexnan+0x64>
 80076b2:	2d07      	cmp	r5, #7
 80076b4:	dc04      	bgt.n	80076c0 <__hexnan+0x64>
 80076b6:	462a      	mov	r2, r5
 80076b8:	4649      	mov	r1, r9
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7ff ffa8 	bl	8007610 <L_shift>
 80076c0:	4544      	cmp	r4, r8
 80076c2:	d950      	bls.n	8007766 <__hexnan+0x10a>
 80076c4:	2300      	movs	r3, #0
 80076c6:	f1a4 0904 	sub.w	r9, r4, #4
 80076ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80076ce:	461d      	mov	r5, r3
 80076d0:	464c      	mov	r4, r9
 80076d2:	f8cd b008 	str.w	fp, [sp, #8]
 80076d6:	9a03      	ldr	r2, [sp, #12]
 80076d8:	e7d7      	b.n	800768a <__hexnan+0x2e>
 80076da:	2929      	cmp	r1, #41	; 0x29
 80076dc:	d156      	bne.n	800778c <__hexnan+0x130>
 80076de:	3202      	adds	r2, #2
 80076e0:	f8ca 2000 	str.w	r2, [sl]
 80076e4:	f1bb 0f00 	cmp.w	fp, #0
 80076e8:	d050      	beq.n	800778c <__hexnan+0x130>
 80076ea:	454c      	cmp	r4, r9
 80076ec:	d206      	bcs.n	80076fc <__hexnan+0xa0>
 80076ee:	2d07      	cmp	r5, #7
 80076f0:	dc04      	bgt.n	80076fc <__hexnan+0xa0>
 80076f2:	462a      	mov	r2, r5
 80076f4:	4649      	mov	r1, r9
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff ff8a 	bl	8007610 <L_shift>
 80076fc:	4544      	cmp	r4, r8
 80076fe:	d934      	bls.n	800776a <__hexnan+0x10e>
 8007700:	4623      	mov	r3, r4
 8007702:	f1a8 0204 	sub.w	r2, r8, #4
 8007706:	f853 1b04 	ldr.w	r1, [r3], #4
 800770a:	429f      	cmp	r7, r3
 800770c:	f842 1f04 	str.w	r1, [r2, #4]!
 8007710:	d2f9      	bcs.n	8007706 <__hexnan+0xaa>
 8007712:	1b3b      	subs	r3, r7, r4
 8007714:	f023 0303 	bic.w	r3, r3, #3
 8007718:	3304      	adds	r3, #4
 800771a:	3401      	adds	r4, #1
 800771c:	3e03      	subs	r6, #3
 800771e:	42b4      	cmp	r4, r6
 8007720:	bf88      	it	hi
 8007722:	2304      	movhi	r3, #4
 8007724:	2200      	movs	r2, #0
 8007726:	4443      	add	r3, r8
 8007728:	f843 2b04 	str.w	r2, [r3], #4
 800772c:	429f      	cmp	r7, r3
 800772e:	d2fb      	bcs.n	8007728 <__hexnan+0xcc>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b91b      	cbnz	r3, 800773c <__hexnan+0xe0>
 8007734:	4547      	cmp	r7, r8
 8007736:	d127      	bne.n	8007788 <__hexnan+0x12c>
 8007738:	2301      	movs	r3, #1
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	2005      	movs	r0, #5
 800773e:	e026      	b.n	800778e <__hexnan+0x132>
 8007740:	3501      	adds	r5, #1
 8007742:	2d08      	cmp	r5, #8
 8007744:	f10b 0b01 	add.w	fp, fp, #1
 8007748:	dd06      	ble.n	8007758 <__hexnan+0xfc>
 800774a:	4544      	cmp	r4, r8
 800774c:	d9c3      	bls.n	80076d6 <__hexnan+0x7a>
 800774e:	2300      	movs	r3, #0
 8007750:	2501      	movs	r5, #1
 8007752:	f844 3c04 	str.w	r3, [r4, #-4]
 8007756:	3c04      	subs	r4, #4
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	f000 000f 	and.w	r0, r0, #15
 800775e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007762:	6022      	str	r2, [r4, #0]
 8007764:	e7b7      	b.n	80076d6 <__hexnan+0x7a>
 8007766:	2508      	movs	r5, #8
 8007768:	e7b5      	b.n	80076d6 <__hexnan+0x7a>
 800776a:	9b01      	ldr	r3, [sp, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0df      	beq.n	8007730 <__hexnan+0xd4>
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	f1c3 0320 	rsb	r3, r3, #32
 8007778:	fa22 f303 	lsr.w	r3, r2, r3
 800777c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007780:	401a      	ands	r2, r3
 8007782:	f846 2c04 	str.w	r2, [r6, #-4]
 8007786:	e7d3      	b.n	8007730 <__hexnan+0xd4>
 8007788:	3f04      	subs	r7, #4
 800778a:	e7d1      	b.n	8007730 <__hexnan+0xd4>
 800778c:	2004      	movs	r0, #4
 800778e:	b007      	add	sp, #28
 8007790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007794 <_lseek_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	4611      	mov	r1, r2
 800779c:	2200      	movs	r2, #0
 800779e:	4d05      	ldr	r5, [pc, #20]	; (80077b4 <_lseek_r+0x20>)
 80077a0:	602a      	str	r2, [r5, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f7fa fd08 	bl	80021b8 <_lseek>
 80077a8:	1c43      	adds	r3, r0, #1
 80077aa:	d102      	bne.n	80077b2 <_lseek_r+0x1e>
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	b103      	cbz	r3, 80077b2 <_lseek_r+0x1e>
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	bd38      	pop	{r3, r4, r5, pc}
 80077b4:	20000430 	.word	0x20000430

080077b8 <__ascii_mbtowc>:
 80077b8:	b082      	sub	sp, #8
 80077ba:	b901      	cbnz	r1, 80077be <__ascii_mbtowc+0x6>
 80077bc:	a901      	add	r1, sp, #4
 80077be:	b142      	cbz	r2, 80077d2 <__ascii_mbtowc+0x1a>
 80077c0:	b14b      	cbz	r3, 80077d6 <__ascii_mbtowc+0x1e>
 80077c2:	7813      	ldrb	r3, [r2, #0]
 80077c4:	600b      	str	r3, [r1, #0]
 80077c6:	7812      	ldrb	r2, [r2, #0]
 80077c8:	1e10      	subs	r0, r2, #0
 80077ca:	bf18      	it	ne
 80077cc:	2001      	movne	r0, #1
 80077ce:	b002      	add	sp, #8
 80077d0:	4770      	bx	lr
 80077d2:	4610      	mov	r0, r2
 80077d4:	e7fb      	b.n	80077ce <__ascii_mbtowc+0x16>
 80077d6:	f06f 0001 	mvn.w	r0, #1
 80077da:	e7f8      	b.n	80077ce <__ascii_mbtowc+0x16>

080077dc <__malloc_lock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_lock+0x8>)
 80077de:	f001 be59 	b.w	8009494 <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000434 	.word	0x20000434

080077e8 <__malloc_unlock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_unlock+0x8>)
 80077ea:	f001 be54 	b.w	8009496 <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000434 	.word	0x20000434

080077f4 <_Balloc>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077f8:	4604      	mov	r4, r0
 80077fa:	460d      	mov	r5, r1
 80077fc:	b976      	cbnz	r6, 800781c <_Balloc+0x28>
 80077fe:	2010      	movs	r0, #16
 8007800:	f7fe fc34 	bl	800606c <malloc>
 8007804:	4602      	mov	r2, r0
 8007806:	6260      	str	r0, [r4, #36]	; 0x24
 8007808:	b920      	cbnz	r0, 8007814 <_Balloc+0x20>
 800780a:	2166      	movs	r1, #102	; 0x66
 800780c:	4b17      	ldr	r3, [pc, #92]	; (800786c <_Balloc+0x78>)
 800780e:	4818      	ldr	r0, [pc, #96]	; (8007870 <_Balloc+0x7c>)
 8007810:	f001 fc5c 	bl	80090cc <__assert_func>
 8007814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007818:	6006      	str	r6, [r0, #0]
 800781a:	60c6      	str	r6, [r0, #12]
 800781c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800781e:	68f3      	ldr	r3, [r6, #12]
 8007820:	b183      	cbz	r3, 8007844 <_Balloc+0x50>
 8007822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800782a:	b9b8      	cbnz	r0, 800785c <_Balloc+0x68>
 800782c:	2101      	movs	r1, #1
 800782e:	fa01 f605 	lsl.w	r6, r1, r5
 8007832:	1d72      	adds	r2, r6, #5
 8007834:	4620      	mov	r0, r4
 8007836:	0092      	lsls	r2, r2, #2
 8007838:	f7fe fc3e 	bl	80060b8 <_calloc_r>
 800783c:	b160      	cbz	r0, 8007858 <_Balloc+0x64>
 800783e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007842:	e00e      	b.n	8007862 <_Balloc+0x6e>
 8007844:	2221      	movs	r2, #33	; 0x21
 8007846:	2104      	movs	r1, #4
 8007848:	4620      	mov	r0, r4
 800784a:	f7fe fc35 	bl	80060b8 <_calloc_r>
 800784e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007850:	60f0      	str	r0, [r6, #12]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e4      	bne.n	8007822 <_Balloc+0x2e>
 8007858:	2000      	movs	r0, #0
 800785a:	bd70      	pop	{r4, r5, r6, pc}
 800785c:	6802      	ldr	r2, [r0, #0]
 800785e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007862:	2300      	movs	r3, #0
 8007864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007868:	e7f7      	b.n	800785a <_Balloc+0x66>
 800786a:	bf00      	nop
 800786c:	0800aae0 	.word	0x0800aae0
 8007870:	0800aaf7 	.word	0x0800aaf7

08007874 <_Bfree>:
 8007874:	b570      	push	{r4, r5, r6, lr}
 8007876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007878:	4605      	mov	r5, r0
 800787a:	460c      	mov	r4, r1
 800787c:	b976      	cbnz	r6, 800789c <_Bfree+0x28>
 800787e:	2010      	movs	r0, #16
 8007880:	f7fe fbf4 	bl	800606c <malloc>
 8007884:	4602      	mov	r2, r0
 8007886:	6268      	str	r0, [r5, #36]	; 0x24
 8007888:	b920      	cbnz	r0, 8007894 <_Bfree+0x20>
 800788a:	218a      	movs	r1, #138	; 0x8a
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <_Bfree+0x3c>)
 800788e:	4809      	ldr	r0, [pc, #36]	; (80078b4 <_Bfree+0x40>)
 8007890:	f001 fc1c 	bl	80090cc <__assert_func>
 8007894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007898:	6006      	str	r6, [r0, #0]
 800789a:	60c6      	str	r6, [r0, #12]
 800789c:	b13c      	cbz	r4, 80078ae <_Bfree+0x3a>
 800789e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80078a0:	6862      	ldr	r2, [r4, #4]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078a8:	6021      	str	r1, [r4, #0]
 80078aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ae:	bd70      	pop	{r4, r5, r6, pc}
 80078b0:	0800aae0 	.word	0x0800aae0
 80078b4:	0800aaf7 	.word	0x0800aaf7

080078b8 <__multadd>:
 80078b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078bc:	4607      	mov	r7, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	461e      	mov	r6, r3
 80078c2:	2000      	movs	r0, #0
 80078c4:	690d      	ldr	r5, [r1, #16]
 80078c6:	f101 0c14 	add.w	ip, r1, #20
 80078ca:	f8dc 3000 	ldr.w	r3, [ip]
 80078ce:	3001      	adds	r0, #1
 80078d0:	b299      	uxth	r1, r3
 80078d2:	fb02 6101 	mla	r1, r2, r1, r6
 80078d6:	0c1e      	lsrs	r6, r3, #16
 80078d8:	0c0b      	lsrs	r3, r1, #16
 80078da:	fb02 3306 	mla	r3, r2, r6, r3
 80078de:	b289      	uxth	r1, r1
 80078e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80078e4:	4285      	cmp	r5, r0
 80078e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80078ea:	f84c 1b04 	str.w	r1, [ip], #4
 80078ee:	dcec      	bgt.n	80078ca <__multadd+0x12>
 80078f0:	b30e      	cbz	r6, 8007936 <__multadd+0x7e>
 80078f2:	68a3      	ldr	r3, [r4, #8]
 80078f4:	42ab      	cmp	r3, r5
 80078f6:	dc19      	bgt.n	800792c <__multadd+0x74>
 80078f8:	6861      	ldr	r1, [r4, #4]
 80078fa:	4638      	mov	r0, r7
 80078fc:	3101      	adds	r1, #1
 80078fe:	f7ff ff79 	bl	80077f4 <_Balloc>
 8007902:	4680      	mov	r8, r0
 8007904:	b928      	cbnz	r0, 8007912 <__multadd+0x5a>
 8007906:	4602      	mov	r2, r0
 8007908:	21b5      	movs	r1, #181	; 0xb5
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <__multadd+0x84>)
 800790c:	480c      	ldr	r0, [pc, #48]	; (8007940 <__multadd+0x88>)
 800790e:	f001 fbdd 	bl	80090cc <__assert_func>
 8007912:	6922      	ldr	r2, [r4, #16]
 8007914:	f104 010c 	add.w	r1, r4, #12
 8007918:	3202      	adds	r2, #2
 800791a:	0092      	lsls	r2, r2, #2
 800791c:	300c      	adds	r0, #12
 800791e:	f7fe fbb5 	bl	800608c <memcpy>
 8007922:	4621      	mov	r1, r4
 8007924:	4638      	mov	r0, r7
 8007926:	f7ff ffa5 	bl	8007874 <_Bfree>
 800792a:	4644      	mov	r4, r8
 800792c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007930:	3501      	adds	r5, #1
 8007932:	615e      	str	r6, [r3, #20]
 8007934:	6125      	str	r5, [r4, #16]
 8007936:	4620      	mov	r0, r4
 8007938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793c:	0800aa55 	.word	0x0800aa55
 8007940:	0800aaf7 	.word	0x0800aaf7

08007944 <__s2b>:
 8007944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007948:	4615      	mov	r5, r2
 800794a:	2209      	movs	r2, #9
 800794c:	461f      	mov	r7, r3
 800794e:	3308      	adds	r3, #8
 8007950:	460c      	mov	r4, r1
 8007952:	fb93 f3f2 	sdiv	r3, r3, r2
 8007956:	4606      	mov	r6, r0
 8007958:	2201      	movs	r2, #1
 800795a:	2100      	movs	r1, #0
 800795c:	429a      	cmp	r2, r3
 800795e:	db09      	blt.n	8007974 <__s2b+0x30>
 8007960:	4630      	mov	r0, r6
 8007962:	f7ff ff47 	bl	80077f4 <_Balloc>
 8007966:	b940      	cbnz	r0, 800797a <__s2b+0x36>
 8007968:	4602      	mov	r2, r0
 800796a:	21ce      	movs	r1, #206	; 0xce
 800796c:	4b18      	ldr	r3, [pc, #96]	; (80079d0 <__s2b+0x8c>)
 800796e:	4819      	ldr	r0, [pc, #100]	; (80079d4 <__s2b+0x90>)
 8007970:	f001 fbac 	bl	80090cc <__assert_func>
 8007974:	0052      	lsls	r2, r2, #1
 8007976:	3101      	adds	r1, #1
 8007978:	e7f0      	b.n	800795c <__s2b+0x18>
 800797a:	9b08      	ldr	r3, [sp, #32]
 800797c:	2d09      	cmp	r5, #9
 800797e:	6143      	str	r3, [r0, #20]
 8007980:	f04f 0301 	mov.w	r3, #1
 8007984:	6103      	str	r3, [r0, #16]
 8007986:	dd16      	ble.n	80079b6 <__s2b+0x72>
 8007988:	f104 0909 	add.w	r9, r4, #9
 800798c:	46c8      	mov	r8, r9
 800798e:	442c      	add	r4, r5
 8007990:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007994:	4601      	mov	r1, r0
 8007996:	220a      	movs	r2, #10
 8007998:	4630      	mov	r0, r6
 800799a:	3b30      	subs	r3, #48	; 0x30
 800799c:	f7ff ff8c 	bl	80078b8 <__multadd>
 80079a0:	45a0      	cmp	r8, r4
 80079a2:	d1f5      	bne.n	8007990 <__s2b+0x4c>
 80079a4:	f1a5 0408 	sub.w	r4, r5, #8
 80079a8:	444c      	add	r4, r9
 80079aa:	1b2d      	subs	r5, r5, r4
 80079ac:	1963      	adds	r3, r4, r5
 80079ae:	42bb      	cmp	r3, r7
 80079b0:	db04      	blt.n	80079bc <__s2b+0x78>
 80079b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b6:	2509      	movs	r5, #9
 80079b8:	340a      	adds	r4, #10
 80079ba:	e7f6      	b.n	80079aa <__s2b+0x66>
 80079bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079c0:	4601      	mov	r1, r0
 80079c2:	220a      	movs	r2, #10
 80079c4:	4630      	mov	r0, r6
 80079c6:	3b30      	subs	r3, #48	; 0x30
 80079c8:	f7ff ff76 	bl	80078b8 <__multadd>
 80079cc:	e7ee      	b.n	80079ac <__s2b+0x68>
 80079ce:	bf00      	nop
 80079d0:	0800aa55 	.word	0x0800aa55
 80079d4:	0800aaf7 	.word	0x0800aaf7

080079d8 <__hi0bits>:
 80079d8:	0c02      	lsrs	r2, r0, #16
 80079da:	0412      	lsls	r2, r2, #16
 80079dc:	4603      	mov	r3, r0
 80079de:	b9ca      	cbnz	r2, 8007a14 <__hi0bits+0x3c>
 80079e0:	0403      	lsls	r3, r0, #16
 80079e2:	2010      	movs	r0, #16
 80079e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80079e8:	bf04      	itt	eq
 80079ea:	021b      	lsleq	r3, r3, #8
 80079ec:	3008      	addeq	r0, #8
 80079ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80079f2:	bf04      	itt	eq
 80079f4:	011b      	lsleq	r3, r3, #4
 80079f6:	3004      	addeq	r0, #4
 80079f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80079fc:	bf04      	itt	eq
 80079fe:	009b      	lsleq	r3, r3, #2
 8007a00:	3002      	addeq	r0, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	db05      	blt.n	8007a12 <__hi0bits+0x3a>
 8007a06:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007a0a:	f100 0001 	add.w	r0, r0, #1
 8007a0e:	bf08      	it	eq
 8007a10:	2020      	moveq	r0, #32
 8007a12:	4770      	bx	lr
 8007a14:	2000      	movs	r0, #0
 8007a16:	e7e5      	b.n	80079e4 <__hi0bits+0xc>

08007a18 <__lo0bits>:
 8007a18:	6803      	ldr	r3, [r0, #0]
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	f013 0007 	ands.w	r0, r3, #7
 8007a20:	d00b      	beq.n	8007a3a <__lo0bits+0x22>
 8007a22:	07d9      	lsls	r1, r3, #31
 8007a24:	d421      	bmi.n	8007a6a <__lo0bits+0x52>
 8007a26:	0798      	lsls	r0, r3, #30
 8007a28:	bf49      	itett	mi
 8007a2a:	085b      	lsrmi	r3, r3, #1
 8007a2c:	089b      	lsrpl	r3, r3, #2
 8007a2e:	2001      	movmi	r0, #1
 8007a30:	6013      	strmi	r3, [r2, #0]
 8007a32:	bf5c      	itt	pl
 8007a34:	2002      	movpl	r0, #2
 8007a36:	6013      	strpl	r3, [r2, #0]
 8007a38:	4770      	bx	lr
 8007a3a:	b299      	uxth	r1, r3
 8007a3c:	b909      	cbnz	r1, 8007a42 <__lo0bits+0x2a>
 8007a3e:	2010      	movs	r0, #16
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	b2d9      	uxtb	r1, r3
 8007a44:	b909      	cbnz	r1, 8007a4a <__lo0bits+0x32>
 8007a46:	3008      	adds	r0, #8
 8007a48:	0a1b      	lsrs	r3, r3, #8
 8007a4a:	0719      	lsls	r1, r3, #28
 8007a4c:	bf04      	itt	eq
 8007a4e:	091b      	lsreq	r3, r3, #4
 8007a50:	3004      	addeq	r0, #4
 8007a52:	0799      	lsls	r1, r3, #30
 8007a54:	bf04      	itt	eq
 8007a56:	089b      	lsreq	r3, r3, #2
 8007a58:	3002      	addeq	r0, #2
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	d403      	bmi.n	8007a66 <__lo0bits+0x4e>
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	f100 0001 	add.w	r0, r0, #1
 8007a64:	d003      	beq.n	8007a6e <__lo0bits+0x56>
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	4770      	bx	lr
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	4770      	bx	lr
 8007a6e:	2020      	movs	r0, #32
 8007a70:	4770      	bx	lr
	...

08007a74 <__i2b>:
 8007a74:	b510      	push	{r4, lr}
 8007a76:	460c      	mov	r4, r1
 8007a78:	2101      	movs	r1, #1
 8007a7a:	f7ff febb 	bl	80077f4 <_Balloc>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	b928      	cbnz	r0, 8007a8e <__i2b+0x1a>
 8007a82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a86:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <__i2b+0x24>)
 8007a88:	4804      	ldr	r0, [pc, #16]	; (8007a9c <__i2b+0x28>)
 8007a8a:	f001 fb1f 	bl	80090cc <__assert_func>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	6144      	str	r4, [r0, #20]
 8007a92:	6103      	str	r3, [r0, #16]
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	bf00      	nop
 8007a98:	0800aa55 	.word	0x0800aa55
 8007a9c:	0800aaf7 	.word	0x0800aaf7

08007aa0 <__multiply>:
 8007aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa4:	4691      	mov	r9, r2
 8007aa6:	690a      	ldr	r2, [r1, #16]
 8007aa8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007aac:	460c      	mov	r4, r1
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bfbe      	ittt	lt
 8007ab2:	460b      	movlt	r3, r1
 8007ab4:	464c      	movlt	r4, r9
 8007ab6:	4699      	movlt	r9, r3
 8007ab8:	6927      	ldr	r7, [r4, #16]
 8007aba:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007abe:	68a3      	ldr	r3, [r4, #8]
 8007ac0:	6861      	ldr	r1, [r4, #4]
 8007ac2:	eb07 060a 	add.w	r6, r7, sl
 8007ac6:	42b3      	cmp	r3, r6
 8007ac8:	b085      	sub	sp, #20
 8007aca:	bfb8      	it	lt
 8007acc:	3101      	addlt	r1, #1
 8007ace:	f7ff fe91 	bl	80077f4 <_Balloc>
 8007ad2:	b930      	cbnz	r0, 8007ae2 <__multiply+0x42>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f240 115d 	movw	r1, #349	; 0x15d
 8007ada:	4b43      	ldr	r3, [pc, #268]	; (8007be8 <__multiply+0x148>)
 8007adc:	4843      	ldr	r0, [pc, #268]	; (8007bec <__multiply+0x14c>)
 8007ade:	f001 faf5 	bl	80090cc <__assert_func>
 8007ae2:	f100 0514 	add.w	r5, r0, #20
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	2200      	movs	r2, #0
 8007aea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007aee:	4543      	cmp	r3, r8
 8007af0:	d321      	bcc.n	8007b36 <__multiply+0x96>
 8007af2:	f104 0314 	add.w	r3, r4, #20
 8007af6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007afa:	f109 0314 	add.w	r3, r9, #20
 8007afe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	1b3a      	subs	r2, r7, r4
 8007b06:	3a15      	subs	r2, #21
 8007b08:	f022 0203 	bic.w	r2, r2, #3
 8007b0c:	3204      	adds	r2, #4
 8007b0e:	f104 0115 	add.w	r1, r4, #21
 8007b12:	428f      	cmp	r7, r1
 8007b14:	bf38      	it	cc
 8007b16:	2204      	movcc	r2, #4
 8007b18:	9201      	str	r2, [sp, #4]
 8007b1a:	9a02      	ldr	r2, [sp, #8]
 8007b1c:	9303      	str	r3, [sp, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d80c      	bhi.n	8007b3c <__multiply+0x9c>
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	dd03      	ble.n	8007b2e <__multiply+0x8e>
 8007b26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d059      	beq.n	8007be2 <__multiply+0x142>
 8007b2e:	6106      	str	r6, [r0, #16]
 8007b30:	b005      	add	sp, #20
 8007b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b36:	f843 2b04 	str.w	r2, [r3], #4
 8007b3a:	e7d8      	b.n	8007aee <__multiply+0x4e>
 8007b3c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b40:	f1ba 0f00 	cmp.w	sl, #0
 8007b44:	d023      	beq.n	8007b8e <__multiply+0xee>
 8007b46:	46a9      	mov	r9, r5
 8007b48:	f04f 0c00 	mov.w	ip, #0
 8007b4c:	f104 0e14 	add.w	lr, r4, #20
 8007b50:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007b54:	f8d9 1000 	ldr.w	r1, [r9]
 8007b58:	fa1f fb82 	uxth.w	fp, r2
 8007b5c:	b289      	uxth	r1, r1
 8007b5e:	fb0a 110b 	mla	r1, sl, fp, r1
 8007b62:	4461      	add	r1, ip
 8007b64:	f8d9 c000 	ldr.w	ip, [r9]
 8007b68:	0c12      	lsrs	r2, r2, #16
 8007b6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b6e:	fb0a c202 	mla	r2, sl, r2, ip
 8007b72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007b76:	b289      	uxth	r1, r1
 8007b78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b7c:	4577      	cmp	r7, lr
 8007b7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007b82:	f849 1b04 	str.w	r1, [r9], #4
 8007b86:	d8e3      	bhi.n	8007b50 <__multiply+0xb0>
 8007b88:	9a01      	ldr	r2, [sp, #4]
 8007b8a:	f845 c002 	str.w	ip, [r5, r2]
 8007b8e:	9a03      	ldr	r2, [sp, #12]
 8007b90:	3304      	adds	r3, #4
 8007b92:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b96:	f1b9 0f00 	cmp.w	r9, #0
 8007b9a:	d020      	beq.n	8007bde <__multiply+0x13e>
 8007b9c:	46ae      	mov	lr, r5
 8007b9e:	f04f 0a00 	mov.w	sl, #0
 8007ba2:	6829      	ldr	r1, [r5, #0]
 8007ba4:	f104 0c14 	add.w	ip, r4, #20
 8007ba8:	f8bc b000 	ldrh.w	fp, [ip]
 8007bac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007bb0:	b289      	uxth	r1, r1
 8007bb2:	fb09 220b 	mla	r2, r9, fp, r2
 8007bb6:	4492      	add	sl, r2
 8007bb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007bbc:	f84e 1b04 	str.w	r1, [lr], #4
 8007bc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007bc4:	f8be 1000 	ldrh.w	r1, [lr]
 8007bc8:	0c12      	lsrs	r2, r2, #16
 8007bca:	fb09 1102 	mla	r1, r9, r2, r1
 8007bce:	4567      	cmp	r7, ip
 8007bd0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007bd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007bd8:	d8e6      	bhi.n	8007ba8 <__multiply+0x108>
 8007bda:	9a01      	ldr	r2, [sp, #4]
 8007bdc:	50a9      	str	r1, [r5, r2]
 8007bde:	3504      	adds	r5, #4
 8007be0:	e79b      	b.n	8007b1a <__multiply+0x7a>
 8007be2:	3e01      	subs	r6, #1
 8007be4:	e79d      	b.n	8007b22 <__multiply+0x82>
 8007be6:	bf00      	nop
 8007be8:	0800aa55 	.word	0x0800aa55
 8007bec:	0800aaf7 	.word	0x0800aaf7

08007bf0 <__pow5mult>:
 8007bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	f012 0203 	ands.w	r2, r2, #3
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	d007      	beq.n	8007c10 <__pow5mult+0x20>
 8007c00:	4c25      	ldr	r4, [pc, #148]	; (8007c98 <__pow5mult+0xa8>)
 8007c02:	3a01      	subs	r2, #1
 8007c04:	2300      	movs	r3, #0
 8007c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c0a:	f7ff fe55 	bl	80078b8 <__multadd>
 8007c0e:	4607      	mov	r7, r0
 8007c10:	10ad      	asrs	r5, r5, #2
 8007c12:	d03d      	beq.n	8007c90 <__pow5mult+0xa0>
 8007c14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007c16:	b97c      	cbnz	r4, 8007c38 <__pow5mult+0x48>
 8007c18:	2010      	movs	r0, #16
 8007c1a:	f7fe fa27 	bl	800606c <malloc>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6270      	str	r0, [r6, #36]	; 0x24
 8007c22:	b928      	cbnz	r0, 8007c30 <__pow5mult+0x40>
 8007c24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007c28:	4b1c      	ldr	r3, [pc, #112]	; (8007c9c <__pow5mult+0xac>)
 8007c2a:	481d      	ldr	r0, [pc, #116]	; (8007ca0 <__pow5mult+0xb0>)
 8007c2c:	f001 fa4e 	bl	80090cc <__assert_func>
 8007c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c34:	6004      	str	r4, [r0, #0]
 8007c36:	60c4      	str	r4, [r0, #12]
 8007c38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c40:	b94c      	cbnz	r4, 8007c56 <__pow5mult+0x66>
 8007c42:	f240 2171 	movw	r1, #625	; 0x271
 8007c46:	4630      	mov	r0, r6
 8007c48:	f7ff ff14 	bl	8007a74 <__i2b>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c54:	6003      	str	r3, [r0, #0]
 8007c56:	f04f 0900 	mov.w	r9, #0
 8007c5a:	07eb      	lsls	r3, r5, #31
 8007c5c:	d50a      	bpl.n	8007c74 <__pow5mult+0x84>
 8007c5e:	4639      	mov	r1, r7
 8007c60:	4622      	mov	r2, r4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7ff ff1c 	bl	8007aa0 <__multiply>
 8007c68:	4680      	mov	r8, r0
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff fe01 	bl	8007874 <_Bfree>
 8007c72:	4647      	mov	r7, r8
 8007c74:	106d      	asrs	r5, r5, #1
 8007c76:	d00b      	beq.n	8007c90 <__pow5mult+0xa0>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	b938      	cbnz	r0, 8007c8c <__pow5mult+0x9c>
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4630      	mov	r0, r6
 8007c82:	f7ff ff0d 	bl	8007aa0 <__multiply>
 8007c86:	6020      	str	r0, [r4, #0]
 8007c88:	f8c0 9000 	str.w	r9, [r0]
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	e7e4      	b.n	8007c5a <__pow5mult+0x6a>
 8007c90:	4638      	mov	r0, r7
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	bf00      	nop
 8007c98:	0800ac48 	.word	0x0800ac48
 8007c9c:	0800aae0 	.word	0x0800aae0
 8007ca0:	0800aaf7 	.word	0x0800aaf7

08007ca4 <__lshift>:
 8007ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca8:	460c      	mov	r4, r1
 8007caa:	4607      	mov	r7, r0
 8007cac:	4691      	mov	r9, r2
 8007cae:	6923      	ldr	r3, [r4, #16]
 8007cb0:	6849      	ldr	r1, [r1, #4]
 8007cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cb6:	68a3      	ldr	r3, [r4, #8]
 8007cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cbc:	f108 0601 	add.w	r6, r8, #1
 8007cc0:	42b3      	cmp	r3, r6
 8007cc2:	db0b      	blt.n	8007cdc <__lshift+0x38>
 8007cc4:	4638      	mov	r0, r7
 8007cc6:	f7ff fd95 	bl	80077f4 <_Balloc>
 8007cca:	4605      	mov	r5, r0
 8007ccc:	b948      	cbnz	r0, 8007ce2 <__lshift+0x3e>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007cd4:	4b29      	ldr	r3, [pc, #164]	; (8007d7c <__lshift+0xd8>)
 8007cd6:	482a      	ldr	r0, [pc, #168]	; (8007d80 <__lshift+0xdc>)
 8007cd8:	f001 f9f8 	bl	80090cc <__assert_func>
 8007cdc:	3101      	adds	r1, #1
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	e7ee      	b.n	8007cc0 <__lshift+0x1c>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f100 0114 	add.w	r1, r0, #20
 8007ce8:	f100 0210 	add.w	r2, r0, #16
 8007cec:	4618      	mov	r0, r3
 8007cee:	4553      	cmp	r3, sl
 8007cf0:	db37      	blt.n	8007d62 <__lshift+0xbe>
 8007cf2:	6920      	ldr	r0, [r4, #16]
 8007cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cf8:	f104 0314 	add.w	r3, r4, #20
 8007cfc:	f019 091f 	ands.w	r9, r9, #31
 8007d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007d08:	d02f      	beq.n	8007d6a <__lshift+0xc6>
 8007d0a:	468a      	mov	sl, r1
 8007d0c:	f04f 0c00 	mov.w	ip, #0
 8007d10:	f1c9 0e20 	rsb	lr, r9, #32
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	fa02 f209 	lsl.w	r2, r2, r9
 8007d1a:	ea42 020c 	orr.w	r2, r2, ip
 8007d1e:	f84a 2b04 	str.w	r2, [sl], #4
 8007d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d26:	4298      	cmp	r0, r3
 8007d28:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007d2c:	d8f2      	bhi.n	8007d14 <__lshift+0x70>
 8007d2e:	1b03      	subs	r3, r0, r4
 8007d30:	3b15      	subs	r3, #21
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	3304      	adds	r3, #4
 8007d38:	f104 0215 	add.w	r2, r4, #21
 8007d3c:	4290      	cmp	r0, r2
 8007d3e:	bf38      	it	cc
 8007d40:	2304      	movcc	r3, #4
 8007d42:	f841 c003 	str.w	ip, [r1, r3]
 8007d46:	f1bc 0f00 	cmp.w	ip, #0
 8007d4a:	d001      	beq.n	8007d50 <__lshift+0xac>
 8007d4c:	f108 0602 	add.w	r6, r8, #2
 8007d50:	3e01      	subs	r6, #1
 8007d52:	4638      	mov	r0, r7
 8007d54:	4621      	mov	r1, r4
 8007d56:	612e      	str	r6, [r5, #16]
 8007d58:	f7ff fd8c 	bl	8007874 <_Bfree>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d66:	3301      	adds	r3, #1
 8007d68:	e7c1      	b.n	8007cee <__lshift+0x4a>
 8007d6a:	3904      	subs	r1, #4
 8007d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d70:	4298      	cmp	r0, r3
 8007d72:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d76:	d8f9      	bhi.n	8007d6c <__lshift+0xc8>
 8007d78:	e7ea      	b.n	8007d50 <__lshift+0xac>
 8007d7a:	bf00      	nop
 8007d7c:	0800aa55 	.word	0x0800aa55
 8007d80:	0800aaf7 	.word	0x0800aaf7

08007d84 <__mcmp>:
 8007d84:	4603      	mov	r3, r0
 8007d86:	690a      	ldr	r2, [r1, #16]
 8007d88:	6900      	ldr	r0, [r0, #16]
 8007d8a:	b530      	push	{r4, r5, lr}
 8007d8c:	1a80      	subs	r0, r0, r2
 8007d8e:	d10d      	bne.n	8007dac <__mcmp+0x28>
 8007d90:	3314      	adds	r3, #20
 8007d92:	3114      	adds	r1, #20
 8007d94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007da4:	4295      	cmp	r5, r2
 8007da6:	d002      	beq.n	8007dae <__mcmp+0x2a>
 8007da8:	d304      	bcc.n	8007db4 <__mcmp+0x30>
 8007daa:	2001      	movs	r0, #1
 8007dac:	bd30      	pop	{r4, r5, pc}
 8007dae:	42a3      	cmp	r3, r4
 8007db0:	d3f4      	bcc.n	8007d9c <__mcmp+0x18>
 8007db2:	e7fb      	b.n	8007dac <__mcmp+0x28>
 8007db4:	f04f 30ff 	mov.w	r0, #4294967295
 8007db8:	e7f8      	b.n	8007dac <__mcmp+0x28>
	...

08007dbc <__mdiff>:
 8007dbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc0:	460d      	mov	r5, r1
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	4611      	mov	r1, r2
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	4614      	mov	r4, r2
 8007dca:	f7ff ffdb 	bl	8007d84 <__mcmp>
 8007dce:	1e06      	subs	r6, r0, #0
 8007dd0:	d111      	bne.n	8007df6 <__mdiff+0x3a>
 8007dd2:	4631      	mov	r1, r6
 8007dd4:	4638      	mov	r0, r7
 8007dd6:	f7ff fd0d 	bl	80077f4 <_Balloc>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	b928      	cbnz	r0, 8007dea <__mdiff+0x2e>
 8007dde:	f240 2132 	movw	r1, #562	; 0x232
 8007de2:	4b3a      	ldr	r3, [pc, #232]	; (8007ecc <__mdiff+0x110>)
 8007de4:	483a      	ldr	r0, [pc, #232]	; (8007ed0 <__mdiff+0x114>)
 8007de6:	f001 f971 	bl	80090cc <__assert_func>
 8007dea:	2301      	movs	r3, #1
 8007dec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007df0:	4610      	mov	r0, r2
 8007df2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df6:	bfa4      	itt	ge
 8007df8:	4623      	movge	r3, r4
 8007dfa:	462c      	movge	r4, r5
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	6861      	ldr	r1, [r4, #4]
 8007e00:	bfa6      	itte	ge
 8007e02:	461d      	movge	r5, r3
 8007e04:	2600      	movge	r6, #0
 8007e06:	2601      	movlt	r6, #1
 8007e08:	f7ff fcf4 	bl	80077f4 <_Balloc>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	b918      	cbnz	r0, 8007e18 <__mdiff+0x5c>
 8007e10:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007e14:	4b2d      	ldr	r3, [pc, #180]	; (8007ecc <__mdiff+0x110>)
 8007e16:	e7e5      	b.n	8007de4 <__mdiff+0x28>
 8007e18:	f102 0814 	add.w	r8, r2, #20
 8007e1c:	46c2      	mov	sl, r8
 8007e1e:	f04f 0c00 	mov.w	ip, #0
 8007e22:	6927      	ldr	r7, [r4, #16]
 8007e24:	60c6      	str	r6, [r0, #12]
 8007e26:	692e      	ldr	r6, [r5, #16]
 8007e28:	f104 0014 	add.w	r0, r4, #20
 8007e2c:	f105 0914 	add.w	r9, r5, #20
 8007e30:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007e34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e38:	3410      	adds	r4, #16
 8007e3a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007e3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e42:	fa1f f18b 	uxth.w	r1, fp
 8007e46:	448c      	add	ip, r1
 8007e48:	b299      	uxth	r1, r3
 8007e4a:	0c1b      	lsrs	r3, r3, #16
 8007e4c:	ebac 0101 	sub.w	r1, ip, r1
 8007e50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e58:	b289      	uxth	r1, r1
 8007e5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e5e:	454e      	cmp	r6, r9
 8007e60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e64:	f84a 3b04 	str.w	r3, [sl], #4
 8007e68:	d8e7      	bhi.n	8007e3a <__mdiff+0x7e>
 8007e6a:	1b73      	subs	r3, r6, r5
 8007e6c:	3b15      	subs	r3, #21
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	3515      	adds	r5, #21
 8007e74:	3304      	adds	r3, #4
 8007e76:	42ae      	cmp	r6, r5
 8007e78:	bf38      	it	cc
 8007e7a:	2304      	movcc	r3, #4
 8007e7c:	4418      	add	r0, r3
 8007e7e:	4443      	add	r3, r8
 8007e80:	461e      	mov	r6, r3
 8007e82:	4605      	mov	r5, r0
 8007e84:	4575      	cmp	r5, lr
 8007e86:	d30e      	bcc.n	8007ea6 <__mdiff+0xea>
 8007e88:	f10e 0103 	add.w	r1, lr, #3
 8007e8c:	1a09      	subs	r1, r1, r0
 8007e8e:	f021 0103 	bic.w	r1, r1, #3
 8007e92:	3803      	subs	r0, #3
 8007e94:	4586      	cmp	lr, r0
 8007e96:	bf38      	it	cc
 8007e98:	2100      	movcc	r1, #0
 8007e9a:	4419      	add	r1, r3
 8007e9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ea0:	b18b      	cbz	r3, 8007ec6 <__mdiff+0x10a>
 8007ea2:	6117      	str	r7, [r2, #16]
 8007ea4:	e7a4      	b.n	8007df0 <__mdiff+0x34>
 8007ea6:	f855 8b04 	ldr.w	r8, [r5], #4
 8007eaa:	fa1f f188 	uxth.w	r1, r8
 8007eae:	4461      	add	r1, ip
 8007eb0:	140c      	asrs	r4, r1, #16
 8007eb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007eb6:	b289      	uxth	r1, r1
 8007eb8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007ebc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007ec0:	f846 1b04 	str.w	r1, [r6], #4
 8007ec4:	e7de      	b.n	8007e84 <__mdiff+0xc8>
 8007ec6:	3f01      	subs	r7, #1
 8007ec8:	e7e8      	b.n	8007e9c <__mdiff+0xe0>
 8007eca:	bf00      	nop
 8007ecc:	0800aa55 	.word	0x0800aa55
 8007ed0:	0800aaf7 	.word	0x0800aaf7

08007ed4 <__ulp>:
 8007ed4:	4b11      	ldr	r3, [pc, #68]	; (8007f1c <__ulp+0x48>)
 8007ed6:	400b      	ands	r3, r1
 8007ed8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	dd02      	ble.n	8007ee6 <__ulp+0x12>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4770      	bx	lr
 8007ee6:	425b      	negs	r3, r3
 8007ee8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007eec:	f04f 0000 	mov.w	r0, #0
 8007ef0:	f04f 0100 	mov.w	r1, #0
 8007ef4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ef8:	da04      	bge.n	8007f04 <__ulp+0x30>
 8007efa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007efe:	fa43 f102 	asr.w	r1, r3, r2
 8007f02:	4770      	bx	lr
 8007f04:	f1a2 0314 	sub.w	r3, r2, #20
 8007f08:	2b1e      	cmp	r3, #30
 8007f0a:	bfd6      	itet	le
 8007f0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007f10:	2301      	movgt	r3, #1
 8007f12:	fa22 f303 	lsrle.w	r3, r2, r3
 8007f16:	4618      	mov	r0, r3
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	7ff00000 	.word	0x7ff00000

08007f20 <__b2d>:
 8007f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f24:	6907      	ldr	r7, [r0, #16]
 8007f26:	f100 0914 	add.w	r9, r0, #20
 8007f2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007f2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007f32:	f1a7 0804 	sub.w	r8, r7, #4
 8007f36:	4630      	mov	r0, r6
 8007f38:	f7ff fd4e 	bl	80079d8 <__hi0bits>
 8007f3c:	f1c0 0320 	rsb	r3, r0, #32
 8007f40:	280a      	cmp	r0, #10
 8007f42:	600b      	str	r3, [r1, #0]
 8007f44:	491f      	ldr	r1, [pc, #124]	; (8007fc4 <__b2d+0xa4>)
 8007f46:	dc17      	bgt.n	8007f78 <__b2d+0x58>
 8007f48:	45c1      	cmp	r9, r8
 8007f4a:	bf28      	it	cs
 8007f4c:	2200      	movcs	r2, #0
 8007f4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f52:	fa26 f30c 	lsr.w	r3, r6, ip
 8007f56:	bf38      	it	cc
 8007f58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f5c:	ea43 0501 	orr.w	r5, r3, r1
 8007f60:	f100 0315 	add.w	r3, r0, #21
 8007f64:	fa06 f303 	lsl.w	r3, r6, r3
 8007f68:	fa22 f20c 	lsr.w	r2, r2, ip
 8007f6c:	ea43 0402 	orr.w	r4, r3, r2
 8007f70:	4620      	mov	r0, r4
 8007f72:	4629      	mov	r1, r5
 8007f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f78:	45c1      	cmp	r9, r8
 8007f7a:	bf2e      	itee	cs
 8007f7c:	2200      	movcs	r2, #0
 8007f7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f82:	f1a7 0808 	subcc.w	r8, r7, #8
 8007f86:	f1b0 030b 	subs.w	r3, r0, #11
 8007f8a:	d016      	beq.n	8007fba <__b2d+0x9a>
 8007f8c:	f1c3 0720 	rsb	r7, r3, #32
 8007f90:	fa22 f107 	lsr.w	r1, r2, r7
 8007f94:	45c8      	cmp	r8, r9
 8007f96:	fa06 f603 	lsl.w	r6, r6, r3
 8007f9a:	ea46 0601 	orr.w	r6, r6, r1
 8007f9e:	bf94      	ite	ls
 8007fa0:	2100      	movls	r1, #0
 8007fa2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007fa6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007faa:	fa02 f003 	lsl.w	r0, r2, r3
 8007fae:	40f9      	lsrs	r1, r7
 8007fb0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007fb4:	ea40 0401 	orr.w	r4, r0, r1
 8007fb8:	e7da      	b.n	8007f70 <__b2d+0x50>
 8007fba:	4614      	mov	r4, r2
 8007fbc:	ea46 0501 	orr.w	r5, r6, r1
 8007fc0:	e7d6      	b.n	8007f70 <__b2d+0x50>
 8007fc2:	bf00      	nop
 8007fc4:	3ff00000 	.word	0x3ff00000

08007fc8 <__d2b>:
 8007fc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007fcc:	2101      	movs	r1, #1
 8007fce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007fd2:	4690      	mov	r8, r2
 8007fd4:	461d      	mov	r5, r3
 8007fd6:	f7ff fc0d 	bl	80077f4 <_Balloc>
 8007fda:	4604      	mov	r4, r0
 8007fdc:	b930      	cbnz	r0, 8007fec <__d2b+0x24>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	f240 310a 	movw	r1, #778	; 0x30a
 8007fe4:	4b24      	ldr	r3, [pc, #144]	; (8008078 <__d2b+0xb0>)
 8007fe6:	4825      	ldr	r0, [pc, #148]	; (800807c <__d2b+0xb4>)
 8007fe8:	f001 f870 	bl	80090cc <__assert_func>
 8007fec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007ff0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007ff4:	bb2d      	cbnz	r5, 8008042 <__d2b+0x7a>
 8007ff6:	9301      	str	r3, [sp, #4]
 8007ff8:	f1b8 0300 	subs.w	r3, r8, #0
 8007ffc:	d026      	beq.n	800804c <__d2b+0x84>
 8007ffe:	4668      	mov	r0, sp
 8008000:	9300      	str	r3, [sp, #0]
 8008002:	f7ff fd09 	bl	8007a18 <__lo0bits>
 8008006:	9900      	ldr	r1, [sp, #0]
 8008008:	b1f0      	cbz	r0, 8008048 <__d2b+0x80>
 800800a:	9a01      	ldr	r2, [sp, #4]
 800800c:	f1c0 0320 	rsb	r3, r0, #32
 8008010:	fa02 f303 	lsl.w	r3, r2, r3
 8008014:	430b      	orrs	r3, r1
 8008016:	40c2      	lsrs	r2, r0
 8008018:	6163      	str	r3, [r4, #20]
 800801a:	9201      	str	r2, [sp, #4]
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	bf14      	ite	ne
 8008022:	2102      	movne	r1, #2
 8008024:	2101      	moveq	r1, #1
 8008026:	61a3      	str	r3, [r4, #24]
 8008028:	6121      	str	r1, [r4, #16]
 800802a:	b1c5      	cbz	r5, 800805e <__d2b+0x96>
 800802c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008030:	4405      	add	r5, r0
 8008032:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008036:	603d      	str	r5, [r7, #0]
 8008038:	6030      	str	r0, [r6, #0]
 800803a:	4620      	mov	r0, r4
 800803c:	b002      	add	sp, #8
 800803e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008046:	e7d6      	b.n	8007ff6 <__d2b+0x2e>
 8008048:	6161      	str	r1, [r4, #20]
 800804a:	e7e7      	b.n	800801c <__d2b+0x54>
 800804c:	a801      	add	r0, sp, #4
 800804e:	f7ff fce3 	bl	8007a18 <__lo0bits>
 8008052:	2101      	movs	r1, #1
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	6121      	str	r1, [r4, #16]
 8008058:	6163      	str	r3, [r4, #20]
 800805a:	3020      	adds	r0, #32
 800805c:	e7e5      	b.n	800802a <__d2b+0x62>
 800805e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008062:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008066:	6038      	str	r0, [r7, #0]
 8008068:	6918      	ldr	r0, [r3, #16]
 800806a:	f7ff fcb5 	bl	80079d8 <__hi0bits>
 800806e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008072:	6031      	str	r1, [r6, #0]
 8008074:	e7e1      	b.n	800803a <__d2b+0x72>
 8008076:	bf00      	nop
 8008078:	0800aa55 	.word	0x0800aa55
 800807c:	0800aaf7 	.word	0x0800aaf7

08008080 <__ratio>:
 8008080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008084:	4688      	mov	r8, r1
 8008086:	4669      	mov	r1, sp
 8008088:	4681      	mov	r9, r0
 800808a:	f7ff ff49 	bl	8007f20 <__b2d>
 800808e:	460f      	mov	r7, r1
 8008090:	4604      	mov	r4, r0
 8008092:	460d      	mov	r5, r1
 8008094:	4640      	mov	r0, r8
 8008096:	a901      	add	r1, sp, #4
 8008098:	f7ff ff42 	bl	8007f20 <__b2d>
 800809c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80080a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80080a4:	468b      	mov	fp, r1
 80080a6:	eba3 0c02 	sub.w	ip, r3, r2
 80080aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfd5      	itete	le
 80080b8:	460a      	movle	r2, r1
 80080ba:	462a      	movgt	r2, r5
 80080bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80080c0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80080c4:	bfd8      	it	le
 80080c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80080ca:	465b      	mov	r3, fp
 80080cc:	4602      	mov	r2, r0
 80080ce:	4639      	mov	r1, r7
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7f8 fb97 	bl	8000804 <__aeabi_ddiv>
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080dc <__copybits>:
 80080dc:	3901      	subs	r1, #1
 80080de:	b570      	push	{r4, r5, r6, lr}
 80080e0:	1149      	asrs	r1, r1, #5
 80080e2:	6914      	ldr	r4, [r2, #16]
 80080e4:	3101      	adds	r1, #1
 80080e6:	f102 0314 	add.w	r3, r2, #20
 80080ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080f2:	1f05      	subs	r5, r0, #4
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	d30c      	bcc.n	8008112 <__copybits+0x36>
 80080f8:	1aa3      	subs	r3, r4, r2
 80080fa:	3b11      	subs	r3, #17
 80080fc:	f023 0303 	bic.w	r3, r3, #3
 8008100:	3211      	adds	r2, #17
 8008102:	42a2      	cmp	r2, r4
 8008104:	bf88      	it	hi
 8008106:	2300      	movhi	r3, #0
 8008108:	4418      	add	r0, r3
 800810a:	2300      	movs	r3, #0
 800810c:	4288      	cmp	r0, r1
 800810e:	d305      	bcc.n	800811c <__copybits+0x40>
 8008110:	bd70      	pop	{r4, r5, r6, pc}
 8008112:	f853 6b04 	ldr.w	r6, [r3], #4
 8008116:	f845 6f04 	str.w	r6, [r5, #4]!
 800811a:	e7eb      	b.n	80080f4 <__copybits+0x18>
 800811c:	f840 3b04 	str.w	r3, [r0], #4
 8008120:	e7f4      	b.n	800810c <__copybits+0x30>

08008122 <__any_on>:
 8008122:	f100 0214 	add.w	r2, r0, #20
 8008126:	6900      	ldr	r0, [r0, #16]
 8008128:	114b      	asrs	r3, r1, #5
 800812a:	4298      	cmp	r0, r3
 800812c:	b510      	push	{r4, lr}
 800812e:	db11      	blt.n	8008154 <__any_on+0x32>
 8008130:	dd0a      	ble.n	8008148 <__any_on+0x26>
 8008132:	f011 011f 	ands.w	r1, r1, #31
 8008136:	d007      	beq.n	8008148 <__any_on+0x26>
 8008138:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800813c:	fa24 f001 	lsr.w	r0, r4, r1
 8008140:	fa00 f101 	lsl.w	r1, r0, r1
 8008144:	428c      	cmp	r4, r1
 8008146:	d10b      	bne.n	8008160 <__any_on+0x3e>
 8008148:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800814c:	4293      	cmp	r3, r2
 800814e:	d803      	bhi.n	8008158 <__any_on+0x36>
 8008150:	2000      	movs	r0, #0
 8008152:	bd10      	pop	{r4, pc}
 8008154:	4603      	mov	r3, r0
 8008156:	e7f7      	b.n	8008148 <__any_on+0x26>
 8008158:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800815c:	2900      	cmp	r1, #0
 800815e:	d0f5      	beq.n	800814c <__any_on+0x2a>
 8008160:	2001      	movs	r0, #1
 8008162:	e7f6      	b.n	8008152 <__any_on+0x30>

08008164 <__ssputs_r>:
 8008164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008168:	688e      	ldr	r6, [r1, #8]
 800816a:	4682      	mov	sl, r0
 800816c:	429e      	cmp	r6, r3
 800816e:	460c      	mov	r4, r1
 8008170:	4690      	mov	r8, r2
 8008172:	461f      	mov	r7, r3
 8008174:	d838      	bhi.n	80081e8 <__ssputs_r+0x84>
 8008176:	898a      	ldrh	r2, [r1, #12]
 8008178:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800817c:	d032      	beq.n	80081e4 <__ssputs_r+0x80>
 800817e:	6825      	ldr	r5, [r4, #0]
 8008180:	6909      	ldr	r1, [r1, #16]
 8008182:	3301      	adds	r3, #1
 8008184:	eba5 0901 	sub.w	r9, r5, r1
 8008188:	6965      	ldr	r5, [r4, #20]
 800818a:	444b      	add	r3, r9
 800818c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008190:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008194:	106d      	asrs	r5, r5, #1
 8008196:	429d      	cmp	r5, r3
 8008198:	bf38      	it	cc
 800819a:	461d      	movcc	r5, r3
 800819c:	0553      	lsls	r3, r2, #21
 800819e:	d531      	bpl.n	8008204 <__ssputs_r+0xa0>
 80081a0:	4629      	mov	r1, r5
 80081a2:	f7fe f805 	bl	80061b0 <_malloc_r>
 80081a6:	4606      	mov	r6, r0
 80081a8:	b950      	cbnz	r0, 80081c0 <__ssputs_r+0x5c>
 80081aa:	230c      	movs	r3, #12
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	f8ca 3000 	str.w	r3, [sl]
 80081b4:	89a3      	ldrh	r3, [r4, #12]
 80081b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ba:	81a3      	strh	r3, [r4, #12]
 80081bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c0:	464a      	mov	r2, r9
 80081c2:	6921      	ldr	r1, [r4, #16]
 80081c4:	f7fd ff62 	bl	800608c <memcpy>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d2:	81a3      	strh	r3, [r4, #12]
 80081d4:	6126      	str	r6, [r4, #16]
 80081d6:	444e      	add	r6, r9
 80081d8:	6026      	str	r6, [r4, #0]
 80081da:	463e      	mov	r6, r7
 80081dc:	6165      	str	r5, [r4, #20]
 80081de:	eba5 0509 	sub.w	r5, r5, r9
 80081e2:	60a5      	str	r5, [r4, #8]
 80081e4:	42be      	cmp	r6, r7
 80081e6:	d900      	bls.n	80081ea <__ssputs_r+0x86>
 80081e8:	463e      	mov	r6, r7
 80081ea:	4632      	mov	r2, r6
 80081ec:	4641      	mov	r1, r8
 80081ee:	6820      	ldr	r0, [r4, #0]
 80081f0:	f001 f960 	bl	80094b4 <memmove>
 80081f4:	68a3      	ldr	r3, [r4, #8]
 80081f6:	2000      	movs	r0, #0
 80081f8:	1b9b      	subs	r3, r3, r6
 80081fa:	60a3      	str	r3, [r4, #8]
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	4433      	add	r3, r6
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	e7db      	b.n	80081bc <__ssputs_r+0x58>
 8008204:	462a      	mov	r2, r5
 8008206:	f001 f96f 	bl	80094e8 <_realloc_r>
 800820a:	4606      	mov	r6, r0
 800820c:	2800      	cmp	r0, #0
 800820e:	d1e1      	bne.n	80081d4 <__ssputs_r+0x70>
 8008210:	4650      	mov	r0, sl
 8008212:	6921      	ldr	r1, [r4, #16]
 8008214:	f7fd ff64 	bl	80060e0 <_free_r>
 8008218:	e7c7      	b.n	80081aa <__ssputs_r+0x46>
	...

0800821c <_svfiprintf_r>:
 800821c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008220:	4698      	mov	r8, r3
 8008222:	898b      	ldrh	r3, [r1, #12]
 8008224:	4607      	mov	r7, r0
 8008226:	061b      	lsls	r3, r3, #24
 8008228:	460d      	mov	r5, r1
 800822a:	4614      	mov	r4, r2
 800822c:	b09d      	sub	sp, #116	; 0x74
 800822e:	d50e      	bpl.n	800824e <_svfiprintf_r+0x32>
 8008230:	690b      	ldr	r3, [r1, #16]
 8008232:	b963      	cbnz	r3, 800824e <_svfiprintf_r+0x32>
 8008234:	2140      	movs	r1, #64	; 0x40
 8008236:	f7fd ffbb 	bl	80061b0 <_malloc_r>
 800823a:	6028      	str	r0, [r5, #0]
 800823c:	6128      	str	r0, [r5, #16]
 800823e:	b920      	cbnz	r0, 800824a <_svfiprintf_r+0x2e>
 8008240:	230c      	movs	r3, #12
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	e0d1      	b.n	80083ee <_svfiprintf_r+0x1d2>
 800824a:	2340      	movs	r3, #64	; 0x40
 800824c:	616b      	str	r3, [r5, #20]
 800824e:	2300      	movs	r3, #0
 8008250:	9309      	str	r3, [sp, #36]	; 0x24
 8008252:	2320      	movs	r3, #32
 8008254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008258:	2330      	movs	r3, #48	; 0x30
 800825a:	f04f 0901 	mov.w	r9, #1
 800825e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008262:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008408 <_svfiprintf_r+0x1ec>
 8008266:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800826a:	4623      	mov	r3, r4
 800826c:	469a      	mov	sl, r3
 800826e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008272:	b10a      	cbz	r2, 8008278 <_svfiprintf_r+0x5c>
 8008274:	2a25      	cmp	r2, #37	; 0x25
 8008276:	d1f9      	bne.n	800826c <_svfiprintf_r+0x50>
 8008278:	ebba 0b04 	subs.w	fp, sl, r4
 800827c:	d00b      	beq.n	8008296 <_svfiprintf_r+0x7a>
 800827e:	465b      	mov	r3, fp
 8008280:	4622      	mov	r2, r4
 8008282:	4629      	mov	r1, r5
 8008284:	4638      	mov	r0, r7
 8008286:	f7ff ff6d 	bl	8008164 <__ssputs_r>
 800828a:	3001      	adds	r0, #1
 800828c:	f000 80aa 	beq.w	80083e4 <_svfiprintf_r+0x1c8>
 8008290:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008292:	445a      	add	r2, fp
 8008294:	9209      	str	r2, [sp, #36]	; 0x24
 8008296:	f89a 3000 	ldrb.w	r3, [sl]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80a2 	beq.w	80083e4 <_svfiprintf_r+0x1c8>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f04f 32ff 	mov.w	r2, #4294967295
 80082a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082aa:	f10a 0a01 	add.w	sl, sl, #1
 80082ae:	9304      	str	r3, [sp, #16]
 80082b0:	9307      	str	r3, [sp, #28]
 80082b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082b6:	931a      	str	r3, [sp, #104]	; 0x68
 80082b8:	4654      	mov	r4, sl
 80082ba:	2205      	movs	r2, #5
 80082bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c0:	4851      	ldr	r0, [pc, #324]	; (8008408 <_svfiprintf_r+0x1ec>)
 80082c2:	f001 f8e9 	bl	8009498 <memchr>
 80082c6:	9a04      	ldr	r2, [sp, #16]
 80082c8:	b9d8      	cbnz	r0, 8008302 <_svfiprintf_r+0xe6>
 80082ca:	06d0      	lsls	r0, r2, #27
 80082cc:	bf44      	itt	mi
 80082ce:	2320      	movmi	r3, #32
 80082d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082d4:	0711      	lsls	r1, r2, #28
 80082d6:	bf44      	itt	mi
 80082d8:	232b      	movmi	r3, #43	; 0x2b
 80082da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082de:	f89a 3000 	ldrb.w	r3, [sl]
 80082e2:	2b2a      	cmp	r3, #42	; 0x2a
 80082e4:	d015      	beq.n	8008312 <_svfiprintf_r+0xf6>
 80082e6:	4654      	mov	r4, sl
 80082e8:	2000      	movs	r0, #0
 80082ea:	f04f 0c0a 	mov.w	ip, #10
 80082ee:	9a07      	ldr	r2, [sp, #28]
 80082f0:	4621      	mov	r1, r4
 80082f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f6:	3b30      	subs	r3, #48	; 0x30
 80082f8:	2b09      	cmp	r3, #9
 80082fa:	d94e      	bls.n	800839a <_svfiprintf_r+0x17e>
 80082fc:	b1b0      	cbz	r0, 800832c <_svfiprintf_r+0x110>
 80082fe:	9207      	str	r2, [sp, #28]
 8008300:	e014      	b.n	800832c <_svfiprintf_r+0x110>
 8008302:	eba0 0308 	sub.w	r3, r0, r8
 8008306:	fa09 f303 	lsl.w	r3, r9, r3
 800830a:	4313      	orrs	r3, r2
 800830c:	46a2      	mov	sl, r4
 800830e:	9304      	str	r3, [sp, #16]
 8008310:	e7d2      	b.n	80082b8 <_svfiprintf_r+0x9c>
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	1d19      	adds	r1, r3, #4
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	9103      	str	r1, [sp, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfbb      	ittet	lt
 800831e:	425b      	neglt	r3, r3
 8008320:	f042 0202 	orrlt.w	r2, r2, #2
 8008324:	9307      	strge	r3, [sp, #28]
 8008326:	9307      	strlt	r3, [sp, #28]
 8008328:	bfb8      	it	lt
 800832a:	9204      	strlt	r2, [sp, #16]
 800832c:	7823      	ldrb	r3, [r4, #0]
 800832e:	2b2e      	cmp	r3, #46	; 0x2e
 8008330:	d10c      	bne.n	800834c <_svfiprintf_r+0x130>
 8008332:	7863      	ldrb	r3, [r4, #1]
 8008334:	2b2a      	cmp	r3, #42	; 0x2a
 8008336:	d135      	bne.n	80083a4 <_svfiprintf_r+0x188>
 8008338:	9b03      	ldr	r3, [sp, #12]
 800833a:	3402      	adds	r4, #2
 800833c:	1d1a      	adds	r2, r3, #4
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	9203      	str	r2, [sp, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	bfb8      	it	lt
 8008346:	f04f 33ff 	movlt.w	r3, #4294967295
 800834a:	9305      	str	r3, [sp, #20]
 800834c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800840c <_svfiprintf_r+0x1f0>
 8008350:	2203      	movs	r2, #3
 8008352:	4650      	mov	r0, sl
 8008354:	7821      	ldrb	r1, [r4, #0]
 8008356:	f001 f89f 	bl	8009498 <memchr>
 800835a:	b140      	cbz	r0, 800836e <_svfiprintf_r+0x152>
 800835c:	2340      	movs	r3, #64	; 0x40
 800835e:	eba0 000a 	sub.w	r0, r0, sl
 8008362:	fa03 f000 	lsl.w	r0, r3, r0
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	3401      	adds	r4, #1
 800836a:	4303      	orrs	r3, r0
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008372:	2206      	movs	r2, #6
 8008374:	4826      	ldr	r0, [pc, #152]	; (8008410 <_svfiprintf_r+0x1f4>)
 8008376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800837a:	f001 f88d 	bl	8009498 <memchr>
 800837e:	2800      	cmp	r0, #0
 8008380:	d038      	beq.n	80083f4 <_svfiprintf_r+0x1d8>
 8008382:	4b24      	ldr	r3, [pc, #144]	; (8008414 <_svfiprintf_r+0x1f8>)
 8008384:	bb1b      	cbnz	r3, 80083ce <_svfiprintf_r+0x1b2>
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	3307      	adds	r3, #7
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	3308      	adds	r3, #8
 8008390:	9303      	str	r3, [sp, #12]
 8008392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008394:	4433      	add	r3, r6
 8008396:	9309      	str	r3, [sp, #36]	; 0x24
 8008398:	e767      	b.n	800826a <_svfiprintf_r+0x4e>
 800839a:	460c      	mov	r4, r1
 800839c:	2001      	movs	r0, #1
 800839e:	fb0c 3202 	mla	r2, ip, r2, r3
 80083a2:	e7a5      	b.n	80082f0 <_svfiprintf_r+0xd4>
 80083a4:	2300      	movs	r3, #0
 80083a6:	f04f 0c0a 	mov.w	ip, #10
 80083aa:	4619      	mov	r1, r3
 80083ac:	3401      	adds	r4, #1
 80083ae:	9305      	str	r3, [sp, #20]
 80083b0:	4620      	mov	r0, r4
 80083b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083b6:	3a30      	subs	r2, #48	; 0x30
 80083b8:	2a09      	cmp	r2, #9
 80083ba:	d903      	bls.n	80083c4 <_svfiprintf_r+0x1a8>
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0c5      	beq.n	800834c <_svfiprintf_r+0x130>
 80083c0:	9105      	str	r1, [sp, #20]
 80083c2:	e7c3      	b.n	800834c <_svfiprintf_r+0x130>
 80083c4:	4604      	mov	r4, r0
 80083c6:	2301      	movs	r3, #1
 80083c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80083cc:	e7f0      	b.n	80083b0 <_svfiprintf_r+0x194>
 80083ce:	ab03      	add	r3, sp, #12
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	462a      	mov	r2, r5
 80083d4:	4638      	mov	r0, r7
 80083d6:	4b10      	ldr	r3, [pc, #64]	; (8008418 <_svfiprintf_r+0x1fc>)
 80083d8:	a904      	add	r1, sp, #16
 80083da:	f3af 8000 	nop.w
 80083de:	1c42      	adds	r2, r0, #1
 80083e0:	4606      	mov	r6, r0
 80083e2:	d1d6      	bne.n	8008392 <_svfiprintf_r+0x176>
 80083e4:	89ab      	ldrh	r3, [r5, #12]
 80083e6:	065b      	lsls	r3, r3, #25
 80083e8:	f53f af2c 	bmi.w	8008244 <_svfiprintf_r+0x28>
 80083ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ee:	b01d      	add	sp, #116	; 0x74
 80083f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f4:	ab03      	add	r3, sp, #12
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	462a      	mov	r2, r5
 80083fa:	4638      	mov	r0, r7
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <_svfiprintf_r+0x1fc>)
 80083fe:	a904      	add	r1, sp, #16
 8008400:	f000 fa50 	bl	80088a4 <_printf_i>
 8008404:	e7eb      	b.n	80083de <_svfiprintf_r+0x1c2>
 8008406:	bf00      	nop
 8008408:	0800ac54 	.word	0x0800ac54
 800840c:	0800ac5a 	.word	0x0800ac5a
 8008410:	0800ac5e 	.word	0x0800ac5e
 8008414:	00000000 	.word	0x00000000
 8008418:	08008165 	.word	0x08008165

0800841c <_sungetc_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	1c4b      	adds	r3, r1, #1
 8008420:	4614      	mov	r4, r2
 8008422:	d103      	bne.n	800842c <_sungetc_r+0x10>
 8008424:	f04f 35ff 	mov.w	r5, #4294967295
 8008428:	4628      	mov	r0, r5
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	8993      	ldrh	r3, [r2, #12]
 800842e:	b2cd      	uxtb	r5, r1
 8008430:	f023 0320 	bic.w	r3, r3, #32
 8008434:	8193      	strh	r3, [r2, #12]
 8008436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008438:	6852      	ldr	r2, [r2, #4]
 800843a:	b18b      	cbz	r3, 8008460 <_sungetc_r+0x44>
 800843c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800843e:	4293      	cmp	r3, r2
 8008440:	dd08      	ble.n	8008454 <_sungetc_r+0x38>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	6022      	str	r2, [r4, #0]
 8008448:	f803 5c01 	strb.w	r5, [r3, #-1]
 800844c:	6863      	ldr	r3, [r4, #4]
 800844e:	3301      	adds	r3, #1
 8008450:	6063      	str	r3, [r4, #4]
 8008452:	e7e9      	b.n	8008428 <_sungetc_r+0xc>
 8008454:	4621      	mov	r1, r4
 8008456:	f000 fdf3 	bl	8009040 <__submore>
 800845a:	2800      	cmp	r0, #0
 800845c:	d0f1      	beq.n	8008442 <_sungetc_r+0x26>
 800845e:	e7e1      	b.n	8008424 <_sungetc_r+0x8>
 8008460:	6921      	ldr	r1, [r4, #16]
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	b151      	cbz	r1, 800847c <_sungetc_r+0x60>
 8008466:	4299      	cmp	r1, r3
 8008468:	d208      	bcs.n	800847c <_sungetc_r+0x60>
 800846a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800846e:	42a9      	cmp	r1, r5
 8008470:	d104      	bne.n	800847c <_sungetc_r+0x60>
 8008472:	3b01      	subs	r3, #1
 8008474:	3201      	adds	r2, #1
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	6062      	str	r2, [r4, #4]
 800847a:	e7d5      	b.n	8008428 <_sungetc_r+0xc>
 800847c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008484:	6363      	str	r3, [r4, #52]	; 0x34
 8008486:	2303      	movs	r3, #3
 8008488:	63a3      	str	r3, [r4, #56]	; 0x38
 800848a:	4623      	mov	r3, r4
 800848c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	2301      	movs	r3, #1
 8008494:	e7dc      	b.n	8008450 <_sungetc_r+0x34>

08008496 <__ssrefill_r>:
 8008496:	b510      	push	{r4, lr}
 8008498:	460c      	mov	r4, r1
 800849a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800849c:	b169      	cbz	r1, 80084ba <__ssrefill_r+0x24>
 800849e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084a2:	4299      	cmp	r1, r3
 80084a4:	d001      	beq.n	80084aa <__ssrefill_r+0x14>
 80084a6:	f7fd fe1b 	bl	80060e0 <_free_r>
 80084aa:	2000      	movs	r0, #0
 80084ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ae:	6360      	str	r0, [r4, #52]	; 0x34
 80084b0:	6063      	str	r3, [r4, #4]
 80084b2:	b113      	cbz	r3, 80084ba <__ssrefill_r+0x24>
 80084b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	bd10      	pop	{r4, pc}
 80084ba:	6923      	ldr	r3, [r4, #16]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	6023      	str	r3, [r4, #0]
 80084c2:	2300      	movs	r3, #0
 80084c4:	6063      	str	r3, [r4, #4]
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	f043 0320 	orr.w	r3, r3, #32
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	e7f3      	b.n	80084b8 <__ssrefill_r+0x22>

080084d0 <__ssvfiscanf_r>:
 80084d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d4:	460c      	mov	r4, r1
 80084d6:	2100      	movs	r1, #0
 80084d8:	4606      	mov	r6, r0
 80084da:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80084de:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80084e2:	49a7      	ldr	r1, [pc, #668]	; (8008780 <__ssvfiscanf_r+0x2b0>)
 80084e4:	f10d 0804 	add.w	r8, sp, #4
 80084e8:	91a0      	str	r1, [sp, #640]	; 0x280
 80084ea:	49a6      	ldr	r1, [pc, #664]	; (8008784 <__ssvfiscanf_r+0x2b4>)
 80084ec:	4fa6      	ldr	r7, [pc, #664]	; (8008788 <__ssvfiscanf_r+0x2b8>)
 80084ee:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800878c <__ssvfiscanf_r+0x2bc>
 80084f2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80084f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	7813      	ldrb	r3, [r2, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 815c 	beq.w	80087ba <__ssvfiscanf_r+0x2ea>
 8008502:	5dd9      	ldrb	r1, [r3, r7]
 8008504:	1c55      	adds	r5, r2, #1
 8008506:	f011 0108 	ands.w	r1, r1, #8
 800850a:	d019      	beq.n	8008540 <__ssvfiscanf_r+0x70>
 800850c:	6863      	ldr	r3, [r4, #4]
 800850e:	2b00      	cmp	r3, #0
 8008510:	dd0f      	ble.n	8008532 <__ssvfiscanf_r+0x62>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	5cba      	ldrb	r2, [r7, r2]
 8008518:	0712      	lsls	r2, r2, #28
 800851a:	d401      	bmi.n	8008520 <__ssvfiscanf_r+0x50>
 800851c:	462a      	mov	r2, r5
 800851e:	e7ec      	b.n	80084fa <__ssvfiscanf_r+0x2a>
 8008520:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008522:	3301      	adds	r3, #1
 8008524:	3201      	adds	r2, #1
 8008526:	9245      	str	r2, [sp, #276]	; 0x114
 8008528:	6862      	ldr	r2, [r4, #4]
 800852a:	6023      	str	r3, [r4, #0]
 800852c:	3a01      	subs	r2, #1
 800852e:	6062      	str	r2, [r4, #4]
 8008530:	e7ec      	b.n	800850c <__ssvfiscanf_r+0x3c>
 8008532:	4621      	mov	r1, r4
 8008534:	4630      	mov	r0, r6
 8008536:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008538:	4798      	blx	r3
 800853a:	2800      	cmp	r0, #0
 800853c:	d0e9      	beq.n	8008512 <__ssvfiscanf_r+0x42>
 800853e:	e7ed      	b.n	800851c <__ssvfiscanf_r+0x4c>
 8008540:	2b25      	cmp	r3, #37	; 0x25
 8008542:	d012      	beq.n	800856a <__ssvfiscanf_r+0x9a>
 8008544:	469a      	mov	sl, r3
 8008546:	6863      	ldr	r3, [r4, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f340 8094 	ble.w	8008676 <__ssvfiscanf_r+0x1a6>
 800854e:	6822      	ldr	r2, [r4, #0]
 8008550:	7813      	ldrb	r3, [r2, #0]
 8008552:	4553      	cmp	r3, sl
 8008554:	f040 8131 	bne.w	80087ba <__ssvfiscanf_r+0x2ea>
 8008558:	6863      	ldr	r3, [r4, #4]
 800855a:	3201      	adds	r2, #1
 800855c:	3b01      	subs	r3, #1
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008562:	6022      	str	r2, [r4, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	9345      	str	r3, [sp, #276]	; 0x114
 8008568:	e7d8      	b.n	800851c <__ssvfiscanf_r+0x4c>
 800856a:	9141      	str	r1, [sp, #260]	; 0x104
 800856c:	9143      	str	r1, [sp, #268]	; 0x10c
 800856e:	7853      	ldrb	r3, [r2, #1]
 8008570:	2b2a      	cmp	r3, #42	; 0x2a
 8008572:	bf04      	itt	eq
 8008574:	2310      	moveq	r3, #16
 8008576:	1c95      	addeq	r5, r2, #2
 8008578:	f04f 020a 	mov.w	r2, #10
 800857c:	bf08      	it	eq
 800857e:	9341      	streq	r3, [sp, #260]	; 0x104
 8008580:	46aa      	mov	sl, r5
 8008582:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8008586:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800858a:	2b09      	cmp	r3, #9
 800858c:	d91d      	bls.n	80085ca <__ssvfiscanf_r+0xfa>
 800858e:	2203      	movs	r2, #3
 8008590:	487e      	ldr	r0, [pc, #504]	; (800878c <__ssvfiscanf_r+0x2bc>)
 8008592:	f000 ff81 	bl	8009498 <memchr>
 8008596:	b140      	cbz	r0, 80085aa <__ssvfiscanf_r+0xda>
 8008598:	2301      	movs	r3, #1
 800859a:	4655      	mov	r5, sl
 800859c:	eba0 0009 	sub.w	r0, r0, r9
 80085a0:	fa03 f000 	lsl.w	r0, r3, r0
 80085a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085a6:	4318      	orrs	r0, r3
 80085a8:	9041      	str	r0, [sp, #260]	; 0x104
 80085aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085ae:	2b78      	cmp	r3, #120	; 0x78
 80085b0:	d806      	bhi.n	80085c0 <__ssvfiscanf_r+0xf0>
 80085b2:	2b57      	cmp	r3, #87	; 0x57
 80085b4:	d810      	bhi.n	80085d8 <__ssvfiscanf_r+0x108>
 80085b6:	2b25      	cmp	r3, #37	; 0x25
 80085b8:	d0c4      	beq.n	8008544 <__ssvfiscanf_r+0x74>
 80085ba:	d857      	bhi.n	800866c <__ssvfiscanf_r+0x19c>
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d065      	beq.n	800868c <__ssvfiscanf_r+0x1bc>
 80085c0:	2303      	movs	r3, #3
 80085c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80085c4:	230a      	movs	r3, #10
 80085c6:	9342      	str	r3, [sp, #264]	; 0x108
 80085c8:	e072      	b.n	80086b0 <__ssvfiscanf_r+0x1e0>
 80085ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80085cc:	4655      	mov	r5, sl
 80085ce:	fb02 1103 	mla	r1, r2, r3, r1
 80085d2:	3930      	subs	r1, #48	; 0x30
 80085d4:	9143      	str	r1, [sp, #268]	; 0x10c
 80085d6:	e7d3      	b.n	8008580 <__ssvfiscanf_r+0xb0>
 80085d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80085dc:	2a20      	cmp	r2, #32
 80085de:	d8ef      	bhi.n	80085c0 <__ssvfiscanf_r+0xf0>
 80085e0:	a101      	add	r1, pc, #4	; (adr r1, 80085e8 <__ssvfiscanf_r+0x118>)
 80085e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	0800869b 	.word	0x0800869b
 80085ec:	080085c1 	.word	0x080085c1
 80085f0:	080085c1 	.word	0x080085c1
 80085f4:	080086f9 	.word	0x080086f9
 80085f8:	080085c1 	.word	0x080085c1
 80085fc:	080085c1 	.word	0x080085c1
 8008600:	080085c1 	.word	0x080085c1
 8008604:	080085c1 	.word	0x080085c1
 8008608:	080085c1 	.word	0x080085c1
 800860c:	080085c1 	.word	0x080085c1
 8008610:	080085c1 	.word	0x080085c1
 8008614:	0800870f 	.word	0x0800870f
 8008618:	080086e5 	.word	0x080086e5
 800861c:	08008673 	.word	0x08008673
 8008620:	08008673 	.word	0x08008673
 8008624:	08008673 	.word	0x08008673
 8008628:	080085c1 	.word	0x080085c1
 800862c:	080086e9 	.word	0x080086e9
 8008630:	080085c1 	.word	0x080085c1
 8008634:	080085c1 	.word	0x080085c1
 8008638:	080085c1 	.word	0x080085c1
 800863c:	080085c1 	.word	0x080085c1
 8008640:	0800871f 	.word	0x0800871f
 8008644:	080086f1 	.word	0x080086f1
 8008648:	08008693 	.word	0x08008693
 800864c:	080085c1 	.word	0x080085c1
 8008650:	080085c1 	.word	0x080085c1
 8008654:	0800871b 	.word	0x0800871b
 8008658:	080085c1 	.word	0x080085c1
 800865c:	080086e5 	.word	0x080086e5
 8008660:	080085c1 	.word	0x080085c1
 8008664:	080085c1 	.word	0x080085c1
 8008668:	0800869b 	.word	0x0800869b
 800866c:	3b45      	subs	r3, #69	; 0x45
 800866e:	2b02      	cmp	r3, #2
 8008670:	d8a6      	bhi.n	80085c0 <__ssvfiscanf_r+0xf0>
 8008672:	2305      	movs	r3, #5
 8008674:	e01b      	b.n	80086ae <__ssvfiscanf_r+0x1de>
 8008676:	4621      	mov	r1, r4
 8008678:	4630      	mov	r0, r6
 800867a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800867c:	4798      	blx	r3
 800867e:	2800      	cmp	r0, #0
 8008680:	f43f af65 	beq.w	800854e <__ssvfiscanf_r+0x7e>
 8008684:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008686:	2800      	cmp	r0, #0
 8008688:	f040 808d 	bne.w	80087a6 <__ssvfiscanf_r+0x2d6>
 800868c:	f04f 30ff 	mov.w	r0, #4294967295
 8008690:	e08f      	b.n	80087b2 <__ssvfiscanf_r+0x2e2>
 8008692:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008694:	f042 0220 	orr.w	r2, r2, #32
 8008698:	9241      	str	r2, [sp, #260]	; 0x104
 800869a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800869c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086a0:	9241      	str	r2, [sp, #260]	; 0x104
 80086a2:	2210      	movs	r2, #16
 80086a4:	2b6f      	cmp	r3, #111	; 0x6f
 80086a6:	bf34      	ite	cc
 80086a8:	2303      	movcc	r3, #3
 80086aa:	2304      	movcs	r3, #4
 80086ac:	9242      	str	r2, [sp, #264]	; 0x108
 80086ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80086b0:	6863      	ldr	r3, [r4, #4]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dd42      	ble.n	800873c <__ssvfiscanf_r+0x26c>
 80086b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086b8:	0659      	lsls	r1, r3, #25
 80086ba:	d404      	bmi.n	80086c6 <__ssvfiscanf_r+0x1f6>
 80086bc:	6823      	ldr	r3, [r4, #0]
 80086be:	781a      	ldrb	r2, [r3, #0]
 80086c0:	5cba      	ldrb	r2, [r7, r2]
 80086c2:	0712      	lsls	r2, r2, #28
 80086c4:	d441      	bmi.n	800874a <__ssvfiscanf_r+0x27a>
 80086c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	dc50      	bgt.n	800876e <__ssvfiscanf_r+0x29e>
 80086cc:	466b      	mov	r3, sp
 80086ce:	4622      	mov	r2, r4
 80086d0:	4630      	mov	r0, r6
 80086d2:	a941      	add	r1, sp, #260	; 0x104
 80086d4:	f000 fa0c 	bl	8008af0 <_scanf_chars>
 80086d8:	2801      	cmp	r0, #1
 80086da:	d06e      	beq.n	80087ba <__ssvfiscanf_r+0x2ea>
 80086dc:	2802      	cmp	r0, #2
 80086de:	f47f af1d 	bne.w	800851c <__ssvfiscanf_r+0x4c>
 80086e2:	e7cf      	b.n	8008684 <__ssvfiscanf_r+0x1b4>
 80086e4:	220a      	movs	r2, #10
 80086e6:	e7dd      	b.n	80086a4 <__ssvfiscanf_r+0x1d4>
 80086e8:	2300      	movs	r3, #0
 80086ea:	9342      	str	r3, [sp, #264]	; 0x108
 80086ec:	2303      	movs	r3, #3
 80086ee:	e7de      	b.n	80086ae <__ssvfiscanf_r+0x1de>
 80086f0:	2308      	movs	r3, #8
 80086f2:	9342      	str	r3, [sp, #264]	; 0x108
 80086f4:	2304      	movs	r3, #4
 80086f6:	e7da      	b.n	80086ae <__ssvfiscanf_r+0x1de>
 80086f8:	4629      	mov	r1, r5
 80086fa:	4640      	mov	r0, r8
 80086fc:	f000 fb62 	bl	8008dc4 <__sccl>
 8008700:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008702:	4605      	mov	r5, r0
 8008704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008708:	9341      	str	r3, [sp, #260]	; 0x104
 800870a:	2301      	movs	r3, #1
 800870c:	e7cf      	b.n	80086ae <__ssvfiscanf_r+0x1de>
 800870e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008714:	9341      	str	r3, [sp, #260]	; 0x104
 8008716:	2300      	movs	r3, #0
 8008718:	e7c9      	b.n	80086ae <__ssvfiscanf_r+0x1de>
 800871a:	2302      	movs	r3, #2
 800871c:	e7c7      	b.n	80086ae <__ssvfiscanf_r+0x1de>
 800871e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008720:	06c3      	lsls	r3, r0, #27
 8008722:	f53f aefb 	bmi.w	800851c <__ssvfiscanf_r+0x4c>
 8008726:	9b00      	ldr	r3, [sp, #0]
 8008728:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800872a:	1d19      	adds	r1, r3, #4
 800872c:	9100      	str	r1, [sp, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f010 0f01 	tst.w	r0, #1
 8008734:	bf14      	ite	ne
 8008736:	801a      	strhne	r2, [r3, #0]
 8008738:	601a      	streq	r2, [r3, #0]
 800873a:	e6ef      	b.n	800851c <__ssvfiscanf_r+0x4c>
 800873c:	4621      	mov	r1, r4
 800873e:	4630      	mov	r0, r6
 8008740:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008742:	4798      	blx	r3
 8008744:	2800      	cmp	r0, #0
 8008746:	d0b6      	beq.n	80086b6 <__ssvfiscanf_r+0x1e6>
 8008748:	e79c      	b.n	8008684 <__ssvfiscanf_r+0x1b4>
 800874a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800874c:	3201      	adds	r2, #1
 800874e:	9245      	str	r2, [sp, #276]	; 0x114
 8008750:	6862      	ldr	r2, [r4, #4]
 8008752:	3a01      	subs	r2, #1
 8008754:	2a00      	cmp	r2, #0
 8008756:	6062      	str	r2, [r4, #4]
 8008758:	dd02      	ble.n	8008760 <__ssvfiscanf_r+0x290>
 800875a:	3301      	adds	r3, #1
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	e7ad      	b.n	80086bc <__ssvfiscanf_r+0x1ec>
 8008760:	4621      	mov	r1, r4
 8008762:	4630      	mov	r0, r6
 8008764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008766:	4798      	blx	r3
 8008768:	2800      	cmp	r0, #0
 800876a:	d0a7      	beq.n	80086bc <__ssvfiscanf_r+0x1ec>
 800876c:	e78a      	b.n	8008684 <__ssvfiscanf_r+0x1b4>
 800876e:	2b04      	cmp	r3, #4
 8008770:	dc0e      	bgt.n	8008790 <__ssvfiscanf_r+0x2c0>
 8008772:	466b      	mov	r3, sp
 8008774:	4622      	mov	r2, r4
 8008776:	4630      	mov	r0, r6
 8008778:	a941      	add	r1, sp, #260	; 0x104
 800877a:	f000 fa13 	bl	8008ba4 <_scanf_i>
 800877e:	e7ab      	b.n	80086d8 <__ssvfiscanf_r+0x208>
 8008780:	0800841d 	.word	0x0800841d
 8008784:	08008497 	.word	0x08008497
 8008788:	0800acdf 	.word	0x0800acdf
 800878c:	0800ac5a 	.word	0x0800ac5a
 8008790:	4b0b      	ldr	r3, [pc, #44]	; (80087c0 <__ssvfiscanf_r+0x2f0>)
 8008792:	2b00      	cmp	r3, #0
 8008794:	f43f aec2 	beq.w	800851c <__ssvfiscanf_r+0x4c>
 8008798:	466b      	mov	r3, sp
 800879a:	4622      	mov	r2, r4
 800879c:	4630      	mov	r0, r6
 800879e:	a941      	add	r1, sp, #260	; 0x104
 80087a0:	f3af 8000 	nop.w
 80087a4:	e798      	b.n	80086d8 <__ssvfiscanf_r+0x208>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087ac:	bf18      	it	ne
 80087ae:	f04f 30ff 	movne.w	r0, #4294967295
 80087b2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087bc:	e7f9      	b.n	80087b2 <__ssvfiscanf_r+0x2e2>
 80087be:	bf00      	nop
 80087c0:	00000000 	.word	0x00000000

080087c4 <_printf_common>:
 80087c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	4616      	mov	r6, r2
 80087ca:	4699      	mov	r9, r3
 80087cc:	688a      	ldr	r2, [r1, #8]
 80087ce:	690b      	ldr	r3, [r1, #16]
 80087d0:	4607      	mov	r7, r0
 80087d2:	4293      	cmp	r3, r2
 80087d4:	bfb8      	it	lt
 80087d6:	4613      	movlt	r3, r2
 80087d8:	6033      	str	r3, [r6, #0]
 80087da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087de:	460c      	mov	r4, r1
 80087e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087e4:	b10a      	cbz	r2, 80087ea <_printf_common+0x26>
 80087e6:	3301      	adds	r3, #1
 80087e8:	6033      	str	r3, [r6, #0]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	0699      	lsls	r1, r3, #26
 80087ee:	bf42      	ittt	mi
 80087f0:	6833      	ldrmi	r3, [r6, #0]
 80087f2:	3302      	addmi	r3, #2
 80087f4:	6033      	strmi	r3, [r6, #0]
 80087f6:	6825      	ldr	r5, [r4, #0]
 80087f8:	f015 0506 	ands.w	r5, r5, #6
 80087fc:	d106      	bne.n	800880c <_printf_common+0x48>
 80087fe:	f104 0a19 	add.w	sl, r4, #25
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	6832      	ldr	r2, [r6, #0]
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	42ab      	cmp	r3, r5
 800880a:	dc28      	bgt.n	800885e <_printf_common+0x9a>
 800880c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008810:	1e13      	subs	r3, r2, #0
 8008812:	6822      	ldr	r2, [r4, #0]
 8008814:	bf18      	it	ne
 8008816:	2301      	movne	r3, #1
 8008818:	0692      	lsls	r2, r2, #26
 800881a:	d42d      	bmi.n	8008878 <_printf_common+0xb4>
 800881c:	4649      	mov	r1, r9
 800881e:	4638      	mov	r0, r7
 8008820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008824:	47c0      	blx	r8
 8008826:	3001      	adds	r0, #1
 8008828:	d020      	beq.n	800886c <_printf_common+0xa8>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	68e5      	ldr	r5, [r4, #12]
 800882e:	f003 0306 	and.w	r3, r3, #6
 8008832:	2b04      	cmp	r3, #4
 8008834:	bf18      	it	ne
 8008836:	2500      	movne	r5, #0
 8008838:	6832      	ldr	r2, [r6, #0]
 800883a:	f04f 0600 	mov.w	r6, #0
 800883e:	68a3      	ldr	r3, [r4, #8]
 8008840:	bf08      	it	eq
 8008842:	1aad      	subeq	r5, r5, r2
 8008844:	6922      	ldr	r2, [r4, #16]
 8008846:	bf08      	it	eq
 8008848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800884c:	4293      	cmp	r3, r2
 800884e:	bfc4      	itt	gt
 8008850:	1a9b      	subgt	r3, r3, r2
 8008852:	18ed      	addgt	r5, r5, r3
 8008854:	341a      	adds	r4, #26
 8008856:	42b5      	cmp	r5, r6
 8008858:	d11a      	bne.n	8008890 <_printf_common+0xcc>
 800885a:	2000      	movs	r0, #0
 800885c:	e008      	b.n	8008870 <_printf_common+0xac>
 800885e:	2301      	movs	r3, #1
 8008860:	4652      	mov	r2, sl
 8008862:	4649      	mov	r1, r9
 8008864:	4638      	mov	r0, r7
 8008866:	47c0      	blx	r8
 8008868:	3001      	adds	r0, #1
 800886a:	d103      	bne.n	8008874 <_printf_common+0xb0>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008874:	3501      	adds	r5, #1
 8008876:	e7c4      	b.n	8008802 <_printf_common+0x3e>
 8008878:	2030      	movs	r0, #48	; 0x30
 800887a:	18e1      	adds	r1, r4, r3
 800887c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008886:	4422      	add	r2, r4
 8008888:	3302      	adds	r3, #2
 800888a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800888e:	e7c5      	b.n	800881c <_printf_common+0x58>
 8008890:	2301      	movs	r3, #1
 8008892:	4622      	mov	r2, r4
 8008894:	4649      	mov	r1, r9
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	3001      	adds	r0, #1
 800889c:	d0e6      	beq.n	800886c <_printf_common+0xa8>
 800889e:	3601      	adds	r6, #1
 80088a0:	e7d9      	b.n	8008856 <_printf_common+0x92>
	...

080088a4 <_printf_i>:
 80088a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	7e0f      	ldrb	r7, [r1, #24]
 80088aa:	4691      	mov	r9, r2
 80088ac:	2f78      	cmp	r7, #120	; 0x78
 80088ae:	4680      	mov	r8, r0
 80088b0:	460c      	mov	r4, r1
 80088b2:	469a      	mov	sl, r3
 80088b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ba:	d807      	bhi.n	80088cc <_printf_i+0x28>
 80088bc:	2f62      	cmp	r7, #98	; 0x62
 80088be:	d80a      	bhi.n	80088d6 <_printf_i+0x32>
 80088c0:	2f00      	cmp	r7, #0
 80088c2:	f000 80d9 	beq.w	8008a78 <_printf_i+0x1d4>
 80088c6:	2f58      	cmp	r7, #88	; 0x58
 80088c8:	f000 80a4 	beq.w	8008a14 <_printf_i+0x170>
 80088cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d4:	e03a      	b.n	800894c <_printf_i+0xa8>
 80088d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088da:	2b15      	cmp	r3, #21
 80088dc:	d8f6      	bhi.n	80088cc <_printf_i+0x28>
 80088de:	a101      	add	r1, pc, #4	; (adr r1, 80088e4 <_printf_i+0x40>)
 80088e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e4:	0800893d 	.word	0x0800893d
 80088e8:	08008951 	.word	0x08008951
 80088ec:	080088cd 	.word	0x080088cd
 80088f0:	080088cd 	.word	0x080088cd
 80088f4:	080088cd 	.word	0x080088cd
 80088f8:	080088cd 	.word	0x080088cd
 80088fc:	08008951 	.word	0x08008951
 8008900:	080088cd 	.word	0x080088cd
 8008904:	080088cd 	.word	0x080088cd
 8008908:	080088cd 	.word	0x080088cd
 800890c:	080088cd 	.word	0x080088cd
 8008910:	08008a5f 	.word	0x08008a5f
 8008914:	08008981 	.word	0x08008981
 8008918:	08008a41 	.word	0x08008a41
 800891c:	080088cd 	.word	0x080088cd
 8008920:	080088cd 	.word	0x080088cd
 8008924:	08008a81 	.word	0x08008a81
 8008928:	080088cd 	.word	0x080088cd
 800892c:	08008981 	.word	0x08008981
 8008930:	080088cd 	.word	0x080088cd
 8008934:	080088cd 	.word	0x080088cd
 8008938:	08008a49 	.word	0x08008a49
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	1d1a      	adds	r2, r3, #4
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	602a      	str	r2, [r5, #0]
 8008944:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800894c:	2301      	movs	r3, #1
 800894e:	e0a4      	b.n	8008a9a <_printf_i+0x1f6>
 8008950:	6820      	ldr	r0, [r4, #0]
 8008952:	6829      	ldr	r1, [r5, #0]
 8008954:	0606      	lsls	r6, r0, #24
 8008956:	f101 0304 	add.w	r3, r1, #4
 800895a:	d50a      	bpl.n	8008972 <_printf_i+0xce>
 800895c:	680e      	ldr	r6, [r1, #0]
 800895e:	602b      	str	r3, [r5, #0]
 8008960:	2e00      	cmp	r6, #0
 8008962:	da03      	bge.n	800896c <_printf_i+0xc8>
 8008964:	232d      	movs	r3, #45	; 0x2d
 8008966:	4276      	negs	r6, r6
 8008968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896c:	230a      	movs	r3, #10
 800896e:	485e      	ldr	r0, [pc, #376]	; (8008ae8 <_printf_i+0x244>)
 8008970:	e019      	b.n	80089a6 <_printf_i+0x102>
 8008972:	680e      	ldr	r6, [r1, #0]
 8008974:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	bf18      	it	ne
 800897c:	b236      	sxthne	r6, r6
 800897e:	e7ef      	b.n	8008960 <_printf_i+0xbc>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	6820      	ldr	r0, [r4, #0]
 8008984:	1d19      	adds	r1, r3, #4
 8008986:	6029      	str	r1, [r5, #0]
 8008988:	0601      	lsls	r1, r0, #24
 800898a:	d501      	bpl.n	8008990 <_printf_i+0xec>
 800898c:	681e      	ldr	r6, [r3, #0]
 800898e:	e002      	b.n	8008996 <_printf_i+0xf2>
 8008990:	0646      	lsls	r6, r0, #25
 8008992:	d5fb      	bpl.n	800898c <_printf_i+0xe8>
 8008994:	881e      	ldrh	r6, [r3, #0]
 8008996:	2f6f      	cmp	r7, #111	; 0x6f
 8008998:	bf0c      	ite	eq
 800899a:	2308      	moveq	r3, #8
 800899c:	230a      	movne	r3, #10
 800899e:	4852      	ldr	r0, [pc, #328]	; (8008ae8 <_printf_i+0x244>)
 80089a0:	2100      	movs	r1, #0
 80089a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089a6:	6865      	ldr	r5, [r4, #4]
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	bfa8      	it	ge
 80089ac:	6821      	ldrge	r1, [r4, #0]
 80089ae:	60a5      	str	r5, [r4, #8]
 80089b0:	bfa4      	itt	ge
 80089b2:	f021 0104 	bicge.w	r1, r1, #4
 80089b6:	6021      	strge	r1, [r4, #0]
 80089b8:	b90e      	cbnz	r6, 80089be <_printf_i+0x11a>
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	d04d      	beq.n	8008a5a <_printf_i+0x1b6>
 80089be:	4615      	mov	r5, r2
 80089c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80089c4:	fb03 6711 	mls	r7, r3, r1, r6
 80089c8:	5dc7      	ldrb	r7, [r0, r7]
 80089ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089ce:	4637      	mov	r7, r6
 80089d0:	42bb      	cmp	r3, r7
 80089d2:	460e      	mov	r6, r1
 80089d4:	d9f4      	bls.n	80089c0 <_printf_i+0x11c>
 80089d6:	2b08      	cmp	r3, #8
 80089d8:	d10b      	bne.n	80089f2 <_printf_i+0x14e>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	07de      	lsls	r6, r3, #31
 80089de:	d508      	bpl.n	80089f2 <_printf_i+0x14e>
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	6861      	ldr	r1, [r4, #4]
 80089e4:	4299      	cmp	r1, r3
 80089e6:	bfde      	ittt	le
 80089e8:	2330      	movle	r3, #48	; 0x30
 80089ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089f2:	1b52      	subs	r2, r2, r5
 80089f4:	6122      	str	r2, [r4, #16]
 80089f6:	464b      	mov	r3, r9
 80089f8:	4621      	mov	r1, r4
 80089fa:	4640      	mov	r0, r8
 80089fc:	f8cd a000 	str.w	sl, [sp]
 8008a00:	aa03      	add	r2, sp, #12
 8008a02:	f7ff fedf 	bl	80087c4 <_printf_common>
 8008a06:	3001      	adds	r0, #1
 8008a08:	d14c      	bne.n	8008aa4 <_printf_i+0x200>
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a0e:	b004      	add	sp, #16
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	4834      	ldr	r0, [pc, #208]	; (8008ae8 <_printf_i+0x244>)
 8008a16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a1a:	6829      	ldr	r1, [r5, #0]
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a22:	6029      	str	r1, [r5, #0]
 8008a24:	061d      	lsls	r5, r3, #24
 8008a26:	d514      	bpl.n	8008a52 <_printf_i+0x1ae>
 8008a28:	07df      	lsls	r7, r3, #31
 8008a2a:	bf44      	itt	mi
 8008a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8008a30:	6023      	strmi	r3, [r4, #0]
 8008a32:	b91e      	cbnz	r6, 8008a3c <_printf_i+0x198>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	f023 0320 	bic.w	r3, r3, #32
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	2310      	movs	r3, #16
 8008a3e:	e7af      	b.n	80089a0 <_printf_i+0xfc>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	f043 0320 	orr.w	r3, r3, #32
 8008a46:	6023      	str	r3, [r4, #0]
 8008a48:	2378      	movs	r3, #120	; 0x78
 8008a4a:	4828      	ldr	r0, [pc, #160]	; (8008aec <_printf_i+0x248>)
 8008a4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a50:	e7e3      	b.n	8008a1a <_printf_i+0x176>
 8008a52:	0659      	lsls	r1, r3, #25
 8008a54:	bf48      	it	mi
 8008a56:	b2b6      	uxthmi	r6, r6
 8008a58:	e7e6      	b.n	8008a28 <_printf_i+0x184>
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	e7bb      	b.n	80089d6 <_printf_i+0x132>
 8008a5e:	682b      	ldr	r3, [r5, #0]
 8008a60:	6826      	ldr	r6, [r4, #0]
 8008a62:	1d18      	adds	r0, r3, #4
 8008a64:	6961      	ldr	r1, [r4, #20]
 8008a66:	6028      	str	r0, [r5, #0]
 8008a68:	0635      	lsls	r5, r6, #24
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	d501      	bpl.n	8008a72 <_printf_i+0x1ce>
 8008a6e:	6019      	str	r1, [r3, #0]
 8008a70:	e002      	b.n	8008a78 <_printf_i+0x1d4>
 8008a72:	0670      	lsls	r0, r6, #25
 8008a74:	d5fb      	bpl.n	8008a6e <_printf_i+0x1ca>
 8008a76:	8019      	strh	r1, [r3, #0]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4615      	mov	r5, r2
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	e7ba      	b.n	80089f6 <_printf_i+0x152>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	2100      	movs	r1, #0
 8008a84:	1d1a      	adds	r2, r3, #4
 8008a86:	602a      	str	r2, [r5, #0]
 8008a88:	681d      	ldr	r5, [r3, #0]
 8008a8a:	6862      	ldr	r2, [r4, #4]
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	f000 fd03 	bl	8009498 <memchr>
 8008a92:	b108      	cbz	r0, 8008a98 <_printf_i+0x1f4>
 8008a94:	1b40      	subs	r0, r0, r5
 8008a96:	6060      	str	r0, [r4, #4]
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa2:	e7a8      	b.n	80089f6 <_printf_i+0x152>
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	47d0      	blx	sl
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d0ab      	beq.n	8008a0a <_printf_i+0x166>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	079b      	lsls	r3, r3, #30
 8008ab6:	d413      	bmi.n	8008ae0 <_printf_i+0x23c>
 8008ab8:	68e0      	ldr	r0, [r4, #12]
 8008aba:	9b03      	ldr	r3, [sp, #12]
 8008abc:	4298      	cmp	r0, r3
 8008abe:	bfb8      	it	lt
 8008ac0:	4618      	movlt	r0, r3
 8008ac2:	e7a4      	b.n	8008a0e <_printf_i+0x16a>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	4632      	mov	r2, r6
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4640      	mov	r0, r8
 8008acc:	47d0      	blx	sl
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d09b      	beq.n	8008a0a <_printf_i+0x166>
 8008ad2:	3501      	adds	r5, #1
 8008ad4:	68e3      	ldr	r3, [r4, #12]
 8008ad6:	9903      	ldr	r1, [sp, #12]
 8008ad8:	1a5b      	subs	r3, r3, r1
 8008ada:	42ab      	cmp	r3, r5
 8008adc:	dcf2      	bgt.n	8008ac4 <_printf_i+0x220>
 8008ade:	e7eb      	b.n	8008ab8 <_printf_i+0x214>
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	f104 0619 	add.w	r6, r4, #25
 8008ae6:	e7f5      	b.n	8008ad4 <_printf_i+0x230>
 8008ae8:	0800ac65 	.word	0x0800ac65
 8008aec:	0800ac76 	.word	0x0800ac76

08008af0 <_scanf_chars>:
 8008af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	4615      	mov	r5, r2
 8008af6:	688a      	ldr	r2, [r1, #8]
 8008af8:	4680      	mov	r8, r0
 8008afa:	460c      	mov	r4, r1
 8008afc:	b932      	cbnz	r2, 8008b0c <_scanf_chars+0x1c>
 8008afe:	698a      	ldr	r2, [r1, #24]
 8008b00:	2a00      	cmp	r2, #0
 8008b02:	bf0c      	ite	eq
 8008b04:	2201      	moveq	r2, #1
 8008b06:	f04f 32ff 	movne.w	r2, #4294967295
 8008b0a:	608a      	str	r2, [r1, #8]
 8008b0c:	2700      	movs	r7, #0
 8008b0e:	6822      	ldr	r2, [r4, #0]
 8008b10:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ba0 <_scanf_chars+0xb0>
 8008b14:	06d1      	lsls	r1, r2, #27
 8008b16:	bf5f      	itttt	pl
 8008b18:	681a      	ldrpl	r2, [r3, #0]
 8008b1a:	1d11      	addpl	r1, r2, #4
 8008b1c:	6019      	strpl	r1, [r3, #0]
 8008b1e:	6816      	ldrpl	r6, [r2, #0]
 8008b20:	69a0      	ldr	r0, [r4, #24]
 8008b22:	b188      	cbz	r0, 8008b48 <_scanf_chars+0x58>
 8008b24:	2801      	cmp	r0, #1
 8008b26:	d107      	bne.n	8008b38 <_scanf_chars+0x48>
 8008b28:	682b      	ldr	r3, [r5, #0]
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	6963      	ldr	r3, [r4, #20]
 8008b2e:	5c9b      	ldrb	r3, [r3, r2]
 8008b30:	b953      	cbnz	r3, 8008b48 <_scanf_chars+0x58>
 8008b32:	2f00      	cmp	r7, #0
 8008b34:	d031      	beq.n	8008b9a <_scanf_chars+0xaa>
 8008b36:	e022      	b.n	8008b7e <_scanf_chars+0x8e>
 8008b38:	2802      	cmp	r0, #2
 8008b3a:	d120      	bne.n	8008b7e <_scanf_chars+0x8e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008b44:	071b      	lsls	r3, r3, #28
 8008b46:	d41a      	bmi.n	8008b7e <_scanf_chars+0x8e>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	3701      	adds	r7, #1
 8008b4c:	06da      	lsls	r2, r3, #27
 8008b4e:	bf5e      	ittt	pl
 8008b50:	682b      	ldrpl	r3, [r5, #0]
 8008b52:	781b      	ldrbpl	r3, [r3, #0]
 8008b54:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b58:	682a      	ldr	r2, [r5, #0]
 8008b5a:	686b      	ldr	r3, [r5, #4]
 8008b5c:	3201      	adds	r2, #1
 8008b5e:	602a      	str	r2, [r5, #0]
 8008b60:	68a2      	ldr	r2, [r4, #8]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	3a01      	subs	r2, #1
 8008b66:	606b      	str	r3, [r5, #4]
 8008b68:	60a2      	str	r2, [r4, #8]
 8008b6a:	b142      	cbz	r2, 8008b7e <_scanf_chars+0x8e>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dcd7      	bgt.n	8008b20 <_scanf_chars+0x30>
 8008b70:	4629      	mov	r1, r5
 8008b72:	4640      	mov	r0, r8
 8008b74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b78:	4798      	blx	r3
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d0d0      	beq.n	8008b20 <_scanf_chars+0x30>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	f013 0310 	ands.w	r3, r3, #16
 8008b84:	d105      	bne.n	8008b92 <_scanf_chars+0xa2>
 8008b86:	68e2      	ldr	r2, [r4, #12]
 8008b88:	3201      	adds	r2, #1
 8008b8a:	60e2      	str	r2, [r4, #12]
 8008b8c:	69a2      	ldr	r2, [r4, #24]
 8008b8e:	b102      	cbz	r2, 8008b92 <_scanf_chars+0xa2>
 8008b90:	7033      	strb	r3, [r6, #0]
 8008b92:	2000      	movs	r0, #0
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	443b      	add	r3, r7
 8008b98:	6123      	str	r3, [r4, #16]
 8008b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b9e:	bf00      	nop
 8008ba0:	0800acdf 	.word	0x0800acdf

08008ba4 <_scanf_i>:
 8008ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba8:	460c      	mov	r4, r1
 8008baa:	4698      	mov	r8, r3
 8008bac:	4b75      	ldr	r3, [pc, #468]	; (8008d84 <_scanf_i+0x1e0>)
 8008bae:	b087      	sub	sp, #28
 8008bb0:	4682      	mov	sl, r0
 8008bb2:	4616      	mov	r6, r2
 8008bb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bb8:	ab03      	add	r3, sp, #12
 8008bba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008bbe:	4b72      	ldr	r3, [pc, #456]	; (8008d88 <_scanf_i+0x1e4>)
 8008bc0:	69a1      	ldr	r1, [r4, #24]
 8008bc2:	4a72      	ldr	r2, [pc, #456]	; (8008d8c <_scanf_i+0x1e8>)
 8008bc4:	4627      	mov	r7, r4
 8008bc6:	2903      	cmp	r1, #3
 8008bc8:	bf18      	it	ne
 8008bca:	461a      	movne	r2, r3
 8008bcc:	68a3      	ldr	r3, [r4, #8]
 8008bce:	9201      	str	r2, [sp, #4]
 8008bd0:	1e5a      	subs	r2, r3, #1
 8008bd2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008bd6:	bf81      	itttt	hi
 8008bd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008bdc:	eb03 0905 	addhi.w	r9, r3, r5
 8008be0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008be4:	60a3      	strhi	r3, [r4, #8]
 8008be6:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008bea:	bf98      	it	ls
 8008bec:	f04f 0900 	movls.w	r9, #0
 8008bf0:	463d      	mov	r5, r7
 8008bf2:	f04f 0b00 	mov.w	fp, #0
 8008bf6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	6831      	ldr	r1, [r6, #0]
 8008bfe:	ab03      	add	r3, sp, #12
 8008c00:	2202      	movs	r2, #2
 8008c02:	7809      	ldrb	r1, [r1, #0]
 8008c04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c08:	f000 fc46 	bl	8009498 <memchr>
 8008c0c:	b328      	cbz	r0, 8008c5a <_scanf_i+0xb6>
 8008c0e:	f1bb 0f01 	cmp.w	fp, #1
 8008c12:	d159      	bne.n	8008cc8 <_scanf_i+0x124>
 8008c14:	6862      	ldr	r2, [r4, #4]
 8008c16:	b92a      	cbnz	r2, 8008c24 <_scanf_i+0x80>
 8008c18:	2308      	movs	r3, #8
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	6063      	str	r3, [r4, #4]
 8008c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c22:	6022      	str	r2, [r4, #0]
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008c2a:	6022      	str	r2, [r4, #0]
 8008c2c:	68a2      	ldr	r2, [r4, #8]
 8008c2e:	1e51      	subs	r1, r2, #1
 8008c30:	60a1      	str	r1, [r4, #8]
 8008c32:	b192      	cbz	r2, 8008c5a <_scanf_i+0xb6>
 8008c34:	6832      	ldr	r2, [r6, #0]
 8008c36:	1c51      	adds	r1, r2, #1
 8008c38:	6031      	str	r1, [r6, #0]
 8008c3a:	7812      	ldrb	r2, [r2, #0]
 8008c3c:	f805 2b01 	strb.w	r2, [r5], #1
 8008c40:	6872      	ldr	r2, [r6, #4]
 8008c42:	3a01      	subs	r2, #1
 8008c44:	2a00      	cmp	r2, #0
 8008c46:	6072      	str	r2, [r6, #4]
 8008c48:	dc07      	bgt.n	8008c5a <_scanf_i+0xb6>
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	4650      	mov	r0, sl
 8008c4e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008c52:	4790      	blx	r2
 8008c54:	2800      	cmp	r0, #0
 8008c56:	f040 8085 	bne.w	8008d64 <_scanf_i+0x1c0>
 8008c5a:	f10b 0b01 	add.w	fp, fp, #1
 8008c5e:	f1bb 0f03 	cmp.w	fp, #3
 8008c62:	d1cb      	bne.n	8008bfc <_scanf_i+0x58>
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	b90b      	cbnz	r3, 8008c6c <_scanf_i+0xc8>
 8008c68:	230a      	movs	r3, #10
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6863      	ldr	r3, [r4, #4]
 8008c6e:	4948      	ldr	r1, [pc, #288]	; (8008d90 <_scanf_i+0x1ec>)
 8008c70:	6960      	ldr	r0, [r4, #20]
 8008c72:	1ac9      	subs	r1, r1, r3
 8008c74:	f000 f8a6 	bl	8008dc4 <__sccl>
 8008c78:	f04f 0b00 	mov.w	fp, #0
 8008c7c:	68a3      	ldr	r3, [r4, #8]
 8008c7e:	6822      	ldr	r2, [r4, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d03d      	beq.n	8008d00 <_scanf_i+0x15c>
 8008c84:	6831      	ldr	r1, [r6, #0]
 8008c86:	6960      	ldr	r0, [r4, #20]
 8008c88:	f891 c000 	ldrb.w	ip, [r1]
 8008c8c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d035      	beq.n	8008d00 <_scanf_i+0x15c>
 8008c94:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008c98:	d124      	bne.n	8008ce4 <_scanf_i+0x140>
 8008c9a:	0510      	lsls	r0, r2, #20
 8008c9c:	d522      	bpl.n	8008ce4 <_scanf_i+0x140>
 8008c9e:	f10b 0b01 	add.w	fp, fp, #1
 8008ca2:	f1b9 0f00 	cmp.w	r9, #0
 8008ca6:	d003      	beq.n	8008cb0 <_scanf_i+0x10c>
 8008ca8:	3301      	adds	r3, #1
 8008caa:	f109 39ff 	add.w	r9, r9, #4294967295
 8008cae:	60a3      	str	r3, [r4, #8]
 8008cb0:	6873      	ldr	r3, [r6, #4]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	6073      	str	r3, [r6, #4]
 8008cb8:	dd1b      	ble.n	8008cf2 <_scanf_i+0x14e>
 8008cba:	6833      	ldr	r3, [r6, #0]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	68a3      	ldr	r3, [r4, #8]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	60a3      	str	r3, [r4, #8]
 8008cc6:	e7d9      	b.n	8008c7c <_scanf_i+0xd8>
 8008cc8:	f1bb 0f02 	cmp.w	fp, #2
 8008ccc:	d1ae      	bne.n	8008c2c <_scanf_i+0x88>
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008cd4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008cd8:	d1bf      	bne.n	8008c5a <_scanf_i+0xb6>
 8008cda:	2310      	movs	r3, #16
 8008cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	e7a2      	b.n	8008c2a <_scanf_i+0x86>
 8008ce4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	780b      	ldrb	r3, [r1, #0]
 8008cec:	f805 3b01 	strb.w	r3, [r5], #1
 8008cf0:	e7de      	b.n	8008cb0 <_scanf_i+0x10c>
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4650      	mov	r0, sl
 8008cf6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008cfa:	4798      	blx	r3
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d0df      	beq.n	8008cc0 <_scanf_i+0x11c>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	05db      	lsls	r3, r3, #23
 8008d04:	d50d      	bpl.n	8008d22 <_scanf_i+0x17e>
 8008d06:	42bd      	cmp	r5, r7
 8008d08:	d909      	bls.n	8008d1e <_scanf_i+0x17a>
 8008d0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d0e:	4632      	mov	r2, r6
 8008d10:	4650      	mov	r0, sl
 8008d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d16:	f105 39ff 	add.w	r9, r5, #4294967295
 8008d1a:	4798      	blx	r3
 8008d1c:	464d      	mov	r5, r9
 8008d1e:	42bd      	cmp	r5, r7
 8008d20:	d02d      	beq.n	8008d7e <_scanf_i+0x1da>
 8008d22:	6822      	ldr	r2, [r4, #0]
 8008d24:	f012 0210 	ands.w	r2, r2, #16
 8008d28:	d113      	bne.n	8008d52 <_scanf_i+0x1ae>
 8008d2a:	702a      	strb	r2, [r5, #0]
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	6863      	ldr	r3, [r4, #4]
 8008d30:	4650      	mov	r0, sl
 8008d32:	9e01      	ldr	r6, [sp, #4]
 8008d34:	47b0      	blx	r6
 8008d36:	6821      	ldr	r1, [r4, #0]
 8008d38:	f8d8 3000 	ldr.w	r3, [r8]
 8008d3c:	f011 0f20 	tst.w	r1, #32
 8008d40:	d013      	beq.n	8008d6a <_scanf_i+0x1c6>
 8008d42:	1d1a      	adds	r2, r3, #4
 8008d44:	f8c8 2000 	str.w	r2, [r8]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6018      	str	r0, [r3, #0]
 8008d4c:	68e3      	ldr	r3, [r4, #12]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	60e3      	str	r3, [r4, #12]
 8008d52:	2000      	movs	r0, #0
 8008d54:	1bed      	subs	r5, r5, r7
 8008d56:	44ab      	add	fp, r5
 8008d58:	6925      	ldr	r5, [r4, #16]
 8008d5a:	445d      	add	r5, fp
 8008d5c:	6125      	str	r5, [r4, #16]
 8008d5e:	b007      	add	sp, #28
 8008d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d64:	f04f 0b00 	mov.w	fp, #0
 8008d68:	e7ca      	b.n	8008d00 <_scanf_i+0x15c>
 8008d6a:	1d1a      	adds	r2, r3, #4
 8008d6c:	f8c8 2000 	str.w	r2, [r8]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f011 0f01 	tst.w	r1, #1
 8008d76:	bf14      	ite	ne
 8008d78:	8018      	strhne	r0, [r3, #0]
 8008d7a:	6018      	streq	r0, [r3, #0]
 8008d7c:	e7e6      	b.n	8008d4c <_scanf_i+0x1a8>
 8008d7e:	2001      	movs	r0, #1
 8008d80:	e7ed      	b.n	8008d5e <_scanf_i+0x1ba>
 8008d82:	bf00      	nop
 8008d84:	0800a9a8 	.word	0x0800a9a8
 8008d88:	0800903d 	.word	0x0800903d
 8008d8c:	08008f55 	.word	0x08008f55
 8008d90:	0800aca0 	.word	0x0800aca0

08008d94 <_read_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4604      	mov	r4, r0
 8008d98:	4608      	mov	r0, r1
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	4d05      	ldr	r5, [pc, #20]	; (8008db4 <_read_r+0x20>)
 8008da0:	602a      	str	r2, [r5, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f7f9 f9ab 	bl	80020fe <_read>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_read_r+0x1e>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_read_r+0x1e>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	20000430 	.word	0x20000430

08008db8 <nan>:
 8008db8:	2000      	movs	r0, #0
 8008dba:	4901      	ldr	r1, [pc, #4]	; (8008dc0 <nan+0x8>)
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	7ff80000 	.word	0x7ff80000

08008dc4 <__sccl>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	780b      	ldrb	r3, [r1, #0]
 8008dc8:	4604      	mov	r4, r0
 8008dca:	2b5e      	cmp	r3, #94	; 0x5e
 8008dcc:	bf13      	iteet	ne
 8008dce:	2200      	movne	r2, #0
 8008dd0:	2201      	moveq	r2, #1
 8008dd2:	784b      	ldrbeq	r3, [r1, #1]
 8008dd4:	1c48      	addne	r0, r1, #1
 8008dd6:	bf08      	it	eq
 8008dd8:	1c88      	addeq	r0, r1, #2
 8008dda:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008dde:	1e61      	subs	r1, r4, #1
 8008de0:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008de4:	42a9      	cmp	r1, r5
 8008de6:	d1fb      	bne.n	8008de0 <__sccl+0x1c>
 8008de8:	b90b      	cbnz	r3, 8008dee <__sccl+0x2a>
 8008dea:	3801      	subs	r0, #1
 8008dec:	bd70      	pop	{r4, r5, r6, pc}
 8008dee:	f082 0201 	eor.w	r2, r2, #1
 8008df2:	4605      	mov	r5, r0
 8008df4:	54e2      	strb	r2, [r4, r3]
 8008df6:	4628      	mov	r0, r5
 8008df8:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008dfc:	292d      	cmp	r1, #45	; 0x2d
 8008dfe:	d006      	beq.n	8008e0e <__sccl+0x4a>
 8008e00:	295d      	cmp	r1, #93	; 0x5d
 8008e02:	d0f3      	beq.n	8008dec <__sccl+0x28>
 8008e04:	b909      	cbnz	r1, 8008e0a <__sccl+0x46>
 8008e06:	4628      	mov	r0, r5
 8008e08:	e7f0      	b.n	8008dec <__sccl+0x28>
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	e7f1      	b.n	8008df2 <__sccl+0x2e>
 8008e0e:	786e      	ldrb	r6, [r5, #1]
 8008e10:	2e5d      	cmp	r6, #93	; 0x5d
 8008e12:	d0fa      	beq.n	8008e0a <__sccl+0x46>
 8008e14:	42b3      	cmp	r3, r6
 8008e16:	dcf8      	bgt.n	8008e0a <__sccl+0x46>
 8008e18:	4619      	mov	r1, r3
 8008e1a:	3502      	adds	r5, #2
 8008e1c:	3101      	adds	r1, #1
 8008e1e:	428e      	cmp	r6, r1
 8008e20:	5462      	strb	r2, [r4, r1]
 8008e22:	dcfb      	bgt.n	8008e1c <__sccl+0x58>
 8008e24:	1af1      	subs	r1, r6, r3
 8008e26:	3901      	subs	r1, #1
 8008e28:	42b3      	cmp	r3, r6
 8008e2a:	bfa8      	it	ge
 8008e2c:	2100      	movge	r1, #0
 8008e2e:	1c58      	adds	r0, r3, #1
 8008e30:	1843      	adds	r3, r0, r1
 8008e32:	e7e0      	b.n	8008df6 <__sccl+0x32>

08008e34 <strncmp>:
 8008e34:	4603      	mov	r3, r0
 8008e36:	b510      	push	{r4, lr}
 8008e38:	b172      	cbz	r2, 8008e58 <strncmp+0x24>
 8008e3a:	3901      	subs	r1, #1
 8008e3c:	1884      	adds	r4, r0, r2
 8008e3e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e46:	4290      	cmp	r0, r2
 8008e48:	d101      	bne.n	8008e4e <strncmp+0x1a>
 8008e4a:	42a3      	cmp	r3, r4
 8008e4c:	d101      	bne.n	8008e52 <strncmp+0x1e>
 8008e4e:	1a80      	subs	r0, r0, r2
 8008e50:	bd10      	pop	{r4, pc}
 8008e52:	2800      	cmp	r0, #0
 8008e54:	d1f3      	bne.n	8008e3e <strncmp+0xa>
 8008e56:	e7fa      	b.n	8008e4e <strncmp+0x1a>
 8008e58:	4610      	mov	r0, r2
 8008e5a:	e7f9      	b.n	8008e50 <strncmp+0x1c>

08008e5c <_strtol_l.constprop.0>:
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e62:	4680      	mov	r8, r0
 8008e64:	d001      	beq.n	8008e6a <_strtol_l.constprop.0+0xe>
 8008e66:	2b24      	cmp	r3, #36	; 0x24
 8008e68:	d906      	bls.n	8008e78 <_strtol_l.constprop.0+0x1c>
 8008e6a:	f7fd f8bb 	bl	8005fe4 <__errno>
 8008e6e:	2316      	movs	r3, #22
 8008e70:	6003      	str	r3, [r0, #0]
 8008e72:	2000      	movs	r0, #0
 8008e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e78:	460d      	mov	r5, r1
 8008e7a:	4f35      	ldr	r7, [pc, #212]	; (8008f50 <_strtol_l.constprop.0+0xf4>)
 8008e7c:	4628      	mov	r0, r5
 8008e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e82:	5de6      	ldrb	r6, [r4, r7]
 8008e84:	f016 0608 	ands.w	r6, r6, #8
 8008e88:	d1f8      	bne.n	8008e7c <_strtol_l.constprop.0+0x20>
 8008e8a:	2c2d      	cmp	r4, #45	; 0x2d
 8008e8c:	d12f      	bne.n	8008eee <_strtol_l.constprop.0+0x92>
 8008e8e:	2601      	movs	r6, #1
 8008e90:	782c      	ldrb	r4, [r5, #0]
 8008e92:	1c85      	adds	r5, r0, #2
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d057      	beq.n	8008f48 <_strtol_l.constprop.0+0xec>
 8008e98:	2b10      	cmp	r3, #16
 8008e9a:	d109      	bne.n	8008eb0 <_strtol_l.constprop.0+0x54>
 8008e9c:	2c30      	cmp	r4, #48	; 0x30
 8008e9e:	d107      	bne.n	8008eb0 <_strtol_l.constprop.0+0x54>
 8008ea0:	7828      	ldrb	r0, [r5, #0]
 8008ea2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008ea6:	2858      	cmp	r0, #88	; 0x58
 8008ea8:	d149      	bne.n	8008f3e <_strtol_l.constprop.0+0xe2>
 8008eaa:	2310      	movs	r3, #16
 8008eac:	786c      	ldrb	r4, [r5, #1]
 8008eae:	3502      	adds	r5, #2
 8008eb0:	2700      	movs	r7, #0
 8008eb2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8008eb6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8008eba:	fbbe f9f3 	udiv	r9, lr, r3
 8008ebe:	4638      	mov	r0, r7
 8008ec0:	fb03 ea19 	mls	sl, r3, r9, lr
 8008ec4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ec8:	f1bc 0f09 	cmp.w	ip, #9
 8008ecc:	d814      	bhi.n	8008ef8 <_strtol_l.constprop.0+0x9c>
 8008ece:	4664      	mov	r4, ip
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	dd22      	ble.n	8008f1a <_strtol_l.constprop.0+0xbe>
 8008ed4:	2f00      	cmp	r7, #0
 8008ed6:	db1d      	blt.n	8008f14 <_strtol_l.constprop.0+0xb8>
 8008ed8:	4581      	cmp	r9, r0
 8008eda:	d31b      	bcc.n	8008f14 <_strtol_l.constprop.0+0xb8>
 8008edc:	d101      	bne.n	8008ee2 <_strtol_l.constprop.0+0x86>
 8008ede:	45a2      	cmp	sl, r4
 8008ee0:	db18      	blt.n	8008f14 <_strtol_l.constprop.0+0xb8>
 8008ee2:	2701      	movs	r7, #1
 8008ee4:	fb00 4003 	mla	r0, r0, r3, r4
 8008ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eec:	e7ea      	b.n	8008ec4 <_strtol_l.constprop.0+0x68>
 8008eee:	2c2b      	cmp	r4, #43	; 0x2b
 8008ef0:	bf04      	itt	eq
 8008ef2:	782c      	ldrbeq	r4, [r5, #0]
 8008ef4:	1c85      	addeq	r5, r0, #2
 8008ef6:	e7cd      	b.n	8008e94 <_strtol_l.constprop.0+0x38>
 8008ef8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008efc:	f1bc 0f19 	cmp.w	ip, #25
 8008f00:	d801      	bhi.n	8008f06 <_strtol_l.constprop.0+0xaa>
 8008f02:	3c37      	subs	r4, #55	; 0x37
 8008f04:	e7e4      	b.n	8008ed0 <_strtol_l.constprop.0+0x74>
 8008f06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008f0a:	f1bc 0f19 	cmp.w	ip, #25
 8008f0e:	d804      	bhi.n	8008f1a <_strtol_l.constprop.0+0xbe>
 8008f10:	3c57      	subs	r4, #87	; 0x57
 8008f12:	e7dd      	b.n	8008ed0 <_strtol_l.constprop.0+0x74>
 8008f14:	f04f 37ff 	mov.w	r7, #4294967295
 8008f18:	e7e6      	b.n	8008ee8 <_strtol_l.constprop.0+0x8c>
 8008f1a:	2f00      	cmp	r7, #0
 8008f1c:	da07      	bge.n	8008f2e <_strtol_l.constprop.0+0xd2>
 8008f1e:	2322      	movs	r3, #34	; 0x22
 8008f20:	4670      	mov	r0, lr
 8008f22:	f8c8 3000 	str.w	r3, [r8]
 8008f26:	2a00      	cmp	r2, #0
 8008f28:	d0a4      	beq.n	8008e74 <_strtol_l.constprop.0+0x18>
 8008f2a:	1e69      	subs	r1, r5, #1
 8008f2c:	e005      	b.n	8008f3a <_strtol_l.constprop.0+0xde>
 8008f2e:	b106      	cbz	r6, 8008f32 <_strtol_l.constprop.0+0xd6>
 8008f30:	4240      	negs	r0, r0
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	d09e      	beq.n	8008e74 <_strtol_l.constprop.0+0x18>
 8008f36:	2f00      	cmp	r7, #0
 8008f38:	d1f7      	bne.n	8008f2a <_strtol_l.constprop.0+0xce>
 8008f3a:	6011      	str	r1, [r2, #0]
 8008f3c:	e79a      	b.n	8008e74 <_strtol_l.constprop.0+0x18>
 8008f3e:	2430      	movs	r4, #48	; 0x30
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1b5      	bne.n	8008eb0 <_strtol_l.constprop.0+0x54>
 8008f44:	2308      	movs	r3, #8
 8008f46:	e7b3      	b.n	8008eb0 <_strtol_l.constprop.0+0x54>
 8008f48:	2c30      	cmp	r4, #48	; 0x30
 8008f4a:	d0a9      	beq.n	8008ea0 <_strtol_l.constprop.0+0x44>
 8008f4c:	230a      	movs	r3, #10
 8008f4e:	e7af      	b.n	8008eb0 <_strtol_l.constprop.0+0x54>
 8008f50:	0800acdf 	.word	0x0800acdf

08008f54 <_strtol_r>:
 8008f54:	f7ff bf82 	b.w	8008e5c <_strtol_l.constprop.0>

08008f58 <_strtoul_l.constprop.0>:
 8008f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f5c:	4686      	mov	lr, r0
 8008f5e:	460d      	mov	r5, r1
 8008f60:	4f35      	ldr	r7, [pc, #212]	; (8009038 <_strtoul_l.constprop.0+0xe0>)
 8008f62:	4628      	mov	r0, r5
 8008f64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f68:	5de6      	ldrb	r6, [r4, r7]
 8008f6a:	f016 0608 	ands.w	r6, r6, #8
 8008f6e:	d1f8      	bne.n	8008f62 <_strtoul_l.constprop.0+0xa>
 8008f70:	2c2d      	cmp	r4, #45	; 0x2d
 8008f72:	d12f      	bne.n	8008fd4 <_strtoul_l.constprop.0+0x7c>
 8008f74:	2601      	movs	r6, #1
 8008f76:	782c      	ldrb	r4, [r5, #0]
 8008f78:	1c85      	adds	r5, r0, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d057      	beq.n	800902e <_strtoul_l.constprop.0+0xd6>
 8008f7e:	2b10      	cmp	r3, #16
 8008f80:	d109      	bne.n	8008f96 <_strtoul_l.constprop.0+0x3e>
 8008f82:	2c30      	cmp	r4, #48	; 0x30
 8008f84:	d107      	bne.n	8008f96 <_strtoul_l.constprop.0+0x3e>
 8008f86:	7828      	ldrb	r0, [r5, #0]
 8008f88:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008f8c:	2858      	cmp	r0, #88	; 0x58
 8008f8e:	d149      	bne.n	8009024 <_strtoul_l.constprop.0+0xcc>
 8008f90:	2310      	movs	r3, #16
 8008f92:	786c      	ldrb	r4, [r5, #1]
 8008f94:	3502      	adds	r5, #2
 8008f96:	f04f 38ff 	mov.w	r8, #4294967295
 8008f9a:	fbb8 f8f3 	udiv	r8, r8, r3
 8008f9e:	2700      	movs	r7, #0
 8008fa0:	fb03 f908 	mul.w	r9, r3, r8
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	ea6f 0909 	mvn.w	r9, r9
 8008faa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008fae:	f1bc 0f09 	cmp.w	ip, #9
 8008fb2:	d814      	bhi.n	8008fde <_strtoul_l.constprop.0+0x86>
 8008fb4:	4664      	mov	r4, ip
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	dd22      	ble.n	8009000 <_strtoul_l.constprop.0+0xa8>
 8008fba:	2f00      	cmp	r7, #0
 8008fbc:	db1d      	blt.n	8008ffa <_strtoul_l.constprop.0+0xa2>
 8008fbe:	4580      	cmp	r8, r0
 8008fc0:	d31b      	bcc.n	8008ffa <_strtoul_l.constprop.0+0xa2>
 8008fc2:	d101      	bne.n	8008fc8 <_strtoul_l.constprop.0+0x70>
 8008fc4:	45a1      	cmp	r9, r4
 8008fc6:	db18      	blt.n	8008ffa <_strtoul_l.constprop.0+0xa2>
 8008fc8:	2701      	movs	r7, #1
 8008fca:	fb00 4003 	mla	r0, r0, r3, r4
 8008fce:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fd2:	e7ea      	b.n	8008faa <_strtoul_l.constprop.0+0x52>
 8008fd4:	2c2b      	cmp	r4, #43	; 0x2b
 8008fd6:	bf04      	itt	eq
 8008fd8:	782c      	ldrbeq	r4, [r5, #0]
 8008fda:	1c85      	addeq	r5, r0, #2
 8008fdc:	e7cd      	b.n	8008f7a <_strtoul_l.constprop.0+0x22>
 8008fde:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008fe2:	f1bc 0f19 	cmp.w	ip, #25
 8008fe6:	d801      	bhi.n	8008fec <_strtoul_l.constprop.0+0x94>
 8008fe8:	3c37      	subs	r4, #55	; 0x37
 8008fea:	e7e4      	b.n	8008fb6 <_strtoul_l.constprop.0+0x5e>
 8008fec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008ff0:	f1bc 0f19 	cmp.w	ip, #25
 8008ff4:	d804      	bhi.n	8009000 <_strtoul_l.constprop.0+0xa8>
 8008ff6:	3c57      	subs	r4, #87	; 0x57
 8008ff8:	e7dd      	b.n	8008fb6 <_strtoul_l.constprop.0+0x5e>
 8008ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8008ffe:	e7e6      	b.n	8008fce <_strtoul_l.constprop.0+0x76>
 8009000:	2f00      	cmp	r7, #0
 8009002:	da07      	bge.n	8009014 <_strtoul_l.constprop.0+0xbc>
 8009004:	2322      	movs	r3, #34	; 0x22
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	f8ce 3000 	str.w	r3, [lr]
 800900e:	b932      	cbnz	r2, 800901e <_strtoul_l.constprop.0+0xc6>
 8009010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009014:	b106      	cbz	r6, 8009018 <_strtoul_l.constprop.0+0xc0>
 8009016:	4240      	negs	r0, r0
 8009018:	2a00      	cmp	r2, #0
 800901a:	d0f9      	beq.n	8009010 <_strtoul_l.constprop.0+0xb8>
 800901c:	b107      	cbz	r7, 8009020 <_strtoul_l.constprop.0+0xc8>
 800901e:	1e69      	subs	r1, r5, #1
 8009020:	6011      	str	r1, [r2, #0]
 8009022:	e7f5      	b.n	8009010 <_strtoul_l.constprop.0+0xb8>
 8009024:	2430      	movs	r4, #48	; 0x30
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1b5      	bne.n	8008f96 <_strtoul_l.constprop.0+0x3e>
 800902a:	2308      	movs	r3, #8
 800902c:	e7b3      	b.n	8008f96 <_strtoul_l.constprop.0+0x3e>
 800902e:	2c30      	cmp	r4, #48	; 0x30
 8009030:	d0a9      	beq.n	8008f86 <_strtoul_l.constprop.0+0x2e>
 8009032:	230a      	movs	r3, #10
 8009034:	e7af      	b.n	8008f96 <_strtoul_l.constprop.0+0x3e>
 8009036:	bf00      	nop
 8009038:	0800acdf 	.word	0x0800acdf

0800903c <_strtoul_r>:
 800903c:	f7ff bf8c 	b.w	8008f58 <_strtoul_l.constprop.0>

08009040 <__submore>:
 8009040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009044:	460c      	mov	r4, r1
 8009046:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800904c:	4299      	cmp	r1, r3
 800904e:	d11b      	bne.n	8009088 <__submore+0x48>
 8009050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009054:	f7fd f8ac 	bl	80061b0 <_malloc_r>
 8009058:	b918      	cbnz	r0, 8009062 <__submore+0x22>
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009066:	63a3      	str	r3, [r4, #56]	; 0x38
 8009068:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800906c:	6360      	str	r0, [r4, #52]	; 0x34
 800906e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009072:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009076:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800907a:	7043      	strb	r3, [r0, #1]
 800907c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009080:	7003      	strb	r3, [r0, #0]
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	2000      	movs	r0, #0
 8009086:	e7ea      	b.n	800905e <__submore+0x1e>
 8009088:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800908a:	0077      	lsls	r7, r6, #1
 800908c:	463a      	mov	r2, r7
 800908e:	f000 fa2b 	bl	80094e8 <_realloc_r>
 8009092:	4605      	mov	r5, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	d0e0      	beq.n	800905a <__submore+0x1a>
 8009098:	eb00 0806 	add.w	r8, r0, r6
 800909c:	4601      	mov	r1, r0
 800909e:	4632      	mov	r2, r6
 80090a0:	4640      	mov	r0, r8
 80090a2:	f7fc fff3 	bl	800608c <memcpy>
 80090a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80090aa:	f8c4 8000 	str.w	r8, [r4]
 80090ae:	e7e9      	b.n	8009084 <__submore+0x44>

080090b0 <__ascii_wctomb>:
 80090b0:	4603      	mov	r3, r0
 80090b2:	4608      	mov	r0, r1
 80090b4:	b141      	cbz	r1, 80090c8 <__ascii_wctomb+0x18>
 80090b6:	2aff      	cmp	r2, #255	; 0xff
 80090b8:	d904      	bls.n	80090c4 <__ascii_wctomb+0x14>
 80090ba:	228a      	movs	r2, #138	; 0x8a
 80090bc:	f04f 30ff 	mov.w	r0, #4294967295
 80090c0:	601a      	str	r2, [r3, #0]
 80090c2:	4770      	bx	lr
 80090c4:	2001      	movs	r0, #1
 80090c6:	700a      	strb	r2, [r1, #0]
 80090c8:	4770      	bx	lr
	...

080090cc <__assert_func>:
 80090cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090ce:	4614      	mov	r4, r2
 80090d0:	461a      	mov	r2, r3
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <__assert_func+0x2c>)
 80090d4:	4605      	mov	r5, r0
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68d8      	ldr	r0, [r3, #12]
 80090da:	b14c      	cbz	r4, 80090f0 <__assert_func+0x24>
 80090dc:	4b07      	ldr	r3, [pc, #28]	; (80090fc <__assert_func+0x30>)
 80090de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090e2:	9100      	str	r1, [sp, #0]
 80090e4:	462b      	mov	r3, r5
 80090e6:	4906      	ldr	r1, [pc, #24]	; (8009100 <__assert_func+0x34>)
 80090e8:	f000 f9a2 	bl	8009430 <fiprintf>
 80090ec:	f000 fc42 	bl	8009974 <abort>
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <__assert_func+0x38>)
 80090f2:	461c      	mov	r4, r3
 80090f4:	e7f3      	b.n	80090de <__assert_func+0x12>
 80090f6:	bf00      	nop
 80090f8:	20000078 	.word	0x20000078
 80090fc:	0800aca2 	.word	0x0800aca2
 8009100:	0800acaf 	.word	0x0800acaf
 8009104:	0800acdd 	.word	0x0800acdd

08009108 <__sflush_r>:
 8009108:	898a      	ldrh	r2, [r1, #12]
 800910a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910c:	4605      	mov	r5, r0
 800910e:	0710      	lsls	r0, r2, #28
 8009110:	460c      	mov	r4, r1
 8009112:	d457      	bmi.n	80091c4 <__sflush_r+0xbc>
 8009114:	684b      	ldr	r3, [r1, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	dc04      	bgt.n	8009124 <__sflush_r+0x1c>
 800911a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	dc01      	bgt.n	8009124 <__sflush_r+0x1c>
 8009120:	2000      	movs	r0, #0
 8009122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009126:	2e00      	cmp	r6, #0
 8009128:	d0fa      	beq.n	8009120 <__sflush_r+0x18>
 800912a:	2300      	movs	r3, #0
 800912c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009130:	682f      	ldr	r7, [r5, #0]
 8009132:	602b      	str	r3, [r5, #0]
 8009134:	d032      	beq.n	800919c <__sflush_r+0x94>
 8009136:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009138:	89a3      	ldrh	r3, [r4, #12]
 800913a:	075a      	lsls	r2, r3, #29
 800913c:	d505      	bpl.n	800914a <__sflush_r+0x42>
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	1ac0      	subs	r0, r0, r3
 8009142:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009144:	b10b      	cbz	r3, 800914a <__sflush_r+0x42>
 8009146:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009148:	1ac0      	subs	r0, r0, r3
 800914a:	2300      	movs	r3, #0
 800914c:	4602      	mov	r2, r0
 800914e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009150:	4628      	mov	r0, r5
 8009152:	6a21      	ldr	r1, [r4, #32]
 8009154:	47b0      	blx	r6
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	d106      	bne.n	800916a <__sflush_r+0x62>
 800915c:	6829      	ldr	r1, [r5, #0]
 800915e:	291d      	cmp	r1, #29
 8009160:	d82c      	bhi.n	80091bc <__sflush_r+0xb4>
 8009162:	4a29      	ldr	r2, [pc, #164]	; (8009208 <__sflush_r+0x100>)
 8009164:	40ca      	lsrs	r2, r1
 8009166:	07d6      	lsls	r6, r2, #31
 8009168:	d528      	bpl.n	80091bc <__sflush_r+0xb4>
 800916a:	2200      	movs	r2, #0
 800916c:	6062      	str	r2, [r4, #4]
 800916e:	6922      	ldr	r2, [r4, #16]
 8009170:	04d9      	lsls	r1, r3, #19
 8009172:	6022      	str	r2, [r4, #0]
 8009174:	d504      	bpl.n	8009180 <__sflush_r+0x78>
 8009176:	1c42      	adds	r2, r0, #1
 8009178:	d101      	bne.n	800917e <__sflush_r+0x76>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	b903      	cbnz	r3, 8009180 <__sflush_r+0x78>
 800917e:	6560      	str	r0, [r4, #84]	; 0x54
 8009180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009182:	602f      	str	r7, [r5, #0]
 8009184:	2900      	cmp	r1, #0
 8009186:	d0cb      	beq.n	8009120 <__sflush_r+0x18>
 8009188:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800918c:	4299      	cmp	r1, r3
 800918e:	d002      	beq.n	8009196 <__sflush_r+0x8e>
 8009190:	4628      	mov	r0, r5
 8009192:	f7fc ffa5 	bl	80060e0 <_free_r>
 8009196:	2000      	movs	r0, #0
 8009198:	6360      	str	r0, [r4, #52]	; 0x34
 800919a:	e7c2      	b.n	8009122 <__sflush_r+0x1a>
 800919c:	6a21      	ldr	r1, [r4, #32]
 800919e:	2301      	movs	r3, #1
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b0      	blx	r6
 80091a4:	1c41      	adds	r1, r0, #1
 80091a6:	d1c7      	bne.n	8009138 <__sflush_r+0x30>
 80091a8:	682b      	ldr	r3, [r5, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0c4      	beq.n	8009138 <__sflush_r+0x30>
 80091ae:	2b1d      	cmp	r3, #29
 80091b0:	d001      	beq.n	80091b6 <__sflush_r+0xae>
 80091b2:	2b16      	cmp	r3, #22
 80091b4:	d101      	bne.n	80091ba <__sflush_r+0xb2>
 80091b6:	602f      	str	r7, [r5, #0]
 80091b8:	e7b2      	b.n	8009120 <__sflush_r+0x18>
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c0:	81a3      	strh	r3, [r4, #12]
 80091c2:	e7ae      	b.n	8009122 <__sflush_r+0x1a>
 80091c4:	690f      	ldr	r7, [r1, #16]
 80091c6:	2f00      	cmp	r7, #0
 80091c8:	d0aa      	beq.n	8009120 <__sflush_r+0x18>
 80091ca:	0793      	lsls	r3, r2, #30
 80091cc:	bf18      	it	ne
 80091ce:	2300      	movne	r3, #0
 80091d0:	680e      	ldr	r6, [r1, #0]
 80091d2:	bf08      	it	eq
 80091d4:	694b      	ldreq	r3, [r1, #20]
 80091d6:	1bf6      	subs	r6, r6, r7
 80091d8:	600f      	str	r7, [r1, #0]
 80091da:	608b      	str	r3, [r1, #8]
 80091dc:	2e00      	cmp	r6, #0
 80091de:	dd9f      	ble.n	8009120 <__sflush_r+0x18>
 80091e0:	4633      	mov	r3, r6
 80091e2:	463a      	mov	r2, r7
 80091e4:	4628      	mov	r0, r5
 80091e6:	6a21      	ldr	r1, [r4, #32]
 80091e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80091ec:	47e0      	blx	ip
 80091ee:	2800      	cmp	r0, #0
 80091f0:	dc06      	bgt.n	8009200 <__sflush_r+0xf8>
 80091f2:	89a3      	ldrh	r3, [r4, #12]
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	e790      	b.n	8009122 <__sflush_r+0x1a>
 8009200:	4407      	add	r7, r0
 8009202:	1a36      	subs	r6, r6, r0
 8009204:	e7ea      	b.n	80091dc <__sflush_r+0xd4>
 8009206:	bf00      	nop
 8009208:	20400001 	.word	0x20400001

0800920c <_fflush_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	690b      	ldr	r3, [r1, #16]
 8009210:	4605      	mov	r5, r0
 8009212:	460c      	mov	r4, r1
 8009214:	b913      	cbnz	r3, 800921c <_fflush_r+0x10>
 8009216:	2500      	movs	r5, #0
 8009218:	4628      	mov	r0, r5
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	b118      	cbz	r0, 8009226 <_fflush_r+0x1a>
 800921e:	6983      	ldr	r3, [r0, #24]
 8009220:	b90b      	cbnz	r3, 8009226 <_fflush_r+0x1a>
 8009222:	f000 f887 	bl	8009334 <__sinit>
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <_fflush_r+0x6c>)
 8009228:	429c      	cmp	r4, r3
 800922a:	d11b      	bne.n	8009264 <_fflush_r+0x58>
 800922c:	686c      	ldr	r4, [r5, #4]
 800922e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0ef      	beq.n	8009216 <_fflush_r+0xa>
 8009236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009238:	07d0      	lsls	r0, r2, #31
 800923a:	d404      	bmi.n	8009246 <_fflush_r+0x3a>
 800923c:	0599      	lsls	r1, r3, #22
 800923e:	d402      	bmi.n	8009246 <_fflush_r+0x3a>
 8009240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009242:	f000 f927 	bl	8009494 <__retarget_lock_acquire_recursive>
 8009246:	4628      	mov	r0, r5
 8009248:	4621      	mov	r1, r4
 800924a:	f7ff ff5d 	bl	8009108 <__sflush_r>
 800924e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009250:	4605      	mov	r5, r0
 8009252:	07da      	lsls	r2, r3, #31
 8009254:	d4e0      	bmi.n	8009218 <_fflush_r+0xc>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	059b      	lsls	r3, r3, #22
 800925a:	d4dd      	bmi.n	8009218 <_fflush_r+0xc>
 800925c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800925e:	f000 f91a 	bl	8009496 <__retarget_lock_release_recursive>
 8009262:	e7d9      	b.n	8009218 <_fflush_r+0xc>
 8009264:	4b05      	ldr	r3, [pc, #20]	; (800927c <_fflush_r+0x70>)
 8009266:	429c      	cmp	r4, r3
 8009268:	d101      	bne.n	800926e <_fflush_r+0x62>
 800926a:	68ac      	ldr	r4, [r5, #8]
 800926c:	e7df      	b.n	800922e <_fflush_r+0x22>
 800926e:	4b04      	ldr	r3, [pc, #16]	; (8009280 <_fflush_r+0x74>)
 8009270:	429c      	cmp	r4, r3
 8009272:	bf08      	it	eq
 8009274:	68ec      	ldreq	r4, [r5, #12]
 8009276:	e7da      	b.n	800922e <_fflush_r+0x22>
 8009278:	0800ae00 	.word	0x0800ae00
 800927c:	0800ae20 	.word	0x0800ae20
 8009280:	0800ade0 	.word	0x0800ade0

08009284 <std>:
 8009284:	2300      	movs	r3, #0
 8009286:	b510      	push	{r4, lr}
 8009288:	4604      	mov	r4, r0
 800928a:	e9c0 3300 	strd	r3, r3, [r0]
 800928e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009292:	6083      	str	r3, [r0, #8]
 8009294:	8181      	strh	r1, [r0, #12]
 8009296:	6643      	str	r3, [r0, #100]	; 0x64
 8009298:	81c2      	strh	r2, [r0, #14]
 800929a:	6183      	str	r3, [r0, #24]
 800929c:	4619      	mov	r1, r3
 800929e:	2208      	movs	r2, #8
 80092a0:	305c      	adds	r0, #92	; 0x5c
 80092a2:	f7fc ff01 	bl	80060a8 <memset>
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <std+0x38>)
 80092a8:	6224      	str	r4, [r4, #32]
 80092aa:	6263      	str	r3, [r4, #36]	; 0x24
 80092ac:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <std+0x3c>)
 80092ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80092b0:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <std+0x40>)
 80092b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092b4:	4b04      	ldr	r3, [pc, #16]	; (80092c8 <std+0x44>)
 80092b6:	6323      	str	r3, [r4, #48]	; 0x30
 80092b8:	bd10      	pop	{r4, pc}
 80092ba:	bf00      	nop
 80092bc:	0800634d 	.word	0x0800634d
 80092c0:	08006373 	.word	0x08006373
 80092c4:	080063ab 	.word	0x080063ab
 80092c8:	080063cf 	.word	0x080063cf

080092cc <_cleanup_r>:
 80092cc:	4901      	ldr	r1, [pc, #4]	; (80092d4 <_cleanup_r+0x8>)
 80092ce:	f000 b8c1 	b.w	8009454 <_fwalk_reent>
 80092d2:	bf00      	nop
 80092d4:	0800920d 	.word	0x0800920d

080092d8 <__sfmoreglue>:
 80092d8:	2268      	movs	r2, #104	; 0x68
 80092da:	b570      	push	{r4, r5, r6, lr}
 80092dc:	1e4d      	subs	r5, r1, #1
 80092de:	4355      	muls	r5, r2
 80092e0:	460e      	mov	r6, r1
 80092e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092e6:	f7fc ff63 	bl	80061b0 <_malloc_r>
 80092ea:	4604      	mov	r4, r0
 80092ec:	b140      	cbz	r0, 8009300 <__sfmoreglue+0x28>
 80092ee:	2100      	movs	r1, #0
 80092f0:	e9c0 1600 	strd	r1, r6, [r0]
 80092f4:	300c      	adds	r0, #12
 80092f6:	60a0      	str	r0, [r4, #8]
 80092f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092fc:	f7fc fed4 	bl	80060a8 <memset>
 8009300:	4620      	mov	r0, r4
 8009302:	bd70      	pop	{r4, r5, r6, pc}

08009304 <__sfp_lock_acquire>:
 8009304:	4801      	ldr	r0, [pc, #4]	; (800930c <__sfp_lock_acquire+0x8>)
 8009306:	f000 b8c5 	b.w	8009494 <__retarget_lock_acquire_recursive>
 800930a:	bf00      	nop
 800930c:	20000435 	.word	0x20000435

08009310 <__sfp_lock_release>:
 8009310:	4801      	ldr	r0, [pc, #4]	; (8009318 <__sfp_lock_release+0x8>)
 8009312:	f000 b8c0 	b.w	8009496 <__retarget_lock_release_recursive>
 8009316:	bf00      	nop
 8009318:	20000435 	.word	0x20000435

0800931c <__sinit_lock_acquire>:
 800931c:	4801      	ldr	r0, [pc, #4]	; (8009324 <__sinit_lock_acquire+0x8>)
 800931e:	f000 b8b9 	b.w	8009494 <__retarget_lock_acquire_recursive>
 8009322:	bf00      	nop
 8009324:	20000436 	.word	0x20000436

08009328 <__sinit_lock_release>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__sinit_lock_release+0x8>)
 800932a:	f000 b8b4 	b.w	8009496 <__retarget_lock_release_recursive>
 800932e:	bf00      	nop
 8009330:	20000436 	.word	0x20000436

08009334 <__sinit>:
 8009334:	b510      	push	{r4, lr}
 8009336:	4604      	mov	r4, r0
 8009338:	f7ff fff0 	bl	800931c <__sinit_lock_acquire>
 800933c:	69a3      	ldr	r3, [r4, #24]
 800933e:	b11b      	cbz	r3, 8009348 <__sinit+0x14>
 8009340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009344:	f7ff bff0 	b.w	8009328 <__sinit_lock_release>
 8009348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800934c:	6523      	str	r3, [r4, #80]	; 0x50
 800934e:	4b13      	ldr	r3, [pc, #76]	; (800939c <__sinit+0x68>)
 8009350:	4a13      	ldr	r2, [pc, #76]	; (80093a0 <__sinit+0x6c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	62a2      	str	r2, [r4, #40]	; 0x28
 8009356:	42a3      	cmp	r3, r4
 8009358:	bf08      	it	eq
 800935a:	2301      	moveq	r3, #1
 800935c:	4620      	mov	r0, r4
 800935e:	bf08      	it	eq
 8009360:	61a3      	streq	r3, [r4, #24]
 8009362:	f000 f81f 	bl	80093a4 <__sfp>
 8009366:	6060      	str	r0, [r4, #4]
 8009368:	4620      	mov	r0, r4
 800936a:	f000 f81b 	bl	80093a4 <__sfp>
 800936e:	60a0      	str	r0, [r4, #8]
 8009370:	4620      	mov	r0, r4
 8009372:	f000 f817 	bl	80093a4 <__sfp>
 8009376:	2200      	movs	r2, #0
 8009378:	2104      	movs	r1, #4
 800937a:	60e0      	str	r0, [r4, #12]
 800937c:	6860      	ldr	r0, [r4, #4]
 800937e:	f7ff ff81 	bl	8009284 <std>
 8009382:	2201      	movs	r2, #1
 8009384:	2109      	movs	r1, #9
 8009386:	68a0      	ldr	r0, [r4, #8]
 8009388:	f7ff ff7c 	bl	8009284 <std>
 800938c:	2202      	movs	r2, #2
 800938e:	2112      	movs	r1, #18
 8009390:	68e0      	ldr	r0, [r4, #12]
 8009392:	f7ff ff77 	bl	8009284 <std>
 8009396:	2301      	movs	r3, #1
 8009398:	61a3      	str	r3, [r4, #24]
 800939a:	e7d1      	b.n	8009340 <__sinit+0xc>
 800939c:	0800a9cc 	.word	0x0800a9cc
 80093a0:	080092cd 	.word	0x080092cd

080093a4 <__sfp>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	4607      	mov	r7, r0
 80093a8:	f7ff ffac 	bl	8009304 <__sfp_lock_acquire>
 80093ac:	4b1e      	ldr	r3, [pc, #120]	; (8009428 <__sfp+0x84>)
 80093ae:	681e      	ldr	r6, [r3, #0]
 80093b0:	69b3      	ldr	r3, [r6, #24]
 80093b2:	b913      	cbnz	r3, 80093ba <__sfp+0x16>
 80093b4:	4630      	mov	r0, r6
 80093b6:	f7ff ffbd 	bl	8009334 <__sinit>
 80093ba:	3648      	adds	r6, #72	; 0x48
 80093bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	d503      	bpl.n	80093cc <__sfp+0x28>
 80093c4:	6833      	ldr	r3, [r6, #0]
 80093c6:	b30b      	cbz	r3, 800940c <__sfp+0x68>
 80093c8:	6836      	ldr	r6, [r6, #0]
 80093ca:	e7f7      	b.n	80093bc <__sfp+0x18>
 80093cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093d0:	b9d5      	cbnz	r5, 8009408 <__sfp+0x64>
 80093d2:	4b16      	ldr	r3, [pc, #88]	; (800942c <__sfp+0x88>)
 80093d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093d8:	60e3      	str	r3, [r4, #12]
 80093da:	6665      	str	r5, [r4, #100]	; 0x64
 80093dc:	f000 f859 	bl	8009492 <__retarget_lock_init_recursive>
 80093e0:	f7ff ff96 	bl	8009310 <__sfp_lock_release>
 80093e4:	2208      	movs	r2, #8
 80093e6:	4629      	mov	r1, r5
 80093e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093f0:	6025      	str	r5, [r4, #0]
 80093f2:	61a5      	str	r5, [r4, #24]
 80093f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093f8:	f7fc fe56 	bl	80060a8 <memset>
 80093fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009404:	4620      	mov	r0, r4
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009408:	3468      	adds	r4, #104	; 0x68
 800940a:	e7d9      	b.n	80093c0 <__sfp+0x1c>
 800940c:	2104      	movs	r1, #4
 800940e:	4638      	mov	r0, r7
 8009410:	f7ff ff62 	bl	80092d8 <__sfmoreglue>
 8009414:	4604      	mov	r4, r0
 8009416:	6030      	str	r0, [r6, #0]
 8009418:	2800      	cmp	r0, #0
 800941a:	d1d5      	bne.n	80093c8 <__sfp+0x24>
 800941c:	f7ff ff78 	bl	8009310 <__sfp_lock_release>
 8009420:	230c      	movs	r3, #12
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	e7ee      	b.n	8009404 <__sfp+0x60>
 8009426:	bf00      	nop
 8009428:	0800a9cc 	.word	0x0800a9cc
 800942c:	ffff0001 	.word	0xffff0001

08009430 <fiprintf>:
 8009430:	b40e      	push	{r1, r2, r3}
 8009432:	b503      	push	{r0, r1, lr}
 8009434:	4601      	mov	r1, r0
 8009436:	ab03      	add	r3, sp, #12
 8009438:	4805      	ldr	r0, [pc, #20]	; (8009450 <fiprintf+0x20>)
 800943a:	f853 2b04 	ldr.w	r2, [r3], #4
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	f000 f8a7 	bl	8009594 <_vfiprintf_r>
 8009446:	b002      	add	sp, #8
 8009448:	f85d eb04 	ldr.w	lr, [sp], #4
 800944c:	b003      	add	sp, #12
 800944e:	4770      	bx	lr
 8009450:	20000078 	.word	0x20000078

08009454 <_fwalk_reent>:
 8009454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009458:	4606      	mov	r6, r0
 800945a:	4688      	mov	r8, r1
 800945c:	2700      	movs	r7, #0
 800945e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009466:	f1b9 0901 	subs.w	r9, r9, #1
 800946a:	d505      	bpl.n	8009478 <_fwalk_reent+0x24>
 800946c:	6824      	ldr	r4, [r4, #0]
 800946e:	2c00      	cmp	r4, #0
 8009470:	d1f7      	bne.n	8009462 <_fwalk_reent+0xe>
 8009472:	4638      	mov	r0, r7
 8009474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009478:	89ab      	ldrh	r3, [r5, #12]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d907      	bls.n	800948e <_fwalk_reent+0x3a>
 800947e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009482:	3301      	adds	r3, #1
 8009484:	d003      	beq.n	800948e <_fwalk_reent+0x3a>
 8009486:	4629      	mov	r1, r5
 8009488:	4630      	mov	r0, r6
 800948a:	47c0      	blx	r8
 800948c:	4307      	orrs	r7, r0
 800948e:	3568      	adds	r5, #104	; 0x68
 8009490:	e7e9      	b.n	8009466 <_fwalk_reent+0x12>

08009492 <__retarget_lock_init_recursive>:
 8009492:	4770      	bx	lr

08009494 <__retarget_lock_acquire_recursive>:
 8009494:	4770      	bx	lr

08009496 <__retarget_lock_release_recursive>:
 8009496:	4770      	bx	lr

08009498 <memchr>:
 8009498:	4603      	mov	r3, r0
 800949a:	b510      	push	{r4, lr}
 800949c:	b2c9      	uxtb	r1, r1
 800949e:	4402      	add	r2, r0
 80094a0:	4293      	cmp	r3, r2
 80094a2:	4618      	mov	r0, r3
 80094a4:	d101      	bne.n	80094aa <memchr+0x12>
 80094a6:	2000      	movs	r0, #0
 80094a8:	e003      	b.n	80094b2 <memchr+0x1a>
 80094aa:	7804      	ldrb	r4, [r0, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	428c      	cmp	r4, r1
 80094b0:	d1f6      	bne.n	80094a0 <memchr+0x8>
 80094b2:	bd10      	pop	{r4, pc}

080094b4 <memmove>:
 80094b4:	4288      	cmp	r0, r1
 80094b6:	b510      	push	{r4, lr}
 80094b8:	eb01 0402 	add.w	r4, r1, r2
 80094bc:	d902      	bls.n	80094c4 <memmove+0x10>
 80094be:	4284      	cmp	r4, r0
 80094c0:	4623      	mov	r3, r4
 80094c2:	d807      	bhi.n	80094d4 <memmove+0x20>
 80094c4:	1e43      	subs	r3, r0, #1
 80094c6:	42a1      	cmp	r1, r4
 80094c8:	d008      	beq.n	80094dc <memmove+0x28>
 80094ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d2:	e7f8      	b.n	80094c6 <memmove+0x12>
 80094d4:	4601      	mov	r1, r0
 80094d6:	4402      	add	r2, r0
 80094d8:	428a      	cmp	r2, r1
 80094da:	d100      	bne.n	80094de <memmove+0x2a>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094e6:	e7f7      	b.n	80094d8 <memmove+0x24>

080094e8 <_realloc_r>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	4680      	mov	r8, r0
 80094ee:	4614      	mov	r4, r2
 80094f0:	460e      	mov	r6, r1
 80094f2:	b921      	cbnz	r1, 80094fe <_realloc_r+0x16>
 80094f4:	4611      	mov	r1, r2
 80094f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094fa:	f7fc be59 	b.w	80061b0 <_malloc_r>
 80094fe:	b92a      	cbnz	r2, 800950c <_realloc_r+0x24>
 8009500:	f7fc fdee 	bl	80060e0 <_free_r>
 8009504:	4625      	mov	r5, r4
 8009506:	4628      	mov	r0, r5
 8009508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800950c:	f000 fa9e 	bl	8009a4c <_malloc_usable_size_r>
 8009510:	4284      	cmp	r4, r0
 8009512:	4607      	mov	r7, r0
 8009514:	d802      	bhi.n	800951c <_realloc_r+0x34>
 8009516:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800951a:	d812      	bhi.n	8009542 <_realloc_r+0x5a>
 800951c:	4621      	mov	r1, r4
 800951e:	4640      	mov	r0, r8
 8009520:	f7fc fe46 	bl	80061b0 <_malloc_r>
 8009524:	4605      	mov	r5, r0
 8009526:	2800      	cmp	r0, #0
 8009528:	d0ed      	beq.n	8009506 <_realloc_r+0x1e>
 800952a:	42bc      	cmp	r4, r7
 800952c:	4622      	mov	r2, r4
 800952e:	4631      	mov	r1, r6
 8009530:	bf28      	it	cs
 8009532:	463a      	movcs	r2, r7
 8009534:	f7fc fdaa 	bl	800608c <memcpy>
 8009538:	4631      	mov	r1, r6
 800953a:	4640      	mov	r0, r8
 800953c:	f7fc fdd0 	bl	80060e0 <_free_r>
 8009540:	e7e1      	b.n	8009506 <_realloc_r+0x1e>
 8009542:	4635      	mov	r5, r6
 8009544:	e7df      	b.n	8009506 <_realloc_r+0x1e>

08009546 <__sfputc_r>:
 8009546:	6893      	ldr	r3, [r2, #8]
 8009548:	b410      	push	{r4}
 800954a:	3b01      	subs	r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	6093      	str	r3, [r2, #8]
 8009550:	da07      	bge.n	8009562 <__sfputc_r+0x1c>
 8009552:	6994      	ldr	r4, [r2, #24]
 8009554:	42a3      	cmp	r3, r4
 8009556:	db01      	blt.n	800955c <__sfputc_r+0x16>
 8009558:	290a      	cmp	r1, #10
 800955a:	d102      	bne.n	8009562 <__sfputc_r+0x1c>
 800955c:	bc10      	pop	{r4}
 800955e:	f000 b949 	b.w	80097f4 <__swbuf_r>
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	1c58      	adds	r0, r3, #1
 8009566:	6010      	str	r0, [r2, #0]
 8009568:	7019      	strb	r1, [r3, #0]
 800956a:	4608      	mov	r0, r1
 800956c:	bc10      	pop	{r4}
 800956e:	4770      	bx	lr

08009570 <__sfputs_r>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	4614      	mov	r4, r2
 8009578:	18d5      	adds	r5, r2, r3
 800957a:	42ac      	cmp	r4, r5
 800957c:	d101      	bne.n	8009582 <__sfputs_r+0x12>
 800957e:	2000      	movs	r0, #0
 8009580:	e007      	b.n	8009592 <__sfputs_r+0x22>
 8009582:	463a      	mov	r2, r7
 8009584:	4630      	mov	r0, r6
 8009586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958a:	f7ff ffdc 	bl	8009546 <__sfputc_r>
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	d1f3      	bne.n	800957a <__sfputs_r+0xa>
 8009592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009594 <_vfiprintf_r>:
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	460d      	mov	r5, r1
 800959a:	4614      	mov	r4, r2
 800959c:	4698      	mov	r8, r3
 800959e:	4606      	mov	r6, r0
 80095a0:	b09d      	sub	sp, #116	; 0x74
 80095a2:	b118      	cbz	r0, 80095ac <_vfiprintf_r+0x18>
 80095a4:	6983      	ldr	r3, [r0, #24]
 80095a6:	b90b      	cbnz	r3, 80095ac <_vfiprintf_r+0x18>
 80095a8:	f7ff fec4 	bl	8009334 <__sinit>
 80095ac:	4b89      	ldr	r3, [pc, #548]	; (80097d4 <_vfiprintf_r+0x240>)
 80095ae:	429d      	cmp	r5, r3
 80095b0:	d11b      	bne.n	80095ea <_vfiprintf_r+0x56>
 80095b2:	6875      	ldr	r5, [r6, #4]
 80095b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095b6:	07d9      	lsls	r1, r3, #31
 80095b8:	d405      	bmi.n	80095c6 <_vfiprintf_r+0x32>
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	059a      	lsls	r2, r3, #22
 80095be:	d402      	bmi.n	80095c6 <_vfiprintf_r+0x32>
 80095c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095c2:	f7ff ff67 	bl	8009494 <__retarget_lock_acquire_recursive>
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	071b      	lsls	r3, r3, #28
 80095ca:	d501      	bpl.n	80095d0 <_vfiprintf_r+0x3c>
 80095cc:	692b      	ldr	r3, [r5, #16]
 80095ce:	b9eb      	cbnz	r3, 800960c <_vfiprintf_r+0x78>
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f000 f960 	bl	8009898 <__swsetup_r>
 80095d8:	b1c0      	cbz	r0, 800960c <_vfiprintf_r+0x78>
 80095da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095dc:	07dc      	lsls	r4, r3, #31
 80095de:	d50e      	bpl.n	80095fe <_vfiprintf_r+0x6a>
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	b01d      	add	sp, #116	; 0x74
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	4b7b      	ldr	r3, [pc, #492]	; (80097d8 <_vfiprintf_r+0x244>)
 80095ec:	429d      	cmp	r5, r3
 80095ee:	d101      	bne.n	80095f4 <_vfiprintf_r+0x60>
 80095f0:	68b5      	ldr	r5, [r6, #8]
 80095f2:	e7df      	b.n	80095b4 <_vfiprintf_r+0x20>
 80095f4:	4b79      	ldr	r3, [pc, #484]	; (80097dc <_vfiprintf_r+0x248>)
 80095f6:	429d      	cmp	r5, r3
 80095f8:	bf08      	it	eq
 80095fa:	68f5      	ldreq	r5, [r6, #12]
 80095fc:	e7da      	b.n	80095b4 <_vfiprintf_r+0x20>
 80095fe:	89ab      	ldrh	r3, [r5, #12]
 8009600:	0598      	lsls	r0, r3, #22
 8009602:	d4ed      	bmi.n	80095e0 <_vfiprintf_r+0x4c>
 8009604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009606:	f7ff ff46 	bl	8009496 <__retarget_lock_release_recursive>
 800960a:	e7e9      	b.n	80095e0 <_vfiprintf_r+0x4c>
 800960c:	2300      	movs	r3, #0
 800960e:	9309      	str	r3, [sp, #36]	; 0x24
 8009610:	2320      	movs	r3, #32
 8009612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009616:	2330      	movs	r3, #48	; 0x30
 8009618:	f04f 0901 	mov.w	r9, #1
 800961c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009620:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80097e0 <_vfiprintf_r+0x24c>
 8009624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009628:	4623      	mov	r3, r4
 800962a:	469a      	mov	sl, r3
 800962c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009630:	b10a      	cbz	r2, 8009636 <_vfiprintf_r+0xa2>
 8009632:	2a25      	cmp	r2, #37	; 0x25
 8009634:	d1f9      	bne.n	800962a <_vfiprintf_r+0x96>
 8009636:	ebba 0b04 	subs.w	fp, sl, r4
 800963a:	d00b      	beq.n	8009654 <_vfiprintf_r+0xc0>
 800963c:	465b      	mov	r3, fp
 800963e:	4622      	mov	r2, r4
 8009640:	4629      	mov	r1, r5
 8009642:	4630      	mov	r0, r6
 8009644:	f7ff ff94 	bl	8009570 <__sfputs_r>
 8009648:	3001      	adds	r0, #1
 800964a:	f000 80aa 	beq.w	80097a2 <_vfiprintf_r+0x20e>
 800964e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009650:	445a      	add	r2, fp
 8009652:	9209      	str	r2, [sp, #36]	; 0x24
 8009654:	f89a 3000 	ldrb.w	r3, [sl]
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 80a2 	beq.w	80097a2 <_vfiprintf_r+0x20e>
 800965e:	2300      	movs	r3, #0
 8009660:	f04f 32ff 	mov.w	r2, #4294967295
 8009664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009668:	f10a 0a01 	add.w	sl, sl, #1
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	9307      	str	r3, [sp, #28]
 8009670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009674:	931a      	str	r3, [sp, #104]	; 0x68
 8009676:	4654      	mov	r4, sl
 8009678:	2205      	movs	r2, #5
 800967a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800967e:	4858      	ldr	r0, [pc, #352]	; (80097e0 <_vfiprintf_r+0x24c>)
 8009680:	f7ff ff0a 	bl	8009498 <memchr>
 8009684:	9a04      	ldr	r2, [sp, #16]
 8009686:	b9d8      	cbnz	r0, 80096c0 <_vfiprintf_r+0x12c>
 8009688:	06d1      	lsls	r1, r2, #27
 800968a:	bf44      	itt	mi
 800968c:	2320      	movmi	r3, #32
 800968e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009692:	0713      	lsls	r3, r2, #28
 8009694:	bf44      	itt	mi
 8009696:	232b      	movmi	r3, #43	; 0x2b
 8009698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800969c:	f89a 3000 	ldrb.w	r3, [sl]
 80096a0:	2b2a      	cmp	r3, #42	; 0x2a
 80096a2:	d015      	beq.n	80096d0 <_vfiprintf_r+0x13c>
 80096a4:	4654      	mov	r4, sl
 80096a6:	2000      	movs	r0, #0
 80096a8:	f04f 0c0a 	mov.w	ip, #10
 80096ac:	9a07      	ldr	r2, [sp, #28]
 80096ae:	4621      	mov	r1, r4
 80096b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096b4:	3b30      	subs	r3, #48	; 0x30
 80096b6:	2b09      	cmp	r3, #9
 80096b8:	d94e      	bls.n	8009758 <_vfiprintf_r+0x1c4>
 80096ba:	b1b0      	cbz	r0, 80096ea <_vfiprintf_r+0x156>
 80096bc:	9207      	str	r2, [sp, #28]
 80096be:	e014      	b.n	80096ea <_vfiprintf_r+0x156>
 80096c0:	eba0 0308 	sub.w	r3, r0, r8
 80096c4:	fa09 f303 	lsl.w	r3, r9, r3
 80096c8:	4313      	orrs	r3, r2
 80096ca:	46a2      	mov	sl, r4
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	e7d2      	b.n	8009676 <_vfiprintf_r+0xe2>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	1d19      	adds	r1, r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	9103      	str	r1, [sp, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfbb      	ittet	lt
 80096dc:	425b      	neglt	r3, r3
 80096de:	f042 0202 	orrlt.w	r2, r2, #2
 80096e2:	9307      	strge	r3, [sp, #28]
 80096e4:	9307      	strlt	r3, [sp, #28]
 80096e6:	bfb8      	it	lt
 80096e8:	9204      	strlt	r2, [sp, #16]
 80096ea:	7823      	ldrb	r3, [r4, #0]
 80096ec:	2b2e      	cmp	r3, #46	; 0x2e
 80096ee:	d10c      	bne.n	800970a <_vfiprintf_r+0x176>
 80096f0:	7863      	ldrb	r3, [r4, #1]
 80096f2:	2b2a      	cmp	r3, #42	; 0x2a
 80096f4:	d135      	bne.n	8009762 <_vfiprintf_r+0x1ce>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	3402      	adds	r4, #2
 80096fa:	1d1a      	adds	r2, r3, #4
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	9203      	str	r2, [sp, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	bfb8      	it	lt
 8009704:	f04f 33ff 	movlt.w	r3, #4294967295
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80097e4 <_vfiprintf_r+0x250>
 800970e:	2203      	movs	r2, #3
 8009710:	4650      	mov	r0, sl
 8009712:	7821      	ldrb	r1, [r4, #0]
 8009714:	f7ff fec0 	bl	8009498 <memchr>
 8009718:	b140      	cbz	r0, 800972c <_vfiprintf_r+0x198>
 800971a:	2340      	movs	r3, #64	; 0x40
 800971c:	eba0 000a 	sub.w	r0, r0, sl
 8009720:	fa03 f000 	lsl.w	r0, r3, r0
 8009724:	9b04      	ldr	r3, [sp, #16]
 8009726:	3401      	adds	r4, #1
 8009728:	4303      	orrs	r3, r0
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009730:	2206      	movs	r2, #6
 8009732:	482d      	ldr	r0, [pc, #180]	; (80097e8 <_vfiprintf_r+0x254>)
 8009734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009738:	f7ff feae 	bl	8009498 <memchr>
 800973c:	2800      	cmp	r0, #0
 800973e:	d03f      	beq.n	80097c0 <_vfiprintf_r+0x22c>
 8009740:	4b2a      	ldr	r3, [pc, #168]	; (80097ec <_vfiprintf_r+0x258>)
 8009742:	bb1b      	cbnz	r3, 800978c <_vfiprintf_r+0x1f8>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	3307      	adds	r3, #7
 8009748:	f023 0307 	bic.w	r3, r3, #7
 800974c:	3308      	adds	r3, #8
 800974e:	9303      	str	r3, [sp, #12]
 8009750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009752:	443b      	add	r3, r7
 8009754:	9309      	str	r3, [sp, #36]	; 0x24
 8009756:	e767      	b.n	8009628 <_vfiprintf_r+0x94>
 8009758:	460c      	mov	r4, r1
 800975a:	2001      	movs	r0, #1
 800975c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009760:	e7a5      	b.n	80096ae <_vfiprintf_r+0x11a>
 8009762:	2300      	movs	r3, #0
 8009764:	f04f 0c0a 	mov.w	ip, #10
 8009768:	4619      	mov	r1, r3
 800976a:	3401      	adds	r4, #1
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	4620      	mov	r0, r4
 8009770:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009774:	3a30      	subs	r2, #48	; 0x30
 8009776:	2a09      	cmp	r2, #9
 8009778:	d903      	bls.n	8009782 <_vfiprintf_r+0x1ee>
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0c5      	beq.n	800970a <_vfiprintf_r+0x176>
 800977e:	9105      	str	r1, [sp, #20]
 8009780:	e7c3      	b.n	800970a <_vfiprintf_r+0x176>
 8009782:	4604      	mov	r4, r0
 8009784:	2301      	movs	r3, #1
 8009786:	fb0c 2101 	mla	r1, ip, r1, r2
 800978a:	e7f0      	b.n	800976e <_vfiprintf_r+0x1da>
 800978c:	ab03      	add	r3, sp, #12
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	462a      	mov	r2, r5
 8009792:	4630      	mov	r0, r6
 8009794:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <_vfiprintf_r+0x25c>)
 8009796:	a904      	add	r1, sp, #16
 8009798:	f3af 8000 	nop.w
 800979c:	4607      	mov	r7, r0
 800979e:	1c78      	adds	r0, r7, #1
 80097a0:	d1d6      	bne.n	8009750 <_vfiprintf_r+0x1bc>
 80097a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097a4:	07d9      	lsls	r1, r3, #31
 80097a6:	d405      	bmi.n	80097b4 <_vfiprintf_r+0x220>
 80097a8:	89ab      	ldrh	r3, [r5, #12]
 80097aa:	059a      	lsls	r2, r3, #22
 80097ac:	d402      	bmi.n	80097b4 <_vfiprintf_r+0x220>
 80097ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097b0:	f7ff fe71 	bl	8009496 <__retarget_lock_release_recursive>
 80097b4:	89ab      	ldrh	r3, [r5, #12]
 80097b6:	065b      	lsls	r3, r3, #25
 80097b8:	f53f af12 	bmi.w	80095e0 <_vfiprintf_r+0x4c>
 80097bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097be:	e711      	b.n	80095e4 <_vfiprintf_r+0x50>
 80097c0:	ab03      	add	r3, sp, #12
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	462a      	mov	r2, r5
 80097c6:	4630      	mov	r0, r6
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <_vfiprintf_r+0x25c>)
 80097ca:	a904      	add	r1, sp, #16
 80097cc:	f7ff f86a 	bl	80088a4 <_printf_i>
 80097d0:	e7e4      	b.n	800979c <_vfiprintf_r+0x208>
 80097d2:	bf00      	nop
 80097d4:	0800ae00 	.word	0x0800ae00
 80097d8:	0800ae20 	.word	0x0800ae20
 80097dc:	0800ade0 	.word	0x0800ade0
 80097e0:	0800ac54 	.word	0x0800ac54
 80097e4:	0800ac5a 	.word	0x0800ac5a
 80097e8:	0800ac5e 	.word	0x0800ac5e
 80097ec:	00000000 	.word	0x00000000
 80097f0:	08009571 	.word	0x08009571

080097f4 <__swbuf_r>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	460e      	mov	r6, r1
 80097f8:	4614      	mov	r4, r2
 80097fa:	4605      	mov	r5, r0
 80097fc:	b118      	cbz	r0, 8009806 <__swbuf_r+0x12>
 80097fe:	6983      	ldr	r3, [r0, #24]
 8009800:	b90b      	cbnz	r3, 8009806 <__swbuf_r+0x12>
 8009802:	f7ff fd97 	bl	8009334 <__sinit>
 8009806:	4b21      	ldr	r3, [pc, #132]	; (800988c <__swbuf_r+0x98>)
 8009808:	429c      	cmp	r4, r3
 800980a:	d12b      	bne.n	8009864 <__swbuf_r+0x70>
 800980c:	686c      	ldr	r4, [r5, #4]
 800980e:	69a3      	ldr	r3, [r4, #24]
 8009810:	60a3      	str	r3, [r4, #8]
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	071a      	lsls	r2, r3, #28
 8009816:	d52f      	bpl.n	8009878 <__swbuf_r+0x84>
 8009818:	6923      	ldr	r3, [r4, #16]
 800981a:	b36b      	cbz	r3, 8009878 <__swbuf_r+0x84>
 800981c:	6923      	ldr	r3, [r4, #16]
 800981e:	6820      	ldr	r0, [r4, #0]
 8009820:	b2f6      	uxtb	r6, r6
 8009822:	1ac0      	subs	r0, r0, r3
 8009824:	6963      	ldr	r3, [r4, #20]
 8009826:	4637      	mov	r7, r6
 8009828:	4283      	cmp	r3, r0
 800982a:	dc04      	bgt.n	8009836 <__swbuf_r+0x42>
 800982c:	4621      	mov	r1, r4
 800982e:	4628      	mov	r0, r5
 8009830:	f7ff fcec 	bl	800920c <_fflush_r>
 8009834:	bb30      	cbnz	r0, 8009884 <__swbuf_r+0x90>
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	3001      	adds	r0, #1
 800983a:	3b01      	subs	r3, #1
 800983c:	60a3      	str	r3, [r4, #8]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	1c5a      	adds	r2, r3, #1
 8009842:	6022      	str	r2, [r4, #0]
 8009844:	701e      	strb	r6, [r3, #0]
 8009846:	6963      	ldr	r3, [r4, #20]
 8009848:	4283      	cmp	r3, r0
 800984a:	d004      	beq.n	8009856 <__swbuf_r+0x62>
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	07db      	lsls	r3, r3, #31
 8009850:	d506      	bpl.n	8009860 <__swbuf_r+0x6c>
 8009852:	2e0a      	cmp	r6, #10
 8009854:	d104      	bne.n	8009860 <__swbuf_r+0x6c>
 8009856:	4621      	mov	r1, r4
 8009858:	4628      	mov	r0, r5
 800985a:	f7ff fcd7 	bl	800920c <_fflush_r>
 800985e:	b988      	cbnz	r0, 8009884 <__swbuf_r+0x90>
 8009860:	4638      	mov	r0, r7
 8009862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009864:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <__swbuf_r+0x9c>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d101      	bne.n	800986e <__swbuf_r+0x7a>
 800986a:	68ac      	ldr	r4, [r5, #8]
 800986c:	e7cf      	b.n	800980e <__swbuf_r+0x1a>
 800986e:	4b09      	ldr	r3, [pc, #36]	; (8009894 <__swbuf_r+0xa0>)
 8009870:	429c      	cmp	r4, r3
 8009872:	bf08      	it	eq
 8009874:	68ec      	ldreq	r4, [r5, #12]
 8009876:	e7ca      	b.n	800980e <__swbuf_r+0x1a>
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f80c 	bl	8009898 <__swsetup_r>
 8009880:	2800      	cmp	r0, #0
 8009882:	d0cb      	beq.n	800981c <__swbuf_r+0x28>
 8009884:	f04f 37ff 	mov.w	r7, #4294967295
 8009888:	e7ea      	b.n	8009860 <__swbuf_r+0x6c>
 800988a:	bf00      	nop
 800988c:	0800ae00 	.word	0x0800ae00
 8009890:	0800ae20 	.word	0x0800ae20
 8009894:	0800ade0 	.word	0x0800ade0

08009898 <__swsetup_r>:
 8009898:	4b32      	ldr	r3, [pc, #200]	; (8009964 <__swsetup_r+0xcc>)
 800989a:	b570      	push	{r4, r5, r6, lr}
 800989c:	681d      	ldr	r5, [r3, #0]
 800989e:	4606      	mov	r6, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	b125      	cbz	r5, 80098ae <__swsetup_r+0x16>
 80098a4:	69ab      	ldr	r3, [r5, #24]
 80098a6:	b913      	cbnz	r3, 80098ae <__swsetup_r+0x16>
 80098a8:	4628      	mov	r0, r5
 80098aa:	f7ff fd43 	bl	8009334 <__sinit>
 80098ae:	4b2e      	ldr	r3, [pc, #184]	; (8009968 <__swsetup_r+0xd0>)
 80098b0:	429c      	cmp	r4, r3
 80098b2:	d10f      	bne.n	80098d4 <__swsetup_r+0x3c>
 80098b4:	686c      	ldr	r4, [r5, #4]
 80098b6:	89a3      	ldrh	r3, [r4, #12]
 80098b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098bc:	0719      	lsls	r1, r3, #28
 80098be:	d42c      	bmi.n	800991a <__swsetup_r+0x82>
 80098c0:	06dd      	lsls	r5, r3, #27
 80098c2:	d411      	bmi.n	80098e8 <__swsetup_r+0x50>
 80098c4:	2309      	movs	r3, #9
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	e03e      	b.n	8009952 <__swsetup_r+0xba>
 80098d4:	4b25      	ldr	r3, [pc, #148]	; (800996c <__swsetup_r+0xd4>)
 80098d6:	429c      	cmp	r4, r3
 80098d8:	d101      	bne.n	80098de <__swsetup_r+0x46>
 80098da:	68ac      	ldr	r4, [r5, #8]
 80098dc:	e7eb      	b.n	80098b6 <__swsetup_r+0x1e>
 80098de:	4b24      	ldr	r3, [pc, #144]	; (8009970 <__swsetup_r+0xd8>)
 80098e0:	429c      	cmp	r4, r3
 80098e2:	bf08      	it	eq
 80098e4:	68ec      	ldreq	r4, [r5, #12]
 80098e6:	e7e6      	b.n	80098b6 <__swsetup_r+0x1e>
 80098e8:	0758      	lsls	r0, r3, #29
 80098ea:	d512      	bpl.n	8009912 <__swsetup_r+0x7a>
 80098ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098ee:	b141      	cbz	r1, 8009902 <__swsetup_r+0x6a>
 80098f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098f4:	4299      	cmp	r1, r3
 80098f6:	d002      	beq.n	80098fe <__swsetup_r+0x66>
 80098f8:	4630      	mov	r0, r6
 80098fa:	f7fc fbf1 	bl	80060e0 <_free_r>
 80098fe:	2300      	movs	r3, #0
 8009900:	6363      	str	r3, [r4, #52]	; 0x34
 8009902:	89a3      	ldrh	r3, [r4, #12]
 8009904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	2300      	movs	r3, #0
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	6923      	ldr	r3, [r4, #16]
 8009910:	6023      	str	r3, [r4, #0]
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f043 0308 	orr.w	r3, r3, #8
 8009918:	81a3      	strh	r3, [r4, #12]
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	b94b      	cbnz	r3, 8009932 <__swsetup_r+0x9a>
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009928:	d003      	beq.n	8009932 <__swsetup_r+0x9a>
 800992a:	4621      	mov	r1, r4
 800992c:	4630      	mov	r0, r6
 800992e:	f000 f84d 	bl	80099cc <__smakebuf_r>
 8009932:	89a0      	ldrh	r0, [r4, #12]
 8009934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009938:	f010 0301 	ands.w	r3, r0, #1
 800993c:	d00a      	beq.n	8009954 <__swsetup_r+0xbc>
 800993e:	2300      	movs	r3, #0
 8009940:	60a3      	str	r3, [r4, #8]
 8009942:	6963      	ldr	r3, [r4, #20]
 8009944:	425b      	negs	r3, r3
 8009946:	61a3      	str	r3, [r4, #24]
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	b943      	cbnz	r3, 800995e <__swsetup_r+0xc6>
 800994c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009950:	d1ba      	bne.n	80098c8 <__swsetup_r+0x30>
 8009952:	bd70      	pop	{r4, r5, r6, pc}
 8009954:	0781      	lsls	r1, r0, #30
 8009956:	bf58      	it	pl
 8009958:	6963      	ldrpl	r3, [r4, #20]
 800995a:	60a3      	str	r3, [r4, #8]
 800995c:	e7f4      	b.n	8009948 <__swsetup_r+0xb0>
 800995e:	2000      	movs	r0, #0
 8009960:	e7f7      	b.n	8009952 <__swsetup_r+0xba>
 8009962:	bf00      	nop
 8009964:	20000078 	.word	0x20000078
 8009968:	0800ae00 	.word	0x0800ae00
 800996c:	0800ae20 	.word	0x0800ae20
 8009970:	0800ade0 	.word	0x0800ade0

08009974 <abort>:
 8009974:	2006      	movs	r0, #6
 8009976:	b508      	push	{r3, lr}
 8009978:	f000 f898 	bl	8009aac <raise>
 800997c:	2001      	movs	r0, #1
 800997e:	f7f8 fbb4 	bl	80020ea <_exit>

08009982 <__swhatbuf_r>:
 8009982:	b570      	push	{r4, r5, r6, lr}
 8009984:	460e      	mov	r6, r1
 8009986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998a:	4614      	mov	r4, r2
 800998c:	2900      	cmp	r1, #0
 800998e:	461d      	mov	r5, r3
 8009990:	b096      	sub	sp, #88	; 0x58
 8009992:	da08      	bge.n	80099a6 <__swhatbuf_r+0x24>
 8009994:	2200      	movs	r2, #0
 8009996:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800999a:	602a      	str	r2, [r5, #0]
 800999c:	061a      	lsls	r2, r3, #24
 800999e:	d410      	bmi.n	80099c2 <__swhatbuf_r+0x40>
 80099a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099a4:	e00e      	b.n	80099c4 <__swhatbuf_r+0x42>
 80099a6:	466a      	mov	r2, sp
 80099a8:	f000 f89c 	bl	8009ae4 <_fstat_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	dbf1      	blt.n	8009994 <__swhatbuf_r+0x12>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099ba:	425a      	negs	r2, r3
 80099bc:	415a      	adcs	r2, r3
 80099be:	602a      	str	r2, [r5, #0]
 80099c0:	e7ee      	b.n	80099a0 <__swhatbuf_r+0x1e>
 80099c2:	2340      	movs	r3, #64	; 0x40
 80099c4:	2000      	movs	r0, #0
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	b016      	add	sp, #88	; 0x58
 80099ca:	bd70      	pop	{r4, r5, r6, pc}

080099cc <__smakebuf_r>:
 80099cc:	898b      	ldrh	r3, [r1, #12]
 80099ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099d0:	079d      	lsls	r5, r3, #30
 80099d2:	4606      	mov	r6, r0
 80099d4:	460c      	mov	r4, r1
 80099d6:	d507      	bpl.n	80099e8 <__smakebuf_r+0x1c>
 80099d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	6123      	str	r3, [r4, #16]
 80099e0:	2301      	movs	r3, #1
 80099e2:	6163      	str	r3, [r4, #20]
 80099e4:	b002      	add	sp, #8
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	466a      	mov	r2, sp
 80099ea:	ab01      	add	r3, sp, #4
 80099ec:	f7ff ffc9 	bl	8009982 <__swhatbuf_r>
 80099f0:	9900      	ldr	r1, [sp, #0]
 80099f2:	4605      	mov	r5, r0
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7fc fbdb 	bl	80061b0 <_malloc_r>
 80099fa:	b948      	cbnz	r0, 8009a10 <__smakebuf_r+0x44>
 80099fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a00:	059a      	lsls	r2, r3, #22
 8009a02:	d4ef      	bmi.n	80099e4 <__smakebuf_r+0x18>
 8009a04:	f023 0303 	bic.w	r3, r3, #3
 8009a08:	f043 0302 	orr.w	r3, r3, #2
 8009a0c:	81a3      	strh	r3, [r4, #12]
 8009a0e:	e7e3      	b.n	80099d8 <__smakebuf_r+0xc>
 8009a10:	4b0d      	ldr	r3, [pc, #52]	; (8009a48 <__smakebuf_r+0x7c>)
 8009a12:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	6020      	str	r0, [r4, #0]
 8009a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1c:	81a3      	strh	r3, [r4, #12]
 8009a1e:	9b00      	ldr	r3, [sp, #0]
 8009a20:	6120      	str	r0, [r4, #16]
 8009a22:	6163      	str	r3, [r4, #20]
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	b15b      	cbz	r3, 8009a40 <__smakebuf_r+0x74>
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a2e:	f000 f86b 	bl	8009b08 <_isatty_r>
 8009a32:	b128      	cbz	r0, 8009a40 <__smakebuf_r+0x74>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f023 0303 	bic.w	r3, r3, #3
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	81a3      	strh	r3, [r4, #12]
 8009a40:	89a0      	ldrh	r0, [r4, #12]
 8009a42:	4305      	orrs	r5, r0
 8009a44:	81a5      	strh	r5, [r4, #12]
 8009a46:	e7cd      	b.n	80099e4 <__smakebuf_r+0x18>
 8009a48:	080092cd 	.word	0x080092cd

08009a4c <_malloc_usable_size_r>:
 8009a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a50:	1f18      	subs	r0, r3, #4
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	bfbc      	itt	lt
 8009a56:	580b      	ldrlt	r3, [r1, r0]
 8009a58:	18c0      	addlt	r0, r0, r3
 8009a5a:	4770      	bx	lr

08009a5c <_raise_r>:
 8009a5c:	291f      	cmp	r1, #31
 8009a5e:	b538      	push	{r3, r4, r5, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	d904      	bls.n	8009a70 <_raise_r+0x14>
 8009a66:	2316      	movs	r3, #22
 8009a68:	6003      	str	r3, [r0, #0]
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a72:	b112      	cbz	r2, 8009a7a <_raise_r+0x1e>
 8009a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a78:	b94b      	cbnz	r3, 8009a8e <_raise_r+0x32>
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 f830 	bl	8009ae0 <_getpid_r>
 8009a80:	462a      	mov	r2, r5
 8009a82:	4601      	mov	r1, r0
 8009a84:	4620      	mov	r0, r4
 8009a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a8a:	f000 b817 	b.w	8009abc <_kill_r>
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d00a      	beq.n	8009aa8 <_raise_r+0x4c>
 8009a92:	1c59      	adds	r1, r3, #1
 8009a94:	d103      	bne.n	8009a9e <_raise_r+0x42>
 8009a96:	2316      	movs	r3, #22
 8009a98:	6003      	str	r3, [r0, #0]
 8009a9a:	2001      	movs	r0, #1
 8009a9c:	e7e7      	b.n	8009a6e <_raise_r+0x12>
 8009a9e:	2400      	movs	r4, #0
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009aa6:	4798      	blx	r3
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	e7e0      	b.n	8009a6e <_raise_r+0x12>

08009aac <raise>:
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <raise+0xc>)
 8009aae:	4601      	mov	r1, r0
 8009ab0:	6818      	ldr	r0, [r3, #0]
 8009ab2:	f7ff bfd3 	b.w	8009a5c <_raise_r>
 8009ab6:	bf00      	nop
 8009ab8:	20000078 	.word	0x20000078

08009abc <_kill_r>:
 8009abc:	b538      	push	{r3, r4, r5, lr}
 8009abe:	2300      	movs	r3, #0
 8009ac0:	4d06      	ldr	r5, [pc, #24]	; (8009adc <_kill_r+0x20>)
 8009ac2:	4604      	mov	r4, r0
 8009ac4:	4608      	mov	r0, r1
 8009ac6:	4611      	mov	r1, r2
 8009ac8:	602b      	str	r3, [r5, #0]
 8009aca:	f7f8 fafe 	bl	80020ca <_kill>
 8009ace:	1c43      	adds	r3, r0, #1
 8009ad0:	d102      	bne.n	8009ad8 <_kill_r+0x1c>
 8009ad2:	682b      	ldr	r3, [r5, #0]
 8009ad4:	b103      	cbz	r3, 8009ad8 <_kill_r+0x1c>
 8009ad6:	6023      	str	r3, [r4, #0]
 8009ad8:	bd38      	pop	{r3, r4, r5, pc}
 8009ada:	bf00      	nop
 8009adc:	20000430 	.word	0x20000430

08009ae0 <_getpid_r>:
 8009ae0:	f7f8 baec 	b.w	80020bc <_getpid>

08009ae4 <_fstat_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4d06      	ldr	r5, [pc, #24]	; (8009b04 <_fstat_r+0x20>)
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	4611      	mov	r1, r2
 8009af0:	602b      	str	r3, [r5, #0]
 8009af2:	f7f8 fb48 	bl	8002186 <_fstat>
 8009af6:	1c43      	adds	r3, r0, #1
 8009af8:	d102      	bne.n	8009b00 <_fstat_r+0x1c>
 8009afa:	682b      	ldr	r3, [r5, #0]
 8009afc:	b103      	cbz	r3, 8009b00 <_fstat_r+0x1c>
 8009afe:	6023      	str	r3, [r4, #0]
 8009b00:	bd38      	pop	{r3, r4, r5, pc}
 8009b02:	bf00      	nop
 8009b04:	20000430 	.word	0x20000430

08009b08 <_isatty_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4d05      	ldr	r5, [pc, #20]	; (8009b24 <_isatty_r+0x1c>)
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	602b      	str	r3, [r5, #0]
 8009b14:	f7f8 fb46 	bl	80021a4 <_isatty>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d102      	bne.n	8009b22 <_isatty_r+0x1a>
 8009b1c:	682b      	ldr	r3, [r5, #0]
 8009b1e:	b103      	cbz	r3, 8009b22 <_isatty_r+0x1a>
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	bd38      	pop	{r3, r4, r5, pc}
 8009b24:	20000430 	.word	0x20000430

08009b28 <pow>:
 8009b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b2c:	4614      	mov	r4, r2
 8009b2e:	461d      	mov	r5, r3
 8009b30:	4680      	mov	r8, r0
 8009b32:	4689      	mov	r9, r1
 8009b34:	f000 f860 	bl	8009bf8 <__ieee754_pow>
 8009b38:	4622      	mov	r2, r4
 8009b3a:	4606      	mov	r6, r0
 8009b3c:	460f      	mov	r7, r1
 8009b3e:	462b      	mov	r3, r5
 8009b40:	4620      	mov	r0, r4
 8009b42:	4629      	mov	r1, r5
 8009b44:	f7f6 ffce 	bl	8000ae4 <__aeabi_dcmpun>
 8009b48:	bbc8      	cbnz	r0, 8009bbe <pow+0x96>
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4640      	mov	r0, r8
 8009b50:	4649      	mov	r1, r9
 8009b52:	f7f6 ff95 	bl	8000a80 <__aeabi_dcmpeq>
 8009b56:	b1b8      	cbz	r0, 8009b88 <pow+0x60>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	4620      	mov	r0, r4
 8009b5e:	4629      	mov	r1, r5
 8009b60:	f7f6 ff8e 	bl	8000a80 <__aeabi_dcmpeq>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d141      	bne.n	8009bec <pow+0xc4>
 8009b68:	4620      	mov	r0, r4
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f000 fe39 	bl	800a7e2 <finite>
 8009b70:	b328      	cbz	r0, 8009bbe <pow+0x96>
 8009b72:	2200      	movs	r2, #0
 8009b74:	2300      	movs	r3, #0
 8009b76:	4620      	mov	r0, r4
 8009b78:	4629      	mov	r1, r5
 8009b7a:	f7f6 ff8b 	bl	8000a94 <__aeabi_dcmplt>
 8009b7e:	b1f0      	cbz	r0, 8009bbe <pow+0x96>
 8009b80:	f7fc fa30 	bl	8005fe4 <__errno>
 8009b84:	2322      	movs	r3, #34	; 0x22
 8009b86:	e019      	b.n	8009bbc <pow+0x94>
 8009b88:	4630      	mov	r0, r6
 8009b8a:	4639      	mov	r1, r7
 8009b8c:	f000 fe29 	bl	800a7e2 <finite>
 8009b90:	b9c8      	cbnz	r0, 8009bc6 <pow+0x9e>
 8009b92:	4640      	mov	r0, r8
 8009b94:	4649      	mov	r1, r9
 8009b96:	f000 fe24 	bl	800a7e2 <finite>
 8009b9a:	b1a0      	cbz	r0, 8009bc6 <pow+0x9e>
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	f000 fe1f 	bl	800a7e2 <finite>
 8009ba4:	b178      	cbz	r0, 8009bc6 <pow+0x9e>
 8009ba6:	4632      	mov	r2, r6
 8009ba8:	463b      	mov	r3, r7
 8009baa:	4630      	mov	r0, r6
 8009bac:	4639      	mov	r1, r7
 8009bae:	f7f6 ff99 	bl	8000ae4 <__aeabi_dcmpun>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	d0e4      	beq.n	8009b80 <pow+0x58>
 8009bb6:	f7fc fa15 	bl	8005fe4 <__errno>
 8009bba:	2321      	movs	r3, #33	; 0x21
 8009bbc:	6003      	str	r3, [r0, #0]
 8009bbe:	4630      	mov	r0, r6
 8009bc0:	4639      	mov	r1, r7
 8009bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4630      	mov	r0, r6
 8009bcc:	4639      	mov	r1, r7
 8009bce:	f7f6 ff57 	bl	8000a80 <__aeabi_dcmpeq>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d0f3      	beq.n	8009bbe <pow+0x96>
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f000 fe02 	bl	800a7e2 <finite>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	d0ed      	beq.n	8009bbe <pow+0x96>
 8009be2:	4620      	mov	r0, r4
 8009be4:	4629      	mov	r1, r5
 8009be6:	f000 fdfc 	bl	800a7e2 <finite>
 8009bea:	e7c8      	b.n	8009b7e <pow+0x56>
 8009bec:	2600      	movs	r6, #0
 8009bee:	4f01      	ldr	r7, [pc, #4]	; (8009bf4 <pow+0xcc>)
 8009bf0:	e7e5      	b.n	8009bbe <pow+0x96>
 8009bf2:	bf00      	nop
 8009bf4:	3ff00000 	.word	0x3ff00000

08009bf8 <__ieee754_pow>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	b093      	sub	sp, #76	; 0x4c
 8009bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c02:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8009c06:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009c0a:	4689      	mov	r9, r1
 8009c0c:	ea56 0102 	orrs.w	r1, r6, r2
 8009c10:	4680      	mov	r8, r0
 8009c12:	d111      	bne.n	8009c38 <__ieee754_pow+0x40>
 8009c14:	1803      	adds	r3, r0, r0
 8009c16:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8009c1a:	4152      	adcs	r2, r2
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	4b82      	ldr	r3, [pc, #520]	; (8009e28 <__ieee754_pow+0x230>)
 8009c20:	4193      	sbcs	r3, r2
 8009c22:	f080 84b9 	bcs.w	800a598 <__ieee754_pow+0x9a0>
 8009c26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fb09 	bl	8000244 <__adddf3>
 8009c32:	4683      	mov	fp, r0
 8009c34:	468c      	mov	ip, r1
 8009c36:	e06f      	b.n	8009d18 <__ieee754_pow+0x120>
 8009c38:	4b7c      	ldr	r3, [pc, #496]	; (8009e2c <__ieee754_pow+0x234>)
 8009c3a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8009c3e:	429c      	cmp	r4, r3
 8009c40:	464d      	mov	r5, r9
 8009c42:	4682      	mov	sl, r0
 8009c44:	dc06      	bgt.n	8009c54 <__ieee754_pow+0x5c>
 8009c46:	d101      	bne.n	8009c4c <__ieee754_pow+0x54>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d1ec      	bne.n	8009c26 <__ieee754_pow+0x2e>
 8009c4c:	429e      	cmp	r6, r3
 8009c4e:	dc01      	bgt.n	8009c54 <__ieee754_pow+0x5c>
 8009c50:	d10f      	bne.n	8009c72 <__ieee754_pow+0x7a>
 8009c52:	b172      	cbz	r2, 8009c72 <__ieee754_pow+0x7a>
 8009c54:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009c58:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009c5c:	ea55 050a 	orrs.w	r5, r5, sl
 8009c60:	d1e1      	bne.n	8009c26 <__ieee754_pow+0x2e>
 8009c62:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009c66:	18db      	adds	r3, r3, r3
 8009c68:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009c6c:	4152      	adcs	r2, r2
 8009c6e:	429d      	cmp	r5, r3
 8009c70:	e7d5      	b.n	8009c1e <__ieee754_pow+0x26>
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	da39      	bge.n	8009cea <__ieee754_pow+0xf2>
 8009c76:	4b6e      	ldr	r3, [pc, #440]	; (8009e30 <__ieee754_pow+0x238>)
 8009c78:	429e      	cmp	r6, r3
 8009c7a:	dc52      	bgt.n	8009d22 <__ieee754_pow+0x12a>
 8009c7c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009c80:	429e      	cmp	r6, r3
 8009c82:	f340 849c 	ble.w	800a5be <__ieee754_pow+0x9c6>
 8009c86:	1533      	asrs	r3, r6, #20
 8009c88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009c8c:	2b14      	cmp	r3, #20
 8009c8e:	dd0f      	ble.n	8009cb0 <__ieee754_pow+0xb8>
 8009c90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009c94:	fa22 f103 	lsr.w	r1, r2, r3
 8009c98:	fa01 f303 	lsl.w	r3, r1, r3
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	f040 848e 	bne.w	800a5be <__ieee754_pow+0x9c6>
 8009ca2:	f001 0101 	and.w	r1, r1, #1
 8009ca6:	f1c1 0302 	rsb	r3, r1, #2
 8009caa:	9300      	str	r3, [sp, #0]
 8009cac:	b182      	cbz	r2, 8009cd0 <__ieee754_pow+0xd8>
 8009cae:	e05d      	b.n	8009d6c <__ieee754_pow+0x174>
 8009cb0:	2a00      	cmp	r2, #0
 8009cb2:	d159      	bne.n	8009d68 <__ieee754_pow+0x170>
 8009cb4:	f1c3 0314 	rsb	r3, r3, #20
 8009cb8:	fa46 f103 	asr.w	r1, r6, r3
 8009cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc0:	42b3      	cmp	r3, r6
 8009cc2:	f040 8479 	bne.w	800a5b8 <__ieee754_pow+0x9c0>
 8009cc6:	f001 0101 	and.w	r1, r1, #1
 8009cca:	f1c1 0302 	rsb	r3, r1, #2
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	4b58      	ldr	r3, [pc, #352]	; (8009e34 <__ieee754_pow+0x23c>)
 8009cd2:	429e      	cmp	r6, r3
 8009cd4:	d132      	bne.n	8009d3c <__ieee754_pow+0x144>
 8009cd6:	2f00      	cmp	r7, #0
 8009cd8:	f280 846a 	bge.w	800a5b0 <__ieee754_pow+0x9b8>
 8009cdc:	4642      	mov	r2, r8
 8009cde:	464b      	mov	r3, r9
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	4954      	ldr	r1, [pc, #336]	; (8009e34 <__ieee754_pow+0x23c>)
 8009ce4:	f7f6 fd8e 	bl	8000804 <__aeabi_ddiv>
 8009ce8:	e7a3      	b.n	8009c32 <__ieee754_pow+0x3a>
 8009cea:	2300      	movs	r3, #0
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	d13c      	bne.n	8009d6c <__ieee754_pow+0x174>
 8009cf2:	4b4e      	ldr	r3, [pc, #312]	; (8009e2c <__ieee754_pow+0x234>)
 8009cf4:	429e      	cmp	r6, r3
 8009cf6:	d1eb      	bne.n	8009cd0 <__ieee754_pow+0xd8>
 8009cf8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009cfc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009d00:	ea53 030a 	orrs.w	r3, r3, sl
 8009d04:	f000 8448 	beq.w	800a598 <__ieee754_pow+0x9a0>
 8009d08:	4b4b      	ldr	r3, [pc, #300]	; (8009e38 <__ieee754_pow+0x240>)
 8009d0a:	429c      	cmp	r4, r3
 8009d0c:	dd0b      	ble.n	8009d26 <__ieee754_pow+0x12e>
 8009d0e:	2f00      	cmp	r7, #0
 8009d10:	f2c0 8448 	blt.w	800a5a4 <__ieee754_pow+0x9ac>
 8009d14:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009d18:	4658      	mov	r0, fp
 8009d1a:	4661      	mov	r1, ip
 8009d1c:	b013      	add	sp, #76	; 0x4c
 8009d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d22:	2302      	movs	r3, #2
 8009d24:	e7e2      	b.n	8009cec <__ieee754_pow+0xf4>
 8009d26:	2f00      	cmp	r7, #0
 8009d28:	f04f 0b00 	mov.w	fp, #0
 8009d2c:	f04f 0c00 	mov.w	ip, #0
 8009d30:	daf2      	bge.n	8009d18 <__ieee754_pow+0x120>
 8009d32:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8009d36:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8009d3a:	e7ed      	b.n	8009d18 <__ieee754_pow+0x120>
 8009d3c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009d40:	d106      	bne.n	8009d50 <__ieee754_pow+0x158>
 8009d42:	4642      	mov	r2, r8
 8009d44:	464b      	mov	r3, r9
 8009d46:	4640      	mov	r0, r8
 8009d48:	4649      	mov	r1, r9
 8009d4a:	f7f6 fc31 	bl	80005b0 <__aeabi_dmul>
 8009d4e:	e770      	b.n	8009c32 <__ieee754_pow+0x3a>
 8009d50:	4b3a      	ldr	r3, [pc, #232]	; (8009e3c <__ieee754_pow+0x244>)
 8009d52:	429f      	cmp	r7, r3
 8009d54:	d10a      	bne.n	8009d6c <__ieee754_pow+0x174>
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	db08      	blt.n	8009d6c <__ieee754_pow+0x174>
 8009d5a:	4640      	mov	r0, r8
 8009d5c:	4649      	mov	r1, r9
 8009d5e:	b013      	add	sp, #76	; 0x4c
 8009d60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d64:	f000 bc5e 	b.w	800a624 <__ieee754_sqrt>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	4640      	mov	r0, r8
 8009d6e:	4649      	mov	r1, r9
 8009d70:	f000 fd34 	bl	800a7dc <fabs>
 8009d74:	4683      	mov	fp, r0
 8009d76:	468c      	mov	ip, r1
 8009d78:	f1ba 0f00 	cmp.w	sl, #0
 8009d7c:	d128      	bne.n	8009dd0 <__ieee754_pow+0x1d8>
 8009d7e:	b124      	cbz	r4, 8009d8a <__ieee754_pow+0x192>
 8009d80:	4b2c      	ldr	r3, [pc, #176]	; (8009e34 <__ieee754_pow+0x23c>)
 8009d82:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d122      	bne.n	8009dd0 <__ieee754_pow+0x1d8>
 8009d8a:	2f00      	cmp	r7, #0
 8009d8c:	da07      	bge.n	8009d9e <__ieee754_pow+0x1a6>
 8009d8e:	465a      	mov	r2, fp
 8009d90:	4663      	mov	r3, ip
 8009d92:	2000      	movs	r0, #0
 8009d94:	4927      	ldr	r1, [pc, #156]	; (8009e34 <__ieee754_pow+0x23c>)
 8009d96:	f7f6 fd35 	bl	8000804 <__aeabi_ddiv>
 8009d9a:	4683      	mov	fp, r0
 8009d9c:	468c      	mov	ip, r1
 8009d9e:	2d00      	cmp	r5, #0
 8009da0:	daba      	bge.n	8009d18 <__ieee754_pow+0x120>
 8009da2:	9b00      	ldr	r3, [sp, #0]
 8009da4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009da8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009dac:	4323      	orrs	r3, r4
 8009dae:	d108      	bne.n	8009dc2 <__ieee754_pow+0x1ca>
 8009db0:	465a      	mov	r2, fp
 8009db2:	4663      	mov	r3, ip
 8009db4:	4658      	mov	r0, fp
 8009db6:	4661      	mov	r1, ip
 8009db8:	f7f6 fa42 	bl	8000240 <__aeabi_dsub>
 8009dbc:	4602      	mov	r2, r0
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	e790      	b.n	8009ce4 <__ieee754_pow+0xec>
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d1a7      	bne.n	8009d18 <__ieee754_pow+0x120>
 8009dc8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009dcc:	469c      	mov	ip, r3
 8009dce:	e7a3      	b.n	8009d18 <__ieee754_pow+0x120>
 8009dd0:	0feb      	lsrs	r3, r5, #31
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dd8:	9b00      	ldr	r3, [sp, #0]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	d104      	bne.n	8009de8 <__ieee754_pow+0x1f0>
 8009dde:	4642      	mov	r2, r8
 8009de0:	464b      	mov	r3, r9
 8009de2:	4640      	mov	r0, r8
 8009de4:	4649      	mov	r1, r9
 8009de6:	e7e7      	b.n	8009db8 <__ieee754_pow+0x1c0>
 8009de8:	4b15      	ldr	r3, [pc, #84]	; (8009e40 <__ieee754_pow+0x248>)
 8009dea:	429e      	cmp	r6, r3
 8009dec:	f340 80f6 	ble.w	8009fdc <__ieee754_pow+0x3e4>
 8009df0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009df4:	429e      	cmp	r6, r3
 8009df6:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <__ieee754_pow+0x240>)
 8009df8:	dd09      	ble.n	8009e0e <__ieee754_pow+0x216>
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	dc0c      	bgt.n	8009e18 <__ieee754_pow+0x220>
 8009dfe:	2f00      	cmp	r7, #0
 8009e00:	da0c      	bge.n	8009e1c <__ieee754_pow+0x224>
 8009e02:	2000      	movs	r0, #0
 8009e04:	b013      	add	sp, #76	; 0x4c
 8009e06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	f000 bce2 	b.w	800a7d2 <__math_oflow>
 8009e0e:	429c      	cmp	r4, r3
 8009e10:	dbf5      	blt.n	8009dfe <__ieee754_pow+0x206>
 8009e12:	4b08      	ldr	r3, [pc, #32]	; (8009e34 <__ieee754_pow+0x23c>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	dd15      	ble.n	8009e44 <__ieee754_pow+0x24c>
 8009e18:	2f00      	cmp	r7, #0
 8009e1a:	dcf2      	bgt.n	8009e02 <__ieee754_pow+0x20a>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	b013      	add	sp, #76	; 0x4c
 8009e20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	f000 bcd0 	b.w	800a7c8 <__math_uflow>
 8009e28:	fff00000 	.word	0xfff00000
 8009e2c:	7ff00000 	.word	0x7ff00000
 8009e30:	433fffff 	.word	0x433fffff
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	3fefffff 	.word	0x3fefffff
 8009e3c:	3fe00000 	.word	0x3fe00000
 8009e40:	41e00000 	.word	0x41e00000
 8009e44:	4661      	mov	r1, ip
 8009e46:	2200      	movs	r2, #0
 8009e48:	4658      	mov	r0, fp
 8009e4a:	4b5f      	ldr	r3, [pc, #380]	; (8009fc8 <__ieee754_pow+0x3d0>)
 8009e4c:	f7f6 f9f8 	bl	8000240 <__aeabi_dsub>
 8009e50:	a355      	add	r3, pc, #340	; (adr r3, 8009fa8 <__ieee754_pow+0x3b0>)
 8009e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e56:	4604      	mov	r4, r0
 8009e58:	460d      	mov	r5, r1
 8009e5a:	f7f6 fba9 	bl	80005b0 <__aeabi_dmul>
 8009e5e:	a354      	add	r3, pc, #336	; (adr r3, 8009fb0 <__ieee754_pow+0x3b8>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	4620      	mov	r0, r4
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	f7f6 fba0 	bl	80005b0 <__aeabi_dmul>
 8009e70:	2200      	movs	r2, #0
 8009e72:	4682      	mov	sl, r0
 8009e74:	468b      	mov	fp, r1
 8009e76:	4620      	mov	r0, r4
 8009e78:	4629      	mov	r1, r5
 8009e7a:	4b54      	ldr	r3, [pc, #336]	; (8009fcc <__ieee754_pow+0x3d4>)
 8009e7c:	f7f6 fb98 	bl	80005b0 <__aeabi_dmul>
 8009e80:	4602      	mov	r2, r0
 8009e82:	460b      	mov	r3, r1
 8009e84:	a14c      	add	r1, pc, #304	; (adr r1, 8009fb8 <__ieee754_pow+0x3c0>)
 8009e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8a:	f7f6 f9d9 	bl	8000240 <__aeabi_dsub>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	462b      	mov	r3, r5
 8009e92:	f7f6 fb8d 	bl	80005b0 <__aeabi_dmul>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	494c      	ldr	r1, [pc, #304]	; (8009fd0 <__ieee754_pow+0x3d8>)
 8009e9e:	f7f6 f9cf 	bl	8000240 <__aeabi_dsub>
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	4680      	mov	r8, r0
 8009ea8:	4689      	mov	r9, r1
 8009eaa:	4620      	mov	r0, r4
 8009eac:	4629      	mov	r1, r5
 8009eae:	f7f6 fb7f 	bl	80005b0 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	4649      	mov	r1, r9
 8009eba:	f7f6 fb79 	bl	80005b0 <__aeabi_dmul>
 8009ebe:	a340      	add	r3, pc, #256	; (adr r3, 8009fc0 <__ieee754_pow+0x3c8>)
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fb74 	bl	80005b0 <__aeabi_dmul>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4650      	mov	r0, sl
 8009ece:	4659      	mov	r1, fp
 8009ed0:	f7f6 f9b6 	bl	8000240 <__aeabi_dsub>
 8009ed4:	f04f 0a00 	mov.w	sl, #0
 8009ed8:	4602      	mov	r2, r0
 8009eda:	460b      	mov	r3, r1
 8009edc:	4604      	mov	r4, r0
 8009ede:	460d      	mov	r5, r1
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 f9ae 	bl	8000244 <__adddf3>
 8009ee8:	4632      	mov	r2, r6
 8009eea:	463b      	mov	r3, r7
 8009eec:	4650      	mov	r0, sl
 8009eee:	468b      	mov	fp, r1
 8009ef0:	f7f6 f9a6 	bl	8000240 <__aeabi_dsub>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f9a0 	bl	8000240 <__aeabi_dsub>
 8009f00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f04:	9b00      	ldr	r3, [sp, #0]
 8009f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	f04f 0600 	mov.w	r6, #0
 8009f10:	f04f 0200 	mov.w	r2, #0
 8009f14:	bf0c      	ite	eq
 8009f16:	4b2f      	ldreq	r3, [pc, #188]	; (8009fd4 <__ieee754_pow+0x3dc>)
 8009f18:	4b2b      	ldrne	r3, [pc, #172]	; (8009fc8 <__ieee754_pow+0x3d0>)
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	460d      	mov	r5, r1
 8009f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f22:	e9cd 2300 	strd	r2, r3, [sp]
 8009f26:	4632      	mov	r2, r6
 8009f28:	463b      	mov	r3, r7
 8009f2a:	f7f6 f989 	bl	8000240 <__aeabi_dsub>
 8009f2e:	4652      	mov	r2, sl
 8009f30:	465b      	mov	r3, fp
 8009f32:	f7f6 fb3d 	bl	80005b0 <__aeabi_dmul>
 8009f36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 fb35 	bl	80005b0 <__aeabi_dmul>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 f979 	bl	8000244 <__adddf3>
 8009f52:	4632      	mov	r2, r6
 8009f54:	463b      	mov	r3, r7
 8009f56:	4680      	mov	r8, r0
 8009f58:	4689      	mov	r9, r1
 8009f5a:	4650      	mov	r0, sl
 8009f5c:	4659      	mov	r1, fp
 8009f5e:	f7f6 fb27 	bl	80005b0 <__aeabi_dmul>
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	460b      	mov	r3, r1
 8009f68:	4602      	mov	r2, r0
 8009f6a:	4649      	mov	r1, r9
 8009f6c:	4640      	mov	r0, r8
 8009f6e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009f72:	f7f6 f967 	bl	8000244 <__adddf3>
 8009f76:	4b18      	ldr	r3, [pc, #96]	; (8009fd8 <__ieee754_pow+0x3e0>)
 8009f78:	4682      	mov	sl, r0
 8009f7a:	4299      	cmp	r1, r3
 8009f7c:	460f      	mov	r7, r1
 8009f7e:	460e      	mov	r6, r1
 8009f80:	f340 82e5 	ble.w	800a54e <__ieee754_pow+0x956>
 8009f84:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009f88:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009f8c:	4303      	orrs	r3, r0
 8009f8e:	f000 81df 	beq.w	800a350 <__ieee754_pow+0x758>
 8009f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f7f6 fd7b 	bl	8000a94 <__aeabi_dcmplt>
 8009f9e:	3800      	subs	r0, #0
 8009fa0:	bf18      	it	ne
 8009fa2:	2001      	movne	r0, #1
 8009fa4:	e72e      	b.n	8009e04 <__ieee754_pow+0x20c>
 8009fa6:	bf00      	nop
 8009fa8:	60000000 	.word	0x60000000
 8009fac:	3ff71547 	.word	0x3ff71547
 8009fb0:	f85ddf44 	.word	0xf85ddf44
 8009fb4:	3e54ae0b 	.word	0x3e54ae0b
 8009fb8:	55555555 	.word	0x55555555
 8009fbc:	3fd55555 	.word	0x3fd55555
 8009fc0:	652b82fe 	.word	0x652b82fe
 8009fc4:	3ff71547 	.word	0x3ff71547
 8009fc8:	3ff00000 	.word	0x3ff00000
 8009fcc:	3fd00000 	.word	0x3fd00000
 8009fd0:	3fe00000 	.word	0x3fe00000
 8009fd4:	bff00000 	.word	0xbff00000
 8009fd8:	408fffff 	.word	0x408fffff
 8009fdc:	4bd2      	ldr	r3, [pc, #840]	; (800a328 <__ieee754_pow+0x730>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	402b      	ands	r3, r5
 8009fe2:	b943      	cbnz	r3, 8009ff6 <__ieee754_pow+0x3fe>
 8009fe4:	4658      	mov	r0, fp
 8009fe6:	4661      	mov	r1, ip
 8009fe8:	4bd0      	ldr	r3, [pc, #832]	; (800a32c <__ieee754_pow+0x734>)
 8009fea:	f7f6 fae1 	bl	80005b0 <__aeabi_dmul>
 8009fee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009ff2:	4683      	mov	fp, r0
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	1523      	asrs	r3, r4, #20
 8009ff8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ffc:	4413      	add	r3, r2
 8009ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 800a000:	4bcb      	ldr	r3, [pc, #812]	; (800a330 <__ieee754_pow+0x738>)
 800a002:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a006:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a00a:	429c      	cmp	r4, r3
 800a00c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a010:	dd08      	ble.n	800a024 <__ieee754_pow+0x42c>
 800a012:	4bc8      	ldr	r3, [pc, #800]	; (800a334 <__ieee754_pow+0x73c>)
 800a014:	429c      	cmp	r4, r3
 800a016:	f340 8199 	ble.w	800a34c <__ieee754_pow+0x754>
 800a01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a01c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a020:	3301      	adds	r3, #1
 800a022:	930b      	str	r3, [sp, #44]	; 0x2c
 800a024:	2600      	movs	r6, #0
 800a026:	00f3      	lsls	r3, r6, #3
 800a028:	930d      	str	r3, [sp, #52]	; 0x34
 800a02a:	4bc3      	ldr	r3, [pc, #780]	; (800a338 <__ieee754_pow+0x740>)
 800a02c:	4658      	mov	r0, fp
 800a02e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a032:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a036:	4629      	mov	r1, r5
 800a038:	461a      	mov	r2, r3
 800a03a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800a03e:	4623      	mov	r3, r4
 800a040:	f7f6 f8fe 	bl	8000240 <__aeabi_dsub>
 800a044:	46da      	mov	sl, fp
 800a046:	462b      	mov	r3, r5
 800a048:	4652      	mov	r2, sl
 800a04a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a04e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a052:	f7f6 f8f7 	bl	8000244 <__adddf3>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	2000      	movs	r0, #0
 800a05c:	49b7      	ldr	r1, [pc, #732]	; (800a33c <__ieee754_pow+0x744>)
 800a05e:	f7f6 fbd1 	bl	8000804 <__aeabi_ddiv>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a06a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a06e:	f7f6 fa9f 	bl	80005b0 <__aeabi_dmul>
 800a072:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a076:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800a07a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a07e:	2300      	movs	r3, #0
 800a080:	2200      	movs	r2, #0
 800a082:	46ab      	mov	fp, r5
 800a084:	106d      	asrs	r5, r5, #1
 800a086:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a090:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a094:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800a098:	4640      	mov	r0, r8
 800a09a:	4649      	mov	r1, r9
 800a09c:	4614      	mov	r4, r2
 800a09e:	461d      	mov	r5, r3
 800a0a0:	f7f6 fa86 	bl	80005b0 <__aeabi_dmul>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a0ac:	f7f6 f8c8 	bl	8000240 <__aeabi_dsub>
 800a0b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	460f      	mov	r7, r1
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	f7f6 f8c0 	bl	8000240 <__aeabi_dsub>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	4659      	mov	r1, fp
 800a0c8:	f7f6 f8ba 	bl	8000240 <__aeabi_dsub>
 800a0cc:	4642      	mov	r2, r8
 800a0ce:	464b      	mov	r3, r9
 800a0d0:	f7f6 fa6e 	bl	80005b0 <__aeabi_dmul>
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	4630      	mov	r0, r6
 800a0da:	4639      	mov	r1, r7
 800a0dc:	f7f6 f8b0 	bl	8000240 <__aeabi_dsub>
 800a0e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a0e4:	f7f6 fa64 	bl	80005b0 <__aeabi_dmul>
 800a0e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f7f6 fa5c 	bl	80005b0 <__aeabi_dmul>
 800a0f8:	a379      	add	r3, pc, #484	; (adr r3, 800a2e0 <__ieee754_pow+0x6e8>)
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	4604      	mov	r4, r0
 800a100:	460d      	mov	r5, r1
 800a102:	f7f6 fa55 	bl	80005b0 <__aeabi_dmul>
 800a106:	a378      	add	r3, pc, #480	; (adr r3, 800a2e8 <__ieee754_pow+0x6f0>)
 800a108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10c:	f7f6 f89a 	bl	8000244 <__adddf3>
 800a110:	4622      	mov	r2, r4
 800a112:	462b      	mov	r3, r5
 800a114:	f7f6 fa4c 	bl	80005b0 <__aeabi_dmul>
 800a118:	a375      	add	r3, pc, #468	; (adr r3, 800a2f0 <__ieee754_pow+0x6f8>)
 800a11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11e:	f7f6 f891 	bl	8000244 <__adddf3>
 800a122:	4622      	mov	r2, r4
 800a124:	462b      	mov	r3, r5
 800a126:	f7f6 fa43 	bl	80005b0 <__aeabi_dmul>
 800a12a:	a373      	add	r3, pc, #460	; (adr r3, 800a2f8 <__ieee754_pow+0x700>)
 800a12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a130:	f7f6 f888 	bl	8000244 <__adddf3>
 800a134:	4622      	mov	r2, r4
 800a136:	462b      	mov	r3, r5
 800a138:	f7f6 fa3a 	bl	80005b0 <__aeabi_dmul>
 800a13c:	a370      	add	r3, pc, #448	; (adr r3, 800a300 <__ieee754_pow+0x708>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f87f 	bl	8000244 <__adddf3>
 800a146:	4622      	mov	r2, r4
 800a148:	462b      	mov	r3, r5
 800a14a:	f7f6 fa31 	bl	80005b0 <__aeabi_dmul>
 800a14e:	a36e      	add	r3, pc, #440	; (adr r3, 800a308 <__ieee754_pow+0x710>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 f876 	bl	8000244 <__adddf3>
 800a158:	4622      	mov	r2, r4
 800a15a:	4606      	mov	r6, r0
 800a15c:	460f      	mov	r7, r1
 800a15e:	462b      	mov	r3, r5
 800a160:	4620      	mov	r0, r4
 800a162:	4629      	mov	r1, r5
 800a164:	f7f6 fa24 	bl	80005b0 <__aeabi_dmul>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4630      	mov	r0, r6
 800a16e:	4639      	mov	r1, r7
 800a170:	f7f6 fa1e 	bl	80005b0 <__aeabi_dmul>
 800a174:	4604      	mov	r4, r0
 800a176:	460d      	mov	r5, r1
 800a178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	f7f6 f860 	bl	8000244 <__adddf3>
 800a184:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a188:	f7f6 fa12 	bl	80005b0 <__aeabi_dmul>
 800a18c:	4622      	mov	r2, r4
 800a18e:	462b      	mov	r3, r5
 800a190:	f7f6 f858 	bl	8000244 <__adddf3>
 800a194:	4642      	mov	r2, r8
 800a196:	4606      	mov	r6, r0
 800a198:	460f      	mov	r7, r1
 800a19a:	464b      	mov	r3, r9
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f6 fa06 	bl	80005b0 <__aeabi_dmul>
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4b66      	ldr	r3, [pc, #408]	; (800a340 <__ieee754_pow+0x748>)
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	468b      	mov	fp, r1
 800a1ac:	f7f6 f84a 	bl	8000244 <__adddf3>
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	463b      	mov	r3, r7
 800a1b4:	f7f6 f846 	bl	8000244 <__adddf3>
 800a1b8:	2400      	movs	r4, #0
 800a1ba:	460d      	mov	r5, r1
 800a1bc:	4622      	mov	r2, r4
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f6 f9f4 	bl	80005b0 <__aeabi_dmul>
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	4689      	mov	r9, r1
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4b5b      	ldr	r3, [pc, #364]	; (800a340 <__ieee754_pow+0x748>)
 800a1d4:	f7f6 f834 	bl	8000240 <__aeabi_dsub>
 800a1d8:	4652      	mov	r2, sl
 800a1da:	465b      	mov	r3, fp
 800a1dc:	f7f6 f830 	bl	8000240 <__aeabi_dsub>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 f82a 	bl	8000240 <__aeabi_dsub>
 800a1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1f0:	f7f6 f9de 	bl	80005b0 <__aeabi_dmul>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	460f      	mov	r7, r1
 800a1fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a1fe:	462b      	mov	r3, r5
 800a200:	f7f6 f9d6 	bl	80005b0 <__aeabi_dmul>
 800a204:	4602      	mov	r2, r0
 800a206:	460b      	mov	r3, r1
 800a208:	4630      	mov	r0, r6
 800a20a:	4639      	mov	r1, r7
 800a20c:	f7f6 f81a 	bl	8000244 <__adddf3>
 800a210:	2400      	movs	r4, #0
 800a212:	4606      	mov	r6, r0
 800a214:	460f      	mov	r7, r1
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 f811 	bl	8000244 <__adddf3>
 800a222:	a33b      	add	r3, pc, #236	; (adr r3, 800a310 <__ieee754_pow+0x718>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	4620      	mov	r0, r4
 800a22a:	460d      	mov	r5, r1
 800a22c:	f7f6 f9c0 	bl	80005b0 <__aeabi_dmul>
 800a230:	4642      	mov	r2, r8
 800a232:	464b      	mov	r3, r9
 800a234:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a238:	4620      	mov	r0, r4
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7f6 f800 	bl	8000240 <__aeabi_dsub>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4630      	mov	r0, r6
 800a246:	4639      	mov	r1, r7
 800a248:	f7f5 fffa 	bl	8000240 <__aeabi_dsub>
 800a24c:	a332      	add	r3, pc, #200	; (adr r3, 800a318 <__ieee754_pow+0x720>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f7f6 f9ad 	bl	80005b0 <__aeabi_dmul>
 800a256:	a332      	add	r3, pc, #200	; (adr r3, 800a320 <__ieee754_pow+0x728>)
 800a258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25c:	4606      	mov	r6, r0
 800a25e:	460f      	mov	r7, r1
 800a260:	4620      	mov	r0, r4
 800a262:	4629      	mov	r1, r5
 800a264:	f7f6 f9a4 	bl	80005b0 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f7f5 ffe8 	bl	8000244 <__adddf3>
 800a274:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a276:	4b33      	ldr	r3, [pc, #204]	; (800a344 <__ieee754_pow+0x74c>)
 800a278:	f04f 0a00 	mov.w	sl, #0
 800a27c:	4413      	add	r3, r2
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	f7f5 ffdf 	bl	8000244 <__adddf3>
 800a286:	4680      	mov	r8, r0
 800a288:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a28a:	4689      	mov	r9, r1
 800a28c:	f7f6 f926 	bl	80004dc <__aeabi_i2d>
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a296:	4b2c      	ldr	r3, [pc, #176]	; (800a348 <__ieee754_pow+0x750>)
 800a298:	4413      	add	r3, r2
 800a29a:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a29e:	4642      	mov	r2, r8
 800a2a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a2a4:	464b      	mov	r3, r9
 800a2a6:	f7f5 ffcd 	bl	8000244 <__adddf3>
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	f7f5 ffc9 	bl	8000244 <__adddf3>
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	f7f5 ffc5 	bl	8000244 <__adddf3>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	462b      	mov	r3, r5
 800a2be:	4650      	mov	r0, sl
 800a2c0:	468b      	mov	fp, r1
 800a2c2:	f7f5 ffbd 	bl	8000240 <__aeabi_dsub>
 800a2c6:	4632      	mov	r2, r6
 800a2c8:	463b      	mov	r3, r7
 800a2ca:	f7f5 ffb9 	bl	8000240 <__aeabi_dsub>
 800a2ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2d2:	f7f5 ffb5 	bl	8000240 <__aeabi_dsub>
 800a2d6:	4602      	mov	r2, r0
 800a2d8:	460b      	mov	r3, r1
 800a2da:	4640      	mov	r0, r8
 800a2dc:	4649      	mov	r1, r9
 800a2de:	e60d      	b.n	8009efc <__ieee754_pow+0x304>
 800a2e0:	4a454eef 	.word	0x4a454eef
 800a2e4:	3fca7e28 	.word	0x3fca7e28
 800a2e8:	93c9db65 	.word	0x93c9db65
 800a2ec:	3fcd864a 	.word	0x3fcd864a
 800a2f0:	a91d4101 	.word	0xa91d4101
 800a2f4:	3fd17460 	.word	0x3fd17460
 800a2f8:	518f264d 	.word	0x518f264d
 800a2fc:	3fd55555 	.word	0x3fd55555
 800a300:	db6fabff 	.word	0xdb6fabff
 800a304:	3fdb6db6 	.word	0x3fdb6db6
 800a308:	33333303 	.word	0x33333303
 800a30c:	3fe33333 	.word	0x3fe33333
 800a310:	e0000000 	.word	0xe0000000
 800a314:	3feec709 	.word	0x3feec709
 800a318:	dc3a03fd 	.word	0xdc3a03fd
 800a31c:	3feec709 	.word	0x3feec709
 800a320:	145b01f5 	.word	0x145b01f5
 800a324:	be3e2fe0 	.word	0xbe3e2fe0
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	43400000 	.word	0x43400000
 800a330:	0003988e 	.word	0x0003988e
 800a334:	000bb679 	.word	0x000bb679
 800a338:	0800ae40 	.word	0x0800ae40
 800a33c:	3ff00000 	.word	0x3ff00000
 800a340:	40080000 	.word	0x40080000
 800a344:	0800ae60 	.word	0x0800ae60
 800a348:	0800ae50 	.word	0x0800ae50
 800a34c:	2601      	movs	r6, #1
 800a34e:	e66a      	b.n	800a026 <__ieee754_pow+0x42e>
 800a350:	a39d      	add	r3, pc, #628	; (adr r3, 800a5c8 <__ieee754_pow+0x9d0>)
 800a352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a356:	4640      	mov	r0, r8
 800a358:	4649      	mov	r1, r9
 800a35a:	f7f5 ff73 	bl	8000244 <__adddf3>
 800a35e:	4622      	mov	r2, r4
 800a360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a364:	462b      	mov	r3, r5
 800a366:	4650      	mov	r0, sl
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f5 ff69 	bl	8000240 <__aeabi_dsub>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a376:	f7f6 fbab 	bl	8000ad0 <__aeabi_dcmpgt>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f47f ae09 	bne.w	8009f92 <__ieee754_pow+0x39a>
 800a380:	4aa3      	ldr	r2, [pc, #652]	; (800a610 <__ieee754_pow+0xa18>)
 800a382:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800a386:	4293      	cmp	r3, r2
 800a388:	f340 8101 	ble.w	800a58e <__ieee754_pow+0x996>
 800a38c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a390:	2000      	movs	r0, #0
 800a392:	151b      	asrs	r3, r3, #20
 800a394:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a398:	fa4a f303 	asr.w	r3, sl, r3
 800a39c:	4433      	add	r3, r6
 800a39e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a3a2:	4f9c      	ldr	r7, [pc, #624]	; (800a614 <__ieee754_pow+0xa1c>)
 800a3a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a3a8:	4117      	asrs	r7, r2
 800a3aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a3ae:	ea23 0107 	bic.w	r1, r3, r7
 800a3b2:	f1c2 0214 	rsb	r2, r2, #20
 800a3b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	fa4a fa02 	asr.w	sl, sl, r2
 800a3c0:	2e00      	cmp	r6, #0
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	bfb8      	it	lt
 800a3ca:	f1ca 0a00 	rsblt	sl, sl, #0
 800a3ce:	f7f5 ff37 	bl	8000240 <__aeabi_dsub>
 800a3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3da:	2400      	movs	r4, #0
 800a3dc:	4642      	mov	r2, r8
 800a3de:	464b      	mov	r3, r9
 800a3e0:	f7f5 ff30 	bl	8000244 <__adddf3>
 800a3e4:	a37a      	add	r3, pc, #488	; (adr r3, 800a5d0 <__ieee754_pow+0x9d8>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	460d      	mov	r5, r1
 800a3ee:	f7f6 f8df 	bl	80005b0 <__aeabi_dmul>
 800a3f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460f      	mov	r7, r1
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	f7f5 ff1f 	bl	8000240 <__aeabi_dsub>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f5 ff19 	bl	8000240 <__aeabi_dsub>
 800a40e:	a372      	add	r3, pc, #456	; (adr r3, 800a5d8 <__ieee754_pow+0x9e0>)
 800a410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a414:	f7f6 f8cc 	bl	80005b0 <__aeabi_dmul>
 800a418:	a371      	add	r3, pc, #452	; (adr r3, 800a5e0 <__ieee754_pow+0x9e8>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	4680      	mov	r8, r0
 800a420:	4689      	mov	r9, r1
 800a422:	4620      	mov	r0, r4
 800a424:	4629      	mov	r1, r5
 800a426:	f7f6 f8c3 	bl	80005b0 <__aeabi_dmul>
 800a42a:	4602      	mov	r2, r0
 800a42c:	460b      	mov	r3, r1
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f5 ff07 	bl	8000244 <__adddf3>
 800a436:	4604      	mov	r4, r0
 800a438:	460d      	mov	r5, r1
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4630      	mov	r0, r6
 800a440:	4639      	mov	r1, r7
 800a442:	f7f5 feff 	bl	8000244 <__adddf3>
 800a446:	4632      	mov	r2, r6
 800a448:	463b      	mov	r3, r7
 800a44a:	4680      	mov	r8, r0
 800a44c:	4689      	mov	r9, r1
 800a44e:	f7f5 fef7 	bl	8000240 <__aeabi_dsub>
 800a452:	4602      	mov	r2, r0
 800a454:	460b      	mov	r3, r1
 800a456:	4620      	mov	r0, r4
 800a458:	4629      	mov	r1, r5
 800a45a:	f7f5 fef1 	bl	8000240 <__aeabi_dsub>
 800a45e:	4642      	mov	r2, r8
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	464b      	mov	r3, r9
 800a466:	4640      	mov	r0, r8
 800a468:	4649      	mov	r1, r9
 800a46a:	f7f6 f8a1 	bl	80005b0 <__aeabi_dmul>
 800a46e:	a35e      	add	r3, pc, #376	; (adr r3, 800a5e8 <__ieee754_pow+0x9f0>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	4604      	mov	r4, r0
 800a476:	460d      	mov	r5, r1
 800a478:	f7f6 f89a 	bl	80005b0 <__aeabi_dmul>
 800a47c:	a35c      	add	r3, pc, #368	; (adr r3, 800a5f0 <__ieee754_pow+0x9f8>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f5 fedd 	bl	8000240 <__aeabi_dsub>
 800a486:	4622      	mov	r2, r4
 800a488:	462b      	mov	r3, r5
 800a48a:	f7f6 f891 	bl	80005b0 <__aeabi_dmul>
 800a48e:	a35a      	add	r3, pc, #360	; (adr r3, 800a5f8 <__ieee754_pow+0xa00>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f5 fed6 	bl	8000244 <__adddf3>
 800a498:	4622      	mov	r2, r4
 800a49a:	462b      	mov	r3, r5
 800a49c:	f7f6 f888 	bl	80005b0 <__aeabi_dmul>
 800a4a0:	a357      	add	r3, pc, #348	; (adr r3, 800a600 <__ieee754_pow+0xa08>)
 800a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a6:	f7f5 fecb 	bl	8000240 <__aeabi_dsub>
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	462b      	mov	r3, r5
 800a4ae:	f7f6 f87f 	bl	80005b0 <__aeabi_dmul>
 800a4b2:	a355      	add	r3, pc, #340	; (adr r3, 800a608 <__ieee754_pow+0xa10>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f5 fec4 	bl	8000244 <__adddf3>
 800a4bc:	4622      	mov	r2, r4
 800a4be:	462b      	mov	r3, r5
 800a4c0:	f7f6 f876 	bl	80005b0 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4640      	mov	r0, r8
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	f7f5 feb8 	bl	8000240 <__aeabi_dsub>
 800a4d0:	4604      	mov	r4, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	f7f6 f868 	bl	80005b0 <__aeabi_dmul>
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4ea:	4620      	mov	r0, r4
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	f7f5 fea7 	bl	8000240 <__aeabi_dsub>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4fa:	f7f6 f983 	bl	8000804 <__aeabi_ddiv>
 800a4fe:	4632      	mov	r2, r6
 800a500:	4604      	mov	r4, r0
 800a502:	460d      	mov	r5, r1
 800a504:	463b      	mov	r3, r7
 800a506:	4640      	mov	r0, r8
 800a508:	4649      	mov	r1, r9
 800a50a:	f7f6 f851 	bl	80005b0 <__aeabi_dmul>
 800a50e:	4632      	mov	r2, r6
 800a510:	463b      	mov	r3, r7
 800a512:	f7f5 fe97 	bl	8000244 <__adddf3>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4620      	mov	r0, r4
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7f5 fe8f 	bl	8000240 <__aeabi_dsub>
 800a522:	4642      	mov	r2, r8
 800a524:	464b      	mov	r3, r9
 800a526:	f7f5 fe8b 	bl	8000240 <__aeabi_dsub>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	2000      	movs	r0, #0
 800a530:	4939      	ldr	r1, [pc, #228]	; (800a618 <__ieee754_pow+0xa20>)
 800a532:	f7f5 fe85 	bl	8000240 <__aeabi_dsub>
 800a536:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a53a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a53e:	da29      	bge.n	800a594 <__ieee754_pow+0x99c>
 800a540:	4652      	mov	r2, sl
 800a542:	f000 f955 	bl	800a7f0 <scalbn>
 800a546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a54a:	f7ff bbfe 	b.w	8009d4a <__ieee754_pow+0x152>
 800a54e:	4b33      	ldr	r3, [pc, #204]	; (800a61c <__ieee754_pow+0xa24>)
 800a550:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a554:	429f      	cmp	r7, r3
 800a556:	f77f af13 	ble.w	800a380 <__ieee754_pow+0x788>
 800a55a:	4b31      	ldr	r3, [pc, #196]	; (800a620 <__ieee754_pow+0xa28>)
 800a55c:	440b      	add	r3, r1
 800a55e:	4303      	orrs	r3, r0
 800a560:	d009      	beq.n	800a576 <__ieee754_pow+0x97e>
 800a562:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a566:	2200      	movs	r2, #0
 800a568:	2300      	movs	r3, #0
 800a56a:	f7f6 fa93 	bl	8000a94 <__aeabi_dcmplt>
 800a56e:	3800      	subs	r0, #0
 800a570:	bf18      	it	ne
 800a572:	2001      	movne	r0, #1
 800a574:	e453      	b.n	8009e1e <__ieee754_pow+0x226>
 800a576:	4622      	mov	r2, r4
 800a578:	462b      	mov	r3, r5
 800a57a:	f7f5 fe61 	bl	8000240 <__aeabi_dsub>
 800a57e:	4642      	mov	r2, r8
 800a580:	464b      	mov	r3, r9
 800a582:	f7f6 fa9b 	bl	8000abc <__aeabi_dcmpge>
 800a586:	2800      	cmp	r0, #0
 800a588:	f43f aefa 	beq.w	800a380 <__ieee754_pow+0x788>
 800a58c:	e7e9      	b.n	800a562 <__ieee754_pow+0x96a>
 800a58e:	f04f 0a00 	mov.w	sl, #0
 800a592:	e720      	b.n	800a3d6 <__ieee754_pow+0x7de>
 800a594:	4621      	mov	r1, r4
 800a596:	e7d6      	b.n	800a546 <__ieee754_pow+0x94e>
 800a598:	f04f 0b00 	mov.w	fp, #0
 800a59c:	f8df c078 	ldr.w	ip, [pc, #120]	; 800a618 <__ieee754_pow+0xa20>
 800a5a0:	f7ff bbba 	b.w	8009d18 <__ieee754_pow+0x120>
 800a5a4:	f04f 0b00 	mov.w	fp, #0
 800a5a8:	f04f 0c00 	mov.w	ip, #0
 800a5ac:	f7ff bbb4 	b.w	8009d18 <__ieee754_pow+0x120>
 800a5b0:	4640      	mov	r0, r8
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	f7ff bb3d 	b.w	8009c32 <__ieee754_pow+0x3a>
 800a5b8:	9200      	str	r2, [sp, #0]
 800a5ba:	f7ff bb89 	b.w	8009cd0 <__ieee754_pow+0xd8>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f7ff bb73 	b.w	8009caa <__ieee754_pow+0xb2>
 800a5c4:	f3af 8000 	nop.w
 800a5c8:	652b82fe 	.word	0x652b82fe
 800a5cc:	3c971547 	.word	0x3c971547
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	3fe62e43 	.word	0x3fe62e43
 800a5d8:	fefa39ef 	.word	0xfefa39ef
 800a5dc:	3fe62e42 	.word	0x3fe62e42
 800a5e0:	0ca86c39 	.word	0x0ca86c39
 800a5e4:	be205c61 	.word	0xbe205c61
 800a5e8:	72bea4d0 	.word	0x72bea4d0
 800a5ec:	3e663769 	.word	0x3e663769
 800a5f0:	c5d26bf1 	.word	0xc5d26bf1
 800a5f4:	3ebbbd41 	.word	0x3ebbbd41
 800a5f8:	af25de2c 	.word	0xaf25de2c
 800a5fc:	3f11566a 	.word	0x3f11566a
 800a600:	16bebd93 	.word	0x16bebd93
 800a604:	3f66c16c 	.word	0x3f66c16c
 800a608:	5555553e 	.word	0x5555553e
 800a60c:	3fc55555 	.word	0x3fc55555
 800a610:	3fe00000 	.word	0x3fe00000
 800a614:	000fffff 	.word	0x000fffff
 800a618:	3ff00000 	.word	0x3ff00000
 800a61c:	4090cbff 	.word	0x4090cbff
 800a620:	3f6f3400 	.word	0x3f6f3400

0800a624 <__ieee754_sqrt>:
 800a624:	f8df c158 	ldr.w	ip, [pc, #344]	; 800a780 <__ieee754_sqrt+0x15c>
 800a628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a62c:	ea3c 0c01 	bics.w	ip, ip, r1
 800a630:	4606      	mov	r6, r0
 800a632:	460d      	mov	r5, r1
 800a634:	460c      	mov	r4, r1
 800a636:	460a      	mov	r2, r1
 800a638:	4607      	mov	r7, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	d10f      	bne.n	800a65e <__ieee754_sqrt+0x3a>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	f7f5 ffb5 	bl	80005b0 <__aeabi_dmul>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4630      	mov	r0, r6
 800a64c:	4629      	mov	r1, r5
 800a64e:	f7f5 fdf9 	bl	8000244 <__adddf3>
 800a652:	4606      	mov	r6, r0
 800a654:	460d      	mov	r5, r1
 800a656:	4630      	mov	r0, r6
 800a658:	4629      	mov	r1, r5
 800a65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65e:	2900      	cmp	r1, #0
 800a660:	dc0e      	bgt.n	800a680 <__ieee754_sqrt+0x5c>
 800a662:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800a666:	ea5c 0707 	orrs.w	r7, ip, r7
 800a66a:	d0f4      	beq.n	800a656 <__ieee754_sqrt+0x32>
 800a66c:	b141      	cbz	r1, 800a680 <__ieee754_sqrt+0x5c>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	f7f5 fde5 	bl	8000240 <__aeabi_dsub>
 800a676:	4602      	mov	r2, r0
 800a678:	460b      	mov	r3, r1
 800a67a:	f7f6 f8c3 	bl	8000804 <__aeabi_ddiv>
 800a67e:	e7e8      	b.n	800a652 <__ieee754_sqrt+0x2e>
 800a680:	1521      	asrs	r1, r4, #20
 800a682:	d075      	beq.n	800a770 <__ieee754_sqrt+0x14c>
 800a684:	07cc      	lsls	r4, r1, #31
 800a686:	f04f 0400 	mov.w	r4, #0
 800a68a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a68e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800a692:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a696:	bf5e      	ittt	pl
 800a698:	0fd9      	lsrpl	r1, r3, #31
 800a69a:	005b      	lslpl	r3, r3, #1
 800a69c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800a6a0:	0fd9      	lsrs	r1, r3, #31
 800a6a2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800a6a6:	2516      	movs	r5, #22
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ae:	107f      	asrs	r7, r7, #1
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	1846      	adds	r6, r0, r1
 800a6b4:	4296      	cmp	r6, r2
 800a6b6:	bfde      	ittt	le
 800a6b8:	1b92      	suble	r2, r2, r6
 800a6ba:	1870      	addle	r0, r6, r1
 800a6bc:	1864      	addle	r4, r4, r1
 800a6be:	0052      	lsls	r2, r2, #1
 800a6c0:	3d01      	subs	r5, #1
 800a6c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a6c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a6ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6ce:	d1f0      	bne.n	800a6b2 <__ieee754_sqrt+0x8e>
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f04f 0e20 	mov.w	lr, #32
 800a6d6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a6da:	4282      	cmp	r2, r0
 800a6dc:	eb06 0c05 	add.w	ip, r6, r5
 800a6e0:	dc02      	bgt.n	800a6e8 <__ieee754_sqrt+0xc4>
 800a6e2:	d113      	bne.n	800a70c <__ieee754_sqrt+0xe8>
 800a6e4:	459c      	cmp	ip, r3
 800a6e6:	d811      	bhi.n	800a70c <__ieee754_sqrt+0xe8>
 800a6e8:	f1bc 0f00 	cmp.w	ip, #0
 800a6ec:	eb0c 0506 	add.w	r5, ip, r6
 800a6f0:	da43      	bge.n	800a77a <__ieee754_sqrt+0x156>
 800a6f2:	2d00      	cmp	r5, #0
 800a6f4:	db41      	blt.n	800a77a <__ieee754_sqrt+0x156>
 800a6f6:	f100 0801 	add.w	r8, r0, #1
 800a6fa:	1a12      	subs	r2, r2, r0
 800a6fc:	4640      	mov	r0, r8
 800a6fe:	459c      	cmp	ip, r3
 800a700:	bf88      	it	hi
 800a702:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a706:	eba3 030c 	sub.w	r3, r3, ip
 800a70a:	4431      	add	r1, r6
 800a70c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a710:	f1be 0e01 	subs.w	lr, lr, #1
 800a714:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800a718:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a71c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a720:	d1db      	bne.n	800a6da <__ieee754_sqrt+0xb6>
 800a722:	4313      	orrs	r3, r2
 800a724:	d006      	beq.n	800a734 <__ieee754_sqrt+0x110>
 800a726:	1c48      	adds	r0, r1, #1
 800a728:	bf0b      	itete	eq
 800a72a:	4671      	moveq	r1, lr
 800a72c:	3101      	addne	r1, #1
 800a72e:	3401      	addeq	r4, #1
 800a730:	f021 0101 	bicne.w	r1, r1, #1
 800a734:	1063      	asrs	r3, r4, #1
 800a736:	0849      	lsrs	r1, r1, #1
 800a738:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a73c:	07e2      	lsls	r2, r4, #31
 800a73e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a742:	bf48      	it	mi
 800a744:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a748:	460e      	mov	r6, r1
 800a74a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a74e:	e782      	b.n	800a656 <__ieee754_sqrt+0x32>
 800a750:	0ada      	lsrs	r2, r3, #11
 800a752:	3815      	subs	r0, #21
 800a754:	055b      	lsls	r3, r3, #21
 800a756:	2a00      	cmp	r2, #0
 800a758:	d0fa      	beq.n	800a750 <__ieee754_sqrt+0x12c>
 800a75a:	02d5      	lsls	r5, r2, #11
 800a75c:	d50a      	bpl.n	800a774 <__ieee754_sqrt+0x150>
 800a75e:	f1c1 0420 	rsb	r4, r1, #32
 800a762:	fa23 f404 	lsr.w	r4, r3, r4
 800a766:	1e4d      	subs	r5, r1, #1
 800a768:	408b      	lsls	r3, r1
 800a76a:	4322      	orrs	r2, r4
 800a76c:	1b41      	subs	r1, r0, r5
 800a76e:	e789      	b.n	800a684 <__ieee754_sqrt+0x60>
 800a770:	4608      	mov	r0, r1
 800a772:	e7f0      	b.n	800a756 <__ieee754_sqrt+0x132>
 800a774:	0052      	lsls	r2, r2, #1
 800a776:	3101      	adds	r1, #1
 800a778:	e7ef      	b.n	800a75a <__ieee754_sqrt+0x136>
 800a77a:	4680      	mov	r8, r0
 800a77c:	e7bd      	b.n	800a6fa <__ieee754_sqrt+0xd6>
 800a77e:	bf00      	nop
 800a780:	7ff00000 	.word	0x7ff00000

0800a784 <with_errno>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	4604      	mov	r4, r0
 800a788:	460d      	mov	r5, r1
 800a78a:	4616      	mov	r6, r2
 800a78c:	f7fb fc2a 	bl	8005fe4 <__errno>
 800a790:	4629      	mov	r1, r5
 800a792:	6006      	str	r6, [r0, #0]
 800a794:	4620      	mov	r0, r4
 800a796:	bd70      	pop	{r4, r5, r6, pc}

0800a798 <xflow>:
 800a798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a79a:	4615      	mov	r5, r2
 800a79c:	461c      	mov	r4, r3
 800a79e:	b180      	cbz	r0, 800a7c2 <xflow+0x2a>
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7a6:	e9cd 0100 	strd	r0, r1, [sp]
 800a7aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	f7f5 fefd 	bl	80005b0 <__aeabi_dmul>
 800a7b6:	2222      	movs	r2, #34	; 0x22
 800a7b8:	b003      	add	sp, #12
 800a7ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7be:	f7ff bfe1 	b.w	800a784 <with_errno>
 800a7c2:	4610      	mov	r0, r2
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	e7ee      	b.n	800a7a6 <xflow+0xe>

0800a7c8 <__math_uflow>:
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a7ce:	f7ff bfe3 	b.w	800a798 <xflow>

0800a7d2 <__math_oflow>:
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a7d8:	f7ff bfde 	b.w	800a798 <xflow>

0800a7dc <fabs>:
 800a7dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a7e0:	4770      	bx	lr

0800a7e2 <finite>:
 800a7e2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 800a7e6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a7ea:	0fc0      	lsrs	r0, r0, #31
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <scalbn>:
 800a7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	460d      	mov	r5, r1
 800a7fa:	4617      	mov	r7, r2
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	b996      	cbnz	r6, 800a826 <scalbn+0x36>
 800a800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a804:	4303      	orrs	r3, r0
 800a806:	d039      	beq.n	800a87c <scalbn+0x8c>
 800a808:	4b33      	ldr	r3, [pc, #204]	; (800a8d8 <scalbn+0xe8>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	f7f5 fed0 	bl	80005b0 <__aeabi_dmul>
 800a810:	4b32      	ldr	r3, [pc, #200]	; (800a8dc <scalbn+0xec>)
 800a812:	4604      	mov	r4, r0
 800a814:	429f      	cmp	r7, r3
 800a816:	460d      	mov	r5, r1
 800a818:	da0f      	bge.n	800a83a <scalbn+0x4a>
 800a81a:	a32b      	add	r3, pc, #172	; (adr r3, 800a8c8 <scalbn+0xd8>)
 800a81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a820:	f7f5 fec6 	bl	80005b0 <__aeabi_dmul>
 800a824:	e006      	b.n	800a834 <scalbn+0x44>
 800a826:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a82a:	4296      	cmp	r6, r2
 800a82c:	d10a      	bne.n	800a844 <scalbn+0x54>
 800a82e:	4602      	mov	r2, r0
 800a830:	f7f5 fd08 	bl	8000244 <__adddf3>
 800a834:	4604      	mov	r4, r0
 800a836:	460d      	mov	r5, r1
 800a838:	e020      	b.n	800a87c <scalbn+0x8c>
 800a83a:	460b      	mov	r3, r1
 800a83c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a840:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a844:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a848:	19b9      	adds	r1, r7, r6
 800a84a:	4291      	cmp	r1, r2
 800a84c:	dd0e      	ble.n	800a86c <scalbn+0x7c>
 800a84e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a852:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a856:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a85a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a85e:	4820      	ldr	r0, [pc, #128]	; (800a8e0 <scalbn+0xf0>)
 800a860:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a864:	a31a      	add	r3, pc, #104	; (adr r3, 800a8d0 <scalbn+0xe0>)
 800a866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86a:	e7d9      	b.n	800a820 <scalbn+0x30>
 800a86c:	2900      	cmp	r1, #0
 800a86e:	dd08      	ble.n	800a882 <scalbn+0x92>
 800a870:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a874:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a878:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a882:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a886:	da12      	bge.n	800a8ae <scalbn+0xbe>
 800a888:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a88c:	429f      	cmp	r7, r3
 800a88e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a892:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800a896:	dcdc      	bgt.n	800a852 <scalbn+0x62>
 800a898:	a30b      	add	r3, pc, #44	; (adr r3, 800a8c8 <scalbn+0xd8>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800a8a2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800a8a6:	480f      	ldr	r0, [pc, #60]	; (800a8e4 <scalbn+0xf4>)
 800a8a8:	f041 011f 	orr.w	r1, r1, #31
 800a8ac:	e7b8      	b.n	800a820 <scalbn+0x30>
 800a8ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a8b2:	3136      	adds	r1, #54	; 0x36
 800a8b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a8b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a8bc:	4620      	mov	r0, r4
 800a8be:	4629      	mov	r1, r5
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4b09      	ldr	r3, [pc, #36]	; (800a8e8 <scalbn+0xf8>)
 800a8c4:	e7ac      	b.n	800a820 <scalbn+0x30>
 800a8c6:	bf00      	nop
 800a8c8:	c2f8f359 	.word	0xc2f8f359
 800a8cc:	01a56e1f 	.word	0x01a56e1f
 800a8d0:	8800759c 	.word	0x8800759c
 800a8d4:	7e37e43c 	.word	0x7e37e43c
 800a8d8:	43500000 	.word	0x43500000
 800a8dc:	ffff3cb0 	.word	0xffff3cb0
 800a8e0:	8800759c 	.word	0x8800759c
 800a8e4:	c2f8f359 	.word	0xc2f8f359
 800a8e8:	3c900000 	.word	0x3c900000

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr
